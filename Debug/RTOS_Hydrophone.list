
RTOS_Hydrophone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001096c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013280  08010c20  08010c20  00020c20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08023ea0  08023ea0  00033ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08023ea8  08023ea8  00033ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08023eac  08023eac  00033eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  08023eb0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0004ec40  2400007c  08023f2c  0004007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2404ecbc  08023f2c  0004ecbc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0004007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f9dc  00000000  00000000  000400aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000523a  00000000  00000000  0006fa86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e50  00000000  00000000  00074cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001c70  00000000  00000000  00076b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000541d  00000000  00000000  00078780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002643a  00000000  00000000  0007db9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00160a44  00000000  00000000  000a3fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000c5  00000000  00000000  00204a1b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008238  00000000  00000000  00204ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    000038ec  00000000  00000000  0020cd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400007c 	.word	0x2400007c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08010c04 	.word	0x08010c04

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000080 	.word	0x24000080
 80002ec:	08010c04 	.word	0x08010c04

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f001 f8c8 	bl	800178c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f88c 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 faaa 	bl	8000b58 <MX_GPIO_Init>
  MX_DMA_Init();
 8000604:	f000 fa80 	bl	8000b08 <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 8000608:	f000 fa76 	bl	8000af8 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 800060c:	f000 f902 	bl	8000814 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000610:	f000 fa26 	bl	8000a60 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000614:	f000 f978 	bl	8000908 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000618:	482b      	ldr	r0, [pc, #172]	; (80006c8 <main+0xd4>)
 800061a:	f009 f88b 	bl	8009734 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 800061e:	2100      	movs	r1, #0
 8000620:	4829      	ldr	r0, [pc, #164]	; (80006c8 <main+0xd4>)
 8000622:	f009 f9d1 	bl	80099c8 <HAL_TIM_OC_Start>

  float32_t maxValue;

  // Initialize RFFT
  arm_rfft_fast_init_f32(&fft_handler, adc_buff_size);
 8000626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062a:	4828      	ldr	r0, [pc, #160]	; (80006cc <main+0xd8>)
 800062c:	f00f fa6a 	bl	800fb04 <arm_rfft_fast_init_f32>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000630:	f00b fea6 	bl	800c380 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of AudioCapSem01 */
  AudioCapSem01Handle = osSemaphoreNew(1, 1, &AudioCapSem01_attributes);
 8000634:	4a26      	ldr	r2, [pc, #152]	; (80006d0 <main+0xdc>)
 8000636:	2101      	movs	r1, #1
 8000638:	2001      	movs	r0, #1
 800063a:	f00b ff98 	bl	800c56e <osSemaphoreNew>
 800063e:	4603      	mov	r3, r0
 8000640:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <main+0xe0>)
 8000642:	6013      	str	r3, [r2, #0]

  /* creation of FFTSem02 */
  FFTSem02Handle = osSemaphoreNew(1, 1, &FFTSem02_attributes);
 8000644:	4a24      	ldr	r2, [pc, #144]	; (80006d8 <main+0xe4>)
 8000646:	2101      	movs	r1, #1
 8000648:	2001      	movs	r0, #1
 800064a:	f00b ff90 	bl	800c56e <osSemaphoreNew>
 800064e:	4603      	mov	r3, r0
 8000650:	4a22      	ldr	r2, [pc, #136]	; (80006dc <main+0xe8>)
 8000652:	6013      	str	r3, [r2, #0]

  /* creation of SendDataSem03 */
  SendDataSem03Handle = osSemaphoreNew(1, 1, &SendDataSem03_attributes);
 8000654:	4a22      	ldr	r2, [pc, #136]	; (80006e0 <main+0xec>)
 8000656:	2101      	movs	r1, #1
 8000658:	2001      	movs	r0, #1
 800065a:	f00b ff88 	bl	800c56e <osSemaphoreNew>
 800065e:	4603      	mov	r3, r0
 8000660:	4a20      	ldr	r2, [pc, #128]	; (80006e4 <main+0xf0>)
 8000662:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  // Initialize Sem values other than AudioCap to 0 before starting code
  osSemaphoreAcquire(FFTSem02Handle, osWaitForever);
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <main+0xe8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f04f 31ff 	mov.w	r1, #4294967295
 800066c:	4618      	mov	r0, r3
 800066e:	f00c f807 	bl	800c680 <osSemaphoreAcquire>
  osSemaphoreAcquire(SendDataSem03Handle, osWaitForever);
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <main+0xf0>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f04f 31ff 	mov.w	r1, #4294967295
 800067a:	4618      	mov	r0, r3
 800067c:	f00c f800 	bl	800c680 <osSemaphoreAcquire>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000680:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <main+0xf4>)
 8000682:	2100      	movs	r1, #0
 8000684:	4819      	ldr	r0, [pc, #100]	; (80006ec <main+0xf8>)
 8000686:	f00b fec5 	bl	800c414 <osThreadNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <main+0xfc>)
 800068e:	6013      	str	r3, [r2, #0]

  /* creation of AudioCapTask */
  AudioCapTaskHandle = osThreadNew(StartAudioCapTask, NULL, &AudioCapTask_attributes);
 8000690:	4a18      	ldr	r2, [pc, #96]	; (80006f4 <main+0x100>)
 8000692:	2100      	movs	r1, #0
 8000694:	4818      	ldr	r0, [pc, #96]	; (80006f8 <main+0x104>)
 8000696:	f00b febd 	bl	800c414 <osThreadNew>
 800069a:	4603      	mov	r3, r0
 800069c:	4a17      	ldr	r2, [pc, #92]	; (80006fc <main+0x108>)
 800069e:	6013      	str	r3, [r2, #0]

  /* creation of FFTTask */
  FFTTaskHandle = osThreadNew(StartFFTTask, NULL, &FFTTask_attributes);
 80006a0:	4a17      	ldr	r2, [pc, #92]	; (8000700 <main+0x10c>)
 80006a2:	2100      	movs	r1, #0
 80006a4:	4817      	ldr	r0, [pc, #92]	; (8000704 <main+0x110>)
 80006a6:	f00b feb5 	bl	800c414 <osThreadNew>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a16      	ldr	r2, [pc, #88]	; (8000708 <main+0x114>)
 80006ae:	6013      	str	r3, [r2, #0]

  /* creation of SendDataTask */
  SendDataTaskHandle = osThreadNew(StartSendDataTask, NULL, &SendDataTask_attributes);
 80006b0:	4a16      	ldr	r2, [pc, #88]	; (800070c <main+0x118>)
 80006b2:	2100      	movs	r1, #0
 80006b4:	4816      	ldr	r0, [pc, #88]	; (8000710 <main+0x11c>)
 80006b6:	f00b fead 	bl	800c414 <osThreadNew>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a15      	ldr	r2, [pc, #84]	; (8000714 <main+0x120>)
 80006be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006c0:	f00b fe82 	bl	800c3c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <main+0xd0>
 80006c6:	bf00      	nop
 80006c8:	24000174 	.word	0x24000174
 80006cc:	2404a304 	.word	0x2404a304
 80006d0:	08010d28 	.word	0x08010d28
 80006d4:	240002dc 	.word	0x240002dc
 80006d8:	08010d38 	.word	0x08010d38
 80006dc:	240002e0 	.word	0x240002e0
 80006e0:	08010d48 	.word	0x08010d48
 80006e4:	240002e4 	.word	0x240002e4
 80006e8:	08010c98 	.word	0x08010c98
 80006ec:	08000f7d 	.word	0x08000f7d
 80006f0:	240002cc 	.word	0x240002cc
 80006f4:	08010cbc 	.word	0x08010cbc
 80006f8:	08000f91 	.word	0x08000f91
 80006fc:	240002d0 	.word	0x240002d0
 8000700:	08010ce0 	.word	0x08010ce0
 8000704:	0800108d 	.word	0x0800108d
 8000708:	240002d4 	.word	0x240002d4
 800070c:	08010d04 	.word	0x08010d04
 8000710:	08001101 	.word	0x08001101
 8000714:	240002d8 	.word	0x240002d8

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b09c      	sub	sp, #112	; 0x70
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000722:	224c      	movs	r2, #76	; 0x4c
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f010 f9b2 	bl	8010a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2220      	movs	r2, #32
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f010 f9ac 	bl	8010a90 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000738:	4b34      	ldr	r3, [pc, #208]	; (800080c <SystemClock_Config+0xf4>)
 800073a:	f04f 32ff 	mov.w	r2, #4294967295
 800073e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000742:	2004      	movs	r0, #4
 8000744:	f005 fb3a 	bl	8005dbc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000748:	2300      	movs	r3, #0
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	4b30      	ldr	r3, [pc, #192]	; (8000810 <SystemClock_Config+0xf8>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a2f      	ldr	r2, [pc, #188]	; (8000810 <SystemClock_Config+0xf8>)
 8000752:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <SystemClock_Config+0xf8>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000764:	bf00      	nop
 8000766:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <SystemClock_Config+0xf8>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800076e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000772:	d1f8      	bne.n	8000766 <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000774:	4b25      	ldr	r3, [pc, #148]	; (800080c <SystemClock_Config+0xf4>)
 8000776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000778:	f023 0303 	bic.w	r3, r3, #3
 800077c:	4a23      	ldr	r2, [pc, #140]	; (800080c <SystemClock_Config+0xf4>)
 800077e:	f043 0302 	orr.w	r3, r3, #2
 8000782:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000784:	2321      	movs	r3, #33	; 0x21
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000788:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800078e:	2301      	movs	r3, #1
 8000790:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000792:	2302      	movs	r3, #2
 8000794:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000796:	2302      	movs	r3, #2
 8000798:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800079a:	2301      	movs	r3, #1
 800079c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800079e:	2318      	movs	r3, #24
 80007a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a6:	2304      	movs	r3, #4
 80007a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007ae:	230c      	movs	r3, #12
 80007b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007be:	4618      	mov	r0, r3
 80007c0:	f005 fb56 	bl	8005e70 <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007ca:	f000 fcda 	bl	8001182 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	233f      	movs	r3, #63	; 0x3f
 80007d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2303      	movs	r3, #3
 80007d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007de:	2340      	movs	r3, #64	; 0x40
 80007e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007e2:	2340      	movs	r3, #64	; 0x40
 80007e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007ec:	2340      	movs	r3, #64	; 0x40
 80007ee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2102      	movs	r1, #2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f005 ff6d 	bl	80066d4 <HAL_RCC_ClockConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000800:	f000 fcbf 	bl	8001182 <Error_Handler>
  }
}
 8000804:	bf00      	nop
 8000806:	3770      	adds	r7, #112	; 0x70
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	58024400 	.word	0x58024400
 8000810:	58024800 	.word	0x58024800

08000814 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000826:	463b      	mov	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
 8000834:	615a      	str	r2, [r3, #20]
 8000836:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000838:	4b30      	ldr	r3, [pc, #192]	; (80008fc <MX_ADC1_Init+0xe8>)
 800083a:	4a31      	ldr	r2, [pc, #196]	; (8000900 <MX_ADC1_Init+0xec>)
 800083c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800083e:	4b2f      	ldr	r3, [pc, #188]	; (80008fc <MX_ADC1_Init+0xe8>)
 8000840:	2200      	movs	r2, #0
 8000842:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000844:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <MX_ADC1_Init+0xe8>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800084a:	4b2c      	ldr	r3, [pc, #176]	; (80008fc <MX_ADC1_Init+0xe8>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000850:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <MX_ADC1_Init+0xe8>)
 8000852:	2204      	movs	r2, #4
 8000854:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000856:	4b29      	ldr	r3, [pc, #164]	; (80008fc <MX_ADC1_Init+0xe8>)
 8000858:	2200      	movs	r2, #0
 800085a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800085c:	4b27      	ldr	r3, [pc, #156]	; (80008fc <MX_ADC1_Init+0xe8>)
 800085e:	2200      	movs	r2, #0
 8000860:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000862:	4b26      	ldr	r3, [pc, #152]	; (80008fc <MX_ADC1_Init+0xe8>)
 8000864:	2201      	movs	r2, #1
 8000866:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000868:	4b24      	ldr	r3, [pc, #144]	; (80008fc <MX_ADC1_Init+0xe8>)
 800086a:	2200      	movs	r2, #0
 800086c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800086e:	4b23      	ldr	r3, [pc, #140]	; (80008fc <MX_ADC1_Init+0xe8>)
 8000870:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000876:	4b21      	ldr	r3, [pc, #132]	; (80008fc <MX_ADC1_Init+0xe8>)
 8000878:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800087c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 800087e:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <MX_ADC1_Init+0xe8>)
 8000880:	2201      	movs	r2, #1
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000884:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <MX_ADC1_Init+0xe8>)
 8000886:	2200      	movs	r2, #0
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_ADC1_Init+0xe8>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_ADC1_Init+0xe8>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000898:	4818      	ldr	r0, [pc, #96]	; (80008fc <MX_ADC1_Init+0xe8>)
 800089a:	f001 fa0b 	bl	8001cb4 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80008a4:	f000 fc6d 	bl	8001182 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	4812      	ldr	r0, [pc, #72]	; (80008fc <MX_ADC1_Init+0xe8>)
 80008b4:	f002 fa88 	bl	8002dc8 <HAL_ADCEx_MultiModeConfigChannel>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80008be:	f000 fc60 	bl	8001182 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_ADC1_Init+0xf0>)
 80008c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c6:	2306      	movs	r3, #6
 80008c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ce:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008d2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008d4:	2304      	movs	r3, #4
 80008d6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e0:	463b      	mov	r3, r7
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_ADC1_Init+0xe8>)
 80008e6:	f001 fc69 	bl	80021bc <HAL_ADC_ConfigChannel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80008f0:	f000 fc47 	bl	8001182 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	; 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	24000098 	.word	0x24000098
 8000900:	40022000 	.word	0x40022000
 8000904:	3ef08000 	.word	0x3ef08000

08000908 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b09c      	sub	sp, #112	; 0x70
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000928:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
 8000938:	615a      	str	r2, [r3, #20]
 800093a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2234      	movs	r2, #52	; 0x34
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f010 f8a4 	bl	8010a90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000948:	4b43      	ldr	r3, [pc, #268]	; (8000a58 <MX_TIM1_Init+0x150>)
 800094a:	4a44      	ldr	r2, [pc, #272]	; (8000a5c <MX_TIM1_Init+0x154>)
 800094c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800094e:	4b42      	ldr	r3, [pc, #264]	; (8000a58 <MX_TIM1_Init+0x150>)
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b40      	ldr	r3, [pc, #256]	; (8000a58 <MX_TIM1_Init+0x150>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6000-1;
 800095a:	4b3f      	ldr	r3, [pc, #252]	; (8000a58 <MX_TIM1_Init+0x150>)
 800095c:	f241 726f 	movw	r2, #5999	; 0x176f
 8000960:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000962:	4b3d      	ldr	r3, [pc, #244]	; (8000a58 <MX_TIM1_Init+0x150>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000968:	4b3b      	ldr	r3, [pc, #236]	; (8000a58 <MX_TIM1_Init+0x150>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096e:	4b3a      	ldr	r3, [pc, #232]	; (8000a58 <MX_TIM1_Init+0x150>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000974:	4838      	ldr	r0, [pc, #224]	; (8000a58 <MX_TIM1_Init+0x150>)
 8000976:	f008 fe85 	bl	8009684 <HAL_TIM_Base_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000980:	f000 fbff 	bl	8001182 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000988:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800098a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800098e:	4619      	mov	r1, r3
 8000990:	4831      	ldr	r0, [pc, #196]	; (8000a58 <MX_TIM1_Init+0x150>)
 8000992:	f009 fac1 	bl	8009f18 <HAL_TIM_ConfigClockSource>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800099c:	f000 fbf1 	bl	8001182 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80009a0:	482d      	ldr	r0, [pc, #180]	; (8000a58 <MX_TIM1_Init+0x150>)
 80009a2:	f008 ffaf 	bl	8009904 <HAL_TIM_OC_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80009ac:	f000 fbe9 	bl	8001182 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009b0:	2320      	movs	r3, #32
 80009b2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009c0:	4619      	mov	r1, r3
 80009c2:	4825      	ldr	r0, [pc, #148]	; (8000a58 <MX_TIM1_Init+0x150>)
 80009c4:	f009 fffc 	bl	800a9c0 <HAL_TIMEx_MasterConfigSynchronization>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80009ce:	f000 fbd8 	bl	8001182 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80009d2:	2330      	movs	r3, #48	; 0x30
 80009d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009da:	2300      	movs	r3, #0
 80009dc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009de:	2300      	movs	r3, #0
 80009e0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009e6:	2300      	movs	r3, #0
 80009e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009ea:	2300      	movs	r3, #0
 80009ec:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009f2:	2200      	movs	r2, #0
 80009f4:	4619      	mov	r1, r3
 80009f6:	4818      	ldr	r0, [pc, #96]	; (8000a58 <MX_TIM1_Init+0x150>)
 80009f8:	f009 fa14 	bl	8009e24 <HAL_TIM_OC_ConfigChannel>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a02:	f000 fbbe 	bl	8001182 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4807      	ldr	r0, [pc, #28]	; (8000a58 <MX_TIM1_Init+0x150>)
 8000a3c:	f00a f84e 	bl	800aadc <HAL_TIMEx_ConfigBreakDeadTime>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000a46:	f000 fb9c 	bl	8001182 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a4a:	4803      	ldr	r0, [pc, #12]	; (8000a58 <MX_TIM1_Init+0x150>)
 8000a4c:	f000 fc84 	bl	8001358 <HAL_TIM_MspPostInit>

}
 8000a50:	bf00      	nop
 8000a52:	3770      	adds	r7, #112	; 0x70
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	24000174 	.word	0x24000174
 8000a5c:	40010000 	.word	0x40010000

08000a60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a66:	4a23      	ldr	r2, [pc, #140]	; (8000af4 <MX_USART3_UART_Init+0x94>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a6a:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aa8:	4811      	ldr	r0, [pc, #68]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000aaa:	f00a f8d5 	bl	800ac58 <HAL_UART_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ab4:	f000 fb65 	bl	8001182 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	480d      	ldr	r0, [pc, #52]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000abc:	f00b fb52 	bl	800c164 <HAL_UARTEx_SetTxFifoThreshold>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ac6:	f000 fb5c 	bl	8001182 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aca:	2100      	movs	r1, #0
 8000acc:	4808      	ldr	r0, [pc, #32]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000ace:	f00b fb87 	bl	800c1e0 <HAL_UARTEx_SetRxFifoThreshold>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ad8:	f000 fb53 	bl	8001182 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000adc:	4804      	ldr	r0, [pc, #16]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000ade:	f00b fb08 	bl	800c0f2 <HAL_UARTEx_DisableFifoMode>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ae8:	f000 fb4b 	bl	8001182 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	240001c0 	.word	0x240001c0
 8000af4:	40004800 	.word	0x40004800

08000af8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_DMA_Init+0x4c>)
 8000b10:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b14:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <MX_DMA_Init+0x4c>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <MX_DMA_Init+0x4c>)
 8000b20:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2105      	movs	r1, #5
 8000b30:	200b      	movs	r0, #11
 8000b32:	f002 fa9d 	bl	8003070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b36:	200b      	movs	r0, #11
 8000b38:	f002 fab4 	bl	80030a4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2105      	movs	r1, #5
 8000b40:	200c      	movs	r0, #12
 8000b42:	f002 fa95 	bl	8003070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b46:	200c      	movs	r0, #12
 8000b48:	f002 faac 	bl	80030a4 <HAL_NVIC_EnableIRQ>

}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	58024400 	.word	0x58024400

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08e      	sub	sp, #56	; 0x38
 8000b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	4b80      	ldr	r3, [pc, #512]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000b70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b74:	4a7e      	ldr	r2, [pc, #504]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000b76:	f043 0304 	orr.w	r3, r3, #4
 8000b7a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b7e:	4b7c      	ldr	r3, [pc, #496]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000b80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	623b      	str	r3, [r7, #32]
 8000b8a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b8c:	4b78      	ldr	r3, [pc, #480]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000b8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b92:	4a77      	ldr	r2, [pc, #476]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000b94:	f043 0320 	orr.w	r3, r3, #32
 8000b98:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b9c:	4b74      	ldr	r3, [pc, #464]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000b9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba2:	f003 0320 	and.w	r3, r3, #32
 8000ba6:	61fb      	str	r3, [r7, #28]
 8000ba8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000baa:	4b71      	ldr	r3, [pc, #452]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000bac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bb0:	4a6f      	ldr	r2, [pc, #444]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bba:	4b6d      	ldr	r3, [pc, #436]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000bbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc4:	61bb      	str	r3, [r7, #24]
 8000bc6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b69      	ldr	r3, [pc, #420]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000bca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bce:	4a68      	ldr	r2, [pc, #416]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bd8:	4b65      	ldr	r3, [pc, #404]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000bda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	4b62      	ldr	r3, [pc, #392]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000be8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bec:	4a60      	ldr	r2, [pc, #384]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000bee:	f043 0302 	orr.w	r3, r3, #2
 8000bf2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bf6:	4b5e      	ldr	r3, [pc, #376]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000bf8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c04:	4b5a      	ldr	r3, [pc, #360]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000c06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c0a:	4a59      	ldr	r2, [pc, #356]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000c0c:	f043 0310 	orr.w	r3, r3, #16
 8000c10:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c14:	4b56      	ldr	r3, [pc, #344]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000c16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c1a:	f003 0310 	and.w	r3, r3, #16
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c22:	4b53      	ldr	r3, [pc, #332]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000c24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c28:	4a51      	ldr	r2, [pc, #324]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000c2a:	f043 0308 	orr.w	r3, r3, #8
 8000c2e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c32:	4b4f      	ldr	r3, [pc, #316]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000c34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c38:	f003 0308 	and.w	r3, r3, #8
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c40:	4b4b      	ldr	r3, [pc, #300]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000c42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c46:	4a4a      	ldr	r2, [pc, #296]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c4c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c50:	4b47      	ldr	r3, [pc, #284]	; (8000d70 <MX_GPIO_Init+0x218>)
 8000c52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c64:	4843      	ldr	r0, [pc, #268]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000c66:	f005 f875 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c70:	4841      	ldr	r0, [pc, #260]	; (8000d78 <MX_GPIO_Init+0x220>)
 8000c72:	f005 f86f 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2102      	movs	r1, #2
 8000c7a:	4840      	ldr	r0, [pc, #256]	; (8000d7c <MX_GPIO_Init+0x224>)
 8000c7c:	f005 f86a 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	4619      	mov	r1, r3
 8000c94:	483a      	ldr	r0, [pc, #232]	; (8000d80 <MX_GPIO_Init+0x228>)
 8000c96:	f004 fead 	bl	80059f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4830      	ldr	r0, [pc, #192]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000cb4:	f004 fe9e 	bl	80059f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000cb8:	f244 0301 	movw	r3, #16385	; 0x4001
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4829      	ldr	r0, [pc, #164]	; (8000d78 <MX_GPIO_Init+0x220>)
 8000cd2:	f004 fe8f 	bl	80059f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4826      	ldr	r0, [pc, #152]	; (8000d84 <MX_GPIO_Init+0x22c>)
 8000cec:	f004 fe82 	bl	80059f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	4820      	ldr	r0, [pc, #128]	; (8000d88 <MX_GPIO_Init+0x230>)
 8000d06:	f004 fe75 	bl	80059f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d1c:	230a      	movs	r3, #10
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	4619      	mov	r1, r3
 8000d26:	4818      	ldr	r0, [pc, #96]	; (8000d88 <MX_GPIO_Init+0x230>)
 8000d28:	f004 fe64 	bl	80059f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000d2c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d42:	4619      	mov	r1, r3
 8000d44:	4810      	ldr	r0, [pc, #64]	; (8000d88 <MX_GPIO_Init+0x230>)
 8000d46:	f004 fe55 	bl	80059f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4806      	ldr	r0, [pc, #24]	; (8000d7c <MX_GPIO_Init+0x224>)
 8000d62:	f004 fe47 	bl	80059f4 <HAL_GPIO_Init>

}
 8000d66:	bf00      	nop
 8000d68:	3738      	adds	r7, #56	; 0x38
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	58024400 	.word	0x58024400
 8000d74:	58021400 	.word	0x58021400
 8000d78:	58020400 	.word	0x58020400
 8000d7c:	58021000 	.word	0x58021000
 8000d80:	58020800 	.word	0x58020800
 8000d84:	58021800 	.word	0x58021800
 8000d88:	58020000 	.word	0x58020000

08000d8c <FrequencyDetected>:
 * @brief Function detects frequencies between (0 - 8kHz) and returns boolean
 * @param
 * @retval boolean true or false
 */
bool FrequencyDetected(float32_t data[adc_buff_size])
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	// Process the data through the RFFT module. Will output elements that are Real and Imaginary
	// in fft_bufer as a single array same size as data[].
	//arm_rfft_fast_f32(&fft_handler, (float32_t *) data, fft_buffer, ifftFlag);
	arm_rfft_fast_f32(&fft_handler, adc_buffer_float, fft_buffer, ifftFlag);
 8000d94:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <FrequencyDetected+0x100>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	4a3d      	ldr	r2, [pc, #244]	; (8000e90 <FrequencyDetected+0x104>)
 8000d9c:	493d      	ldr	r1, [pc, #244]	; (8000e94 <FrequencyDetected+0x108>)
 8000d9e:	483e      	ldr	r0, [pc, #248]	; (8000e98 <FrequencyDetected+0x10c>)
 8000da0:	f00e ff96 	bl	800fcd0 <arm_rfft_fast_f32>

	// Reset bin value and offset
	bin_point = 0;
 8000da4:	4b3d      	ldr	r3, [pc, #244]	; (8000e9c <FrequencyDetected+0x110>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]

	// Calculate magnitude for each bin using real and Imaginary numbers from fft_buffer output
	 for (int i=0; i< adc_buff_size; i=i+2) {
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	e02b      	b.n	8000e08 <FrequencyDetected+0x7c>

		bin[bin_point] =((Magnitude(fft_buffer[i], fft_buffer[i+1])))-offset;
 8000db0:	4a37      	ldr	r2, [pc, #220]	; (8000e90 <FrequencyDetected+0x104>)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	edd3 7a00 	vldr	s15, [r3]
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	4a33      	ldr	r2, [pc, #204]	; (8000e90 <FrequencyDetected+0x104>)
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	4413      	add	r3, r2
 8000dc6:	ed93 7a00 	vldr	s14, [r3]
 8000dca:	eef0 0a47 	vmov.f32	s1, s14
 8000dce:	eeb0 0a67 	vmov.f32	s0, s15
 8000dd2:	f000 f86f 	bl	8000eb4 <Magnitude>
 8000dd6:	eeb0 7a40 	vmov.f32	s14, s0
 8000dda:	4b31      	ldr	r3, [pc, #196]	; (8000ea0 <FrequencyDetected+0x114>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	ee07 3a90 	vmov	s15, r3
 8000de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de6:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <FrequencyDetected+0x110>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dee:	4a2d      	ldr	r2, [pc, #180]	; (8000ea4 <FrequencyDetected+0x118>)
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	edc3 7a00 	vstr	s15, [r3]
		{
			bin[bin_point]=0;
		}
		*/

		bin_point++;
 8000df8:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <FrequencyDetected+0x110>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	4a27      	ldr	r2, [pc, #156]	; (8000e9c <FrequencyDetected+0x110>)
 8000e00:	6013      	str	r3, [r2, #0]
	 for (int i=0; i< adc_buff_size; i=i+2) {
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3302      	adds	r3, #2
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e0e:	dbcf      	blt.n	8000db0 <FrequencyDetected+0x24>

	 }
	// Negate DC value
	bin[0] = 0;
 8000e10:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <FrequencyDetected+0x118>)
 8000e12:	f04f 0200 	mov.w	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]

	// Check highest magnitude in bins
	arm_max_f32(bin, FFT_SIZE, &maxValue, &maxIndex);
 8000e18:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <FrequencyDetected+0x11c>)
 8000e1a:	4a24      	ldr	r2, [pc, #144]	; (8000eac <FrequencyDetected+0x120>)
 8000e1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e20:	4820      	ldr	r0, [pc, #128]	; (8000ea4 <FrequencyDetected+0x118>)
 8000e22:	f00e fd3b 	bl	800f89c <arm_max_f32>

	// Correct index
	maxIndex += 1;
 8000e26:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <FrequencyDetected+0x11c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	4a1e      	ldr	r2, [pc, #120]	; (8000ea8 <FrequencyDetected+0x11c>)
 8000e2e:	6013      	str	r3, [r2, #0]

	bool threshold_crossed = false;
 8000e30:	2300      	movs	r3, #0
 8000e32:	74fb      	strb	r3, [r7, #19]

	// Going through bin array, checking if a magnitude crosses threshold of 150
	for(int j=1; j < (adc_buff_size/2); j++){
 8000e34:	2301      	movs	r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	e012      	b.n	8000e60 <FrequencyDetected+0xd4>

		if(bin[j] >= 40)
 8000e3a:	4a1a      	ldr	r2, [pc, #104]	; (8000ea4 <FrequencyDetected+0x118>)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	edd3 7a00 	vldr	s15, [r3]
 8000e46:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000eb0 <FrequencyDetected+0x124>
 8000e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e52:	db02      	blt.n	8000e5a <FrequencyDetected+0xce>
		{
			threshold_crossed = true;
 8000e54:	2301      	movs	r3, #1
 8000e56:	74fb      	strb	r3, [r7, #19]
			break;
 8000e58:	e006      	b.n	8000e68 <FrequencyDetected+0xdc>
	for(int j=1; j < (adc_buff_size/2); j++){
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e66:	dbe8      	blt.n	8000e3a <FrequencyDetected+0xae>
		}
	}

	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
	if(threshold_crossed == true)
 8000e68:	7cfb      	ldrb	r3, [r7, #19]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <FrequencyDetected+0xe6>
	{
		   return true;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e007      	b.n	8000e82 <FrequencyDetected+0xf6>
	}
	// if highest magnitude is at desired bin (wanted frequency) return true
	else if(threshold_crossed == false)
 8000e72:	7cfb      	ldrb	r3, [r7, #19]
 8000e74:	f083 0301 	eor.w	r3, r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <FrequencyDetected+0xf6>
		{
			return false;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e7ff      	b.n	8000e82 <FrequencyDetected+0xf6>
		}
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2404a2f8 	.word	0x2404a2f8
 8000e90:	240442ec 	.word	0x240442ec
 8000e94:	240042e8 	.word	0x240042e8
 8000e98:	2404a304 	.word	0x2404a304
 8000e9c:	2404a2ec 	.word	0x2404a2ec
 8000ea0:	24000000 	.word	0x24000000
 8000ea4:	240482ec 	.word	0x240482ec
 8000ea8:	2404a2f4 	.word	0x2404a2f4
 8000eac:	2404a2f0 	.word	0x2404a2f0
 8000eb0:	42200000 	.word	0x42200000

08000eb4 <Magnitude>:
 * @brief Returns magnitude of FFT buffer outputs
 * @param Real & Complex elements of FFT output
 * @retval Magnitude at specific frequency
 */
float32_t Magnitude(float32_t real, float32_t compl)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ebe:	edc7 0a00 	vstr	s1, [r7]

	float32_t sqrt_input = (real*real + compl*compl);
 8000ec2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ec6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000eca:	edd7 7a00 	vldr	s15, [r7]
 8000ece:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed6:	edc7 7a07 	vstr	s15, [r7, #28]
	float32_t sqrt_output = 0;
 8000eda:	f04f 0300 	mov.w	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
	float32_t magnitude = 0;
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
	float32_t log_output = 0;
 8000ee6:	f04f 0300 	mov.w	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	f107 0308 	add.w	r3, r7, #8
 8000ef4:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000ef6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000efa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f02:	db09      	blt.n	8000f18 <Magnitude+0x64>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8000f04:	ed97 0a04 	vldr	s0, [r7, #16]
 8000f08:	f00f fe30 	bl	8010b6c <sqrtf>
 8000f0c:	eef0 7a40 	vmov.f32	s15, s0
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8000f16:	e004      	b.n	8000f22 <Magnitude+0x6e>
    }
    else
    {
      *pOut = 0.0f;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000f20:	bf00      	nop

	arm_sqrt_f32(sqrt_input, &sqrt_output);
	log_output = logf(sqrt_output);
 8000f22:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f26:	eeb0 0a67 	vmov.f32	s0, s15
 8000f2a:	f00f fdb9 	bl	8010aa0 <logf>
 8000f2e:	ed87 0a05 	vstr	s0, [r7, #20]
	magnitude = 20* (log_output);
 8000f32:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f36:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000f3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f3e:	edc7 7a06 	vstr	s15, [r7, #24]
	return magnitude;
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	ee07 3a90 	vmov	s15, r3
}
 8000f48:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4c:	3720      	adds	r7, #32
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_ADC_ConvCpltCallback>:
 * @brief This function executes when adc buffer is full setting flag true
 * @param
 * @retval
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000f5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f60:	4804      	ldr	r0, [pc, #16]	; (8000f74 <HAL_ADC_ConvCpltCallback+0x20>)
 8000f62:	f004 ff10 	bl	8005d86 <HAL_GPIO_TogglePin>
	flag_value = true;			// Set buffer conversion complete flag
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x24>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, adc_buff_size);
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	58020800 	.word	0x58020800
 8000f78:	240442e9 	.word	0x240442e9

08000f7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	// Toggling LD3 (red) to see if it ever enters this default state
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
    osDelay(500); /* Insert delay of 50ms */
 8000f84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f88:	f00b fad6 	bl	800c538 <osDelay>
 8000f8c:	e7fa      	b.n	8000f84 <StartDefaultTask+0x8>
	...

08000f90 <StartAudioCapTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAudioCapTask */
void StartAudioCapTask(void *argument)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAudioCapTask */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(AudioCapSem01Handle, osWaitForever);
 8000f98:	4b32      	ldr	r3, [pc, #200]	; (8001064 <StartAudioCapTask+0xd4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f00b fb6d 	bl	800c680 <osSemaphoreAcquire>
	  /* Test Pin */
	  // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	  // osDelay(500);

	  // Start ADC
	  if (recording_mode)
 8000fa6:	4b30      	ldr	r3, [pc, #192]	; (8001068 <StartAudioCapTask+0xd8>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d006      	beq.n	8000fbc <StartAudioCapTask+0x2c>
		  // ADC captures data for sending data
		  HAL_ADC_Start_DMA(&hadc1, send_buffer, send_buff_size);
 8000fae:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000fb2:	492e      	ldr	r1, [pc, #184]	; (800106c <StartAudioCapTask+0xdc>)
 8000fb4:	482e      	ldr	r0, [pc, #184]	; (8001070 <StartAudioCapTask+0xe0>)
 8000fb6:	f000 ffd7 	bl	8001f68 <HAL_ADC_Start_DMA>
 8000fba:	e005      	b.n	8000fc8 <StartAudioCapTask+0x38>
	  else
		  // ADC captures data for FFT
		  HAL_ADC_Start_DMA(&hadc1, adc_buffer, adc_buff_size);
 8000fbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fc0:	492c      	ldr	r1, [pc, #176]	; (8001074 <StartAudioCapTask+0xe4>)
 8000fc2:	482b      	ldr	r0, [pc, #172]	; (8001070 <StartAudioCapTask+0xe0>)
 8000fc4:	f000 ffd0 	bl	8001f68 <HAL_ADC_Start_DMA>

	  // Wait for adc_buffer to fill
	  while(flag_value != true);
 8000fc8:	bf00      	nop
 8000fca:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <StartAudioCapTask+0xe8>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	f083 0301 	eor.w	r3, r3, #1
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1f8      	bne.n	8000fca <StartAudioCapTask+0x3a>
	  flag_value = false;
 8000fd8:	4b27      	ldr	r3, [pc, #156]	; (8001078 <StartAudioCapTask+0xe8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	701a      	strb	r2, [r3, #0]

	  // Stop ADC
	  HAL_ADC_Stop_DMA(&hadc1);
 8000fde:	4824      	ldr	r0, [pc, #144]	; (8001070 <StartAudioCapTask+0xe0>)
 8000fe0:	f001 f876 	bl	80020d0 <HAL_ADC_Stop_DMA>

	  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);

	  if(recording_mode)
 8000fe4:	4b20      	ldr	r3, [pc, #128]	; (8001068 <StartAudioCapTask+0xd8>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d01d      	beq.n	8001028 <StartAudioCapTask+0x98>
	  {
		  // Call FFT function to detect frequencies
		  for(int i = 0; i < send_buff_size; i++){
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	e010      	b.n	8001014 <StartAudioCapTask+0x84>
			  send_buffer_float[i] = send_buffer[i];
 8000ff2:	4a1e      	ldr	r2, [pc, #120]	; (800106c <StartAudioCapTask+0xdc>)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffa:	ee07 3a90 	vmov	s15, r3
 8000ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001002:	4a1e      	ldr	r2, [pc, #120]	; (800107c <StartAudioCapTask+0xec>)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	edc3 7a00 	vstr	s15, [r3]
		  for(int i = 0; i < send_buff_size; i++){
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3301      	adds	r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800101a:	dbea      	blt.n	8000ff2 <StartAudioCapTask+0x62>
		  }
		  // Send data task semaphore
		  osSemaphoreRelease(SendDataSem03Handle);
 800101c:	4b18      	ldr	r3, [pc, #96]	; (8001080 <StartAudioCapTask+0xf0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f00b fb7f 	bl	800c724 <osSemaphoreRelease>
 8001026:	e7b7      	b.n	8000f98 <StartAudioCapTask+0x8>
	  }
	  else
	  {
		  // Call FFT function to detect frequencies
		  for(int i = 0; i < adc_buff_size; i++){
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	e010      	b.n	8001050 <StartAudioCapTask+0xc0>
			  adc_buffer_float[i] = adc_buffer[i];
 800102e:	4a11      	ldr	r2, [pc, #68]	; (8001074 <StartAudioCapTask+0xe4>)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001036:	ee07 3a90 	vmov	s15, r3
 800103a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800103e:	4a11      	ldr	r2, [pc, #68]	; (8001084 <StartAudioCapTask+0xf4>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	edc3 7a00 	vstr	s15, [r3]
		  for(int i = 0; i < adc_buff_size; i++){
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	3301      	adds	r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001056:	dbea      	blt.n	800102e <StartAudioCapTask+0x9e>
		  }
		  // Check if data is whale or not
		  osSemaphoreRelease(FFTSem02Handle);
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <StartAudioCapTask+0xf8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f00b fb61 	bl	800c724 <osSemaphoreRelease>
	  osSemaphoreAcquire(AudioCapSem01Handle, osWaitForever);
 8001062:	e799      	b.n	8000f98 <StartAudioCapTask+0x8>
 8001064:	240002dc 	.word	0x240002dc
 8001068:	240442e8 	.word	0x240442e8
 800106c:	240082e8 	.word	0x240082e8
 8001070:	24000098 	.word	0x24000098
 8001074:	240002e8 	.word	0x240002e8
 8001078:	240442e9 	.word	0x240442e9
 800107c:	240262e8 	.word	0x240262e8
 8001080:	240002e4 	.word	0x240002e4
 8001084:	240042e8 	.word	0x240042e8
 8001088:	240002e0 	.word	0x240002e0

0800108c <StartFFTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFFTTask */
void StartFFTTask(void *argument)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFFTTask */
  /* Infinite loop */
  for(;;)
  {
	 osSemaphoreAcquire(FFTSem02Handle, osWaitForever);
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <StartFFTTask+0x58>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f04f 31ff 	mov.w	r1, #4294967295
 800109c:	4618      	mov	r0, r3
 800109e:	f00b faef 	bl	800c680 <osSemaphoreAcquire>
	 HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80010a2:	2102      	movs	r1, #2
 80010a4:	4810      	ldr	r0, [pc, #64]	; (80010e8 <StartFFTTask+0x5c>)
 80010a6:	f004 fe6e 	bl	8005d86 <HAL_GPIO_TogglePin>

	 /* Reset frequency_detected bool */
	 //frequency_detected = false;

	 /* Call FFT function that returns true if freqs between 0-8kHz are detected */
	 frequency_detected = FrequencyDetected(adc_buffer_float);
 80010aa:	4810      	ldr	r0, [pc, #64]	; (80010ec <StartFFTTask+0x60>)
 80010ac:	f7ff fe6e 	bl	8000d8c <FrequencyDetected>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <StartFFTTask+0x64>)
 80010b6:	701a      	strb	r2, [r3, #0]

	 if(frequency_detected == true){
 80010b8:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <StartFFTTask+0x64>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <StartFFTTask+0x3c>
		 //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80010c0:	2101      	movs	r1, #1
 80010c2:	480c      	ldr	r0, [pc, #48]	; (80010f4 <StartFFTTask+0x68>)
 80010c4:	f004 fe5f 	bl	8005d86 <HAL_GPIO_TogglePin>
	 }


	 if(frequency_detected == true){
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <StartFFTTask+0x64>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d002      	beq.n	80010d6 <StartFFTTask+0x4a>
		 recording_mode = true;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <StartFFTTask+0x6c>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
		 // release semaphore for record task
	 }

	 osSemaphoreRelease(AudioCapSem01Handle);
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <StartFFTTask+0x70>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f00b fb22 	bl	800c724 <osSemaphoreRelease>
	 osSemaphoreAcquire(FFTSem02Handle, osWaitForever);
 80010e0:	e7d8      	b.n	8001094 <StartFFTTask+0x8>
 80010e2:	bf00      	nop
 80010e4:	240002e0 	.word	0x240002e0
 80010e8:	58021000 	.word	0x58021000
 80010ec:	240042e8 	.word	0x240042e8
 80010f0:	2404a2fc 	.word	0x2404a2fc
 80010f4:	58020400 	.word	0x58020400
 80010f8:	240442e8 	.word	0x240442e8
 80010fc:	240002dc 	.word	0x240002dc

08001100 <StartSendDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendDataTask */
void StartSendDataTask(void *argument)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendDataTask */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(SendDataSem03Handle, osWaitForever);
 8001108:	4b10      	ldr	r3, [pc, #64]	; (800114c <StartSendDataTask+0x4c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f04f 31ff 	mov.w	r1, #4294967295
 8001110:	4618      	mov	r0, r3
 8001112:	f00b fab5 	bl	800c680 <osSemaphoreAcquire>

	// Sending data via UART
	HAL_UART_Transmit_DMA(&huart3, send_buffer_float, send_buff_size);
 8001116:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 800111a:	490d      	ldr	r1, [pc, #52]	; (8001150 <StartSendDataTask+0x50>)
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <StartSendDataTask+0x54>)
 800111e:	f009 fdeb 	bl	800acf8 <HAL_UART_Transmit_DMA>


	counter++;
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <StartSendDataTask+0x58>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	3301      	adds	r3, #1
 8001128:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <StartSendDataTask+0x58>)
 800112a:	6013      	str	r3, [r2, #0]
	if (counter == 8)
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <StartSendDataTask+0x58>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b08      	cmp	r3, #8
 8001132:	d105      	bne.n	8001140 <StartSendDataTask+0x40>
	{
		counter = 0;
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <StartSendDataTask+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
		recording_mode = false;
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <StartSendDataTask+0x5c>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
	}
	osSemaphoreRelease(AudioCapSem01Handle);
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <StartSendDataTask+0x60>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f00b faed 	bl	800c724 <osSemaphoreRelease>
	osSemaphoreAcquire(SendDataSem03Handle, osWaitForever);
 800114a:	e7dd      	b.n	8001108 <StartSendDataTask+0x8>
 800114c:	240002e4 	.word	0x240002e4
 8001150:	240262e8 	.word	0x240262e8
 8001154:	240001c0 	.word	0x240001c0
 8001158:	2404a300 	.word	0x2404a300
 800115c:	240442e8 	.word	0x240442e8
 8001160:	240002dc 	.word	0x240002dc

08001164 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001174:	d101      	bne.n	800117a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001176:	f000 fb45 	bl	8001804 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001186:	b672      	cpsid	i
}
 8001188:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800118a:	e7fe      	b.n	800118a <Error_Handler+0x8>

0800118c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <HAL_MspInit+0x38>)
 8001194:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001198:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <HAL_MspInit+0x38>)
 800119a:	f043 0302 	orr.w	r3, r3, #2
 800119e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_MspInit+0x38>)
 80011a4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	210f      	movs	r1, #15
 80011b4:	f06f 0001 	mvn.w	r0, #1
 80011b8:	f001 ff5a 	bl	8003070 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	58024400 	.word	0x58024400

080011c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b0ba      	sub	sp, #232	; 0xe8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	22c0      	movs	r2, #192	; 0xc0
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f00f fc51 	bl	8010a90 <memset>
  if(hadc->Instance==ADC1)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a43      	ldr	r2, [pc, #268]	; (8001300 <HAL_ADC_MspInit+0x138>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d17e      	bne.n	80012f6 <HAL_ADC_MspInit+0x12e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001204:	2301      	movs	r3, #1
 8001206:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001208:	2310      	movs	r3, #16
 800120a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 800120c:	2303      	movs	r3, #3
 800120e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001210:	2302      	movs	r3, #2
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001214:	2302      	movs	r3, #2
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001218:	23c0      	movs	r3, #192	; 0xc0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800121c:	2300      	movs	r3, #0
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	4618      	mov	r0, r3
 8001230:	f005 fe1e 	bl	8006e70 <HAL_RCCEx_PeriphCLKConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 800123a:	f7ff ffa2 	bl	8001182 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800123e:	4b31      	ldr	r3, [pc, #196]	; (8001304 <HAL_ADC_MspInit+0x13c>)
 8001240:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001244:	4a2f      	ldr	r2, [pc, #188]	; (8001304 <HAL_ADC_MspInit+0x13c>)
 8001246:	f043 0320 	orr.w	r3, r3, #32
 800124a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800124e:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <HAL_ADC_MspInit+0x13c>)
 8001250:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001254:	f003 0320 	and.w	r3, r3, #32
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	4b29      	ldr	r3, [pc, #164]	; (8001304 <HAL_ADC_MspInit+0x13c>)
 800125e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001262:	4a28      	ldr	r2, [pc, #160]	; (8001304 <HAL_ADC_MspInit+0x13c>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800126c:	4b25      	ldr	r3, [pc, #148]	; (8001304 <HAL_ADC_MspInit+0x13c>)
 800126e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800127a:	2308      	movs	r3, #8
 800127c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001280:	2303      	movs	r3, #3
 8001282:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001290:	4619      	mov	r1, r3
 8001292:	481d      	ldr	r0, [pc, #116]	; (8001308 <HAL_ADC_MspInit+0x140>)
 8001294:	f004 fbae 	bl	80059f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <HAL_ADC_MspInit+0x144>)
 800129a:	4a1d      	ldr	r2, [pc, #116]	; (8001310 <HAL_ADC_MspInit+0x148>)
 800129c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <HAL_ADC_MspInit+0x144>)
 80012a0:	2209      	movs	r2, #9
 80012a2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <HAL_ADC_MspInit+0x144>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <HAL_ADC_MspInit+0x144>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <HAL_ADC_MspInit+0x144>)
 80012b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <HAL_ADC_MspInit+0x144>)
 80012ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_ADC_MspInit+0x144>)
 80012c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012c6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <HAL_ADC_MspInit+0x144>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <HAL_ADC_MspInit+0x144>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012d4:	4b0d      	ldr	r3, [pc, #52]	; (800130c <HAL_ADC_MspInit+0x144>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012da:	480c      	ldr	r0, [pc, #48]	; (800130c <HAL_ADC_MspInit+0x144>)
 80012dc:	f001 fef0 	bl	80030c0 <HAL_DMA_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_ADC_MspInit+0x122>
    {
      Error_Handler();
 80012e6:	f7ff ff4c 	bl	8001182 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_ADC_MspInit+0x144>)
 80012ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80012f0:	4a06      	ldr	r2, [pc, #24]	; (800130c <HAL_ADC_MspInit+0x144>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012f6:	bf00      	nop
 80012f8:	37e8      	adds	r7, #232	; 0xe8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40022000 	.word	0x40022000
 8001304:	58024400 	.word	0x58024400
 8001308:	58020000 	.word	0x58020000
 800130c:	240000fc 	.word	0x240000fc
 8001310:	40020010 	.word	0x40020010

08001314 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <HAL_TIM_Base_MspInit+0x3c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d10e      	bne.n	8001344 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <HAL_TIM_Base_MspInit+0x40>)
 8001328:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800132c:	4a09      	ldr	r2, [pc, #36]	; (8001354 <HAL_TIM_Base_MspInit+0x40>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <HAL_TIM_Base_MspInit+0x40>)
 8001338:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	40010000 	.word	0x40010000
 8001354:	58024400 	.word	0x58024400

08001358 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a13      	ldr	r2, [pc, #76]	; (80013c4 <HAL_TIM_MspPostInit+0x6c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d11f      	bne.n	80013ba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <HAL_TIM_MspPostInit+0x70>)
 800137c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001380:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <HAL_TIM_MspPostInit+0x70>)
 8001382:	f043 0310 	orr.w	r3, r3, #16
 8001386:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_TIM_MspPostInit+0x70>)
 800138c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001390:	f003 0310 	and.w	r3, r3, #16
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800139c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013aa:	2301      	movs	r3, #1
 80013ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <HAL_TIM_MspPostInit+0x74>)
 80013b6:	f004 fb1d 	bl	80059f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013ba:	bf00      	nop
 80013bc:	3720      	adds	r7, #32
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40010000 	.word	0x40010000
 80013c8:	58024400 	.word	0x58024400
 80013cc:	58021000 	.word	0x58021000

080013d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b0ba      	sub	sp, #232	; 0xe8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	22c0      	movs	r2, #192	; 0xc0
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f00f fb4d 	bl	8010a90 <memset>
  if(huart->Instance==USART3)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a3f      	ldr	r2, [pc, #252]	; (80014f8 <HAL_UART_MspInit+0x128>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d176      	bne.n	80014ee <HAL_UART_MspInit+0x11e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001400:	f04f 0202 	mov.w	r2, #2
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	4618      	mov	r0, r3
 8001418:	f005 fd2a 	bl	8006e70 <HAL_RCCEx_PeriphCLKConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001422:	f7ff feae 	bl	8001182 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001426:	4b35      	ldr	r3, [pc, #212]	; (80014fc <HAL_UART_MspInit+0x12c>)
 8001428:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800142c:	4a33      	ldr	r2, [pc, #204]	; (80014fc <HAL_UART_MspInit+0x12c>)
 800142e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001432:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001436:	4b31      	ldr	r3, [pc, #196]	; (80014fc <HAL_UART_MspInit+0x12c>)
 8001438:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800143c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001444:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <HAL_UART_MspInit+0x12c>)
 8001446:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800144a:	4a2c      	ldr	r2, [pc, #176]	; (80014fc <HAL_UART_MspInit+0x12c>)
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001454:	4b29      	ldr	r3, [pc, #164]	; (80014fc <HAL_UART_MspInit+0x12c>)
 8001456:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001462:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001466:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800147c:	2307      	movs	r3, #7
 800147e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001482:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001486:	4619      	mov	r1, r3
 8001488:	481d      	ldr	r0, [pc, #116]	; (8001500 <HAL_UART_MspInit+0x130>)
 800148a:	f004 fab3 	bl	80059f4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <HAL_UART_MspInit+0x134>)
 8001490:	4a1d      	ldr	r2, [pc, #116]	; (8001508 <HAL_UART_MspInit+0x138>)
 8001492:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_UART_MspInit+0x134>)
 8001496:	222e      	movs	r2, #46	; 0x2e
 8001498:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <HAL_UART_MspInit+0x134>)
 800149c:	2240      	movs	r2, #64	; 0x40
 800149e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_UART_MspInit+0x134>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <HAL_UART_MspInit+0x134>)
 80014a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ac:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <HAL_UART_MspInit+0x134>)
 80014b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014b4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <HAL_UART_MspInit+0x134>)
 80014b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014bc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <HAL_UART_MspInit+0x134>)
 80014c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_UART_MspInit+0x134>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014cc:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <HAL_UART_MspInit+0x134>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80014d2:	480c      	ldr	r0, [pc, #48]	; (8001504 <HAL_UART_MspInit+0x134>)
 80014d4:	f001 fdf4 	bl	80030c0 <HAL_DMA_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80014de:	f7ff fe50 	bl	8001182 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <HAL_UART_MspInit+0x134>)
 80014e6:	67da      	str	r2, [r3, #124]	; 0x7c
 80014e8:	4a06      	ldr	r2, [pc, #24]	; (8001504 <HAL_UART_MspInit+0x134>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	37e8      	adds	r7, #232	; 0xe8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40004800 	.word	0x40004800
 80014fc:	58024400 	.word	0x58024400
 8001500:	58020c00 	.word	0x58020c00
 8001504:	24000254 	.word	0x24000254
 8001508:	40020028 	.word	0x40020028

0800150c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b090      	sub	sp, #64	; 0x40
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b0f      	cmp	r3, #15
 8001518:	d827      	bhi.n	800156a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 800151a:	2200      	movs	r2, #0
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	201c      	movs	r0, #28
 8001520:	f001 fda6 	bl	8003070 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001524:	201c      	movs	r0, #28
 8001526:	f001 fdbd 	bl	80030a4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800152a:	4a29      	ldr	r2, [pc, #164]	; (80015d0 <HAL_InitTick+0xc4>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001530:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <HAL_InitTick+0xc8>)
 8001532:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001536:	4a27      	ldr	r2, [pc, #156]	; (80015d4 <HAL_InitTick+0xc8>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001540:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <HAL_InitTick+0xc8>)
 8001542:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800154e:	f107 0210 	add.w	r2, r7, #16
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f005 fc47 	bl	8006dec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800155e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001560:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001564:	2b00      	cmp	r3, #0
 8001566:	d106      	bne.n	8001576 <HAL_InitTick+0x6a>
 8001568:	e001      	b.n	800156e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e02c      	b.n	80015c8 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800156e:	f005 fc11 	bl	8006d94 <HAL_RCC_GetPCLK1Freq>
 8001572:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001574:	e004      	b.n	8001580 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001576:	f005 fc0d 	bl	8006d94 <HAL_RCC_GetPCLK1Freq>
 800157a:	4603      	mov	r3, r0
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001582:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <HAL_InitTick+0xcc>)
 8001584:	fba2 2303 	umull	r2, r3, r2, r3
 8001588:	0c9b      	lsrs	r3, r3, #18
 800158a:	3b01      	subs	r3, #1
 800158c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <HAL_InitTick+0xd0>)
 8001590:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001594:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_InitTick+0xd0>)
 8001598:	f240 32e7 	movw	r2, #999	; 0x3e7
 800159c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800159e:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <HAL_InitTick+0xd0>)
 80015a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80015a4:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_InitTick+0xd0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <HAL_InitTick+0xd0>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80015b0:	480a      	ldr	r0, [pc, #40]	; (80015dc <HAL_InitTick+0xd0>)
 80015b2:	f008 f867 	bl	8009684 <HAL_TIM_Base_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d104      	bne.n	80015c6 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80015bc:	4807      	ldr	r0, [pc, #28]	; (80015dc <HAL_InitTick+0xd0>)
 80015be:	f008 f929 	bl	8009814 <HAL_TIM_Base_Start_IT>
 80015c2:	4603      	mov	r3, r0
 80015c4:	e000      	b.n	80015c8 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3740      	adds	r7, #64	; 0x40
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	2400000c 	.word	0x2400000c
 80015d4:	58024400 	.word	0x58024400
 80015d8:	431bde83 	.word	0x431bde83
 80015dc:	2404a31c 	.word	0x2404a31c

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <NMI_Handler+0x4>

080015e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <MemManage_Handler+0x4>

080015f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <BusFault_Handler+0x4>

080015f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <UsageFault_Handler+0x4>

080015fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <DMA1_Stream0_IRQHandler+0x10>)
 8001612:	f002 fe6d 	bl	80042f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	240000fc 	.word	0x240000fc

08001620 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <DMA1_Stream1_IRQHandler+0x10>)
 8001626:	f002 fe63 	bl	80042f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	24000254 	.word	0x24000254

08001634 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <TIM2_IRQHandler+0x10>)
 800163a:	f008 fad3 	bl	8009be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2404a31c 	.word	0x2404a31c

08001648 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800164c:	4b32      	ldr	r3, [pc, #200]	; (8001718 <SystemInit+0xd0>)
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001652:	4a31      	ldr	r2, [pc, #196]	; (8001718 <SystemInit+0xd0>)
 8001654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800165c:	4b2f      	ldr	r3, [pc, #188]	; (800171c <SystemInit+0xd4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	2b02      	cmp	r3, #2
 8001666:	d807      	bhi.n	8001678 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001668:	4b2c      	ldr	r3, [pc, #176]	; (800171c <SystemInit+0xd4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 030f 	bic.w	r3, r3, #15
 8001670:	4a2a      	ldr	r2, [pc, #168]	; (800171c <SystemInit+0xd4>)
 8001672:	f043 0303 	orr.w	r3, r3, #3
 8001676:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001678:	4b29      	ldr	r3, [pc, #164]	; (8001720 <SystemInit+0xd8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a28      	ldr	r2, [pc, #160]	; (8001720 <SystemInit+0xd8>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001684:	4b26      	ldr	r3, [pc, #152]	; (8001720 <SystemInit+0xd8>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800168a:	4b25      	ldr	r3, [pc, #148]	; (8001720 <SystemInit+0xd8>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4924      	ldr	r1, [pc, #144]	; (8001720 <SystemInit+0xd8>)
 8001690:	4b24      	ldr	r3, [pc, #144]	; (8001724 <SystemInit+0xdc>)
 8001692:	4013      	ands	r3, r2
 8001694:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <SystemInit+0xd4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d007      	beq.n	80016b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016a2:	4b1e      	ldr	r3, [pc, #120]	; (800171c <SystemInit+0xd4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 030f 	bic.w	r3, r3, #15
 80016aa:	4a1c      	ldr	r2, [pc, #112]	; (800171c <SystemInit+0xd4>)
 80016ac:	f043 0303 	orr.w	r3, r3, #3
 80016b0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80016b2:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <SystemInit+0xd8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80016b8:	4b19      	ldr	r3, [pc, #100]	; (8001720 <SystemInit+0xd8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <SystemInit+0xd8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <SystemInit+0xd8>)
 80016c6:	4a18      	ldr	r2, [pc, #96]	; (8001728 <SystemInit+0xe0>)
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <SystemInit+0xd8>)
 80016cc:	4a17      	ldr	r2, [pc, #92]	; (800172c <SystemInit+0xe4>)
 80016ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <SystemInit+0xd8>)
 80016d2:	4a17      	ldr	r2, [pc, #92]	; (8001730 <SystemInit+0xe8>)
 80016d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <SystemInit+0xd8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016dc:	4b10      	ldr	r3, [pc, #64]	; (8001720 <SystemInit+0xd8>)
 80016de:	4a14      	ldr	r2, [pc, #80]	; (8001730 <SystemInit+0xe8>)
 80016e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <SystemInit+0xd8>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <SystemInit+0xd8>)
 80016ea:	4a11      	ldr	r2, [pc, #68]	; (8001730 <SystemInit+0xe8>)
 80016ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <SystemInit+0xd8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <SystemInit+0xd8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a09      	ldr	r2, [pc, #36]	; (8001720 <SystemInit+0xd8>)
 80016fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <SystemInit+0xd8>)
 8001702:	2200      	movs	r2, #0
 8001704:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <SystemInit+0xec>)
 8001708:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800170c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00
 800171c:	52002000 	.word	0x52002000
 8001720:	58024400 	.word	0x58024400
 8001724:	eaf6ed7f 	.word	0xeaf6ed7f
 8001728:	02020200 	.word	0x02020200
 800172c:	01ff0000 	.word	0x01ff0000
 8001730:	01010280 	.word	0x01010280
 8001734:	52004000 	.word	0x52004000

08001738 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001738:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001770 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800173c:	f7ff ff84 	bl	8001648 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001742:	490d      	ldr	r1, [pc, #52]	; (8001778 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001744:	4a0d      	ldr	r2, [pc, #52]	; (800177c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001748:	e002      	b.n	8001750 <LoopCopyDataInit>

0800174a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800174c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174e:	3304      	adds	r3, #4

08001750 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001754:	d3f9      	bcc.n	800174a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001758:	4c0a      	ldr	r4, [pc, #40]	; (8001784 <LoopFillZerobss+0x22>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800175c:	e001      	b.n	8001762 <LoopFillZerobss>

0800175e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001760:	3204      	adds	r2, #4

08001762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001764:	d3fb      	bcc.n	800175e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001766:	f00f f961 	bl	8010a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800176a:	f7fe ff43 	bl	80005f4 <main>
  bx  lr
 800176e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001770:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001774:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001778:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 800177c:	08023eb0 	.word	0x08023eb0
  ldr r2, =_sbss
 8001780:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8001784:	2404ecbc 	.word	0x2404ecbc

08001788 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001788:	e7fe      	b.n	8001788 <ADC_IRQHandler>
	...

0800178c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001792:	2003      	movs	r0, #3
 8001794:	f001 fc61 	bl	800305a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001798:	f005 f952 	bl	8006a40 <HAL_RCC_GetSysClockFreq>
 800179c:	4602      	mov	r2, r0
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_Init+0x68>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	f003 030f 	and.w	r3, r3, #15
 80017a8:	4913      	ldr	r1, [pc, #76]	; (80017f8 <HAL_Init+0x6c>)
 80017aa:	5ccb      	ldrb	r3, [r1, r3]
 80017ac:	f003 031f 	and.w	r3, r3, #31
 80017b0:	fa22 f303 	lsr.w	r3, r2, r3
 80017b4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_Init+0x68>)
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <HAL_Init+0x6c>)
 80017c0:	5cd3      	ldrb	r3, [r2, r3]
 80017c2:	f003 031f 	and.w	r3, r3, #31
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	fa22 f303 	lsr.w	r3, r2, r3
 80017cc:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <HAL_Init+0x70>)
 80017ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017d0:	4a0b      	ldr	r2, [pc, #44]	; (8001800 <HAL_Init+0x74>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017d6:	200f      	movs	r0, #15
 80017d8:	f7ff fe98 	bl	800150c <HAL_InitTick>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e002      	b.n	80017ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017e6:	f7ff fcd1 	bl	800118c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	58024400 	.word	0x58024400
 80017f8:	08010d58 	.word	0x08010d58
 80017fc:	24000008 	.word	0x24000008
 8001800:	24000004 	.word	0x24000004

08001804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_IncTick+0x20>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_IncTick+0x24>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4413      	add	r3, r2
 8001814:	4a04      	ldr	r2, [pc, #16]	; (8001828 <HAL_IncTick+0x24>)
 8001816:	6013      	str	r3, [r2, #0]
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	24000010 	.word	0x24000010
 8001828:	2404a368 	.word	0x2404a368

0800182c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return uwTick;
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <HAL_GetTick+0x14>)
 8001832:	681b      	ldr	r3, [r3, #0]
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	2404a368 	.word	0x2404a368

08001844 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	431a      	orrs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	609a      	str	r2, [r3, #8]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	609a      	str	r2, [r3, #8]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3360      	adds	r3, #96	; 0x60
 80018be:	461a      	mov	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	430b      	orrs	r3, r1
 80018da:	431a      	orrs	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80018e0:	bf00      	nop
 80018e2:	371c      	adds	r7, #28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f003 031f 	and.w	r3, r3, #31
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	431a      	orrs	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	611a      	str	r2, [r3, #16]
}
 8001912:	bf00      	nop
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800191e:	b480      	push	{r7}
 8001920:	b087      	sub	sp, #28
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3360      	adds	r3, #96	; 0x60
 800192e:	461a      	mov	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	431a      	orrs	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	601a      	str	r2, [r3, #0]
  }
}
 8001948:	bf00      	nop
 800194a:	371c      	adds	r7, #28
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800197a:	b480      	push	{r7}
 800197c:	b087      	sub	sp, #28
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3330      	adds	r3, #48	; 0x30
 800198a:	461a      	mov	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	4413      	add	r3, r2
 8001998:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	211f      	movs	r1, #31
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	401a      	ands	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	0e9b      	lsrs	r3, r3, #26
 80019b2:	f003 011f 	and.w	r1, r3, #31
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	f003 031f 	and.w	r3, r3, #31
 80019bc:	fa01 f303 	lsl.w	r3, r1, r3
 80019c0:	431a      	orrs	r2, r3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019c6:	bf00      	nop
 80019c8:	371c      	adds	r7, #28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	f023 0203 	bic.w	r2, r3, #3
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	60da      	str	r2, [r3, #12]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	3314      	adds	r3, #20
 8001a08:	461a      	mov	r2, r3
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	0e5b      	lsrs	r3, r3, #25
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	4413      	add	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	0d1b      	lsrs	r3, r3, #20
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	2107      	movs	r1, #7
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	0d1b      	lsrs	r3, r3, #20
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a42:	bf00      	nop
 8001a44:	371c      	adds	r7, #28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f003 0318 	and.w	r3, r3, #24
 8001a72:	4908      	ldr	r1, [pc, #32]	; (8001a94 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a74:	40d9      	lsrs	r1, r3
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	400b      	ands	r3, r1
 8001a7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	000fffff 	.word	0x000fffff

08001a98 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 031f 	and.w	r3, r3, #31
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6093      	str	r3, [r2, #8]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	5fffffc0 	.word	0x5fffffc0

08001ad8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aec:	d101      	bne.n	8001af2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <LL_ADC_EnableInternalRegulator+0x24>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	6fffffc0 	.word	0x6fffffc0

08001b28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b3c:	d101      	bne.n	8001b42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <LL_ADC_Enable+0x24>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	f043 0201 	orr.w	r2, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	7fffffc0 	.word	0x7fffffc0

08001b78 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <LL_ADC_Disable+0x24>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	f043 0202 	orr.w	r2, r3, #2
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	7fffffc0 	.word	0x7fffffc0

08001ba0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <LL_ADC_IsEnabled+0x18>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <LL_ADC_IsEnabled+0x1a>
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d101      	bne.n	8001bde <LL_ADC_IsDisableOngoing+0x18>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <LL_ADC_IsDisableOngoing+0x1a>
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <LL_ADC_REG_StartConversion+0x24>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	f043 0204 	orr.w	r2, r3, #4
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	7fffffc0 	.word	0x7fffffc0

08001c14 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <LL_ADC_REG_StopConversion+0x24>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	f043 0210 	orr.w	r2, r3, #16
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	7fffffc0 	.word	0x7fffffc0

08001c3c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d101      	bne.n	8001c54 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <LL_ADC_INJ_StopConversion+0x24>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	f043 0220 	orr.w	r2, r3, #32
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	7fffffc0 	.word	0x7fffffc0

08001c8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d101      	bne.n	8001ca4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b089      	sub	sp, #36	; 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e138      	b.n	8001f40 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff fa73 	bl	80011c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff feef 	bl	8001ad8 <LL_ADC_IsDeepPowerDownEnabled>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d004      	beq.n	8001d0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fed5 	bl	8001ab4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ff0a 	bl	8001b28 <LL_ADC_IsInternalRegulatorEnabled>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d114      	bne.n	8001d44 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff feee 	bl	8001b00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d24:	4b88      	ldr	r3, [pc, #544]	; (8001f48 <HAL_ADC_Init+0x294>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	099b      	lsrs	r3, r3, #6
 8001d2a:	4a88      	ldr	r2, [pc, #544]	; (8001f4c <HAL_ADC_Init+0x298>)
 8001d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d30:	099b      	lsrs	r3, r3, #6
 8001d32:	3301      	adds	r3, #1
 8001d34:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d36:	e002      	b.n	8001d3e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f9      	bne.n	8001d38 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff feed 	bl	8001b28 <LL_ADC_IsInternalRegulatorEnabled>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10d      	bne.n	8001d70 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d58:	f043 0210 	orr.w	r2, r3, #16
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	f043 0201 	orr.w	r2, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff61 	bl	8001c3c <LL_ADC_REG_IsConversionOngoing>
 8001d7a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f040 80d2 	bne.w	8001f2e <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f040 80ce 	bne.w	8001f2e <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d96:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d9a:	f043 0202 	orr.w	r2, r3, #2
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fefa 	bl	8001ba0 <LL_ADC_IsEnabled>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d110      	bne.n	8001dd4 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001db2:	4867      	ldr	r0, [pc, #412]	; (8001f50 <HAL_ADC_Init+0x29c>)
 8001db4:	f7ff fef4 	bl	8001ba0 <LL_ADC_IsEnabled>
 8001db8:	4604      	mov	r4, r0
 8001dba:	4866      	ldr	r0, [pc, #408]	; (8001f54 <HAL_ADC_Init+0x2a0>)
 8001dbc:	f7ff fef0 	bl	8001ba0 <LL_ADC_IsEnabled>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4323      	orrs	r3, r4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d105      	bne.n	8001dd4 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4862      	ldr	r0, [pc, #392]	; (8001f58 <HAL_ADC_Init+0x2a4>)
 8001dd0:	f7ff fd38 	bl	8001844 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7d5b      	ldrb	r3, [r3, #21]
 8001dd8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dde:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001de4:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	7f1b      	ldrb	r3, [r3, #28]
 8001dea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	7f1b      	ldrb	r3, [r3, #28]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d106      	bne.n	8001e06 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	045b      	lsls	r3, r3, #17
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d009      	beq.n	8001e22 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	4b4c      	ldr	r3, [pc, #304]	; (8001f5c <HAL_ADC_Init+0x2a8>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	69b9      	ldr	r1, [r7, #24]
 8001e32:	430b      	orrs	r3, r1
 8001e34:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fefe 	bl	8001c3c <LL_ADC_REG_IsConversionOngoing>
 8001e40:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff20 	bl	8001c8c <LL_ADC_INJ_IsConversionOngoing>
 8001e4c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d14a      	bne.n	8001eea <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d147      	bne.n	8001eea <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	7d1b      	ldrb	r3, [r3, #20]
 8001e5e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	4b3c      	ldr	r3, [pc, #240]	; (8001f60 <HAL_ADC_Init+0x2ac>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	69b9      	ldr	r1, [r7, #24]
 8001e78:	430b      	orrs	r3, r1
 8001e7a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d11b      	bne.n	8001ebe <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691a      	ldr	r2, [r3, #16]
 8001e92:	4b34      	ldr	r3, [pc, #208]	; (8001f64 <HAL_ADC_Init+0x2b0>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e9a:	3a01      	subs	r2, #1
 8001e9c:	0411      	lsls	r1, r2, #16
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ea2:	4311      	orrs	r1, r2
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ea8:	4311      	orrs	r1, r2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	611a      	str	r2, [r3, #16]
 8001ebc:	e007      	b.n	8001ece <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0201 	bic.w	r2, r2, #1
 8001ecc:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fe7b 	bl	8002be0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d10c      	bne.n	8001f0c <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	f023 010f 	bic.w	r1, r3, #15
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	1e5a      	subs	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	631a      	str	r2, [r3, #48]	; 0x30
 8001f0a:	e007      	b.n	8001f1c <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 020f 	bic.w	r2, r2, #15
 8001f1a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f20:	f023 0303 	bic.w	r3, r3, #3
 8001f24:	f043 0201 	orr.w	r2, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	655a      	str	r2, [r3, #84]	; 0x54
 8001f2c:	e007      	b.n	8001f3e <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f32:	f043 0210 	orr.w	r2, r3, #16
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3724      	adds	r7, #36	; 0x24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd90      	pop	{r4, r7, pc}
 8001f48:	24000004 	.word	0x24000004
 8001f4c:	053e2d63 	.word	0x053e2d63
 8001f50:	40022000 	.word	0x40022000
 8001f54:	40022100 	.word	0x40022100
 8001f58:	40022300 	.word	0x40022300
 8001f5c:	fff0c003 	.word	0xfff0c003
 8001f60:	ffffbffc 	.word	0xffffbffc
 8001f64:	fc00f81e 	.word	0xfc00f81e

08001f68 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f74:	484f      	ldr	r0, [pc, #316]	; (80020b4 <HAL_ADC_Start_DMA+0x14c>)
 8001f76:	f7ff fd8f 	bl	8001a98 <LL_ADC_GetMultimode>
 8001f7a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fe5b 	bl	8001c3c <LL_ADC_REG_IsConversionOngoing>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f040 808c 	bne.w	80020a6 <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_ADC_Start_DMA+0x34>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e087      	b.n	80020ac <HAL_ADC_Start_DMA+0x144>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	d002      	beq.n	8001fb6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	2b09      	cmp	r3, #9
 8001fb4:	d170      	bne.n	8002098 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 fca2 	bl	8002900 <ADC_Enable>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001fc0:	7dfb      	ldrb	r3, [r7, #23]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d163      	bne.n	800208e <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fca:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <HAL_ADC_Start_DMA+0x150>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a38      	ldr	r2, [pc, #224]	; (80020bc <HAL_ADC_Start_DMA+0x154>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d002      	beq.n	8001fe6 <HAL_ADC_Start_DMA+0x7e>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	e000      	b.n	8001fe8 <HAL_ADC_Start_DMA+0x80>
 8001fe6:	4b36      	ldr	r3, [pc, #216]	; (80020c0 <HAL_ADC_Start_DMA+0x158>)
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d002      	beq.n	8001ff6 <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d105      	bne.n	8002002 <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d006      	beq.n	800201c <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002012:	f023 0206 	bic.w	r2, r3, #6
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	659a      	str	r2, [r3, #88]	; 0x58
 800201a:	e002      	b.n	8002022 <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002026:	4a27      	ldr	r2, [pc, #156]	; (80020c4 <HAL_ADC_Start_DMA+0x15c>)
 8002028:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202e:	4a26      	ldr	r2, [pc, #152]	; (80020c8 <HAL_ADC_Start_DMA+0x160>)
 8002030:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002036:	4a25      	ldr	r2, [pc, #148]	; (80020cc <HAL_ADC_Start_DMA+0x164>)
 8002038:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	221c      	movs	r2, #28
 8002040:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 0210 	orr.w	r2, r2, #16
 8002058:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002062:	4619      	mov	r1, r3
 8002064:	4610      	mov	r0, r2
 8002066:	f7ff fcb4 	bl	80019d2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3340      	adds	r3, #64	; 0x40
 8002074:	4619      	mov	r1, r3
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f001 fbb1 	bl	80037e0 <HAL_DMA_Start_IT>
 800207e:	4603      	mov	r3, r0
 8002080:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fdb0 	bl	8001bec <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800208c:	e00d      	b.n	80020aa <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002096:	e008      	b.n	80020aa <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80020a4:	e001      	b.n	80020aa <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020a6:	2302      	movs	r3, #2
 80020a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40022300 	.word	0x40022300
 80020b8:	fffff0fe 	.word	0xfffff0fe
 80020bc:	40022100 	.word	0x40022100
 80020c0:	40022000 	.word	0x40022000
 80020c4:	08002ab7 	.word	0x08002ab7
 80020c8:	08002b8f 	.word	0x08002b8f
 80020cc:	08002bab 	.word	0x08002bab

080020d0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_Stop_DMA+0x16>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e04f      	b.n	8002186 <HAL_ADC_Stop_DMA+0xb6>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80020ee:	2103      	movs	r1, #3
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 fb49 	bl	8002788 <ADC_ConversionStop>
 80020f6:	4603      	mov	r3, r0
 80020f8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d13d      	bne.n	800217c <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0203 	bic.w	r2, r2, #3
 800210e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d10f      	bne.n	800213e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	4618      	mov	r0, r3
 8002124:	f001 fdc6 	bl	8003cb4 <HAL_DMA_Abort>
 8002128:	4603      	mov	r3, r0
 800212a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002136:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0210 	bic.w	r2, r2, #16
 800214c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d105      	bne.n	8002160 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fc4f 	bl	80029f8 <ADC_Disable>
 800215a:	4603      	mov	r3, r0
 800215c:	73fb      	strb	r3, [r7, #15]
 800215e:	e002      	b.n	8002166 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 fc49 	bl	80029f8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d107      	bne.n	800217c <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002170:	4b07      	ldr	r3, [pc, #28]	; (8002190 <HAL_ADC_Stop_DMA+0xc0>)
 8002172:	4013      	ands	r3, r2
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002184:	7bfb      	ldrb	r3, [r7, #15]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	ffffeefe 	.word	0xffffeefe

08002194 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b0a1      	sub	sp, #132	; 0x84
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4a9a      	ldr	r2, [pc, #616]	; (8002440 <HAL_ADC_ConfigChannel+0x284>)
 80021d6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d101      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x2a>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e2bc      	b.n	8002760 <HAL_ADC_ConfigChannel+0x5a4>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fd22 	bl	8001c3c <LL_ADC_REG_IsConversionOngoing>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f040 82a1 	bne.w	8002742 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002208:	2b00      	cmp	r3, #0
 800220a:	d108      	bne.n	800221e <HAL_ADC_ConfigChannel+0x62>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	0e9b      	lsrs	r3, r3, #26
 8002212:	f003 031f 	and.w	r3, r3, #31
 8002216:	2201      	movs	r2, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	e016      	b.n	800224c <HAL_ADC_ConfigChannel+0x90>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800222c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800222e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002230:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002236:	2320      	movs	r3, #32
 8002238:	e003      	b.n	8002242 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800223a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800223c:	fab3 f383 	clz	r3, r3
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f003 031f 	and.w	r3, r3, #31
 8002246:	2201      	movs	r2, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	69d1      	ldr	r1, [r2, #28]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	430b      	orrs	r3, r1
 8002258:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6859      	ldr	r1, [r3, #4]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	f7ff fb87 	bl	800197a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fce3 	bl	8001c3c <LL_ADC_REG_IsConversionOngoing>
 8002276:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fd05 	bl	8001c8c <LL_ADC_INJ_IsConversionOngoing>
 8002282:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002286:	2b00      	cmp	r3, #0
 8002288:	f040 80a0 	bne.w	80023cc <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800228c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800228e:	2b00      	cmp	r3, #0
 8002290:	f040 809c 	bne.w	80023cc <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	6819      	ldr	r1, [r3, #0]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	461a      	mov	r2, r3
 80022a2:	f7ff fba9 	bl	80019f8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10b      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x110>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	089b      	lsrs	r3, r3, #2
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	e00a      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x126>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	089b      	lsrs	r3, r3, #2
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d027      	beq.n	800233c <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	6919      	ldr	r1, [r3, #16]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022fa:	f7ff fad7 	bl	80018ac <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6919      	ldr	r1, [r3, #16]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	7e5b      	ldrb	r3, [r3, #25]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d102      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x158>
 800230e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002312:	e000      	b.n	8002316 <HAL_ADC_ConfigChannel+0x15a>
 8002314:	2300      	movs	r3, #0
 8002316:	461a      	mov	r2, r3
 8002318:	f7ff fb01 	bl	800191e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	6919      	ldr	r1, [r3, #16]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	7e1b      	ldrb	r3, [r3, #24]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d102      	bne.n	8002332 <HAL_ADC_ConfigChannel+0x176>
 800232c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002330:	e000      	b.n	8002334 <HAL_ADC_ConfigChannel+0x178>
 8002332:	2300      	movs	r3, #0
 8002334:	461a      	mov	r2, r3
 8002336:	f7ff fad9 	bl	80018ec <LL_ADC_SetDataRightShift>
 800233a:	e047      	b.n	80023cc <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002342:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	069b      	lsls	r3, r3, #26
 800234c:	429a      	cmp	r2, r3
 800234e:	d107      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800235e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002366:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	069b      	lsls	r3, r3, #26
 8002370:	429a      	cmp	r2, r3
 8002372:	d107      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002382:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800238a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	069b      	lsls	r3, r3, #26
 8002394:	429a      	cmp	r2, r3
 8002396:	d107      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023a6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	069b      	lsls	r3, r3, #26
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d107      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023ca:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fbe5 	bl	8001ba0 <LL_ADC_IsEnabled>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f040 81bb 	bne.w	8002754 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	6819      	ldr	r1, [r3, #0]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	461a      	mov	r2, r3
 80023ec:	f7ff fb30 	bl	8001a50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4a12      	ldr	r2, [pc, #72]	; (8002440 <HAL_ADC_ConfigChannel+0x284>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	f040 8130 	bne.w	800265c <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10b      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x268>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	0e9b      	lsrs	r3, r3, #26
 8002412:	3301      	adds	r3, #1
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	2b09      	cmp	r3, #9
 800241a:	bf94      	ite	ls
 800241c:	2301      	movls	r3, #1
 800241e:	2300      	movhi	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	e01b      	b.n	800245c <HAL_ADC_ConfigChannel+0x2a0>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002434:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002438:	2b00      	cmp	r3, #0
 800243a:	d103      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 800243c:	2320      	movs	r3, #32
 800243e:	e005      	b.n	800244c <HAL_ADC_ConfigChannel+0x290>
 8002440:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	3301      	adds	r3, #1
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	2b09      	cmp	r3, #9
 8002454:	bf94      	ite	ls
 8002456:	2301      	movls	r3, #1
 8002458:	2300      	movhi	r3, #0
 800245a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800245c:	2b00      	cmp	r3, #0
 800245e:	d079      	beq.n	8002554 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002468:	2b00      	cmp	r3, #0
 800246a:	d107      	bne.n	800247c <HAL_ADC_ConfigChannel+0x2c0>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	0e9b      	lsrs	r3, r3, #26
 8002472:	3301      	adds	r3, #1
 8002474:	069b      	lsls	r3, r3, #26
 8002476:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800247a:	e015      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x2ec>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002484:	fa93 f3a3 	rbit	r3, r3
 8002488:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800248a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800248c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800248e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002494:	2320      	movs	r3, #32
 8002496:	e003      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	3301      	adds	r3, #1
 80024a2:	069b      	lsls	r3, r3, #26
 80024a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x30c>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	0e9b      	lsrs	r3, r3, #26
 80024ba:	3301      	adds	r3, #1
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	2101      	movs	r1, #1
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	e017      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x33c>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80024d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80024da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 80024e0:	2320      	movs	r3, #32
 80024e2:	e003      	b.n	80024ec <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 80024e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	3301      	adds	r3, #1
 80024ee:	f003 031f 	and.w	r3, r3, #31
 80024f2:	2101      	movs	r1, #1
 80024f4:	fa01 f303 	lsl.w	r3, r1, r3
 80024f8:	ea42 0103 	orr.w	r1, r2, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10a      	bne.n	800251e <HAL_ADC_ConfigChannel+0x362>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	0e9b      	lsrs	r3, r3, #26
 800250e:	3301      	adds	r3, #1
 8002510:	f003 021f 	and.w	r2, r3, #31
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	051b      	lsls	r3, r3, #20
 800251c:	e018      	b.n	8002550 <HAL_ADC_ConfigChannel+0x394>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002536:	2320      	movs	r3, #32
 8002538:	e003      	b.n	8002542 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 800253a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	3301      	adds	r3, #1
 8002544:	f003 021f 	and.w	r2, r3, #31
 8002548:	4613      	mov	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4413      	add	r3, r2
 800254e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002550:	430b      	orrs	r3, r1
 8002552:	e07e      	b.n	8002652 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800255c:	2b00      	cmp	r3, #0
 800255e:	d107      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x3b4>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	0e9b      	lsrs	r3, r3, #26
 8002566:	3301      	adds	r3, #1
 8002568:	069b      	lsls	r3, r3, #26
 800256a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800256e:	e015      	b.n	800259c <HAL_ADC_ConfigChannel+0x3e0>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002588:	2320      	movs	r3, #32
 800258a:	e003      	b.n	8002594 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800258c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	3301      	adds	r3, #1
 8002596:	069b      	lsls	r3, r3, #26
 8002598:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d109      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x400>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	0e9b      	lsrs	r3, r3, #26
 80025ae:	3301      	adds	r3, #1
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	2101      	movs	r1, #1
 80025b6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ba:	e017      	b.n	80025ec <HAL_ADC_ConfigChannel+0x430>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	61bb      	str	r3, [r7, #24]
  return result;
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 80025d4:	2320      	movs	r3, #32
 80025d6:	e003      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	3301      	adds	r3, #1
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	2101      	movs	r1, #1
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	ea42 0103 	orr.w	r1, r2, r3
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10d      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x45c>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0e9b      	lsrs	r3, r3, #26
 8002602:	3301      	adds	r3, #1
 8002604:	f003 021f 	and.w	r2, r3, #31
 8002608:	4613      	mov	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	3b1e      	subs	r3, #30
 8002610:	051b      	lsls	r3, r3, #20
 8002612:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002616:	e01b      	b.n	8002650 <HAL_ADC_ConfigChannel+0x494>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	60fb      	str	r3, [r7, #12]
  return result;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002630:	2320      	movs	r3, #32
 8002632:	e003      	b.n	800263c <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	3301      	adds	r3, #1
 800263e:	f003 021f 	and.w	r2, r3, #31
 8002642:	4613      	mov	r3, r2
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	4413      	add	r3, r2
 8002648:	3b1e      	subs	r3, #30
 800264a:	051b      	lsls	r3, r3, #20
 800264c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002650:	430b      	orrs	r3, r1
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	6892      	ldr	r2, [r2, #8]
 8002656:	4619      	mov	r1, r3
 8002658:	f7ff f9ce 	bl	80019f8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	da77      	bge.n	8002754 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002664:	4840      	ldr	r0, [pc, #256]	; (8002768 <HAL_ADC_ConfigChannel+0x5ac>)
 8002666:	f7ff f913 	bl	8001890 <LL_ADC_GetCommonPathInternalCh>
 800266a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800266c:	483f      	ldr	r0, [pc, #252]	; (800276c <HAL_ADC_ConfigChannel+0x5b0>)
 800266e:	f7ff fa97 	bl	8001ba0 <LL_ADC_IsEnabled>
 8002672:	4604      	mov	r4, r0
 8002674:	483e      	ldr	r0, [pc, #248]	; (8002770 <HAL_ADC_ConfigChannel+0x5b4>)
 8002676:	f7ff fa93 	bl	8001ba0 <LL_ADC_IsEnabled>
 800267a:	4603      	mov	r3, r0
 800267c:	4323      	orrs	r3, r4
 800267e:	2b00      	cmp	r3, #0
 8002680:	d155      	bne.n	800272e <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a3b      	ldr	r2, [pc, #236]	; (8002774 <HAL_ADC_ConfigChannel+0x5b8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d122      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x516>
 800268c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800268e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d11d      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a35      	ldr	r2, [pc, #212]	; (8002770 <HAL_ADC_ConfigChannel+0x5b4>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d159      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80026a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026a6:	4619      	mov	r1, r3
 80026a8:	482f      	ldr	r0, [pc, #188]	; (8002768 <HAL_ADC_ConfigChannel+0x5ac>)
 80026aa:	f7ff f8de 	bl	800186a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026ae:	4b32      	ldr	r3, [pc, #200]	; (8002778 <HAL_ADC_ConfigChannel+0x5bc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	099b      	lsrs	r3, r3, #6
 80026b4:	4a31      	ldr	r2, [pc, #196]	; (800277c <HAL_ADC_ConfigChannel+0x5c0>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	099b      	lsrs	r3, r3, #6
 80026bc:	3301      	adds	r3, #1
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80026c2:	e002      	b.n	80026ca <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f9      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026d0:	e040      	b.n	8002754 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a2a      	ldr	r2, [pc, #168]	; (8002780 <HAL_ADC_ConfigChannel+0x5c4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d111      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x544>
 80026dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10c      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a21      	ldr	r2, [pc, #132]	; (8002770 <HAL_ADC_ConfigChannel+0x5b4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d131      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80026f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026f6:	4619      	mov	r1, r3
 80026f8:	481b      	ldr	r0, [pc, #108]	; (8002768 <HAL_ADC_ConfigChannel+0x5ac>)
 80026fa:	f7ff f8b6 	bl	800186a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026fe:	e029      	b.n	8002754 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a1f      	ldr	r2, [pc, #124]	; (8002784 <HAL_ADC_ConfigChannel+0x5c8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d124      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x598>
 800270a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d11f      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a15      	ldr	r2, [pc, #84]	; (8002770 <HAL_ADC_ConfigChannel+0x5b4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d11a      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800271e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002720:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002724:	4619      	mov	r1, r3
 8002726:	4810      	ldr	r0, [pc, #64]	; (8002768 <HAL_ADC_ConfigChannel+0x5ac>)
 8002728:	f7ff f89f 	bl	800186a <LL_ADC_SetCommonPathInternalCh>
 800272c:	e012      	b.n	8002754 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	f043 0220 	orr.w	r2, r3, #32
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002740:	e008      	b.n	8002754 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002746:	f043 0220 	orr.w	r2, r3, #32
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800275c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002760:	4618      	mov	r0, r3
 8002762:	3784      	adds	r7, #132	; 0x84
 8002764:	46bd      	mov	sp, r7
 8002766:	bd90      	pop	{r4, r7, pc}
 8002768:	40022300 	.word	0x40022300
 800276c:	40022000 	.word	0x40022000
 8002770:	40022100 	.word	0x40022100
 8002774:	cb840000 	.word	0xcb840000
 8002778:	24000004 	.word	0x24000004
 800277c:	053e2d63 	.word	0x053e2d63
 8002780:	bac04000 	.word	0xbac04000
 8002784:	cfb80000 	.word	0xcfb80000

08002788 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fa4c 	bl	8001c3c <LL_ADC_REG_IsConversionOngoing>
 80027a4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fa6e 	bl	8001c8c <LL_ADC_INJ_IsConversionOngoing>
 80027b0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d103      	bne.n	80027c0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 8098 	beq.w	80028f0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d02a      	beq.n	8002824 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	7d5b      	ldrb	r3, [r3, #21]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d126      	bne.n	8002824 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	7d1b      	ldrb	r3, [r3, #20]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d122      	bne.n	8002824 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80027de:	2301      	movs	r3, #1
 80027e0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80027e2:	e014      	b.n	800280e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	4a45      	ldr	r2, [pc, #276]	; (80028fc <ADC_ConversionStop+0x174>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d90d      	bls.n	8002808 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f0:	f043 0210 	orr.w	r2, r3, #16
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	f043 0201 	orr.w	r2, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e074      	b.n	80028f2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	3301      	adds	r3, #1
 800280c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002818:	2b40      	cmp	r3, #64	; 0x40
 800281a:	d1e3      	bne.n	80027e4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2240      	movs	r2, #64	; 0x40
 8002822:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d014      	beq.n	8002854 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fa04 	bl	8001c3c <LL_ADC_REG_IsConversionOngoing>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00c      	beq.n	8002854 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff f9c1 	bl	8001bc6 <LL_ADC_IsDisableOngoing>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d104      	bne.n	8002854 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff f9e0 	bl	8001c14 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d014      	beq.n	8002884 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fa14 	bl	8001c8c <LL_ADC_INJ_IsConversionOngoing>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00c      	beq.n	8002884 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff f9a9 	bl	8001bc6 <LL_ADC_IsDisableOngoing>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d104      	bne.n	8002884 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff f9f0 	bl	8001c64 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d005      	beq.n	8002896 <ADC_ConversionStop+0x10e>
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	2b03      	cmp	r3, #3
 800288e:	d105      	bne.n	800289c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002890:	230c      	movs	r3, #12
 8002892:	617b      	str	r3, [r7, #20]
        break;
 8002894:	e005      	b.n	80028a2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002896:	2308      	movs	r3, #8
 8002898:	617b      	str	r3, [r7, #20]
        break;
 800289a:	e002      	b.n	80028a2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800289c:	2304      	movs	r3, #4
 800289e:	617b      	str	r3, [r7, #20]
        break;
 80028a0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80028a2:	f7fe ffc3 	bl	800182c <HAL_GetTick>
 80028a6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028a8:	e01b      	b.n	80028e2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80028aa:	f7fe ffbf 	bl	800182c <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b05      	cmp	r3, #5
 80028b6:	d914      	bls.n	80028e2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00d      	beq.n	80028e2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ca:	f043 0210 	orr.w	r2, r3, #16
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d6:	f043 0201 	orr.w	r2, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e007      	b.n	80028f2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1dc      	bne.n	80028aa <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3720      	adds	r7, #32
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	000cdbff 	.word	0x000cdbff

08002900 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff f947 	bl	8001ba0 <LL_ADC_IsEnabled>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d161      	bne.n	80029dc <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	4b32      	ldr	r3, [pc, #200]	; (80029e8 <ADC_Enable+0xe8>)
 8002920:	4013      	ands	r3, r2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00d      	beq.n	8002942 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292a:	f043 0210 	orr.w	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002936:	f043 0201 	orr.w	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e04d      	b.n	80029de <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff f902 	bl	8001b50 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800294c:	f7fe ff6e 	bl	800182c <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002952:	4826      	ldr	r0, [pc, #152]	; (80029ec <ADC_Enable+0xec>)
 8002954:	f7ff f8a0 	bl	8001a98 <LL_ADC_GetMultimode>
 8002958:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a24      	ldr	r2, [pc, #144]	; (80029f0 <ADC_Enable+0xf0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d002      	beq.n	800296a <ADC_Enable+0x6a>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	e000      	b.n	800296c <ADC_Enable+0x6c>
 800296a:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <ADC_Enable+0xf4>)
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	4293      	cmp	r3, r2
 8002972:	d02c      	beq.n	80029ce <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d130      	bne.n	80029dc <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800297a:	e028      	b.n	80029ce <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff f90d 	bl	8001ba0 <LL_ADC_IsEnabled>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d104      	bne.n	8002996 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff f8dd 	bl	8001b50 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002996:	f7fe ff49 	bl	800182c <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d914      	bls.n	80029ce <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d00d      	beq.n	80029ce <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	f043 0210 	orr.w	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	f043 0201 	orr.w	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e007      	b.n	80029de <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d1cf      	bne.n	800297c <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	8000003f 	.word	0x8000003f
 80029ec:	40022300 	.word	0x40022300
 80029f0:	40022100 	.word	0x40022100
 80029f4:	40022000 	.word	0x40022000

080029f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff f8de 	bl	8001bc6 <LL_ADC_IsDisableOngoing>
 8002a0a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff f8c5 	bl	8001ba0 <LL_ADC_IsEnabled>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d047      	beq.n	8002aac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d144      	bne.n	8002aac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 030d 	and.w	r3, r3, #13
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d10c      	bne.n	8002a4a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff f89f 	bl	8001b78 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2203      	movs	r2, #3
 8002a40:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a42:	f7fe fef3 	bl	800182c <HAL_GetTick>
 8002a46:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a48:	e029      	b.n	8002a9e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4e:	f043 0210 	orr.w	r2, r3, #16
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5a:	f043 0201 	orr.w	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e023      	b.n	8002aae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a66:	f7fe fee1 	bl	800182c <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d914      	bls.n	8002a9e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00d      	beq.n	8002a9e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a86:	f043 0210 	orr.w	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	f043 0201 	orr.w	r2, r3, #1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e007      	b.n	8002aae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1dc      	bne.n	8002a66 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d14b      	bne.n	8002b68 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d021      	beq.n	8002b2e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe ff30 	bl	8001954 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d032      	beq.n	8002b60 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d12b      	bne.n	8002b60 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d11f      	bne.n	8002b60 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b24:	f043 0201 	orr.w	r2, r3, #1
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54
 8002b2c:	e018      	b.n	8002b60 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d111      	bne.n	8002b60 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d105      	bne.n	8002b60 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b58:	f043 0201 	orr.w	r2, r3, #1
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f7fe f9f7 	bl	8000f54 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b66:	e00e      	b.n	8002b86 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f7ff fb17 	bl	80021a8 <HAL_ADC_ErrorCallback>
}
 8002b7a:	e004      	b.n	8002b86 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	4798      	blx	r3
}
 8002b86:	bf00      	nop
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f7ff faf9 	bl	8002194 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc8:	f043 0204 	orr.w	r2, r3, #4
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f7ff fae9 	bl	80021a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002be8:	4b60      	ldr	r3, [pc, #384]	; (8002d6c <ADC_ConfigureBoostMode+0x18c>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01c      	beq.n	8002c2e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002bf4:	f004 f89e 	bl	8006d34 <HAL_RCC_GetHCLKFreq>
 8002bf8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c02:	d010      	beq.n	8002c26 <ADC_ConfigureBoostMode+0x46>
 8002c04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c08:	d873      	bhi.n	8002cf2 <ADC_ConfigureBoostMode+0x112>
 8002c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0e:	d002      	beq.n	8002c16 <ADC_ConfigureBoostMode+0x36>
 8002c10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c14:	d16d      	bne.n	8002cf2 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	0c1b      	lsrs	r3, r3, #16
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c22:	60fb      	str	r3, [r7, #12]
        break;
 8002c24:	e068      	b.n	8002cf8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	089b      	lsrs	r3, r3, #2
 8002c2a:	60fb      	str	r3, [r7, #12]
        break;
 8002c2c:	e064      	b.n	8002cf8 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002c2e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002c32:	f04f 0100 	mov.w	r1, #0
 8002c36:	f005 fad9 	bl	80081ec <HAL_RCCEx_GetPeriphCLKFreq>
 8002c3a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002c44:	d051      	beq.n	8002cea <ADC_ConfigureBoostMode+0x10a>
 8002c46:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002c4a:	d854      	bhi.n	8002cf6 <ADC_ConfigureBoostMode+0x116>
 8002c4c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002c50:	d047      	beq.n	8002ce2 <ADC_ConfigureBoostMode+0x102>
 8002c52:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002c56:	d84e      	bhi.n	8002cf6 <ADC_ConfigureBoostMode+0x116>
 8002c58:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002c5c:	d03d      	beq.n	8002cda <ADC_ConfigureBoostMode+0xfa>
 8002c5e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002c62:	d848      	bhi.n	8002cf6 <ADC_ConfigureBoostMode+0x116>
 8002c64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c68:	d033      	beq.n	8002cd2 <ADC_ConfigureBoostMode+0xf2>
 8002c6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c6e:	d842      	bhi.n	8002cf6 <ADC_ConfigureBoostMode+0x116>
 8002c70:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002c74:	d029      	beq.n	8002cca <ADC_ConfigureBoostMode+0xea>
 8002c76:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002c7a:	d83c      	bhi.n	8002cf6 <ADC_ConfigureBoostMode+0x116>
 8002c7c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002c80:	d01a      	beq.n	8002cb8 <ADC_ConfigureBoostMode+0xd8>
 8002c82:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002c86:	d836      	bhi.n	8002cf6 <ADC_ConfigureBoostMode+0x116>
 8002c88:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002c8c:	d014      	beq.n	8002cb8 <ADC_ConfigureBoostMode+0xd8>
 8002c8e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002c92:	d830      	bhi.n	8002cf6 <ADC_ConfigureBoostMode+0x116>
 8002c94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c98:	d00e      	beq.n	8002cb8 <ADC_ConfigureBoostMode+0xd8>
 8002c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c9e:	d82a      	bhi.n	8002cf6 <ADC_ConfigureBoostMode+0x116>
 8002ca0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ca4:	d008      	beq.n	8002cb8 <ADC_ConfigureBoostMode+0xd8>
 8002ca6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002caa:	d824      	bhi.n	8002cf6 <ADC_ConfigureBoostMode+0x116>
 8002cac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cb0:	d002      	beq.n	8002cb8 <ADC_ConfigureBoostMode+0xd8>
 8002cb2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002cb6:	d11e      	bne.n	8002cf6 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	0c9b      	lsrs	r3, r3, #18
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc6:	60fb      	str	r3, [r7, #12]
        break;
 8002cc8:	e016      	b.n	8002cf8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	091b      	lsrs	r3, r3, #4
 8002cce:	60fb      	str	r3, [r7, #12]
        break;
 8002cd0:	e012      	b.n	8002cf8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	60fb      	str	r3, [r7, #12]
        break;
 8002cd8:	e00e      	b.n	8002cf8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	60fb      	str	r3, [r7, #12]
        break;
 8002ce0:	e00a      	b.n	8002cf8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	09db      	lsrs	r3, r3, #7
 8002ce6:	60fb      	str	r3, [r7, #12]
        break;
 8002ce8:	e006      	b.n	8002cf8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	0a1b      	lsrs	r3, r3, #8
 8002cee:	60fb      	str	r3, [r7, #12]
        break;
 8002cf0:	e002      	b.n	8002cf8 <ADC_ConfigureBoostMode+0x118>
        break;
 8002cf2:	bf00      	nop
 8002cf4:	e000      	b.n	8002cf8 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002cf6:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	085b      	lsrs	r3, r3, #1
 8002cfc:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <ADC_ConfigureBoostMode+0x190>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d808      	bhi.n	8002d18 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d14:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002d16:	e025      	b.n	8002d64 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4a16      	ldr	r2, [pc, #88]	; (8002d74 <ADC_ConfigureBoostMode+0x194>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d80a      	bhi.n	8002d36 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d32:	609a      	str	r2, [r3, #8]
}
 8002d34:	e016      	b.n	8002d64 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4a0f      	ldr	r2, [pc, #60]	; (8002d78 <ADC_ConfigureBoostMode+0x198>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d80a      	bhi.n	8002d54 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d50:	609a      	str	r2, [r3, #8]
}
 8002d52:	e007      	b.n	8002d64 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002d62:	609a      	str	r2, [r3, #8]
}
 8002d64:	bf00      	nop
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40022300 	.word	0x40022300
 8002d70:	005f5e10 	.word	0x005f5e10
 8002d74:	00bebc20 	.word	0x00bebc20
 8002d78:	017d7840 	.word	0x017d7840

08002d7c <LL_ADC_IsEnabled>:
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <LL_ADC_IsEnabled+0x18>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <LL_ADC_IsEnabled+0x1a>
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d101      	bne.n	8002dba <LL_ADC_REG_IsConversionOngoing+0x18>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b09f      	sub	sp, #124	; 0x7c
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e080      	b.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002dee:	2300      	movs	r3, #0
 8002df0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002df2:	2300      	movs	r3, #0
 8002df4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a3d      	ldr	r2, [pc, #244]	; (8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d102      	bne.n	8002e06 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e00:	4b3c      	ldr	r3, [pc, #240]	; (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	e001      	b.n	8002e0a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10b      	bne.n	8002e28 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e14:	f043 0220 	orr.w	r2, r3, #32
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e05f      	b.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff ffb9 	bl	8002da2 <LL_ADC_REG_IsConversionOngoing>
 8002e30:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff ffb3 	bl	8002da2 <LL_ADC_REG_IsConversionOngoing>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d141      	bne.n	8002ec6 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d13e      	bne.n	8002ec6 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e48:	4b2b      	ldr	r3, [pc, #172]	; (8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002e4a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d020      	beq.n	8002e96 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e64:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e66:	4822      	ldr	r0, [pc, #136]	; (8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002e68:	f7ff ff88 	bl	8002d7c <LL_ADC_IsEnabled>
 8002e6c:	4604      	mov	r4, r0
 8002e6e:	4821      	ldr	r0, [pc, #132]	; (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002e70:	f7ff ff84 	bl	8002d7c <LL_ADC_IsEnabled>
 8002e74:	4603      	mov	r3, r0
 8002e76:	4323      	orrs	r3, r4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d12e      	bne.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	4b1e      	ldr	r3, [pc, #120]	; (8002efc <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	6811      	ldr	r1, [r2, #0]
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	6892      	ldr	r2, [r2, #8]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e92:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e94:	e021      	b.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ea2:	4813      	ldr	r0, [pc, #76]	; (8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002ea4:	f7ff ff6a 	bl	8002d7c <LL_ADC_IsEnabled>
 8002ea8:	4604      	mov	r4, r0
 8002eaa:	4812      	ldr	r0, [pc, #72]	; (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002eac:	f7ff ff66 	bl	8002d7c <LL_ADC_IsEnabled>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	4323      	orrs	r3, r4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d110      	bne.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ec2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ec4:	e009      	b.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eca:	f043 0220 	orr.w	r2, r3, #32
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ed8:	e000      	b.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eda:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ee4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	377c      	adds	r7, #124	; 0x7c
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd90      	pop	{r4, r7, pc}
 8002ef0:	40022000 	.word	0x40022000
 8002ef4:	40022100 	.word	0x40022100
 8002ef8:	40022300 	.word	0x40022300
 8002efc:	fffff0e0 	.word	0xfffff0e0

08002f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <__NVIC_SetPriorityGrouping+0x40>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <__NVIC_SetPriorityGrouping+0x44>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f2e:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <__NVIC_SetPriorityGrouping+0x40>)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	60d3      	str	r3, [r2, #12]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000ed00 	.word	0xe000ed00
 8002f44:	05fa0000 	.word	0x05fa0000

08002f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f4c:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <__NVIC_GetPriorityGrouping+0x18>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	0a1b      	lsrs	r3, r3, #8
 8002f52:	f003 0307 	and.w	r3, r3, #7
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	db0b      	blt.n	8002f8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f76:	88fb      	ldrh	r3, [r7, #6]
 8002f78:	f003 021f 	and.w	r2, r3, #31
 8002f7c:	4907      	ldr	r1, [pc, #28]	; (8002f9c <__NVIC_EnableIRQ+0x38>)
 8002f7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	2001      	movs	r0, #1
 8002f86:	fa00 f202 	lsl.w	r2, r0, r2
 8002f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	e000e100 	.word	0xe000e100

08002fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	6039      	str	r1, [r7, #0]
 8002faa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	db0a      	blt.n	8002fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	490c      	ldr	r1, [pc, #48]	; (8002fec <__NVIC_SetPriority+0x4c>)
 8002fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fbe:	0112      	lsls	r2, r2, #4
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc8:	e00a      	b.n	8002fe0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	4908      	ldr	r1, [pc, #32]	; (8002ff0 <__NVIC_SetPriority+0x50>)
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	3b04      	subs	r3, #4
 8002fd8:	0112      	lsls	r2, r2, #4
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	440b      	add	r3, r1
 8002fde:	761a      	strb	r2, [r3, #24]
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000e100 	.word	0xe000e100
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	; 0x24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f1c3 0307 	rsb	r3, r3, #7
 800300e:	2b04      	cmp	r3, #4
 8003010:	bf28      	it	cs
 8003012:	2304      	movcs	r3, #4
 8003014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3304      	adds	r3, #4
 800301a:	2b06      	cmp	r3, #6
 800301c:	d902      	bls.n	8003024 <NVIC_EncodePriority+0x30>
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3b03      	subs	r3, #3
 8003022:	e000      	b.n	8003026 <NVIC_EncodePriority+0x32>
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003028:	f04f 32ff 	mov.w	r2, #4294967295
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43da      	mvns	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	401a      	ands	r2, r3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800303c:	f04f 31ff 	mov.w	r1, #4294967295
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	fa01 f303 	lsl.w	r3, r1, r3
 8003046:	43d9      	mvns	r1, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800304c:	4313      	orrs	r3, r2
         );
}
 800304e:	4618      	mov	r0, r3
 8003050:	3724      	adds	r7, #36	; 0x24
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff ff4c 	bl	8002f00 <__NVIC_SetPriorityGrouping>
}
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800307e:	f7ff ff63 	bl	8002f48 <__NVIC_GetPriorityGrouping>
 8003082:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	68b9      	ldr	r1, [r7, #8]
 8003088:	6978      	ldr	r0, [r7, #20]
 800308a:	f7ff ffb3 	bl	8002ff4 <NVIC_EncodePriority>
 800308e:	4602      	mov	r2, r0
 8003090:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003094:	4611      	mov	r1, r2
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff ff82 	bl	8002fa0 <__NVIC_SetPriority>
}
 800309c:	bf00      	nop
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff ff56 	bl	8002f64 <__NVIC_EnableIRQ>
}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80030c8:	f7fe fbb0 	bl	800182c <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e37f      	b.n	80037d8 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a66      	ldr	r2, [pc, #408]	; (8003278 <HAL_DMA_Init+0x1b8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d04a      	beq.n	8003178 <HAL_DMA_Init+0xb8>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a65      	ldr	r2, [pc, #404]	; (800327c <HAL_DMA_Init+0x1bc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d045      	beq.n	8003178 <HAL_DMA_Init+0xb8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a63      	ldr	r2, [pc, #396]	; (8003280 <HAL_DMA_Init+0x1c0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d040      	beq.n	8003178 <HAL_DMA_Init+0xb8>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a62      	ldr	r2, [pc, #392]	; (8003284 <HAL_DMA_Init+0x1c4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d03b      	beq.n	8003178 <HAL_DMA_Init+0xb8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a60      	ldr	r2, [pc, #384]	; (8003288 <HAL_DMA_Init+0x1c8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d036      	beq.n	8003178 <HAL_DMA_Init+0xb8>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a5f      	ldr	r2, [pc, #380]	; (800328c <HAL_DMA_Init+0x1cc>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d031      	beq.n	8003178 <HAL_DMA_Init+0xb8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a5d      	ldr	r2, [pc, #372]	; (8003290 <HAL_DMA_Init+0x1d0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d02c      	beq.n	8003178 <HAL_DMA_Init+0xb8>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a5c      	ldr	r2, [pc, #368]	; (8003294 <HAL_DMA_Init+0x1d4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d027      	beq.n	8003178 <HAL_DMA_Init+0xb8>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a5a      	ldr	r2, [pc, #360]	; (8003298 <HAL_DMA_Init+0x1d8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d022      	beq.n	8003178 <HAL_DMA_Init+0xb8>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a59      	ldr	r2, [pc, #356]	; (800329c <HAL_DMA_Init+0x1dc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d01d      	beq.n	8003178 <HAL_DMA_Init+0xb8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a57      	ldr	r2, [pc, #348]	; (80032a0 <HAL_DMA_Init+0x1e0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d018      	beq.n	8003178 <HAL_DMA_Init+0xb8>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a56      	ldr	r2, [pc, #344]	; (80032a4 <HAL_DMA_Init+0x1e4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d013      	beq.n	8003178 <HAL_DMA_Init+0xb8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a54      	ldr	r2, [pc, #336]	; (80032a8 <HAL_DMA_Init+0x1e8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00e      	beq.n	8003178 <HAL_DMA_Init+0xb8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a53      	ldr	r2, [pc, #332]	; (80032ac <HAL_DMA_Init+0x1ec>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d009      	beq.n	8003178 <HAL_DMA_Init+0xb8>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a51      	ldr	r2, [pc, #324]	; (80032b0 <HAL_DMA_Init+0x1f0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d004      	beq.n	8003178 <HAL_DMA_Init+0xb8>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a50      	ldr	r2, [pc, #320]	; (80032b4 <HAL_DMA_Init+0x1f4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d101      	bne.n	800317c <HAL_DMA_Init+0xbc>
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <HAL_DMA_Init+0xbe>
 800317c:	2300      	movs	r3, #0
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 813c 	beq.w	80033fc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a37      	ldr	r2, [pc, #220]	; (8003278 <HAL_DMA_Init+0x1b8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d04a      	beq.n	8003234 <HAL_DMA_Init+0x174>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a36      	ldr	r2, [pc, #216]	; (800327c <HAL_DMA_Init+0x1bc>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d045      	beq.n	8003234 <HAL_DMA_Init+0x174>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a34      	ldr	r2, [pc, #208]	; (8003280 <HAL_DMA_Init+0x1c0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d040      	beq.n	8003234 <HAL_DMA_Init+0x174>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a33      	ldr	r2, [pc, #204]	; (8003284 <HAL_DMA_Init+0x1c4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d03b      	beq.n	8003234 <HAL_DMA_Init+0x174>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a31      	ldr	r2, [pc, #196]	; (8003288 <HAL_DMA_Init+0x1c8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d036      	beq.n	8003234 <HAL_DMA_Init+0x174>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a30      	ldr	r2, [pc, #192]	; (800328c <HAL_DMA_Init+0x1cc>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d031      	beq.n	8003234 <HAL_DMA_Init+0x174>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a2e      	ldr	r2, [pc, #184]	; (8003290 <HAL_DMA_Init+0x1d0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d02c      	beq.n	8003234 <HAL_DMA_Init+0x174>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a2d      	ldr	r2, [pc, #180]	; (8003294 <HAL_DMA_Init+0x1d4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d027      	beq.n	8003234 <HAL_DMA_Init+0x174>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a2b      	ldr	r2, [pc, #172]	; (8003298 <HAL_DMA_Init+0x1d8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d022      	beq.n	8003234 <HAL_DMA_Init+0x174>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a2a      	ldr	r2, [pc, #168]	; (800329c <HAL_DMA_Init+0x1dc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d01d      	beq.n	8003234 <HAL_DMA_Init+0x174>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a28      	ldr	r2, [pc, #160]	; (80032a0 <HAL_DMA_Init+0x1e0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d018      	beq.n	8003234 <HAL_DMA_Init+0x174>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a27      	ldr	r2, [pc, #156]	; (80032a4 <HAL_DMA_Init+0x1e4>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d013      	beq.n	8003234 <HAL_DMA_Init+0x174>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a25      	ldr	r2, [pc, #148]	; (80032a8 <HAL_DMA_Init+0x1e8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00e      	beq.n	8003234 <HAL_DMA_Init+0x174>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a24      	ldr	r2, [pc, #144]	; (80032ac <HAL_DMA_Init+0x1ec>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d009      	beq.n	8003234 <HAL_DMA_Init+0x174>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a22      	ldr	r2, [pc, #136]	; (80032b0 <HAL_DMA_Init+0x1f0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d004      	beq.n	8003234 <HAL_DMA_Init+0x174>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a21      	ldr	r2, [pc, #132]	; (80032b4 <HAL_DMA_Init+0x1f4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d108      	bne.n	8003246 <HAL_DMA_Init+0x186>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	e007      	b.n	8003256 <HAL_DMA_Init+0x196>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0201 	bic.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003256:	e02f      	b.n	80032b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003258:	f7fe fae8 	bl	800182c <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b05      	cmp	r3, #5
 8003264:	d928      	bls.n	80032b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2220      	movs	r2, #32
 800326a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2203      	movs	r2, #3
 8003270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e2af      	b.n	80037d8 <HAL_DMA_Init+0x718>
 8003278:	40020010 	.word	0x40020010
 800327c:	40020028 	.word	0x40020028
 8003280:	40020040 	.word	0x40020040
 8003284:	40020058 	.word	0x40020058
 8003288:	40020070 	.word	0x40020070
 800328c:	40020088 	.word	0x40020088
 8003290:	400200a0 	.word	0x400200a0
 8003294:	400200b8 	.word	0x400200b8
 8003298:	40020410 	.word	0x40020410
 800329c:	40020428 	.word	0x40020428
 80032a0:	40020440 	.word	0x40020440
 80032a4:	40020458 	.word	0x40020458
 80032a8:	40020470 	.word	0x40020470
 80032ac:	40020488 	.word	0x40020488
 80032b0:	400204a0 	.word	0x400204a0
 80032b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1c8      	bne.n	8003258 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4b73      	ldr	r3, [pc, #460]	; (80034a0 <HAL_DMA_Init+0x3e0>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80032de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	2b04      	cmp	r3, #4
 800330a:	d107      	bne.n	800331c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	4313      	orrs	r3, r2
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b28      	cmp	r3, #40	; 0x28
 8003322:	d903      	bls.n	800332c <HAL_DMA_Init+0x26c>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b2e      	cmp	r3, #46	; 0x2e
 800332a:	d91f      	bls.n	800336c <HAL_DMA_Init+0x2ac>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b3e      	cmp	r3, #62	; 0x3e
 8003332:	d903      	bls.n	800333c <HAL_DMA_Init+0x27c>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b42      	cmp	r3, #66	; 0x42
 800333a:	d917      	bls.n	800336c <HAL_DMA_Init+0x2ac>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b46      	cmp	r3, #70	; 0x46
 8003342:	d903      	bls.n	800334c <HAL_DMA_Init+0x28c>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b48      	cmp	r3, #72	; 0x48
 800334a:	d90f      	bls.n	800336c <HAL_DMA_Init+0x2ac>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b4e      	cmp	r3, #78	; 0x4e
 8003352:	d903      	bls.n	800335c <HAL_DMA_Init+0x29c>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2b52      	cmp	r3, #82	; 0x52
 800335a:	d907      	bls.n	800336c <HAL_DMA_Init+0x2ac>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b73      	cmp	r3, #115	; 0x73
 8003362:	d905      	bls.n	8003370 <HAL_DMA_Init+0x2b0>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b77      	cmp	r3, #119	; 0x77
 800336a:	d801      	bhi.n	8003370 <HAL_DMA_Init+0x2b0>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <HAL_DMA_Init+0x2b2>
 8003370:	2300      	movs	r3, #0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800337c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f023 0307 	bic.w	r3, r3, #7
 8003394:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	4313      	orrs	r3, r2
 800339e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d117      	bne.n	80033d8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00e      	beq.n	80033d8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f002 f990 	bl	80056e0 <DMA_CheckFifoParam>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2240      	movs	r2, #64	; 0x40
 80033ca:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e1ff      	b.n	80037d8 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f002 f8cb 	bl	800557c <DMA_CalcBaseAndBitshift>
 80033e6:	4603      	mov	r3, r0
 80033e8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	223f      	movs	r2, #63	; 0x3f
 80033f4:	409a      	lsls	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	609a      	str	r2, [r3, #8]
 80033fa:	e0fe      	b.n	80035fa <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a28      	ldr	r2, [pc, #160]	; (80034a4 <HAL_DMA_Init+0x3e4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d04a      	beq.n	800349c <HAL_DMA_Init+0x3dc>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a27      	ldr	r2, [pc, #156]	; (80034a8 <HAL_DMA_Init+0x3e8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d045      	beq.n	800349c <HAL_DMA_Init+0x3dc>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a25      	ldr	r2, [pc, #148]	; (80034ac <HAL_DMA_Init+0x3ec>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d040      	beq.n	800349c <HAL_DMA_Init+0x3dc>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a24      	ldr	r2, [pc, #144]	; (80034b0 <HAL_DMA_Init+0x3f0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d03b      	beq.n	800349c <HAL_DMA_Init+0x3dc>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a22      	ldr	r2, [pc, #136]	; (80034b4 <HAL_DMA_Init+0x3f4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d036      	beq.n	800349c <HAL_DMA_Init+0x3dc>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a21      	ldr	r2, [pc, #132]	; (80034b8 <HAL_DMA_Init+0x3f8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d031      	beq.n	800349c <HAL_DMA_Init+0x3dc>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a1f      	ldr	r2, [pc, #124]	; (80034bc <HAL_DMA_Init+0x3fc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d02c      	beq.n	800349c <HAL_DMA_Init+0x3dc>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a1e      	ldr	r2, [pc, #120]	; (80034c0 <HAL_DMA_Init+0x400>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d027      	beq.n	800349c <HAL_DMA_Init+0x3dc>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1c      	ldr	r2, [pc, #112]	; (80034c4 <HAL_DMA_Init+0x404>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d022      	beq.n	800349c <HAL_DMA_Init+0x3dc>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1b      	ldr	r2, [pc, #108]	; (80034c8 <HAL_DMA_Init+0x408>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d01d      	beq.n	800349c <HAL_DMA_Init+0x3dc>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a19      	ldr	r2, [pc, #100]	; (80034cc <HAL_DMA_Init+0x40c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d018      	beq.n	800349c <HAL_DMA_Init+0x3dc>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a18      	ldr	r2, [pc, #96]	; (80034d0 <HAL_DMA_Init+0x410>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d013      	beq.n	800349c <HAL_DMA_Init+0x3dc>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a16      	ldr	r2, [pc, #88]	; (80034d4 <HAL_DMA_Init+0x414>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00e      	beq.n	800349c <HAL_DMA_Init+0x3dc>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a15      	ldr	r2, [pc, #84]	; (80034d8 <HAL_DMA_Init+0x418>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d009      	beq.n	800349c <HAL_DMA_Init+0x3dc>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a13      	ldr	r2, [pc, #76]	; (80034dc <HAL_DMA_Init+0x41c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <HAL_DMA_Init+0x3dc>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a12      	ldr	r2, [pc, #72]	; (80034e0 <HAL_DMA_Init+0x420>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d123      	bne.n	80034e4 <HAL_DMA_Init+0x424>
 800349c:	2301      	movs	r3, #1
 800349e:	e022      	b.n	80034e6 <HAL_DMA_Init+0x426>
 80034a0:	fe10803f 	.word	0xfe10803f
 80034a4:	48022c08 	.word	0x48022c08
 80034a8:	48022c1c 	.word	0x48022c1c
 80034ac:	48022c30 	.word	0x48022c30
 80034b0:	48022c44 	.word	0x48022c44
 80034b4:	48022c58 	.word	0x48022c58
 80034b8:	48022c6c 	.word	0x48022c6c
 80034bc:	48022c80 	.word	0x48022c80
 80034c0:	48022c94 	.word	0x48022c94
 80034c4:	58025408 	.word	0x58025408
 80034c8:	5802541c 	.word	0x5802541c
 80034cc:	58025430 	.word	0x58025430
 80034d0:	58025444 	.word	0x58025444
 80034d4:	58025458 	.word	0x58025458
 80034d8:	5802546c 	.word	0x5802546c
 80034dc:	58025480 	.word	0x58025480
 80034e0:	58025494 	.word	0x58025494
 80034e4:	2300      	movs	r3, #0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d07e      	beq.n	80035e8 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a80      	ldr	r2, [pc, #512]	; (80036f0 <HAL_DMA_Init+0x630>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d021      	beq.n	8003538 <HAL_DMA_Init+0x478>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a7e      	ldr	r2, [pc, #504]	; (80036f4 <HAL_DMA_Init+0x634>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d01c      	beq.n	8003538 <HAL_DMA_Init+0x478>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a7d      	ldr	r2, [pc, #500]	; (80036f8 <HAL_DMA_Init+0x638>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d017      	beq.n	8003538 <HAL_DMA_Init+0x478>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a7b      	ldr	r2, [pc, #492]	; (80036fc <HAL_DMA_Init+0x63c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d012      	beq.n	8003538 <HAL_DMA_Init+0x478>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a7a      	ldr	r2, [pc, #488]	; (8003700 <HAL_DMA_Init+0x640>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00d      	beq.n	8003538 <HAL_DMA_Init+0x478>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a78      	ldr	r2, [pc, #480]	; (8003704 <HAL_DMA_Init+0x644>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d008      	beq.n	8003538 <HAL_DMA_Init+0x478>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a77      	ldr	r2, [pc, #476]	; (8003708 <HAL_DMA_Init+0x648>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d003      	beq.n	8003538 <HAL_DMA_Init+0x478>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a75      	ldr	r2, [pc, #468]	; (800370c <HAL_DMA_Init+0x64c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2202      	movs	r2, #2
 800353e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4b6e      	ldr	r3, [pc, #440]	; (8003710 <HAL_DMA_Init+0x650>)
 8003556:	4013      	ands	r3, r2
 8003558:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2b40      	cmp	r3, #64	; 0x40
 8003560:	d008      	beq.n	8003574 <HAL_DMA_Init+0x4b4>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2b80      	cmp	r3, #128	; 0x80
 8003568:	d102      	bne.n	8003570 <HAL_DMA_Init+0x4b0>
 800356a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800356e:	e002      	b.n	8003576 <HAL_DMA_Init+0x4b6>
 8003570:	2300      	movs	r3, #0
 8003572:	e000      	b.n	8003576 <HAL_DMA_Init+0x4b6>
 8003574:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68d2      	ldr	r2, [r2, #12]
 800357a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800357c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003584:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800358c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003594:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800359c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	461a      	mov	r2, r3
 80035ba:	4b56      	ldr	r3, [pc, #344]	; (8003714 <HAL_DMA_Init+0x654>)
 80035bc:	4413      	add	r3, r2
 80035be:	4a56      	ldr	r2, [pc, #344]	; (8003718 <HAL_DMA_Init+0x658>)
 80035c0:	fba2 2303 	umull	r2, r3, r2, r3
 80035c4:	091b      	lsrs	r3, r3, #4
 80035c6:	009a      	lsls	r2, r3, #2
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f001 ffd5 	bl	800557c <DMA_CalcBaseAndBitshift>
 80035d2:	4603      	mov	r3, r0
 80035d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035da:	f003 031f 	and.w	r3, r3, #31
 80035de:	2201      	movs	r2, #1
 80035e0:	409a      	lsls	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	e008      	b.n	80035fa <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2240      	movs	r2, #64	; 0x40
 80035ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2203      	movs	r2, #3
 80035f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e0ee      	b.n	80037d8 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a47      	ldr	r2, [pc, #284]	; (800371c <HAL_DMA_Init+0x65c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d072      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a45      	ldr	r2, [pc, #276]	; (8003720 <HAL_DMA_Init+0x660>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d06d      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a44      	ldr	r2, [pc, #272]	; (8003724 <HAL_DMA_Init+0x664>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d068      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a42      	ldr	r2, [pc, #264]	; (8003728 <HAL_DMA_Init+0x668>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d063      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a41      	ldr	r2, [pc, #260]	; (800372c <HAL_DMA_Init+0x66c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d05e      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a3f      	ldr	r2, [pc, #252]	; (8003730 <HAL_DMA_Init+0x670>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d059      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a3e      	ldr	r2, [pc, #248]	; (8003734 <HAL_DMA_Init+0x674>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d054      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a3c      	ldr	r2, [pc, #240]	; (8003738 <HAL_DMA_Init+0x678>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d04f      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a3b      	ldr	r2, [pc, #236]	; (800373c <HAL_DMA_Init+0x67c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d04a      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a39      	ldr	r2, [pc, #228]	; (8003740 <HAL_DMA_Init+0x680>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d045      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a38      	ldr	r2, [pc, #224]	; (8003744 <HAL_DMA_Init+0x684>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d040      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a36      	ldr	r2, [pc, #216]	; (8003748 <HAL_DMA_Init+0x688>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d03b      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a35      	ldr	r2, [pc, #212]	; (800374c <HAL_DMA_Init+0x68c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d036      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a33      	ldr	r2, [pc, #204]	; (8003750 <HAL_DMA_Init+0x690>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d031      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a32      	ldr	r2, [pc, #200]	; (8003754 <HAL_DMA_Init+0x694>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d02c      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a30      	ldr	r2, [pc, #192]	; (8003758 <HAL_DMA_Init+0x698>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d027      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a14      	ldr	r2, [pc, #80]	; (80036f0 <HAL_DMA_Init+0x630>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d022      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a12      	ldr	r2, [pc, #72]	; (80036f4 <HAL_DMA_Init+0x634>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d01d      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a11      	ldr	r2, [pc, #68]	; (80036f8 <HAL_DMA_Init+0x638>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d018      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a0f      	ldr	r2, [pc, #60]	; (80036fc <HAL_DMA_Init+0x63c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a0e      	ldr	r2, [pc, #56]	; (8003700 <HAL_DMA_Init+0x640>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00e      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a0c      	ldr	r2, [pc, #48]	; (8003704 <HAL_DMA_Init+0x644>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d009      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a0b      	ldr	r2, [pc, #44]	; (8003708 <HAL_DMA_Init+0x648>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d004      	beq.n	80036ea <HAL_DMA_Init+0x62a>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a09      	ldr	r2, [pc, #36]	; (800370c <HAL_DMA_Init+0x64c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d138      	bne.n	800375c <HAL_DMA_Init+0x69c>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e037      	b.n	800375e <HAL_DMA_Init+0x69e>
 80036ee:	bf00      	nop
 80036f0:	58025408 	.word	0x58025408
 80036f4:	5802541c 	.word	0x5802541c
 80036f8:	58025430 	.word	0x58025430
 80036fc:	58025444 	.word	0x58025444
 8003700:	58025458 	.word	0x58025458
 8003704:	5802546c 	.word	0x5802546c
 8003708:	58025480 	.word	0x58025480
 800370c:	58025494 	.word	0x58025494
 8003710:	fffe000f 	.word	0xfffe000f
 8003714:	a7fdabf8 	.word	0xa7fdabf8
 8003718:	cccccccd 	.word	0xcccccccd
 800371c:	40020010 	.word	0x40020010
 8003720:	40020028 	.word	0x40020028
 8003724:	40020040 	.word	0x40020040
 8003728:	40020058 	.word	0x40020058
 800372c:	40020070 	.word	0x40020070
 8003730:	40020088 	.word	0x40020088
 8003734:	400200a0 	.word	0x400200a0
 8003738:	400200b8 	.word	0x400200b8
 800373c:	40020410 	.word	0x40020410
 8003740:	40020428 	.word	0x40020428
 8003744:	40020440 	.word	0x40020440
 8003748:	40020458 	.word	0x40020458
 800374c:	40020470 	.word	0x40020470
 8003750:	40020488 	.word	0x40020488
 8003754:	400204a0 	.word	0x400204a0
 8003758:	400204b8 	.word	0x400204b8
 800375c:	2300      	movs	r3, #0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d032      	beq.n	80037c8 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f002 f838 	bl	80057d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b80      	cmp	r3, #128	; 0x80
 800376e:	d102      	bne.n	8003776 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800378a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d010      	beq.n	80037b6 <HAL_DMA_Init+0x6f6>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b08      	cmp	r3, #8
 800379a:	d80c      	bhi.n	80037b6 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f002 f8b5 	bl	800590c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037b2:	605a      	str	r2, [r3, #4]
 80037b4:	e008      	b.n	80037c8 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e226      	b.n	8003c4a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_DMA_Start_IT+0x2a>
 8003806:	2302      	movs	r3, #2
 8003808:	e21f      	b.n	8003c4a <HAL_DMA_Start_IT+0x46a>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b01      	cmp	r3, #1
 800381c:	f040 820a 	bne.w	8003c34 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a68      	ldr	r2, [pc, #416]	; (80039d4 <HAL_DMA_Start_IT+0x1f4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d04a      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a66      	ldr	r2, [pc, #408]	; (80039d8 <HAL_DMA_Start_IT+0x1f8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d045      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a65      	ldr	r2, [pc, #404]	; (80039dc <HAL_DMA_Start_IT+0x1fc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d040      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a63      	ldr	r2, [pc, #396]	; (80039e0 <HAL_DMA_Start_IT+0x200>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d03b      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a62      	ldr	r2, [pc, #392]	; (80039e4 <HAL_DMA_Start_IT+0x204>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d036      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a60      	ldr	r2, [pc, #384]	; (80039e8 <HAL_DMA_Start_IT+0x208>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d031      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a5f      	ldr	r2, [pc, #380]	; (80039ec <HAL_DMA_Start_IT+0x20c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d02c      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a5d      	ldr	r2, [pc, #372]	; (80039f0 <HAL_DMA_Start_IT+0x210>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d027      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a5c      	ldr	r2, [pc, #368]	; (80039f4 <HAL_DMA_Start_IT+0x214>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d022      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a5a      	ldr	r2, [pc, #360]	; (80039f8 <HAL_DMA_Start_IT+0x218>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d01d      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a59      	ldr	r2, [pc, #356]	; (80039fc <HAL_DMA_Start_IT+0x21c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d018      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a57      	ldr	r2, [pc, #348]	; (8003a00 <HAL_DMA_Start_IT+0x220>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d013      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a56      	ldr	r2, [pc, #344]	; (8003a04 <HAL_DMA_Start_IT+0x224>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d00e      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a54      	ldr	r2, [pc, #336]	; (8003a08 <HAL_DMA_Start_IT+0x228>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d009      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a53      	ldr	r2, [pc, #332]	; (8003a0c <HAL_DMA_Start_IT+0x22c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d004      	beq.n	80038ce <HAL_DMA_Start_IT+0xee>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a51      	ldr	r2, [pc, #324]	; (8003a10 <HAL_DMA_Start_IT+0x230>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d108      	bne.n	80038e0 <HAL_DMA_Start_IT+0x100>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	e007      	b.n	80038f0 <HAL_DMA_Start_IT+0x110>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0201 	bic.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f001 fc5c 	bl	80051b4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a34      	ldr	r2, [pc, #208]	; (80039d4 <HAL_DMA_Start_IT+0x1f4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d04a      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a33      	ldr	r2, [pc, #204]	; (80039d8 <HAL_DMA_Start_IT+0x1f8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d045      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a31      	ldr	r2, [pc, #196]	; (80039dc <HAL_DMA_Start_IT+0x1fc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d040      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a30      	ldr	r2, [pc, #192]	; (80039e0 <HAL_DMA_Start_IT+0x200>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d03b      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a2e      	ldr	r2, [pc, #184]	; (80039e4 <HAL_DMA_Start_IT+0x204>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d036      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a2d      	ldr	r2, [pc, #180]	; (80039e8 <HAL_DMA_Start_IT+0x208>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d031      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a2b      	ldr	r2, [pc, #172]	; (80039ec <HAL_DMA_Start_IT+0x20c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d02c      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a2a      	ldr	r2, [pc, #168]	; (80039f0 <HAL_DMA_Start_IT+0x210>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d027      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a28      	ldr	r2, [pc, #160]	; (80039f4 <HAL_DMA_Start_IT+0x214>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d022      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a27      	ldr	r2, [pc, #156]	; (80039f8 <HAL_DMA_Start_IT+0x218>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d01d      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a25      	ldr	r2, [pc, #148]	; (80039fc <HAL_DMA_Start_IT+0x21c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d018      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a24      	ldr	r2, [pc, #144]	; (8003a00 <HAL_DMA_Start_IT+0x220>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d013      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a22      	ldr	r2, [pc, #136]	; (8003a04 <HAL_DMA_Start_IT+0x224>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00e      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a21      	ldr	r2, [pc, #132]	; (8003a08 <HAL_DMA_Start_IT+0x228>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d009      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1f      	ldr	r2, [pc, #124]	; (8003a0c <HAL_DMA_Start_IT+0x22c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d004      	beq.n	800399c <HAL_DMA_Start_IT+0x1bc>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a1e      	ldr	r2, [pc, #120]	; (8003a10 <HAL_DMA_Start_IT+0x230>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d101      	bne.n	80039a0 <HAL_DMA_Start_IT+0x1c0>
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <HAL_DMA_Start_IT+0x1c2>
 80039a0:	2300      	movs	r3, #0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d036      	beq.n	8003a14 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f023 021e 	bic.w	r2, r3, #30
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f042 0216 	orr.w	r2, r2, #22
 80039b8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d03e      	beq.n	8003a40 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0208 	orr.w	r2, r2, #8
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	e035      	b.n	8003a40 <HAL_DMA_Start_IT+0x260>
 80039d4:	40020010 	.word	0x40020010
 80039d8:	40020028 	.word	0x40020028
 80039dc:	40020040 	.word	0x40020040
 80039e0:	40020058 	.word	0x40020058
 80039e4:	40020070 	.word	0x40020070
 80039e8:	40020088 	.word	0x40020088
 80039ec:	400200a0 	.word	0x400200a0
 80039f0:	400200b8 	.word	0x400200b8
 80039f4:	40020410 	.word	0x40020410
 80039f8:	40020428 	.word	0x40020428
 80039fc:	40020440 	.word	0x40020440
 8003a00:	40020458 	.word	0x40020458
 8003a04:	40020470 	.word	0x40020470
 8003a08:	40020488 	.word	0x40020488
 8003a0c:	400204a0 	.word	0x400204a0
 8003a10:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 020e 	bic.w	r2, r3, #14
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 020a 	orr.w	r2, r2, #10
 8003a26:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0204 	orr.w	r2, r2, #4
 8003a3e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a83      	ldr	r2, [pc, #524]	; (8003c54 <HAL_DMA_Start_IT+0x474>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d072      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a82      	ldr	r2, [pc, #520]	; (8003c58 <HAL_DMA_Start_IT+0x478>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d06d      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a80      	ldr	r2, [pc, #512]	; (8003c5c <HAL_DMA_Start_IT+0x47c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d068      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a7f      	ldr	r2, [pc, #508]	; (8003c60 <HAL_DMA_Start_IT+0x480>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d063      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a7d      	ldr	r2, [pc, #500]	; (8003c64 <HAL_DMA_Start_IT+0x484>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d05e      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a7c      	ldr	r2, [pc, #496]	; (8003c68 <HAL_DMA_Start_IT+0x488>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d059      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a7a      	ldr	r2, [pc, #488]	; (8003c6c <HAL_DMA_Start_IT+0x48c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d054      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a79      	ldr	r2, [pc, #484]	; (8003c70 <HAL_DMA_Start_IT+0x490>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d04f      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a77      	ldr	r2, [pc, #476]	; (8003c74 <HAL_DMA_Start_IT+0x494>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d04a      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a76      	ldr	r2, [pc, #472]	; (8003c78 <HAL_DMA_Start_IT+0x498>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d045      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a74      	ldr	r2, [pc, #464]	; (8003c7c <HAL_DMA_Start_IT+0x49c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d040      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a73      	ldr	r2, [pc, #460]	; (8003c80 <HAL_DMA_Start_IT+0x4a0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d03b      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a71      	ldr	r2, [pc, #452]	; (8003c84 <HAL_DMA_Start_IT+0x4a4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d036      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a70      	ldr	r2, [pc, #448]	; (8003c88 <HAL_DMA_Start_IT+0x4a8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d031      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a6e      	ldr	r2, [pc, #440]	; (8003c8c <HAL_DMA_Start_IT+0x4ac>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d02c      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a6d      	ldr	r2, [pc, #436]	; (8003c90 <HAL_DMA_Start_IT+0x4b0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d027      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a6b      	ldr	r2, [pc, #428]	; (8003c94 <HAL_DMA_Start_IT+0x4b4>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d022      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a6a      	ldr	r2, [pc, #424]	; (8003c98 <HAL_DMA_Start_IT+0x4b8>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d01d      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a68      	ldr	r2, [pc, #416]	; (8003c9c <HAL_DMA_Start_IT+0x4bc>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d018      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a67      	ldr	r2, [pc, #412]	; (8003ca0 <HAL_DMA_Start_IT+0x4c0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d013      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a65      	ldr	r2, [pc, #404]	; (8003ca4 <HAL_DMA_Start_IT+0x4c4>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00e      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a64      	ldr	r2, [pc, #400]	; (8003ca8 <HAL_DMA_Start_IT+0x4c8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d009      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a62      	ldr	r2, [pc, #392]	; (8003cac <HAL_DMA_Start_IT+0x4cc>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d004      	beq.n	8003b30 <HAL_DMA_Start_IT+0x350>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a61      	ldr	r2, [pc, #388]	; (8003cb0 <HAL_DMA_Start_IT+0x4d0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d101      	bne.n	8003b34 <HAL_DMA_Start_IT+0x354>
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <HAL_DMA_Start_IT+0x356>
 8003b34:	2300      	movs	r3, #0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d01a      	beq.n	8003b70 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d007      	beq.n	8003b58 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b56:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d007      	beq.n	8003b70 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b6e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a37      	ldr	r2, [pc, #220]	; (8003c54 <HAL_DMA_Start_IT+0x474>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d04a      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a36      	ldr	r2, [pc, #216]	; (8003c58 <HAL_DMA_Start_IT+0x478>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d045      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a34      	ldr	r2, [pc, #208]	; (8003c5c <HAL_DMA_Start_IT+0x47c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d040      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a33      	ldr	r2, [pc, #204]	; (8003c60 <HAL_DMA_Start_IT+0x480>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d03b      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a31      	ldr	r2, [pc, #196]	; (8003c64 <HAL_DMA_Start_IT+0x484>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d036      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a30      	ldr	r2, [pc, #192]	; (8003c68 <HAL_DMA_Start_IT+0x488>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d031      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a2e      	ldr	r2, [pc, #184]	; (8003c6c <HAL_DMA_Start_IT+0x48c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d02c      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a2d      	ldr	r2, [pc, #180]	; (8003c70 <HAL_DMA_Start_IT+0x490>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d027      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a2b      	ldr	r2, [pc, #172]	; (8003c74 <HAL_DMA_Start_IT+0x494>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d022      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a2a      	ldr	r2, [pc, #168]	; (8003c78 <HAL_DMA_Start_IT+0x498>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d01d      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a28      	ldr	r2, [pc, #160]	; (8003c7c <HAL_DMA_Start_IT+0x49c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d018      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a27      	ldr	r2, [pc, #156]	; (8003c80 <HAL_DMA_Start_IT+0x4a0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d013      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a25      	ldr	r2, [pc, #148]	; (8003c84 <HAL_DMA_Start_IT+0x4a4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d00e      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a24      	ldr	r2, [pc, #144]	; (8003c88 <HAL_DMA_Start_IT+0x4a8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d009      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a22      	ldr	r2, [pc, #136]	; (8003c8c <HAL_DMA_Start_IT+0x4ac>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d004      	beq.n	8003c10 <HAL_DMA_Start_IT+0x430>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a21      	ldr	r2, [pc, #132]	; (8003c90 <HAL_DMA_Start_IT+0x4b0>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d108      	bne.n	8003c22 <HAL_DMA_Start_IT+0x442>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0201 	orr.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	e012      	b.n	8003c48 <HAL_DMA_Start_IT+0x468>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0201 	orr.w	r2, r2, #1
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	e009      	b.n	8003c48 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40020010 	.word	0x40020010
 8003c58:	40020028 	.word	0x40020028
 8003c5c:	40020040 	.word	0x40020040
 8003c60:	40020058 	.word	0x40020058
 8003c64:	40020070 	.word	0x40020070
 8003c68:	40020088 	.word	0x40020088
 8003c6c:	400200a0 	.word	0x400200a0
 8003c70:	400200b8 	.word	0x400200b8
 8003c74:	40020410 	.word	0x40020410
 8003c78:	40020428 	.word	0x40020428
 8003c7c:	40020440 	.word	0x40020440
 8003c80:	40020458 	.word	0x40020458
 8003c84:	40020470 	.word	0x40020470
 8003c88:	40020488 	.word	0x40020488
 8003c8c:	400204a0 	.word	0x400204a0
 8003c90:	400204b8 	.word	0x400204b8
 8003c94:	58025408 	.word	0x58025408
 8003c98:	5802541c 	.word	0x5802541c
 8003c9c:	58025430 	.word	0x58025430
 8003ca0:	58025444 	.word	0x58025444
 8003ca4:	58025458 	.word	0x58025458
 8003ca8:	5802546c 	.word	0x5802546c
 8003cac:	58025480 	.word	0x58025480
 8003cb0:	58025494 	.word	0x58025494

08003cb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003cbc:	f7fd fdb6 	bl	800182c <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e2dc      	b.n	8004286 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d008      	beq.n	8003cea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2280      	movs	r2, #128	; 0x80
 8003cdc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e2cd      	b.n	8004286 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a76      	ldr	r2, [pc, #472]	; (8003ec8 <HAL_DMA_Abort+0x214>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d04a      	beq.n	8003d8a <HAL_DMA_Abort+0xd6>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a74      	ldr	r2, [pc, #464]	; (8003ecc <HAL_DMA_Abort+0x218>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d045      	beq.n	8003d8a <HAL_DMA_Abort+0xd6>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a73      	ldr	r2, [pc, #460]	; (8003ed0 <HAL_DMA_Abort+0x21c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d040      	beq.n	8003d8a <HAL_DMA_Abort+0xd6>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a71      	ldr	r2, [pc, #452]	; (8003ed4 <HAL_DMA_Abort+0x220>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d03b      	beq.n	8003d8a <HAL_DMA_Abort+0xd6>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a70      	ldr	r2, [pc, #448]	; (8003ed8 <HAL_DMA_Abort+0x224>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d036      	beq.n	8003d8a <HAL_DMA_Abort+0xd6>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a6e      	ldr	r2, [pc, #440]	; (8003edc <HAL_DMA_Abort+0x228>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d031      	beq.n	8003d8a <HAL_DMA_Abort+0xd6>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a6d      	ldr	r2, [pc, #436]	; (8003ee0 <HAL_DMA_Abort+0x22c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d02c      	beq.n	8003d8a <HAL_DMA_Abort+0xd6>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a6b      	ldr	r2, [pc, #428]	; (8003ee4 <HAL_DMA_Abort+0x230>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d027      	beq.n	8003d8a <HAL_DMA_Abort+0xd6>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a6a      	ldr	r2, [pc, #424]	; (8003ee8 <HAL_DMA_Abort+0x234>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d022      	beq.n	8003d8a <HAL_DMA_Abort+0xd6>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a68      	ldr	r2, [pc, #416]	; (8003eec <HAL_DMA_Abort+0x238>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d01d      	beq.n	8003d8a <HAL_DMA_Abort+0xd6>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a67      	ldr	r2, [pc, #412]	; (8003ef0 <HAL_DMA_Abort+0x23c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d018      	beq.n	8003d8a <HAL_DMA_Abort+0xd6>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a65      	ldr	r2, [pc, #404]	; (8003ef4 <HAL_DMA_Abort+0x240>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <HAL_DMA_Abort+0xd6>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a64      	ldr	r2, [pc, #400]	; (8003ef8 <HAL_DMA_Abort+0x244>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00e      	beq.n	8003d8a <HAL_DMA_Abort+0xd6>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a62      	ldr	r2, [pc, #392]	; (8003efc <HAL_DMA_Abort+0x248>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d009      	beq.n	8003d8a <HAL_DMA_Abort+0xd6>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a61      	ldr	r2, [pc, #388]	; (8003f00 <HAL_DMA_Abort+0x24c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d004      	beq.n	8003d8a <HAL_DMA_Abort+0xd6>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a5f      	ldr	r2, [pc, #380]	; (8003f04 <HAL_DMA_Abort+0x250>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d101      	bne.n	8003d8e <HAL_DMA_Abort+0xda>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <HAL_DMA_Abort+0xdc>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d013      	beq.n	8003dbc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 021e 	bic.w	r2, r2, #30
 8003da2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695a      	ldr	r2, [r3, #20]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003db2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	e00a      	b.n	8003dd2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 020e 	bic.w	r2, r2, #14
 8003dca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a3c      	ldr	r2, [pc, #240]	; (8003ec8 <HAL_DMA_Abort+0x214>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d072      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a3a      	ldr	r2, [pc, #232]	; (8003ecc <HAL_DMA_Abort+0x218>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d06d      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a39      	ldr	r2, [pc, #228]	; (8003ed0 <HAL_DMA_Abort+0x21c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d068      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a37      	ldr	r2, [pc, #220]	; (8003ed4 <HAL_DMA_Abort+0x220>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d063      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a36      	ldr	r2, [pc, #216]	; (8003ed8 <HAL_DMA_Abort+0x224>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d05e      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a34      	ldr	r2, [pc, #208]	; (8003edc <HAL_DMA_Abort+0x228>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d059      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a33      	ldr	r2, [pc, #204]	; (8003ee0 <HAL_DMA_Abort+0x22c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d054      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a31      	ldr	r2, [pc, #196]	; (8003ee4 <HAL_DMA_Abort+0x230>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d04f      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a30      	ldr	r2, [pc, #192]	; (8003ee8 <HAL_DMA_Abort+0x234>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d04a      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a2e      	ldr	r2, [pc, #184]	; (8003eec <HAL_DMA_Abort+0x238>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d045      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a2d      	ldr	r2, [pc, #180]	; (8003ef0 <HAL_DMA_Abort+0x23c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d040      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a2b      	ldr	r2, [pc, #172]	; (8003ef4 <HAL_DMA_Abort+0x240>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d03b      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a2a      	ldr	r2, [pc, #168]	; (8003ef8 <HAL_DMA_Abort+0x244>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d036      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a28      	ldr	r2, [pc, #160]	; (8003efc <HAL_DMA_Abort+0x248>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d031      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a27      	ldr	r2, [pc, #156]	; (8003f00 <HAL_DMA_Abort+0x24c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d02c      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a25      	ldr	r2, [pc, #148]	; (8003f04 <HAL_DMA_Abort+0x250>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d027      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a24      	ldr	r2, [pc, #144]	; (8003f08 <HAL_DMA_Abort+0x254>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d022      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a22      	ldr	r2, [pc, #136]	; (8003f0c <HAL_DMA_Abort+0x258>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d01d      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a21      	ldr	r2, [pc, #132]	; (8003f10 <HAL_DMA_Abort+0x25c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d018      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1f      	ldr	r2, [pc, #124]	; (8003f14 <HAL_DMA_Abort+0x260>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d013      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1e      	ldr	r2, [pc, #120]	; (8003f18 <HAL_DMA_Abort+0x264>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00e      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a1c      	ldr	r2, [pc, #112]	; (8003f1c <HAL_DMA_Abort+0x268>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d009      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1b      	ldr	r2, [pc, #108]	; (8003f20 <HAL_DMA_Abort+0x26c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d004      	beq.n	8003ec2 <HAL_DMA_Abort+0x20e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a19      	ldr	r2, [pc, #100]	; (8003f24 <HAL_DMA_Abort+0x270>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d132      	bne.n	8003f28 <HAL_DMA_Abort+0x274>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e031      	b.n	8003f2a <HAL_DMA_Abort+0x276>
 8003ec6:	bf00      	nop
 8003ec8:	40020010 	.word	0x40020010
 8003ecc:	40020028 	.word	0x40020028
 8003ed0:	40020040 	.word	0x40020040
 8003ed4:	40020058 	.word	0x40020058
 8003ed8:	40020070 	.word	0x40020070
 8003edc:	40020088 	.word	0x40020088
 8003ee0:	400200a0 	.word	0x400200a0
 8003ee4:	400200b8 	.word	0x400200b8
 8003ee8:	40020410 	.word	0x40020410
 8003eec:	40020428 	.word	0x40020428
 8003ef0:	40020440 	.word	0x40020440
 8003ef4:	40020458 	.word	0x40020458
 8003ef8:	40020470 	.word	0x40020470
 8003efc:	40020488 	.word	0x40020488
 8003f00:	400204a0 	.word	0x400204a0
 8003f04:	400204b8 	.word	0x400204b8
 8003f08:	58025408 	.word	0x58025408
 8003f0c:	5802541c 	.word	0x5802541c
 8003f10:	58025430 	.word	0x58025430
 8003f14:	58025444 	.word	0x58025444
 8003f18:	58025458 	.word	0x58025458
 8003f1c:	5802546c 	.word	0x5802546c
 8003f20:	58025480 	.word	0x58025480
 8003f24:	58025494 	.word	0x58025494
 8003f28:	2300      	movs	r3, #0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d007      	beq.n	8003f3e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a6d      	ldr	r2, [pc, #436]	; (80040f8 <HAL_DMA_Abort+0x444>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d04a      	beq.n	8003fde <HAL_DMA_Abort+0x32a>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a6b      	ldr	r2, [pc, #428]	; (80040fc <HAL_DMA_Abort+0x448>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d045      	beq.n	8003fde <HAL_DMA_Abort+0x32a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a6a      	ldr	r2, [pc, #424]	; (8004100 <HAL_DMA_Abort+0x44c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d040      	beq.n	8003fde <HAL_DMA_Abort+0x32a>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a68      	ldr	r2, [pc, #416]	; (8004104 <HAL_DMA_Abort+0x450>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d03b      	beq.n	8003fde <HAL_DMA_Abort+0x32a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a67      	ldr	r2, [pc, #412]	; (8004108 <HAL_DMA_Abort+0x454>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d036      	beq.n	8003fde <HAL_DMA_Abort+0x32a>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a65      	ldr	r2, [pc, #404]	; (800410c <HAL_DMA_Abort+0x458>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d031      	beq.n	8003fde <HAL_DMA_Abort+0x32a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a64      	ldr	r2, [pc, #400]	; (8004110 <HAL_DMA_Abort+0x45c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d02c      	beq.n	8003fde <HAL_DMA_Abort+0x32a>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a62      	ldr	r2, [pc, #392]	; (8004114 <HAL_DMA_Abort+0x460>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d027      	beq.n	8003fde <HAL_DMA_Abort+0x32a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a61      	ldr	r2, [pc, #388]	; (8004118 <HAL_DMA_Abort+0x464>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d022      	beq.n	8003fde <HAL_DMA_Abort+0x32a>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a5f      	ldr	r2, [pc, #380]	; (800411c <HAL_DMA_Abort+0x468>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d01d      	beq.n	8003fde <HAL_DMA_Abort+0x32a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a5e      	ldr	r2, [pc, #376]	; (8004120 <HAL_DMA_Abort+0x46c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d018      	beq.n	8003fde <HAL_DMA_Abort+0x32a>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a5c      	ldr	r2, [pc, #368]	; (8004124 <HAL_DMA_Abort+0x470>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d013      	beq.n	8003fde <HAL_DMA_Abort+0x32a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a5b      	ldr	r2, [pc, #364]	; (8004128 <HAL_DMA_Abort+0x474>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d00e      	beq.n	8003fde <HAL_DMA_Abort+0x32a>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a59      	ldr	r2, [pc, #356]	; (800412c <HAL_DMA_Abort+0x478>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d009      	beq.n	8003fde <HAL_DMA_Abort+0x32a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a58      	ldr	r2, [pc, #352]	; (8004130 <HAL_DMA_Abort+0x47c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d004      	beq.n	8003fde <HAL_DMA_Abort+0x32a>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a56      	ldr	r2, [pc, #344]	; (8004134 <HAL_DMA_Abort+0x480>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d108      	bne.n	8003ff0 <HAL_DMA_Abort+0x33c>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0201 	bic.w	r2, r2, #1
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	e007      	b.n	8004000 <HAL_DMA_Abort+0x34c>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0201 	bic.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004000:	e013      	b.n	800402a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004002:	f7fd fc13 	bl	800182c <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b05      	cmp	r3, #5
 800400e:	d90c      	bls.n	800402a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2203      	movs	r2, #3
 800401a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e12d      	b.n	8004286 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e5      	bne.n	8004002 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a2f      	ldr	r2, [pc, #188]	; (80040f8 <HAL_DMA_Abort+0x444>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d04a      	beq.n	80040d6 <HAL_DMA_Abort+0x422>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a2d      	ldr	r2, [pc, #180]	; (80040fc <HAL_DMA_Abort+0x448>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d045      	beq.n	80040d6 <HAL_DMA_Abort+0x422>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a2c      	ldr	r2, [pc, #176]	; (8004100 <HAL_DMA_Abort+0x44c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d040      	beq.n	80040d6 <HAL_DMA_Abort+0x422>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a2a      	ldr	r2, [pc, #168]	; (8004104 <HAL_DMA_Abort+0x450>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d03b      	beq.n	80040d6 <HAL_DMA_Abort+0x422>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a29      	ldr	r2, [pc, #164]	; (8004108 <HAL_DMA_Abort+0x454>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d036      	beq.n	80040d6 <HAL_DMA_Abort+0x422>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a27      	ldr	r2, [pc, #156]	; (800410c <HAL_DMA_Abort+0x458>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d031      	beq.n	80040d6 <HAL_DMA_Abort+0x422>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a26      	ldr	r2, [pc, #152]	; (8004110 <HAL_DMA_Abort+0x45c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d02c      	beq.n	80040d6 <HAL_DMA_Abort+0x422>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a24      	ldr	r2, [pc, #144]	; (8004114 <HAL_DMA_Abort+0x460>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d027      	beq.n	80040d6 <HAL_DMA_Abort+0x422>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a23      	ldr	r2, [pc, #140]	; (8004118 <HAL_DMA_Abort+0x464>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d022      	beq.n	80040d6 <HAL_DMA_Abort+0x422>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a21      	ldr	r2, [pc, #132]	; (800411c <HAL_DMA_Abort+0x468>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d01d      	beq.n	80040d6 <HAL_DMA_Abort+0x422>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a20      	ldr	r2, [pc, #128]	; (8004120 <HAL_DMA_Abort+0x46c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d018      	beq.n	80040d6 <HAL_DMA_Abort+0x422>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a1e      	ldr	r2, [pc, #120]	; (8004124 <HAL_DMA_Abort+0x470>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d013      	beq.n	80040d6 <HAL_DMA_Abort+0x422>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a1d      	ldr	r2, [pc, #116]	; (8004128 <HAL_DMA_Abort+0x474>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00e      	beq.n	80040d6 <HAL_DMA_Abort+0x422>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1b      	ldr	r2, [pc, #108]	; (800412c <HAL_DMA_Abort+0x478>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d009      	beq.n	80040d6 <HAL_DMA_Abort+0x422>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a1a      	ldr	r2, [pc, #104]	; (8004130 <HAL_DMA_Abort+0x47c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d004      	beq.n	80040d6 <HAL_DMA_Abort+0x422>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a18      	ldr	r2, [pc, #96]	; (8004134 <HAL_DMA_Abort+0x480>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d101      	bne.n	80040da <HAL_DMA_Abort+0x426>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <HAL_DMA_Abort+0x428>
 80040da:	2300      	movs	r3, #0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d02b      	beq.n	8004138 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ea:	f003 031f 	and.w	r3, r3, #31
 80040ee:	223f      	movs	r2, #63	; 0x3f
 80040f0:	409a      	lsls	r2, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	609a      	str	r2, [r3, #8]
 80040f6:	e02a      	b.n	800414e <HAL_DMA_Abort+0x49a>
 80040f8:	40020010 	.word	0x40020010
 80040fc:	40020028 	.word	0x40020028
 8004100:	40020040 	.word	0x40020040
 8004104:	40020058 	.word	0x40020058
 8004108:	40020070 	.word	0x40020070
 800410c:	40020088 	.word	0x40020088
 8004110:	400200a0 	.word	0x400200a0
 8004114:	400200b8 	.word	0x400200b8
 8004118:	40020410 	.word	0x40020410
 800411c:	40020428 	.word	0x40020428
 8004120:	40020440 	.word	0x40020440
 8004124:	40020458 	.word	0x40020458
 8004128:	40020470 	.word	0x40020470
 800412c:	40020488 	.word	0x40020488
 8004130:	400204a0 	.word	0x400204a0
 8004134:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004142:	f003 031f 	and.w	r3, r3, #31
 8004146:	2201      	movs	r2, #1
 8004148:	409a      	lsls	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a4f      	ldr	r2, [pc, #316]	; (8004290 <HAL_DMA_Abort+0x5dc>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d072      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a4d      	ldr	r2, [pc, #308]	; (8004294 <HAL_DMA_Abort+0x5e0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d06d      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a4c      	ldr	r2, [pc, #304]	; (8004298 <HAL_DMA_Abort+0x5e4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d068      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a4a      	ldr	r2, [pc, #296]	; (800429c <HAL_DMA_Abort+0x5e8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d063      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a49      	ldr	r2, [pc, #292]	; (80042a0 <HAL_DMA_Abort+0x5ec>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d05e      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a47      	ldr	r2, [pc, #284]	; (80042a4 <HAL_DMA_Abort+0x5f0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d059      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a46      	ldr	r2, [pc, #280]	; (80042a8 <HAL_DMA_Abort+0x5f4>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d054      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a44      	ldr	r2, [pc, #272]	; (80042ac <HAL_DMA_Abort+0x5f8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d04f      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a43      	ldr	r2, [pc, #268]	; (80042b0 <HAL_DMA_Abort+0x5fc>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d04a      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a41      	ldr	r2, [pc, #260]	; (80042b4 <HAL_DMA_Abort+0x600>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d045      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a40      	ldr	r2, [pc, #256]	; (80042b8 <HAL_DMA_Abort+0x604>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d040      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a3e      	ldr	r2, [pc, #248]	; (80042bc <HAL_DMA_Abort+0x608>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d03b      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a3d      	ldr	r2, [pc, #244]	; (80042c0 <HAL_DMA_Abort+0x60c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d036      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a3b      	ldr	r2, [pc, #236]	; (80042c4 <HAL_DMA_Abort+0x610>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d031      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a3a      	ldr	r2, [pc, #232]	; (80042c8 <HAL_DMA_Abort+0x614>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d02c      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a38      	ldr	r2, [pc, #224]	; (80042cc <HAL_DMA_Abort+0x618>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d027      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a37      	ldr	r2, [pc, #220]	; (80042d0 <HAL_DMA_Abort+0x61c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d022      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a35      	ldr	r2, [pc, #212]	; (80042d4 <HAL_DMA_Abort+0x620>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d01d      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a34      	ldr	r2, [pc, #208]	; (80042d8 <HAL_DMA_Abort+0x624>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d018      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a32      	ldr	r2, [pc, #200]	; (80042dc <HAL_DMA_Abort+0x628>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d013      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a31      	ldr	r2, [pc, #196]	; (80042e0 <HAL_DMA_Abort+0x62c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00e      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2f      	ldr	r2, [pc, #188]	; (80042e4 <HAL_DMA_Abort+0x630>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d009      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2e      	ldr	r2, [pc, #184]	; (80042e8 <HAL_DMA_Abort+0x634>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d004      	beq.n	800423e <HAL_DMA_Abort+0x58a>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2c      	ldr	r2, [pc, #176]	; (80042ec <HAL_DMA_Abort+0x638>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d101      	bne.n	8004242 <HAL_DMA_Abort+0x58e>
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <HAL_DMA_Abort+0x590>
 8004242:	2300      	movs	r3, #0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d015      	beq.n	8004274 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004250:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00c      	beq.n	8004274 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004268:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004272:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40020010 	.word	0x40020010
 8004294:	40020028 	.word	0x40020028
 8004298:	40020040 	.word	0x40020040
 800429c:	40020058 	.word	0x40020058
 80042a0:	40020070 	.word	0x40020070
 80042a4:	40020088 	.word	0x40020088
 80042a8:	400200a0 	.word	0x400200a0
 80042ac:	400200b8 	.word	0x400200b8
 80042b0:	40020410 	.word	0x40020410
 80042b4:	40020428 	.word	0x40020428
 80042b8:	40020440 	.word	0x40020440
 80042bc:	40020458 	.word	0x40020458
 80042c0:	40020470 	.word	0x40020470
 80042c4:	40020488 	.word	0x40020488
 80042c8:	400204a0 	.word	0x400204a0
 80042cc:	400204b8 	.word	0x400204b8
 80042d0:	58025408 	.word	0x58025408
 80042d4:	5802541c 	.word	0x5802541c
 80042d8:	58025430 	.word	0x58025430
 80042dc:	58025444 	.word	0x58025444
 80042e0:	58025458 	.word	0x58025458
 80042e4:	5802546c 	.word	0x5802546c
 80042e8:	58025480 	.word	0x58025480
 80042ec:	58025494 	.word	0x58025494

080042f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08a      	sub	sp, #40	; 0x28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042fc:	4b67      	ldr	r3, [pc, #412]	; (800449c <HAL_DMA_IRQHandler+0x1ac>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a67      	ldr	r2, [pc, #412]	; (80044a0 <HAL_DMA_IRQHandler+0x1b0>)
 8004302:	fba2 2303 	umull	r2, r3, r2, r3
 8004306:	0a9b      	lsrs	r3, r3, #10
 8004308:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004314:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a5f      	ldr	r2, [pc, #380]	; (80044a4 <HAL_DMA_IRQHandler+0x1b4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d04a      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xd2>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a5d      	ldr	r2, [pc, #372]	; (80044a8 <HAL_DMA_IRQHandler+0x1b8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d045      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xd2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a5c      	ldr	r2, [pc, #368]	; (80044ac <HAL_DMA_IRQHandler+0x1bc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d040      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xd2>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a5a      	ldr	r2, [pc, #360]	; (80044b0 <HAL_DMA_IRQHandler+0x1c0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d03b      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xd2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a59      	ldr	r2, [pc, #356]	; (80044b4 <HAL_DMA_IRQHandler+0x1c4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d036      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xd2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a57      	ldr	r2, [pc, #348]	; (80044b8 <HAL_DMA_IRQHandler+0x1c8>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d031      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xd2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a56      	ldr	r2, [pc, #344]	; (80044bc <HAL_DMA_IRQHandler+0x1cc>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d02c      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xd2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a54      	ldr	r2, [pc, #336]	; (80044c0 <HAL_DMA_IRQHandler+0x1d0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d027      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xd2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a53      	ldr	r2, [pc, #332]	; (80044c4 <HAL_DMA_IRQHandler+0x1d4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d022      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xd2>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a51      	ldr	r2, [pc, #324]	; (80044c8 <HAL_DMA_IRQHandler+0x1d8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d01d      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xd2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a50      	ldr	r2, [pc, #320]	; (80044cc <HAL_DMA_IRQHandler+0x1dc>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d018      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xd2>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a4e      	ldr	r2, [pc, #312]	; (80044d0 <HAL_DMA_IRQHandler+0x1e0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d013      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xd2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a4d      	ldr	r2, [pc, #308]	; (80044d4 <HAL_DMA_IRQHandler+0x1e4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00e      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xd2>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a4b      	ldr	r2, [pc, #300]	; (80044d8 <HAL_DMA_IRQHandler+0x1e8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d009      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xd2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a4a      	ldr	r2, [pc, #296]	; (80044dc <HAL_DMA_IRQHandler+0x1ec>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d004      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xd2>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a48      	ldr	r2, [pc, #288]	; (80044e0 <HAL_DMA_IRQHandler+0x1f0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d101      	bne.n	80043c6 <HAL_DMA_IRQHandler+0xd6>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <HAL_DMA_IRQHandler+0xd8>
 80043c6:	2300      	movs	r3, #0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 842b 	beq.w	8004c24 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d2:	f003 031f 	and.w	r3, r3, #31
 80043d6:	2208      	movs	r2, #8
 80043d8:	409a      	lsls	r2, r3
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	4013      	ands	r3, r2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 80a2 	beq.w	8004528 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a2e      	ldr	r2, [pc, #184]	; (80044a4 <HAL_DMA_IRQHandler+0x1b4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d04a      	beq.n	8004484 <HAL_DMA_IRQHandler+0x194>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a2d      	ldr	r2, [pc, #180]	; (80044a8 <HAL_DMA_IRQHandler+0x1b8>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d045      	beq.n	8004484 <HAL_DMA_IRQHandler+0x194>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a2b      	ldr	r2, [pc, #172]	; (80044ac <HAL_DMA_IRQHandler+0x1bc>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d040      	beq.n	8004484 <HAL_DMA_IRQHandler+0x194>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a2a      	ldr	r2, [pc, #168]	; (80044b0 <HAL_DMA_IRQHandler+0x1c0>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d03b      	beq.n	8004484 <HAL_DMA_IRQHandler+0x194>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a28      	ldr	r2, [pc, #160]	; (80044b4 <HAL_DMA_IRQHandler+0x1c4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d036      	beq.n	8004484 <HAL_DMA_IRQHandler+0x194>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a27      	ldr	r2, [pc, #156]	; (80044b8 <HAL_DMA_IRQHandler+0x1c8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d031      	beq.n	8004484 <HAL_DMA_IRQHandler+0x194>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a25      	ldr	r2, [pc, #148]	; (80044bc <HAL_DMA_IRQHandler+0x1cc>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d02c      	beq.n	8004484 <HAL_DMA_IRQHandler+0x194>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a24      	ldr	r2, [pc, #144]	; (80044c0 <HAL_DMA_IRQHandler+0x1d0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d027      	beq.n	8004484 <HAL_DMA_IRQHandler+0x194>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a22      	ldr	r2, [pc, #136]	; (80044c4 <HAL_DMA_IRQHandler+0x1d4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d022      	beq.n	8004484 <HAL_DMA_IRQHandler+0x194>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a21      	ldr	r2, [pc, #132]	; (80044c8 <HAL_DMA_IRQHandler+0x1d8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d01d      	beq.n	8004484 <HAL_DMA_IRQHandler+0x194>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1f      	ldr	r2, [pc, #124]	; (80044cc <HAL_DMA_IRQHandler+0x1dc>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d018      	beq.n	8004484 <HAL_DMA_IRQHandler+0x194>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1e      	ldr	r2, [pc, #120]	; (80044d0 <HAL_DMA_IRQHandler+0x1e0>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d013      	beq.n	8004484 <HAL_DMA_IRQHandler+0x194>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1c      	ldr	r2, [pc, #112]	; (80044d4 <HAL_DMA_IRQHandler+0x1e4>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d00e      	beq.n	8004484 <HAL_DMA_IRQHandler+0x194>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <HAL_DMA_IRQHandler+0x1e8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d009      	beq.n	8004484 <HAL_DMA_IRQHandler+0x194>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a19      	ldr	r2, [pc, #100]	; (80044dc <HAL_DMA_IRQHandler+0x1ec>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d004      	beq.n	8004484 <HAL_DMA_IRQHandler+0x194>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a18      	ldr	r2, [pc, #96]	; (80044e0 <HAL_DMA_IRQHandler+0x1f0>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d12f      	bne.n	80044e4 <HAL_DMA_IRQHandler+0x1f4>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	2b00      	cmp	r3, #0
 8004490:	bf14      	ite	ne
 8004492:	2301      	movne	r3, #1
 8004494:	2300      	moveq	r3, #0
 8004496:	b2db      	uxtb	r3, r3
 8004498:	e02e      	b.n	80044f8 <HAL_DMA_IRQHandler+0x208>
 800449a:	bf00      	nop
 800449c:	24000004 	.word	0x24000004
 80044a0:	1b4e81b5 	.word	0x1b4e81b5
 80044a4:	40020010 	.word	0x40020010
 80044a8:	40020028 	.word	0x40020028
 80044ac:	40020040 	.word	0x40020040
 80044b0:	40020058 	.word	0x40020058
 80044b4:	40020070 	.word	0x40020070
 80044b8:	40020088 	.word	0x40020088
 80044bc:	400200a0 	.word	0x400200a0
 80044c0:	400200b8 	.word	0x400200b8
 80044c4:	40020410 	.word	0x40020410
 80044c8:	40020428 	.word	0x40020428
 80044cc:	40020440 	.word	0x40020440
 80044d0:	40020458 	.word	0x40020458
 80044d4:	40020470 	.word	0x40020470
 80044d8:	40020488 	.word	0x40020488
 80044dc:	400204a0 	.word	0x400204a0
 80044e0:	400204b8 	.word	0x400204b8
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	bf14      	ite	ne
 80044f2:	2301      	movne	r3, #1
 80044f4:	2300      	moveq	r3, #0
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d015      	beq.n	8004528 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0204 	bic.w	r2, r2, #4
 800450a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	2208      	movs	r2, #8
 8004516:	409a      	lsls	r2, r3
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	f043 0201 	orr.w	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800452c:	f003 031f 	and.w	r3, r3, #31
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	fa22 f303 	lsr.w	r3, r2, r3
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d06e      	beq.n	800461c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a69      	ldr	r2, [pc, #420]	; (80046e8 <HAL_DMA_IRQHandler+0x3f8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d04a      	beq.n	80045de <HAL_DMA_IRQHandler+0x2ee>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a67      	ldr	r2, [pc, #412]	; (80046ec <HAL_DMA_IRQHandler+0x3fc>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d045      	beq.n	80045de <HAL_DMA_IRQHandler+0x2ee>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a66      	ldr	r2, [pc, #408]	; (80046f0 <HAL_DMA_IRQHandler+0x400>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d040      	beq.n	80045de <HAL_DMA_IRQHandler+0x2ee>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a64      	ldr	r2, [pc, #400]	; (80046f4 <HAL_DMA_IRQHandler+0x404>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d03b      	beq.n	80045de <HAL_DMA_IRQHandler+0x2ee>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a63      	ldr	r2, [pc, #396]	; (80046f8 <HAL_DMA_IRQHandler+0x408>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d036      	beq.n	80045de <HAL_DMA_IRQHandler+0x2ee>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a61      	ldr	r2, [pc, #388]	; (80046fc <HAL_DMA_IRQHandler+0x40c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d031      	beq.n	80045de <HAL_DMA_IRQHandler+0x2ee>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a60      	ldr	r2, [pc, #384]	; (8004700 <HAL_DMA_IRQHandler+0x410>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d02c      	beq.n	80045de <HAL_DMA_IRQHandler+0x2ee>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a5e      	ldr	r2, [pc, #376]	; (8004704 <HAL_DMA_IRQHandler+0x414>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d027      	beq.n	80045de <HAL_DMA_IRQHandler+0x2ee>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a5d      	ldr	r2, [pc, #372]	; (8004708 <HAL_DMA_IRQHandler+0x418>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d022      	beq.n	80045de <HAL_DMA_IRQHandler+0x2ee>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a5b      	ldr	r2, [pc, #364]	; (800470c <HAL_DMA_IRQHandler+0x41c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d01d      	beq.n	80045de <HAL_DMA_IRQHandler+0x2ee>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a5a      	ldr	r2, [pc, #360]	; (8004710 <HAL_DMA_IRQHandler+0x420>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d018      	beq.n	80045de <HAL_DMA_IRQHandler+0x2ee>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a58      	ldr	r2, [pc, #352]	; (8004714 <HAL_DMA_IRQHandler+0x424>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d013      	beq.n	80045de <HAL_DMA_IRQHandler+0x2ee>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a57      	ldr	r2, [pc, #348]	; (8004718 <HAL_DMA_IRQHandler+0x428>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00e      	beq.n	80045de <HAL_DMA_IRQHandler+0x2ee>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a55      	ldr	r2, [pc, #340]	; (800471c <HAL_DMA_IRQHandler+0x42c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d009      	beq.n	80045de <HAL_DMA_IRQHandler+0x2ee>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a54      	ldr	r2, [pc, #336]	; (8004720 <HAL_DMA_IRQHandler+0x430>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d004      	beq.n	80045de <HAL_DMA_IRQHandler+0x2ee>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a52      	ldr	r2, [pc, #328]	; (8004724 <HAL_DMA_IRQHandler+0x434>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d10a      	bne.n	80045f4 <HAL_DMA_IRQHandler+0x304>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bf14      	ite	ne
 80045ec:	2301      	movne	r3, #1
 80045ee:	2300      	moveq	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	e003      	b.n	80045fc <HAL_DMA_IRQHandler+0x30c>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2300      	movs	r3, #0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00d      	beq.n	800461c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004604:	f003 031f 	and.w	r3, r3, #31
 8004608:	2201      	movs	r2, #1
 800460a:	409a      	lsls	r2, r3
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004614:	f043 0202 	orr.w	r2, r3, #2
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004620:	f003 031f 	and.w	r3, r3, #31
 8004624:	2204      	movs	r2, #4
 8004626:	409a      	lsls	r2, r3
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	4013      	ands	r3, r2
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 808f 	beq.w	8004750 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a2c      	ldr	r2, [pc, #176]	; (80046e8 <HAL_DMA_IRQHandler+0x3f8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d04a      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x3e2>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a2a      	ldr	r2, [pc, #168]	; (80046ec <HAL_DMA_IRQHandler+0x3fc>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d045      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x3e2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a29      	ldr	r2, [pc, #164]	; (80046f0 <HAL_DMA_IRQHandler+0x400>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d040      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x3e2>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a27      	ldr	r2, [pc, #156]	; (80046f4 <HAL_DMA_IRQHandler+0x404>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d03b      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x3e2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a26      	ldr	r2, [pc, #152]	; (80046f8 <HAL_DMA_IRQHandler+0x408>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d036      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x3e2>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a24      	ldr	r2, [pc, #144]	; (80046fc <HAL_DMA_IRQHandler+0x40c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d031      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x3e2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a23      	ldr	r2, [pc, #140]	; (8004700 <HAL_DMA_IRQHandler+0x410>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d02c      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x3e2>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a21      	ldr	r2, [pc, #132]	; (8004704 <HAL_DMA_IRQHandler+0x414>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d027      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x3e2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a20      	ldr	r2, [pc, #128]	; (8004708 <HAL_DMA_IRQHandler+0x418>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d022      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x3e2>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a1e      	ldr	r2, [pc, #120]	; (800470c <HAL_DMA_IRQHandler+0x41c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d01d      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x3e2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1d      	ldr	r2, [pc, #116]	; (8004710 <HAL_DMA_IRQHandler+0x420>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d018      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x3e2>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a1b      	ldr	r2, [pc, #108]	; (8004714 <HAL_DMA_IRQHandler+0x424>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d013      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x3e2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a1a      	ldr	r2, [pc, #104]	; (8004718 <HAL_DMA_IRQHandler+0x428>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00e      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x3e2>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a18      	ldr	r2, [pc, #96]	; (800471c <HAL_DMA_IRQHandler+0x42c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d009      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x3e2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a17      	ldr	r2, [pc, #92]	; (8004720 <HAL_DMA_IRQHandler+0x430>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d004      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x3e2>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a15      	ldr	r2, [pc, #84]	; (8004724 <HAL_DMA_IRQHandler+0x434>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d12a      	bne.n	8004728 <HAL_DMA_IRQHandler+0x438>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	bf14      	ite	ne
 80046e0:	2301      	movne	r3, #1
 80046e2:	2300      	moveq	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	e023      	b.n	8004730 <HAL_DMA_IRQHandler+0x440>
 80046e8:	40020010 	.word	0x40020010
 80046ec:	40020028 	.word	0x40020028
 80046f0:	40020040 	.word	0x40020040
 80046f4:	40020058 	.word	0x40020058
 80046f8:	40020070 	.word	0x40020070
 80046fc:	40020088 	.word	0x40020088
 8004700:	400200a0 	.word	0x400200a0
 8004704:	400200b8 	.word	0x400200b8
 8004708:	40020410 	.word	0x40020410
 800470c:	40020428 	.word	0x40020428
 8004710:	40020440 	.word	0x40020440
 8004714:	40020458 	.word	0x40020458
 8004718:	40020470 	.word	0x40020470
 800471c:	40020488 	.word	0x40020488
 8004720:	400204a0 	.word	0x400204a0
 8004724:	400204b8 	.word	0x400204b8
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2300      	movs	r3, #0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00d      	beq.n	8004750 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004738:	f003 031f 	and.w	r3, r3, #31
 800473c:	2204      	movs	r2, #4
 800473e:	409a      	lsls	r2, r3
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004748:	f043 0204 	orr.w	r2, r3, #4
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004754:	f003 031f 	and.w	r3, r3, #31
 8004758:	2210      	movs	r2, #16
 800475a:	409a      	lsls	r2, r3
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	4013      	ands	r3, r2
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 80a6 	beq.w	80048b2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a85      	ldr	r2, [pc, #532]	; (8004980 <HAL_DMA_IRQHandler+0x690>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d04a      	beq.n	8004806 <HAL_DMA_IRQHandler+0x516>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a83      	ldr	r2, [pc, #524]	; (8004984 <HAL_DMA_IRQHandler+0x694>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d045      	beq.n	8004806 <HAL_DMA_IRQHandler+0x516>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a82      	ldr	r2, [pc, #520]	; (8004988 <HAL_DMA_IRQHandler+0x698>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d040      	beq.n	8004806 <HAL_DMA_IRQHandler+0x516>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a80      	ldr	r2, [pc, #512]	; (800498c <HAL_DMA_IRQHandler+0x69c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d03b      	beq.n	8004806 <HAL_DMA_IRQHandler+0x516>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a7f      	ldr	r2, [pc, #508]	; (8004990 <HAL_DMA_IRQHandler+0x6a0>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d036      	beq.n	8004806 <HAL_DMA_IRQHandler+0x516>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a7d      	ldr	r2, [pc, #500]	; (8004994 <HAL_DMA_IRQHandler+0x6a4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d031      	beq.n	8004806 <HAL_DMA_IRQHandler+0x516>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a7c      	ldr	r2, [pc, #496]	; (8004998 <HAL_DMA_IRQHandler+0x6a8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d02c      	beq.n	8004806 <HAL_DMA_IRQHandler+0x516>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a7a      	ldr	r2, [pc, #488]	; (800499c <HAL_DMA_IRQHandler+0x6ac>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d027      	beq.n	8004806 <HAL_DMA_IRQHandler+0x516>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a79      	ldr	r2, [pc, #484]	; (80049a0 <HAL_DMA_IRQHandler+0x6b0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d022      	beq.n	8004806 <HAL_DMA_IRQHandler+0x516>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a77      	ldr	r2, [pc, #476]	; (80049a4 <HAL_DMA_IRQHandler+0x6b4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d01d      	beq.n	8004806 <HAL_DMA_IRQHandler+0x516>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a76      	ldr	r2, [pc, #472]	; (80049a8 <HAL_DMA_IRQHandler+0x6b8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d018      	beq.n	8004806 <HAL_DMA_IRQHandler+0x516>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a74      	ldr	r2, [pc, #464]	; (80049ac <HAL_DMA_IRQHandler+0x6bc>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d013      	beq.n	8004806 <HAL_DMA_IRQHandler+0x516>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a73      	ldr	r2, [pc, #460]	; (80049b0 <HAL_DMA_IRQHandler+0x6c0>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00e      	beq.n	8004806 <HAL_DMA_IRQHandler+0x516>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a71      	ldr	r2, [pc, #452]	; (80049b4 <HAL_DMA_IRQHandler+0x6c4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d009      	beq.n	8004806 <HAL_DMA_IRQHandler+0x516>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a70      	ldr	r2, [pc, #448]	; (80049b8 <HAL_DMA_IRQHandler+0x6c8>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d004      	beq.n	8004806 <HAL_DMA_IRQHandler+0x516>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a6e      	ldr	r2, [pc, #440]	; (80049bc <HAL_DMA_IRQHandler+0x6cc>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d10a      	bne.n	800481c <HAL_DMA_IRQHandler+0x52c>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0308 	and.w	r3, r3, #8
 8004810:	2b00      	cmp	r3, #0
 8004812:	bf14      	ite	ne
 8004814:	2301      	movne	r3, #1
 8004816:	2300      	moveq	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	e009      	b.n	8004830 <HAL_DMA_IRQHandler+0x540>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b00      	cmp	r3, #0
 8004828:	bf14      	ite	ne
 800482a:	2301      	movne	r3, #1
 800482c:	2300      	moveq	r3, #0
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d03e      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	2210      	movs	r2, #16
 800483e:	409a      	lsls	r2, r3
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d018      	beq.n	8004884 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d108      	bne.n	8004872 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	2b00      	cmp	r3, #0
 8004866:	d024      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	4798      	blx	r3
 8004870:	e01f      	b.n	80048b2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004876:	2b00      	cmp	r3, #0
 8004878:	d01b      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	4798      	blx	r3
 8004882:	e016      	b.n	80048b2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488e:	2b00      	cmp	r3, #0
 8004890:	d107      	bne.n	80048a2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0208 	bic.w	r2, r2, #8
 80048a0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b6:	f003 031f 	and.w	r3, r3, #31
 80048ba:	2220      	movs	r2, #32
 80048bc:	409a      	lsls	r2, r3
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 8110 	beq.w	8004ae8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a2c      	ldr	r2, [pc, #176]	; (8004980 <HAL_DMA_IRQHandler+0x690>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d04a      	beq.n	8004968 <HAL_DMA_IRQHandler+0x678>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a2b      	ldr	r2, [pc, #172]	; (8004984 <HAL_DMA_IRQHandler+0x694>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d045      	beq.n	8004968 <HAL_DMA_IRQHandler+0x678>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a29      	ldr	r2, [pc, #164]	; (8004988 <HAL_DMA_IRQHandler+0x698>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d040      	beq.n	8004968 <HAL_DMA_IRQHandler+0x678>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a28      	ldr	r2, [pc, #160]	; (800498c <HAL_DMA_IRQHandler+0x69c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d03b      	beq.n	8004968 <HAL_DMA_IRQHandler+0x678>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a26      	ldr	r2, [pc, #152]	; (8004990 <HAL_DMA_IRQHandler+0x6a0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d036      	beq.n	8004968 <HAL_DMA_IRQHandler+0x678>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a25      	ldr	r2, [pc, #148]	; (8004994 <HAL_DMA_IRQHandler+0x6a4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d031      	beq.n	8004968 <HAL_DMA_IRQHandler+0x678>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a23      	ldr	r2, [pc, #140]	; (8004998 <HAL_DMA_IRQHandler+0x6a8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d02c      	beq.n	8004968 <HAL_DMA_IRQHandler+0x678>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a22      	ldr	r2, [pc, #136]	; (800499c <HAL_DMA_IRQHandler+0x6ac>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d027      	beq.n	8004968 <HAL_DMA_IRQHandler+0x678>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a20      	ldr	r2, [pc, #128]	; (80049a0 <HAL_DMA_IRQHandler+0x6b0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d022      	beq.n	8004968 <HAL_DMA_IRQHandler+0x678>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a1f      	ldr	r2, [pc, #124]	; (80049a4 <HAL_DMA_IRQHandler+0x6b4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d01d      	beq.n	8004968 <HAL_DMA_IRQHandler+0x678>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a1d      	ldr	r2, [pc, #116]	; (80049a8 <HAL_DMA_IRQHandler+0x6b8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d018      	beq.n	8004968 <HAL_DMA_IRQHandler+0x678>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a1c      	ldr	r2, [pc, #112]	; (80049ac <HAL_DMA_IRQHandler+0x6bc>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d013      	beq.n	8004968 <HAL_DMA_IRQHandler+0x678>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a1a      	ldr	r2, [pc, #104]	; (80049b0 <HAL_DMA_IRQHandler+0x6c0>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00e      	beq.n	8004968 <HAL_DMA_IRQHandler+0x678>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a19      	ldr	r2, [pc, #100]	; (80049b4 <HAL_DMA_IRQHandler+0x6c4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d009      	beq.n	8004968 <HAL_DMA_IRQHandler+0x678>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a17      	ldr	r2, [pc, #92]	; (80049b8 <HAL_DMA_IRQHandler+0x6c8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d004      	beq.n	8004968 <HAL_DMA_IRQHandler+0x678>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a16      	ldr	r2, [pc, #88]	; (80049bc <HAL_DMA_IRQHandler+0x6cc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d12b      	bne.n	80049c0 <HAL_DMA_IRQHandler+0x6d0>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0310 	and.w	r3, r3, #16
 8004972:	2b00      	cmp	r3, #0
 8004974:	bf14      	ite	ne
 8004976:	2301      	movne	r3, #1
 8004978:	2300      	moveq	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	e02a      	b.n	80049d4 <HAL_DMA_IRQHandler+0x6e4>
 800497e:	bf00      	nop
 8004980:	40020010 	.word	0x40020010
 8004984:	40020028 	.word	0x40020028
 8004988:	40020040 	.word	0x40020040
 800498c:	40020058 	.word	0x40020058
 8004990:	40020070 	.word	0x40020070
 8004994:	40020088 	.word	0x40020088
 8004998:	400200a0 	.word	0x400200a0
 800499c:	400200b8 	.word	0x400200b8
 80049a0:	40020410 	.word	0x40020410
 80049a4:	40020428 	.word	0x40020428
 80049a8:	40020440 	.word	0x40020440
 80049ac:	40020458 	.word	0x40020458
 80049b0:	40020470 	.word	0x40020470
 80049b4:	40020488 	.word	0x40020488
 80049b8:	400204a0 	.word	0x400204a0
 80049bc:	400204b8 	.word	0x400204b8
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	bf14      	ite	ne
 80049ce:	2301      	movne	r3, #1
 80049d0:	2300      	moveq	r3, #0
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 8087 	beq.w	8004ae8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049de:	f003 031f 	and.w	r3, r3, #31
 80049e2:	2220      	movs	r2, #32
 80049e4:	409a      	lsls	r2, r3
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d139      	bne.n	8004a6a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0216 	bic.w	r2, r2, #22
 8004a04:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695a      	ldr	r2, [r3, #20]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a14:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d103      	bne.n	8004a26 <HAL_DMA_IRQHandler+0x736>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d007      	beq.n	8004a36 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0208 	bic.w	r2, r2, #8
 8004a34:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a3a:	f003 031f 	and.w	r3, r3, #31
 8004a3e:	223f      	movs	r2, #63	; 0x3f
 8004a40:	409a      	lsls	r2, r3
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 8382 	beq.w	8005164 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	4798      	blx	r3
          }
          return;
 8004a68:	e37c      	b.n	8005164 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d018      	beq.n	8004aaa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d108      	bne.n	8004a98 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d02c      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	4798      	blx	r3
 8004a96:	e027      	b.n	8004ae8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d023      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	4798      	blx	r3
 8004aa8:	e01e      	b.n	8004ae8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10f      	bne.n	8004ad8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0210 	bic.w	r2, r2, #16
 8004ac6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 833e 	beq.w	800516e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 8088 	beq.w	8004c10 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2204      	movs	r2, #4
 8004b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a89      	ldr	r2, [pc, #548]	; (8004d34 <HAL_DMA_IRQHandler+0xa44>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d04a      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x8b8>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a88      	ldr	r2, [pc, #544]	; (8004d38 <HAL_DMA_IRQHandler+0xa48>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d045      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x8b8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a86      	ldr	r2, [pc, #536]	; (8004d3c <HAL_DMA_IRQHandler+0xa4c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d040      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x8b8>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a85      	ldr	r2, [pc, #532]	; (8004d40 <HAL_DMA_IRQHandler+0xa50>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d03b      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x8b8>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a83      	ldr	r2, [pc, #524]	; (8004d44 <HAL_DMA_IRQHandler+0xa54>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d036      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x8b8>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a82      	ldr	r2, [pc, #520]	; (8004d48 <HAL_DMA_IRQHandler+0xa58>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d031      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x8b8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a80      	ldr	r2, [pc, #512]	; (8004d4c <HAL_DMA_IRQHandler+0xa5c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d02c      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x8b8>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a7f      	ldr	r2, [pc, #508]	; (8004d50 <HAL_DMA_IRQHandler+0xa60>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d027      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x8b8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a7d      	ldr	r2, [pc, #500]	; (8004d54 <HAL_DMA_IRQHandler+0xa64>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d022      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x8b8>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a7c      	ldr	r2, [pc, #496]	; (8004d58 <HAL_DMA_IRQHandler+0xa68>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d01d      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x8b8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a7a      	ldr	r2, [pc, #488]	; (8004d5c <HAL_DMA_IRQHandler+0xa6c>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d018      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x8b8>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a79      	ldr	r2, [pc, #484]	; (8004d60 <HAL_DMA_IRQHandler+0xa70>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d013      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x8b8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a77      	ldr	r2, [pc, #476]	; (8004d64 <HAL_DMA_IRQHandler+0xa74>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00e      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x8b8>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a76      	ldr	r2, [pc, #472]	; (8004d68 <HAL_DMA_IRQHandler+0xa78>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d009      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x8b8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a74      	ldr	r2, [pc, #464]	; (8004d6c <HAL_DMA_IRQHandler+0xa7c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d004      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x8b8>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a73      	ldr	r2, [pc, #460]	; (8004d70 <HAL_DMA_IRQHandler+0xa80>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d108      	bne.n	8004bba <HAL_DMA_IRQHandler+0x8ca>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0201 	bic.w	r2, r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	e007      	b.n	8004bca <HAL_DMA_IRQHandler+0x8da>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0201 	bic.w	r2, r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d307      	bcc.n	8004be6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1f2      	bne.n	8004bca <HAL_DMA_IRQHandler+0x8da>
 8004be4:	e000      	b.n	8004be8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004be6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d004      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004bfe:	e003      	b.n	8004c08 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 82aa 	beq.w	800516e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	4798      	blx	r3
 8004c22:	e2a4      	b.n	800516e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a52      	ldr	r2, [pc, #328]	; (8004d74 <HAL_DMA_IRQHandler+0xa84>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d04a      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x9d4>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a51      	ldr	r2, [pc, #324]	; (8004d78 <HAL_DMA_IRQHandler+0xa88>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d045      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x9d4>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a4f      	ldr	r2, [pc, #316]	; (8004d7c <HAL_DMA_IRQHandler+0xa8c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d040      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x9d4>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a4e      	ldr	r2, [pc, #312]	; (8004d80 <HAL_DMA_IRQHandler+0xa90>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d03b      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x9d4>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a4c      	ldr	r2, [pc, #304]	; (8004d84 <HAL_DMA_IRQHandler+0xa94>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d036      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x9d4>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a4b      	ldr	r2, [pc, #300]	; (8004d88 <HAL_DMA_IRQHandler+0xa98>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d031      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x9d4>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a49      	ldr	r2, [pc, #292]	; (8004d8c <HAL_DMA_IRQHandler+0xa9c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d02c      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x9d4>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a48      	ldr	r2, [pc, #288]	; (8004d90 <HAL_DMA_IRQHandler+0xaa0>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d027      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x9d4>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a46      	ldr	r2, [pc, #280]	; (8004d94 <HAL_DMA_IRQHandler+0xaa4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d022      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x9d4>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a45      	ldr	r2, [pc, #276]	; (8004d98 <HAL_DMA_IRQHandler+0xaa8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d01d      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x9d4>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a43      	ldr	r2, [pc, #268]	; (8004d9c <HAL_DMA_IRQHandler+0xaac>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d018      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x9d4>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a42      	ldr	r2, [pc, #264]	; (8004da0 <HAL_DMA_IRQHandler+0xab0>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d013      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x9d4>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a40      	ldr	r2, [pc, #256]	; (8004da4 <HAL_DMA_IRQHandler+0xab4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00e      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x9d4>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a3f      	ldr	r2, [pc, #252]	; (8004da8 <HAL_DMA_IRQHandler+0xab8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d009      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x9d4>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a3d      	ldr	r2, [pc, #244]	; (8004dac <HAL_DMA_IRQHandler+0xabc>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d004      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x9d4>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a3c      	ldr	r2, [pc, #240]	; (8004db0 <HAL_DMA_IRQHandler+0xac0>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d101      	bne.n	8004cc8 <HAL_DMA_IRQHandler+0x9d8>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e000      	b.n	8004cca <HAL_DMA_IRQHandler+0x9da>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 824f 	beq.w	800516e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cdc:	f003 031f 	and.w	r3, r3, #31
 8004ce0:	2204      	movs	r2, #4
 8004ce2:	409a      	lsls	r2, r3
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 80dd 	beq.w	8004ea8 <HAL_DMA_IRQHandler+0xbb8>
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 80d7 	beq.w	8004ea8 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfe:	f003 031f 	and.w	r3, r3, #31
 8004d02:	2204      	movs	r2, #4
 8004d04:	409a      	lsls	r2, r3
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d059      	beq.n	8004dc8 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d14a      	bne.n	8004db4 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 8220 	beq.w	8005168 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d30:	e21a      	b.n	8005168 <HAL_DMA_IRQHandler+0xe78>
 8004d32:	bf00      	nop
 8004d34:	40020010 	.word	0x40020010
 8004d38:	40020028 	.word	0x40020028
 8004d3c:	40020040 	.word	0x40020040
 8004d40:	40020058 	.word	0x40020058
 8004d44:	40020070 	.word	0x40020070
 8004d48:	40020088 	.word	0x40020088
 8004d4c:	400200a0 	.word	0x400200a0
 8004d50:	400200b8 	.word	0x400200b8
 8004d54:	40020410 	.word	0x40020410
 8004d58:	40020428 	.word	0x40020428
 8004d5c:	40020440 	.word	0x40020440
 8004d60:	40020458 	.word	0x40020458
 8004d64:	40020470 	.word	0x40020470
 8004d68:	40020488 	.word	0x40020488
 8004d6c:	400204a0 	.word	0x400204a0
 8004d70:	400204b8 	.word	0x400204b8
 8004d74:	48022c08 	.word	0x48022c08
 8004d78:	48022c1c 	.word	0x48022c1c
 8004d7c:	48022c30 	.word	0x48022c30
 8004d80:	48022c44 	.word	0x48022c44
 8004d84:	48022c58 	.word	0x48022c58
 8004d88:	48022c6c 	.word	0x48022c6c
 8004d8c:	48022c80 	.word	0x48022c80
 8004d90:	48022c94 	.word	0x48022c94
 8004d94:	58025408 	.word	0x58025408
 8004d98:	5802541c 	.word	0x5802541c
 8004d9c:	58025430 	.word	0x58025430
 8004da0:	58025444 	.word	0x58025444
 8004da4:	58025458 	.word	0x58025458
 8004da8:	5802546c 	.word	0x5802546c
 8004dac:	58025480 	.word	0x58025480
 8004db0:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 81d5 	beq.w	8005168 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dc6:	e1cf      	b.n	8005168 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f003 0320 	and.w	r3, r3, #32
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d160      	bne.n	8004e94 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a7f      	ldr	r2, [pc, #508]	; (8004fd4 <HAL_DMA_IRQHandler+0xce4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d04a      	beq.n	8004e72 <HAL_DMA_IRQHandler+0xb82>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a7d      	ldr	r2, [pc, #500]	; (8004fd8 <HAL_DMA_IRQHandler+0xce8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d045      	beq.n	8004e72 <HAL_DMA_IRQHandler+0xb82>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a7c      	ldr	r2, [pc, #496]	; (8004fdc <HAL_DMA_IRQHandler+0xcec>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d040      	beq.n	8004e72 <HAL_DMA_IRQHandler+0xb82>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a7a      	ldr	r2, [pc, #488]	; (8004fe0 <HAL_DMA_IRQHandler+0xcf0>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d03b      	beq.n	8004e72 <HAL_DMA_IRQHandler+0xb82>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a79      	ldr	r2, [pc, #484]	; (8004fe4 <HAL_DMA_IRQHandler+0xcf4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d036      	beq.n	8004e72 <HAL_DMA_IRQHandler+0xb82>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a77      	ldr	r2, [pc, #476]	; (8004fe8 <HAL_DMA_IRQHandler+0xcf8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d031      	beq.n	8004e72 <HAL_DMA_IRQHandler+0xb82>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a76      	ldr	r2, [pc, #472]	; (8004fec <HAL_DMA_IRQHandler+0xcfc>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d02c      	beq.n	8004e72 <HAL_DMA_IRQHandler+0xb82>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a74      	ldr	r2, [pc, #464]	; (8004ff0 <HAL_DMA_IRQHandler+0xd00>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d027      	beq.n	8004e72 <HAL_DMA_IRQHandler+0xb82>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a73      	ldr	r2, [pc, #460]	; (8004ff4 <HAL_DMA_IRQHandler+0xd04>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d022      	beq.n	8004e72 <HAL_DMA_IRQHandler+0xb82>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a71      	ldr	r2, [pc, #452]	; (8004ff8 <HAL_DMA_IRQHandler+0xd08>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d01d      	beq.n	8004e72 <HAL_DMA_IRQHandler+0xb82>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a70      	ldr	r2, [pc, #448]	; (8004ffc <HAL_DMA_IRQHandler+0xd0c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d018      	beq.n	8004e72 <HAL_DMA_IRQHandler+0xb82>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a6e      	ldr	r2, [pc, #440]	; (8005000 <HAL_DMA_IRQHandler+0xd10>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d013      	beq.n	8004e72 <HAL_DMA_IRQHandler+0xb82>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a6d      	ldr	r2, [pc, #436]	; (8005004 <HAL_DMA_IRQHandler+0xd14>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00e      	beq.n	8004e72 <HAL_DMA_IRQHandler+0xb82>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a6b      	ldr	r2, [pc, #428]	; (8005008 <HAL_DMA_IRQHandler+0xd18>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d009      	beq.n	8004e72 <HAL_DMA_IRQHandler+0xb82>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a6a      	ldr	r2, [pc, #424]	; (800500c <HAL_DMA_IRQHandler+0xd1c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d004      	beq.n	8004e72 <HAL_DMA_IRQHandler+0xb82>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a68      	ldr	r2, [pc, #416]	; (8005010 <HAL_DMA_IRQHandler+0xd20>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d108      	bne.n	8004e84 <HAL_DMA_IRQHandler+0xb94>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0208 	bic.w	r2, r2, #8
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	e007      	b.n	8004e94 <HAL_DMA_IRQHandler+0xba4>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0204 	bic.w	r2, r2, #4
 8004e92:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 8165 	beq.w	8005168 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ea6:	e15f      	b.n	8005168 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 80c5 	beq.w	8005048 <HAL_DMA_IRQHandler+0xd58>
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 80bf 	beq.w	8005048 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ece:	f003 031f 	and.w	r3, r3, #31
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	409a      	lsls	r2, r3
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d018      	beq.n	8004f16 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d109      	bne.n	8004f02 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 813a 	beq.w	800516c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f00:	e134      	b.n	800516c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 8130 	beq.w	800516c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f14:	e12a      	b.n	800516c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f003 0320 	and.w	r3, r3, #32
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f040 8089 	bne.w	8005034 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a2b      	ldr	r2, [pc, #172]	; (8004fd4 <HAL_DMA_IRQHandler+0xce4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d04a      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xcd2>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a29      	ldr	r2, [pc, #164]	; (8004fd8 <HAL_DMA_IRQHandler+0xce8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d045      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xcd2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a28      	ldr	r2, [pc, #160]	; (8004fdc <HAL_DMA_IRQHandler+0xcec>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d040      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xcd2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a26      	ldr	r2, [pc, #152]	; (8004fe0 <HAL_DMA_IRQHandler+0xcf0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d03b      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xcd2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a25      	ldr	r2, [pc, #148]	; (8004fe4 <HAL_DMA_IRQHandler+0xcf4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d036      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xcd2>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a23      	ldr	r2, [pc, #140]	; (8004fe8 <HAL_DMA_IRQHandler+0xcf8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d031      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xcd2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a22      	ldr	r2, [pc, #136]	; (8004fec <HAL_DMA_IRQHandler+0xcfc>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d02c      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xcd2>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a20      	ldr	r2, [pc, #128]	; (8004ff0 <HAL_DMA_IRQHandler+0xd00>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d027      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xcd2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a1f      	ldr	r2, [pc, #124]	; (8004ff4 <HAL_DMA_IRQHandler+0xd04>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d022      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xcd2>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a1d      	ldr	r2, [pc, #116]	; (8004ff8 <HAL_DMA_IRQHandler+0xd08>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d01d      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xcd2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a1c      	ldr	r2, [pc, #112]	; (8004ffc <HAL_DMA_IRQHandler+0xd0c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d018      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xcd2>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a1a      	ldr	r2, [pc, #104]	; (8005000 <HAL_DMA_IRQHandler+0xd10>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d013      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xcd2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a19      	ldr	r2, [pc, #100]	; (8005004 <HAL_DMA_IRQHandler+0xd14>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00e      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xcd2>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a17      	ldr	r2, [pc, #92]	; (8005008 <HAL_DMA_IRQHandler+0xd18>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d009      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xcd2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a16      	ldr	r2, [pc, #88]	; (800500c <HAL_DMA_IRQHandler+0xd1c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d004      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0xcd2>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a14      	ldr	r2, [pc, #80]	; (8005010 <HAL_DMA_IRQHandler+0xd20>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d128      	bne.n	8005014 <HAL_DMA_IRQHandler+0xd24>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0214 	bic.w	r2, r2, #20
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	e027      	b.n	8005024 <HAL_DMA_IRQHandler+0xd34>
 8004fd4:	40020010 	.word	0x40020010
 8004fd8:	40020028 	.word	0x40020028
 8004fdc:	40020040 	.word	0x40020040
 8004fe0:	40020058 	.word	0x40020058
 8004fe4:	40020070 	.word	0x40020070
 8004fe8:	40020088 	.word	0x40020088
 8004fec:	400200a0 	.word	0x400200a0
 8004ff0:	400200b8 	.word	0x400200b8
 8004ff4:	40020410 	.word	0x40020410
 8004ff8:	40020428 	.word	0x40020428
 8004ffc:	40020440 	.word	0x40020440
 8005000:	40020458 	.word	0x40020458
 8005004:	40020470 	.word	0x40020470
 8005008:	40020488 	.word	0x40020488
 800500c:	400204a0 	.word	0x400204a0
 8005010:	400204b8 	.word	0x400204b8
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 020a 	bic.w	r2, r2, #10
 8005022:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 8097 	beq.w	800516c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005046:	e091      	b.n	800516c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504c:	f003 031f 	and.w	r3, r3, #31
 8005050:	2208      	movs	r2, #8
 8005052:	409a      	lsls	r2, r3
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	4013      	ands	r3, r2
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 8088 	beq.w	800516e <HAL_DMA_IRQHandler+0xe7e>
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 8082 	beq.w	800516e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a41      	ldr	r2, [pc, #260]	; (8005174 <HAL_DMA_IRQHandler+0xe84>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d04a      	beq.n	800510a <HAL_DMA_IRQHandler+0xe1a>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a3f      	ldr	r2, [pc, #252]	; (8005178 <HAL_DMA_IRQHandler+0xe88>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d045      	beq.n	800510a <HAL_DMA_IRQHandler+0xe1a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a3e      	ldr	r2, [pc, #248]	; (800517c <HAL_DMA_IRQHandler+0xe8c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d040      	beq.n	800510a <HAL_DMA_IRQHandler+0xe1a>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a3c      	ldr	r2, [pc, #240]	; (8005180 <HAL_DMA_IRQHandler+0xe90>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d03b      	beq.n	800510a <HAL_DMA_IRQHandler+0xe1a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a3b      	ldr	r2, [pc, #236]	; (8005184 <HAL_DMA_IRQHandler+0xe94>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d036      	beq.n	800510a <HAL_DMA_IRQHandler+0xe1a>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a39      	ldr	r2, [pc, #228]	; (8005188 <HAL_DMA_IRQHandler+0xe98>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d031      	beq.n	800510a <HAL_DMA_IRQHandler+0xe1a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a38      	ldr	r2, [pc, #224]	; (800518c <HAL_DMA_IRQHandler+0xe9c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d02c      	beq.n	800510a <HAL_DMA_IRQHandler+0xe1a>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a36      	ldr	r2, [pc, #216]	; (8005190 <HAL_DMA_IRQHandler+0xea0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d027      	beq.n	800510a <HAL_DMA_IRQHandler+0xe1a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a35      	ldr	r2, [pc, #212]	; (8005194 <HAL_DMA_IRQHandler+0xea4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d022      	beq.n	800510a <HAL_DMA_IRQHandler+0xe1a>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a33      	ldr	r2, [pc, #204]	; (8005198 <HAL_DMA_IRQHandler+0xea8>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d01d      	beq.n	800510a <HAL_DMA_IRQHandler+0xe1a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a32      	ldr	r2, [pc, #200]	; (800519c <HAL_DMA_IRQHandler+0xeac>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d018      	beq.n	800510a <HAL_DMA_IRQHandler+0xe1a>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a30      	ldr	r2, [pc, #192]	; (80051a0 <HAL_DMA_IRQHandler+0xeb0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d013      	beq.n	800510a <HAL_DMA_IRQHandler+0xe1a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a2f      	ldr	r2, [pc, #188]	; (80051a4 <HAL_DMA_IRQHandler+0xeb4>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00e      	beq.n	800510a <HAL_DMA_IRQHandler+0xe1a>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a2d      	ldr	r2, [pc, #180]	; (80051a8 <HAL_DMA_IRQHandler+0xeb8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d009      	beq.n	800510a <HAL_DMA_IRQHandler+0xe1a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a2c      	ldr	r2, [pc, #176]	; (80051ac <HAL_DMA_IRQHandler+0xebc>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d004      	beq.n	800510a <HAL_DMA_IRQHandler+0xe1a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a2a      	ldr	r2, [pc, #168]	; (80051b0 <HAL_DMA_IRQHandler+0xec0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d108      	bne.n	800511c <HAL_DMA_IRQHandler+0xe2c>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 021c 	bic.w	r2, r2, #28
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	e007      	b.n	800512c <HAL_DMA_IRQHandler+0xe3c>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 020e 	bic.w	r2, r2, #14
 800512a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005130:	f003 031f 	and.w	r3, r3, #31
 8005134:	2201      	movs	r2, #1
 8005136:	409a      	lsls	r2, r3
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005156:	2b00      	cmp	r3, #0
 8005158:	d009      	beq.n	800516e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	4798      	blx	r3
 8005162:	e004      	b.n	800516e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8005164:	bf00      	nop
 8005166:	e002      	b.n	800516e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005168:	bf00      	nop
 800516a:	e000      	b.n	800516e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800516c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800516e:	3728      	adds	r7, #40	; 0x28
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40020010 	.word	0x40020010
 8005178:	40020028 	.word	0x40020028
 800517c:	40020040 	.word	0x40020040
 8005180:	40020058 	.word	0x40020058
 8005184:	40020070 	.word	0x40020070
 8005188:	40020088 	.word	0x40020088
 800518c:	400200a0 	.word	0x400200a0
 8005190:	400200b8 	.word	0x400200b8
 8005194:	40020410 	.word	0x40020410
 8005198:	40020428 	.word	0x40020428
 800519c:	40020440 	.word	0x40020440
 80051a0:	40020458 	.word	0x40020458
 80051a4:	40020470 	.word	0x40020470
 80051a8:	40020488 	.word	0x40020488
 80051ac:	400204a0 	.word	0x400204a0
 80051b0:	400204b8 	.word	0x400204b8

080051b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051cc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a7f      	ldr	r2, [pc, #508]	; (80053d0 <DMA_SetConfig+0x21c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d072      	beq.n	80052be <DMA_SetConfig+0x10a>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a7d      	ldr	r2, [pc, #500]	; (80053d4 <DMA_SetConfig+0x220>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d06d      	beq.n	80052be <DMA_SetConfig+0x10a>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a7c      	ldr	r2, [pc, #496]	; (80053d8 <DMA_SetConfig+0x224>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d068      	beq.n	80052be <DMA_SetConfig+0x10a>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a7a      	ldr	r2, [pc, #488]	; (80053dc <DMA_SetConfig+0x228>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d063      	beq.n	80052be <DMA_SetConfig+0x10a>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a79      	ldr	r2, [pc, #484]	; (80053e0 <DMA_SetConfig+0x22c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d05e      	beq.n	80052be <DMA_SetConfig+0x10a>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a77      	ldr	r2, [pc, #476]	; (80053e4 <DMA_SetConfig+0x230>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d059      	beq.n	80052be <DMA_SetConfig+0x10a>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a76      	ldr	r2, [pc, #472]	; (80053e8 <DMA_SetConfig+0x234>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d054      	beq.n	80052be <DMA_SetConfig+0x10a>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a74      	ldr	r2, [pc, #464]	; (80053ec <DMA_SetConfig+0x238>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d04f      	beq.n	80052be <DMA_SetConfig+0x10a>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a73      	ldr	r2, [pc, #460]	; (80053f0 <DMA_SetConfig+0x23c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d04a      	beq.n	80052be <DMA_SetConfig+0x10a>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a71      	ldr	r2, [pc, #452]	; (80053f4 <DMA_SetConfig+0x240>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d045      	beq.n	80052be <DMA_SetConfig+0x10a>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a70      	ldr	r2, [pc, #448]	; (80053f8 <DMA_SetConfig+0x244>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d040      	beq.n	80052be <DMA_SetConfig+0x10a>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a6e      	ldr	r2, [pc, #440]	; (80053fc <DMA_SetConfig+0x248>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d03b      	beq.n	80052be <DMA_SetConfig+0x10a>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a6d      	ldr	r2, [pc, #436]	; (8005400 <DMA_SetConfig+0x24c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d036      	beq.n	80052be <DMA_SetConfig+0x10a>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a6b      	ldr	r2, [pc, #428]	; (8005404 <DMA_SetConfig+0x250>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d031      	beq.n	80052be <DMA_SetConfig+0x10a>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a6a      	ldr	r2, [pc, #424]	; (8005408 <DMA_SetConfig+0x254>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d02c      	beq.n	80052be <DMA_SetConfig+0x10a>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a68      	ldr	r2, [pc, #416]	; (800540c <DMA_SetConfig+0x258>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d027      	beq.n	80052be <DMA_SetConfig+0x10a>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a67      	ldr	r2, [pc, #412]	; (8005410 <DMA_SetConfig+0x25c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d022      	beq.n	80052be <DMA_SetConfig+0x10a>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a65      	ldr	r2, [pc, #404]	; (8005414 <DMA_SetConfig+0x260>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d01d      	beq.n	80052be <DMA_SetConfig+0x10a>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a64      	ldr	r2, [pc, #400]	; (8005418 <DMA_SetConfig+0x264>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d018      	beq.n	80052be <DMA_SetConfig+0x10a>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a62      	ldr	r2, [pc, #392]	; (800541c <DMA_SetConfig+0x268>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d013      	beq.n	80052be <DMA_SetConfig+0x10a>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a61      	ldr	r2, [pc, #388]	; (8005420 <DMA_SetConfig+0x26c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00e      	beq.n	80052be <DMA_SetConfig+0x10a>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a5f      	ldr	r2, [pc, #380]	; (8005424 <DMA_SetConfig+0x270>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d009      	beq.n	80052be <DMA_SetConfig+0x10a>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a5e      	ldr	r2, [pc, #376]	; (8005428 <DMA_SetConfig+0x274>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d004      	beq.n	80052be <DMA_SetConfig+0x10a>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a5c      	ldr	r2, [pc, #368]	; (800542c <DMA_SetConfig+0x278>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d101      	bne.n	80052c2 <DMA_SetConfig+0x10e>
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <DMA_SetConfig+0x110>
 80052c2:	2300      	movs	r3, #0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00d      	beq.n	80052e4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80052d0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d004      	beq.n	80052e4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80052e2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a39      	ldr	r2, [pc, #228]	; (80053d0 <DMA_SetConfig+0x21c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d04a      	beq.n	8005384 <DMA_SetConfig+0x1d0>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a38      	ldr	r2, [pc, #224]	; (80053d4 <DMA_SetConfig+0x220>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d045      	beq.n	8005384 <DMA_SetConfig+0x1d0>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a36      	ldr	r2, [pc, #216]	; (80053d8 <DMA_SetConfig+0x224>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d040      	beq.n	8005384 <DMA_SetConfig+0x1d0>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a35      	ldr	r2, [pc, #212]	; (80053dc <DMA_SetConfig+0x228>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d03b      	beq.n	8005384 <DMA_SetConfig+0x1d0>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a33      	ldr	r2, [pc, #204]	; (80053e0 <DMA_SetConfig+0x22c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d036      	beq.n	8005384 <DMA_SetConfig+0x1d0>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a32      	ldr	r2, [pc, #200]	; (80053e4 <DMA_SetConfig+0x230>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d031      	beq.n	8005384 <DMA_SetConfig+0x1d0>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a30      	ldr	r2, [pc, #192]	; (80053e8 <DMA_SetConfig+0x234>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d02c      	beq.n	8005384 <DMA_SetConfig+0x1d0>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a2f      	ldr	r2, [pc, #188]	; (80053ec <DMA_SetConfig+0x238>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d027      	beq.n	8005384 <DMA_SetConfig+0x1d0>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a2d      	ldr	r2, [pc, #180]	; (80053f0 <DMA_SetConfig+0x23c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d022      	beq.n	8005384 <DMA_SetConfig+0x1d0>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a2c      	ldr	r2, [pc, #176]	; (80053f4 <DMA_SetConfig+0x240>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d01d      	beq.n	8005384 <DMA_SetConfig+0x1d0>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a2a      	ldr	r2, [pc, #168]	; (80053f8 <DMA_SetConfig+0x244>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d018      	beq.n	8005384 <DMA_SetConfig+0x1d0>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a29      	ldr	r2, [pc, #164]	; (80053fc <DMA_SetConfig+0x248>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d013      	beq.n	8005384 <DMA_SetConfig+0x1d0>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a27      	ldr	r2, [pc, #156]	; (8005400 <DMA_SetConfig+0x24c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00e      	beq.n	8005384 <DMA_SetConfig+0x1d0>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a26      	ldr	r2, [pc, #152]	; (8005404 <DMA_SetConfig+0x250>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d009      	beq.n	8005384 <DMA_SetConfig+0x1d0>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a24      	ldr	r2, [pc, #144]	; (8005408 <DMA_SetConfig+0x254>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d004      	beq.n	8005384 <DMA_SetConfig+0x1d0>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a23      	ldr	r2, [pc, #140]	; (800540c <DMA_SetConfig+0x258>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d101      	bne.n	8005388 <DMA_SetConfig+0x1d4>
 8005384:	2301      	movs	r3, #1
 8005386:	e000      	b.n	800538a <DMA_SetConfig+0x1d6>
 8005388:	2300      	movs	r3, #0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d059      	beq.n	8005442 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005392:	f003 031f 	and.w	r3, r3, #31
 8005396:	223f      	movs	r2, #63	; 0x3f
 8005398:	409a      	lsls	r2, r3
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053ac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	2b40      	cmp	r3, #64	; 0x40
 80053bc:	d138      	bne.n	8005430 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80053ce:	e0ae      	b.n	800552e <DMA_SetConfig+0x37a>
 80053d0:	40020010 	.word	0x40020010
 80053d4:	40020028 	.word	0x40020028
 80053d8:	40020040 	.word	0x40020040
 80053dc:	40020058 	.word	0x40020058
 80053e0:	40020070 	.word	0x40020070
 80053e4:	40020088 	.word	0x40020088
 80053e8:	400200a0 	.word	0x400200a0
 80053ec:	400200b8 	.word	0x400200b8
 80053f0:	40020410 	.word	0x40020410
 80053f4:	40020428 	.word	0x40020428
 80053f8:	40020440 	.word	0x40020440
 80053fc:	40020458 	.word	0x40020458
 8005400:	40020470 	.word	0x40020470
 8005404:	40020488 	.word	0x40020488
 8005408:	400204a0 	.word	0x400204a0
 800540c:	400204b8 	.word	0x400204b8
 8005410:	58025408 	.word	0x58025408
 8005414:	5802541c 	.word	0x5802541c
 8005418:	58025430 	.word	0x58025430
 800541c:	58025444 	.word	0x58025444
 8005420:	58025458 	.word	0x58025458
 8005424:	5802546c 	.word	0x5802546c
 8005428:	58025480 	.word	0x58025480
 800542c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	60da      	str	r2, [r3, #12]
}
 8005440:	e075      	b.n	800552e <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a3d      	ldr	r2, [pc, #244]	; (800553c <DMA_SetConfig+0x388>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d04a      	beq.n	80054e2 <DMA_SetConfig+0x32e>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a3b      	ldr	r2, [pc, #236]	; (8005540 <DMA_SetConfig+0x38c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d045      	beq.n	80054e2 <DMA_SetConfig+0x32e>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a3a      	ldr	r2, [pc, #232]	; (8005544 <DMA_SetConfig+0x390>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d040      	beq.n	80054e2 <DMA_SetConfig+0x32e>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a38      	ldr	r2, [pc, #224]	; (8005548 <DMA_SetConfig+0x394>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d03b      	beq.n	80054e2 <DMA_SetConfig+0x32e>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a37      	ldr	r2, [pc, #220]	; (800554c <DMA_SetConfig+0x398>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d036      	beq.n	80054e2 <DMA_SetConfig+0x32e>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a35      	ldr	r2, [pc, #212]	; (8005550 <DMA_SetConfig+0x39c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d031      	beq.n	80054e2 <DMA_SetConfig+0x32e>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a34      	ldr	r2, [pc, #208]	; (8005554 <DMA_SetConfig+0x3a0>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d02c      	beq.n	80054e2 <DMA_SetConfig+0x32e>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a32      	ldr	r2, [pc, #200]	; (8005558 <DMA_SetConfig+0x3a4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d027      	beq.n	80054e2 <DMA_SetConfig+0x32e>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a31      	ldr	r2, [pc, #196]	; (800555c <DMA_SetConfig+0x3a8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d022      	beq.n	80054e2 <DMA_SetConfig+0x32e>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a2f      	ldr	r2, [pc, #188]	; (8005560 <DMA_SetConfig+0x3ac>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d01d      	beq.n	80054e2 <DMA_SetConfig+0x32e>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a2e      	ldr	r2, [pc, #184]	; (8005564 <DMA_SetConfig+0x3b0>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d018      	beq.n	80054e2 <DMA_SetConfig+0x32e>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a2c      	ldr	r2, [pc, #176]	; (8005568 <DMA_SetConfig+0x3b4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d013      	beq.n	80054e2 <DMA_SetConfig+0x32e>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a2b      	ldr	r2, [pc, #172]	; (800556c <DMA_SetConfig+0x3b8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00e      	beq.n	80054e2 <DMA_SetConfig+0x32e>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a29      	ldr	r2, [pc, #164]	; (8005570 <DMA_SetConfig+0x3bc>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d009      	beq.n	80054e2 <DMA_SetConfig+0x32e>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a28      	ldr	r2, [pc, #160]	; (8005574 <DMA_SetConfig+0x3c0>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d004      	beq.n	80054e2 <DMA_SetConfig+0x32e>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a26      	ldr	r2, [pc, #152]	; (8005578 <DMA_SetConfig+0x3c4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d101      	bne.n	80054e6 <DMA_SetConfig+0x332>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e000      	b.n	80054e8 <DMA_SetConfig+0x334>
 80054e6:	2300      	movs	r3, #0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d020      	beq.n	800552e <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f0:	f003 031f 	and.w	r3, r3, #31
 80054f4:	2201      	movs	r2, #1
 80054f6:	409a      	lsls	r2, r3
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	2b40      	cmp	r3, #64	; 0x40
 800550a:	d108      	bne.n	800551e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	60da      	str	r2, [r3, #12]
}
 800551c:	e007      	b.n	800552e <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	60da      	str	r2, [r3, #12]
}
 800552e:	bf00      	nop
 8005530:	371c      	adds	r7, #28
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	48022c08 	.word	0x48022c08
 8005540:	48022c1c 	.word	0x48022c1c
 8005544:	48022c30 	.word	0x48022c30
 8005548:	48022c44 	.word	0x48022c44
 800554c:	48022c58 	.word	0x48022c58
 8005550:	48022c6c 	.word	0x48022c6c
 8005554:	48022c80 	.word	0x48022c80
 8005558:	48022c94 	.word	0x48022c94
 800555c:	58025408 	.word	0x58025408
 8005560:	5802541c 	.word	0x5802541c
 8005564:	58025430 	.word	0x58025430
 8005568:	58025444 	.word	0x58025444
 800556c:	58025458 	.word	0x58025458
 8005570:	5802546c 	.word	0x5802546c
 8005574:	58025480 	.word	0x58025480
 8005578:	58025494 	.word	0x58025494

0800557c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a42      	ldr	r2, [pc, #264]	; (8005694 <DMA_CalcBaseAndBitshift+0x118>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d04a      	beq.n	8005624 <DMA_CalcBaseAndBitshift+0xa8>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a41      	ldr	r2, [pc, #260]	; (8005698 <DMA_CalcBaseAndBitshift+0x11c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d045      	beq.n	8005624 <DMA_CalcBaseAndBitshift+0xa8>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a3f      	ldr	r2, [pc, #252]	; (800569c <DMA_CalcBaseAndBitshift+0x120>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d040      	beq.n	8005624 <DMA_CalcBaseAndBitshift+0xa8>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a3e      	ldr	r2, [pc, #248]	; (80056a0 <DMA_CalcBaseAndBitshift+0x124>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d03b      	beq.n	8005624 <DMA_CalcBaseAndBitshift+0xa8>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a3c      	ldr	r2, [pc, #240]	; (80056a4 <DMA_CalcBaseAndBitshift+0x128>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d036      	beq.n	8005624 <DMA_CalcBaseAndBitshift+0xa8>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a3b      	ldr	r2, [pc, #236]	; (80056a8 <DMA_CalcBaseAndBitshift+0x12c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d031      	beq.n	8005624 <DMA_CalcBaseAndBitshift+0xa8>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a39      	ldr	r2, [pc, #228]	; (80056ac <DMA_CalcBaseAndBitshift+0x130>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d02c      	beq.n	8005624 <DMA_CalcBaseAndBitshift+0xa8>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a38      	ldr	r2, [pc, #224]	; (80056b0 <DMA_CalcBaseAndBitshift+0x134>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d027      	beq.n	8005624 <DMA_CalcBaseAndBitshift+0xa8>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a36      	ldr	r2, [pc, #216]	; (80056b4 <DMA_CalcBaseAndBitshift+0x138>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d022      	beq.n	8005624 <DMA_CalcBaseAndBitshift+0xa8>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a35      	ldr	r2, [pc, #212]	; (80056b8 <DMA_CalcBaseAndBitshift+0x13c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d01d      	beq.n	8005624 <DMA_CalcBaseAndBitshift+0xa8>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a33      	ldr	r2, [pc, #204]	; (80056bc <DMA_CalcBaseAndBitshift+0x140>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d018      	beq.n	8005624 <DMA_CalcBaseAndBitshift+0xa8>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a32      	ldr	r2, [pc, #200]	; (80056c0 <DMA_CalcBaseAndBitshift+0x144>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d013      	beq.n	8005624 <DMA_CalcBaseAndBitshift+0xa8>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a30      	ldr	r2, [pc, #192]	; (80056c4 <DMA_CalcBaseAndBitshift+0x148>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00e      	beq.n	8005624 <DMA_CalcBaseAndBitshift+0xa8>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a2f      	ldr	r2, [pc, #188]	; (80056c8 <DMA_CalcBaseAndBitshift+0x14c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d009      	beq.n	8005624 <DMA_CalcBaseAndBitshift+0xa8>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a2d      	ldr	r2, [pc, #180]	; (80056cc <DMA_CalcBaseAndBitshift+0x150>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d004      	beq.n	8005624 <DMA_CalcBaseAndBitshift+0xa8>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a2c      	ldr	r2, [pc, #176]	; (80056d0 <DMA_CalcBaseAndBitshift+0x154>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d101      	bne.n	8005628 <DMA_CalcBaseAndBitshift+0xac>
 8005624:	2301      	movs	r3, #1
 8005626:	e000      	b.n	800562a <DMA_CalcBaseAndBitshift+0xae>
 8005628:	2300      	movs	r3, #0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d024      	beq.n	8005678 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	3b10      	subs	r3, #16
 8005636:	4a27      	ldr	r2, [pc, #156]	; (80056d4 <DMA_CalcBaseAndBitshift+0x158>)
 8005638:	fba2 2303 	umull	r2, r3, r2, r3
 800563c:	091b      	lsrs	r3, r3, #4
 800563e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f003 0307 	and.w	r3, r3, #7
 8005646:	4a24      	ldr	r2, [pc, #144]	; (80056d8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005648:	5cd3      	ldrb	r3, [r2, r3]
 800564a:	461a      	mov	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2b03      	cmp	r3, #3
 8005654:	d908      	bls.n	8005668 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	4b1f      	ldr	r3, [pc, #124]	; (80056dc <DMA_CalcBaseAndBitshift+0x160>)
 800565e:	4013      	ands	r3, r2
 8005660:	1d1a      	adds	r2, r3, #4
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	659a      	str	r2, [r3, #88]	; 0x58
 8005666:	e00d      	b.n	8005684 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	461a      	mov	r2, r3
 800566e:	4b1b      	ldr	r3, [pc, #108]	; (80056dc <DMA_CalcBaseAndBitshift+0x160>)
 8005670:	4013      	ands	r3, r2
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6593      	str	r3, [r2, #88]	; 0x58
 8005676:	e005      	b.n	8005684 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005688:	4618      	mov	r0, r3
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	40020010 	.word	0x40020010
 8005698:	40020028 	.word	0x40020028
 800569c:	40020040 	.word	0x40020040
 80056a0:	40020058 	.word	0x40020058
 80056a4:	40020070 	.word	0x40020070
 80056a8:	40020088 	.word	0x40020088
 80056ac:	400200a0 	.word	0x400200a0
 80056b0:	400200b8 	.word	0x400200b8
 80056b4:	40020410 	.word	0x40020410
 80056b8:	40020428 	.word	0x40020428
 80056bc:	40020440 	.word	0x40020440
 80056c0:	40020458 	.word	0x40020458
 80056c4:	40020470 	.word	0x40020470
 80056c8:	40020488 	.word	0x40020488
 80056cc:	400204a0 	.word	0x400204a0
 80056d0:	400204b8 	.word	0x400204b8
 80056d4:	aaaaaaab 	.word	0xaaaaaaab
 80056d8:	08010d68 	.word	0x08010d68
 80056dc:	fffffc00 	.word	0xfffffc00

080056e0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d120      	bne.n	8005736 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d858      	bhi.n	80057ae <DMA_CheckFifoParam+0xce>
 80056fc:	a201      	add	r2, pc, #4	; (adr r2, 8005704 <DMA_CheckFifoParam+0x24>)
 80056fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005702:	bf00      	nop
 8005704:	08005715 	.word	0x08005715
 8005708:	08005727 	.word	0x08005727
 800570c:	08005715 	.word	0x08005715
 8005710:	080057af 	.word	0x080057af
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d048      	beq.n	80057b2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005724:	e045      	b.n	80057b2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800572e:	d142      	bne.n	80057b6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005734:	e03f      	b.n	80057b6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800573e:	d123      	bne.n	8005788 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005744:	2b03      	cmp	r3, #3
 8005746:	d838      	bhi.n	80057ba <DMA_CheckFifoParam+0xda>
 8005748:	a201      	add	r2, pc, #4	; (adr r2, 8005750 <DMA_CheckFifoParam+0x70>)
 800574a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574e:	bf00      	nop
 8005750:	08005761 	.word	0x08005761
 8005754:	08005767 	.word	0x08005767
 8005758:	08005761 	.word	0x08005761
 800575c:	08005779 	.word	0x08005779
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
        break;
 8005764:	e030      	b.n	80057c8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d025      	beq.n	80057be <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005776:	e022      	b.n	80057be <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005780:	d11f      	bne.n	80057c2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005786:	e01c      	b.n	80057c2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578c:	2b02      	cmp	r3, #2
 800578e:	d902      	bls.n	8005796 <DMA_CheckFifoParam+0xb6>
 8005790:	2b03      	cmp	r3, #3
 8005792:	d003      	beq.n	800579c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005794:	e018      	b.n	80057c8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	73fb      	strb	r3, [r7, #15]
        break;
 800579a:	e015      	b.n	80057c8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00e      	beq.n	80057c6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	73fb      	strb	r3, [r7, #15]
    break;
 80057ac:	e00b      	b.n	80057c6 <DMA_CheckFifoParam+0xe6>
        break;
 80057ae:	bf00      	nop
 80057b0:	e00a      	b.n	80057c8 <DMA_CheckFifoParam+0xe8>
        break;
 80057b2:	bf00      	nop
 80057b4:	e008      	b.n	80057c8 <DMA_CheckFifoParam+0xe8>
        break;
 80057b6:	bf00      	nop
 80057b8:	e006      	b.n	80057c8 <DMA_CheckFifoParam+0xe8>
        break;
 80057ba:	bf00      	nop
 80057bc:	e004      	b.n	80057c8 <DMA_CheckFifoParam+0xe8>
        break;
 80057be:	bf00      	nop
 80057c0:	e002      	b.n	80057c8 <DMA_CheckFifoParam+0xe8>
        break;
 80057c2:	bf00      	nop
 80057c4:	e000      	b.n	80057c8 <DMA_CheckFifoParam+0xe8>
    break;
 80057c6:	bf00      	nop
    }
  }

  return status;
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop

080057d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a38      	ldr	r2, [pc, #224]	; (80058cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d022      	beq.n	8005836 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a36      	ldr	r2, [pc, #216]	; (80058d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d01d      	beq.n	8005836 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a35      	ldr	r2, [pc, #212]	; (80058d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d018      	beq.n	8005836 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a33      	ldr	r2, [pc, #204]	; (80058d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d013      	beq.n	8005836 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a32      	ldr	r2, [pc, #200]	; (80058dc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00e      	beq.n	8005836 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a30      	ldr	r2, [pc, #192]	; (80058e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d009      	beq.n	8005836 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a2f      	ldr	r2, [pc, #188]	; (80058e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d004      	beq.n	8005836 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a2d      	ldr	r2, [pc, #180]	; (80058e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d101      	bne.n	800583a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005836:	2301      	movs	r3, #1
 8005838:	e000      	b.n	800583c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800583a:	2300      	movs	r3, #0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d01a      	beq.n	8005876 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	3b08      	subs	r3, #8
 8005848:	4a28      	ldr	r2, [pc, #160]	; (80058ec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800584a:	fba2 2303 	umull	r2, r3, r2, r3
 800584e:	091b      	lsrs	r3, r3, #4
 8005850:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4b26      	ldr	r3, [pc, #152]	; (80058f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005856:	4413      	add	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	461a      	mov	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a24      	ldr	r2, [pc, #144]	; (80058f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005864:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f003 031f 	and.w	r3, r3, #31
 800586c:	2201      	movs	r2, #1
 800586e:	409a      	lsls	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005874:	e024      	b.n	80058c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	b2db      	uxtb	r3, r3
 800587c:	3b10      	subs	r3, #16
 800587e:	4a1e      	ldr	r2, [pc, #120]	; (80058f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005880:	fba2 2303 	umull	r2, r3, r2, r3
 8005884:	091b      	lsrs	r3, r3, #4
 8005886:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	4a1c      	ldr	r2, [pc, #112]	; (80058fc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d806      	bhi.n	800589e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	4a1b      	ldr	r2, [pc, #108]	; (8005900 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d902      	bls.n	800589e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	3308      	adds	r3, #8
 800589c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	4b18      	ldr	r3, [pc, #96]	; (8005904 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80058a2:	4413      	add	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	461a      	mov	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a16      	ldr	r2, [pc, #88]	; (8005908 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80058b0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f003 031f 	and.w	r3, r3, #31
 80058b8:	2201      	movs	r2, #1
 80058ba:	409a      	lsls	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	669a      	str	r2, [r3, #104]	; 0x68
}
 80058c0:	bf00      	nop
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	58025408 	.word	0x58025408
 80058d0:	5802541c 	.word	0x5802541c
 80058d4:	58025430 	.word	0x58025430
 80058d8:	58025444 	.word	0x58025444
 80058dc:	58025458 	.word	0x58025458
 80058e0:	5802546c 	.word	0x5802546c
 80058e4:	58025480 	.word	0x58025480
 80058e8:	58025494 	.word	0x58025494
 80058ec:	cccccccd 	.word	0xcccccccd
 80058f0:	16009600 	.word	0x16009600
 80058f4:	58025880 	.word	0x58025880
 80058f8:	aaaaaaab 	.word	0xaaaaaaab
 80058fc:	400204b8 	.word	0x400204b8
 8005900:	4002040f 	.word	0x4002040f
 8005904:	10008200 	.word	0x10008200
 8005908:	40020880 	.word	0x40020880

0800590c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	b2db      	uxtb	r3, r3
 800591a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d04a      	beq.n	80059b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b08      	cmp	r3, #8
 8005926:	d847      	bhi.n	80059b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a25      	ldr	r2, [pc, #148]	; (80059c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d022      	beq.n	8005978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a24      	ldr	r2, [pc, #144]	; (80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d01d      	beq.n	8005978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a22      	ldr	r2, [pc, #136]	; (80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d018      	beq.n	8005978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a21      	ldr	r2, [pc, #132]	; (80059d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d013      	beq.n	8005978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a1f      	ldr	r2, [pc, #124]	; (80059d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d00e      	beq.n	8005978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1e      	ldr	r2, [pc, #120]	; (80059d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d009      	beq.n	8005978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1c      	ldr	r2, [pc, #112]	; (80059dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d004      	beq.n	8005978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1b      	ldr	r2, [pc, #108]	; (80059e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d101      	bne.n	800597c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800597c:	2300      	movs	r3, #0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	4b17      	ldr	r3, [pc, #92]	; (80059e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005986:	4413      	add	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	461a      	mov	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a15      	ldr	r2, [pc, #84]	; (80059e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005994:	671a      	str	r2, [r3, #112]	; 0x70
 8005996:	e009      	b.n	80059ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4b14      	ldr	r3, [pc, #80]	; (80059ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	461a      	mov	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a11      	ldr	r2, [pc, #68]	; (80059f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80059aa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	2201      	movs	r2, #1
 80059b2:	409a      	lsls	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80059b8:	bf00      	nop
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	58025408 	.word	0x58025408
 80059c8:	5802541c 	.word	0x5802541c
 80059cc:	58025430 	.word	0x58025430
 80059d0:	58025444 	.word	0x58025444
 80059d4:	58025458 	.word	0x58025458
 80059d8:	5802546c 	.word	0x5802546c
 80059dc:	58025480 	.word	0x58025480
 80059e0:	58025494 	.word	0x58025494
 80059e4:	1600963f 	.word	0x1600963f
 80059e8:	58025940 	.word	0x58025940
 80059ec:	1000823f 	.word	0x1000823f
 80059f0:	40020940 	.word	0x40020940

080059f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b089      	sub	sp, #36	; 0x24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a02:	4b89      	ldr	r3, [pc, #548]	; (8005c28 <HAL_GPIO_Init+0x234>)
 8005a04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a06:	e194      	b.n	8005d32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	fa01 f303 	lsl.w	r3, r1, r3
 8005a14:	4013      	ands	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 8186 	beq.w	8005d2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f003 0303 	and.w	r3, r3, #3
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d005      	beq.n	8005a38 <HAL_GPIO_Init+0x44>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f003 0303 	and.w	r3, r3, #3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d130      	bne.n	8005a9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	2203      	movs	r2, #3
 8005a44:	fa02 f303 	lsl.w	r3, r2, r3
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	68da      	ldr	r2, [r3, #12]
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a6e:	2201      	movs	r2, #1
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	fa02 f303 	lsl.w	r3, r2, r3
 8005a76:	43db      	mvns	r3, r3
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	091b      	lsrs	r3, r3, #4
 8005a84:	f003 0201 	and.w	r2, r3, #1
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f003 0303 	and.w	r3, r3, #3
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d017      	beq.n	8005ad6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	2203      	movs	r2, #3
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	43db      	mvns	r3, r3
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	4013      	ands	r3, r2
 8005abc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	689a      	ldr	r2, [r3, #8]
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f003 0303 	and.w	r3, r3, #3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d123      	bne.n	8005b2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	08da      	lsrs	r2, r3, #3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3208      	adds	r2, #8
 8005aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	220f      	movs	r2, #15
 8005afa:	fa02 f303 	lsl.w	r3, r2, r3
 8005afe:	43db      	mvns	r3, r3
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	4013      	ands	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	691a      	ldr	r2, [r3, #16]
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	fa02 f303 	lsl.w	r3, r2, r3
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	08da      	lsrs	r2, r3, #3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3208      	adds	r2, #8
 8005b24:	69b9      	ldr	r1, [r7, #24]
 8005b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	2203      	movs	r2, #3
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	43db      	mvns	r3, r3
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f003 0203 	and.w	r2, r3, #3
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 80e0 	beq.w	8005d2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b6c:	4b2f      	ldr	r3, [pc, #188]	; (8005c2c <HAL_GPIO_Init+0x238>)
 8005b6e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005b72:	4a2e      	ldr	r2, [pc, #184]	; (8005c2c <HAL_GPIO_Init+0x238>)
 8005b74:	f043 0302 	orr.w	r3, r3, #2
 8005b78:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005b7c:	4b2b      	ldr	r3, [pc, #172]	; (8005c2c <HAL_GPIO_Init+0x238>)
 8005b7e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b8a:	4a29      	ldr	r2, [pc, #164]	; (8005c30 <HAL_GPIO_Init+0x23c>)
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	089b      	lsrs	r3, r3, #2
 8005b90:	3302      	adds	r3, #2
 8005b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	220f      	movs	r2, #15
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	43db      	mvns	r3, r3
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	4013      	ands	r3, r2
 8005bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a20      	ldr	r2, [pc, #128]	; (8005c34 <HAL_GPIO_Init+0x240>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d052      	beq.n	8005c5c <HAL_GPIO_Init+0x268>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a1f      	ldr	r2, [pc, #124]	; (8005c38 <HAL_GPIO_Init+0x244>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d031      	beq.n	8005c22 <HAL_GPIO_Init+0x22e>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a1e      	ldr	r2, [pc, #120]	; (8005c3c <HAL_GPIO_Init+0x248>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d02b      	beq.n	8005c1e <HAL_GPIO_Init+0x22a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a1d      	ldr	r2, [pc, #116]	; (8005c40 <HAL_GPIO_Init+0x24c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d025      	beq.n	8005c1a <HAL_GPIO_Init+0x226>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a1c      	ldr	r2, [pc, #112]	; (8005c44 <HAL_GPIO_Init+0x250>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d01f      	beq.n	8005c16 <HAL_GPIO_Init+0x222>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a1b      	ldr	r2, [pc, #108]	; (8005c48 <HAL_GPIO_Init+0x254>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d019      	beq.n	8005c12 <HAL_GPIO_Init+0x21e>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a1a      	ldr	r2, [pc, #104]	; (8005c4c <HAL_GPIO_Init+0x258>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d013      	beq.n	8005c0e <HAL_GPIO_Init+0x21a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a19      	ldr	r2, [pc, #100]	; (8005c50 <HAL_GPIO_Init+0x25c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00d      	beq.n	8005c0a <HAL_GPIO_Init+0x216>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a18      	ldr	r2, [pc, #96]	; (8005c54 <HAL_GPIO_Init+0x260>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d007      	beq.n	8005c06 <HAL_GPIO_Init+0x212>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a17      	ldr	r2, [pc, #92]	; (8005c58 <HAL_GPIO_Init+0x264>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d101      	bne.n	8005c02 <HAL_GPIO_Init+0x20e>
 8005bfe:	2309      	movs	r3, #9
 8005c00:	e02d      	b.n	8005c5e <HAL_GPIO_Init+0x26a>
 8005c02:	230a      	movs	r3, #10
 8005c04:	e02b      	b.n	8005c5e <HAL_GPIO_Init+0x26a>
 8005c06:	2308      	movs	r3, #8
 8005c08:	e029      	b.n	8005c5e <HAL_GPIO_Init+0x26a>
 8005c0a:	2307      	movs	r3, #7
 8005c0c:	e027      	b.n	8005c5e <HAL_GPIO_Init+0x26a>
 8005c0e:	2306      	movs	r3, #6
 8005c10:	e025      	b.n	8005c5e <HAL_GPIO_Init+0x26a>
 8005c12:	2305      	movs	r3, #5
 8005c14:	e023      	b.n	8005c5e <HAL_GPIO_Init+0x26a>
 8005c16:	2304      	movs	r3, #4
 8005c18:	e021      	b.n	8005c5e <HAL_GPIO_Init+0x26a>
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e01f      	b.n	8005c5e <HAL_GPIO_Init+0x26a>
 8005c1e:	2302      	movs	r3, #2
 8005c20:	e01d      	b.n	8005c5e <HAL_GPIO_Init+0x26a>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e01b      	b.n	8005c5e <HAL_GPIO_Init+0x26a>
 8005c26:	bf00      	nop
 8005c28:	58000080 	.word	0x58000080
 8005c2c:	58024400 	.word	0x58024400
 8005c30:	58000400 	.word	0x58000400
 8005c34:	58020000 	.word	0x58020000
 8005c38:	58020400 	.word	0x58020400
 8005c3c:	58020800 	.word	0x58020800
 8005c40:	58020c00 	.word	0x58020c00
 8005c44:	58021000 	.word	0x58021000
 8005c48:	58021400 	.word	0x58021400
 8005c4c:	58021800 	.word	0x58021800
 8005c50:	58021c00 	.word	0x58021c00
 8005c54:	58022000 	.word	0x58022000
 8005c58:	58022400 	.word	0x58022400
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	69fa      	ldr	r2, [r7, #28]
 8005c60:	f002 0203 	and.w	r2, r2, #3
 8005c64:	0092      	lsls	r2, r2, #2
 8005c66:	4093      	lsls	r3, r2
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c6e:	4938      	ldr	r1, [pc, #224]	; (8005d50 <HAL_GPIO_Init+0x35c>)
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	089b      	lsrs	r3, r3, #2
 8005c74:	3302      	adds	r3, #2
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	43db      	mvns	r3, r3
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005ca2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	43db      	mvns	r3, r3
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005cd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	43db      	mvns	r3, r3
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f47f ae63 	bne.w	8005a08 <HAL_GPIO_Init+0x14>
  }
}
 8005d42:	bf00      	nop
 8005d44:	bf00      	nop
 8005d46:	3724      	adds	r7, #36	; 0x24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	58000400 	.word	0x58000400

08005d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	807b      	strh	r3, [r7, #2]
 8005d60:	4613      	mov	r3, r2
 8005d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d64:	787b      	ldrb	r3, [r7, #1]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d6a:	887a      	ldrh	r2, [r7, #2]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d70:	e003      	b.n	8005d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d72:	887b      	ldrh	r3, [r7, #2]
 8005d74:	041a      	lsls	r2, r3, #16
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	619a      	str	r2, [r3, #24]
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b085      	sub	sp, #20
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d98:	887a      	ldrh	r2, [r7, #2]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	041a      	lsls	r2, r3, #16
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	43d9      	mvns	r1, r3
 8005da4:	887b      	ldrh	r3, [r7, #2]
 8005da6:	400b      	ands	r3, r1
 8005da8:	431a      	orrs	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	619a      	str	r2, [r3, #24]
}
 8005dae:	bf00      	nop
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
	...

08005dbc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005dc4:	4b29      	ldr	r3, [pc, #164]	; (8005e6c <HAL_PWREx_ConfigSupply+0xb0>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	2b06      	cmp	r3, #6
 8005dce:	d00a      	beq.n	8005de6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005dd0:	4b26      	ldr	r3, [pc, #152]	; (8005e6c <HAL_PWREx_ConfigSupply+0xb0>)
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d001      	beq.n	8005de2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e040      	b.n	8005e64 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	e03e      	b.n	8005e64 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005de6:	4b21      	ldr	r3, [pc, #132]	; (8005e6c <HAL_PWREx_ConfigSupply+0xb0>)
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005dee:	491f      	ldr	r1, [pc, #124]	; (8005e6c <HAL_PWREx_ConfigSupply+0xb0>)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005df6:	f7fb fd19 	bl	800182c <HAL_GetTick>
 8005dfa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005dfc:	e009      	b.n	8005e12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005dfe:	f7fb fd15 	bl	800182c <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e0c:	d901      	bls.n	8005e12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e028      	b.n	8005e64 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e12:	4b16      	ldr	r3, [pc, #88]	; (8005e6c <HAL_PWREx_ConfigSupply+0xb0>)
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e1e:	d1ee      	bne.n	8005dfe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b1e      	cmp	r3, #30
 8005e24:	d008      	beq.n	8005e38 <HAL_PWREx_ConfigSupply+0x7c>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b2e      	cmp	r3, #46	; 0x2e
 8005e2a:	d005      	beq.n	8005e38 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b1d      	cmp	r3, #29
 8005e30:	d002      	beq.n	8005e38 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b2d      	cmp	r3, #45	; 0x2d
 8005e36:	d114      	bne.n	8005e62 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005e38:	f7fb fcf8 	bl	800182c <HAL_GetTick>
 8005e3c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005e3e:	e009      	b.n	8005e54 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e40:	f7fb fcf4 	bl	800182c <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e4e:	d901      	bls.n	8005e54 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e007      	b.n	8005e64 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005e54:	4b05      	ldr	r3, [pc, #20]	; (8005e6c <HAL_PWREx_ConfigSupply+0xb0>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e60:	d1ee      	bne.n	8005e40 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	58024800 	.word	0x58024800

08005e70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08c      	sub	sp, #48	; 0x30
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d102      	bne.n	8005e84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	f000 bc1f 	b.w	80066c2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 80b3 	beq.w	8005ff8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e92:	4b95      	ldr	r3, [pc, #596]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e9c:	4b92      	ldr	r3, [pc, #584]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea4:	2b10      	cmp	r3, #16
 8005ea6:	d007      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x48>
 8005ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eaa:	2b18      	cmp	r3, #24
 8005eac:	d112      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x64>
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d10d      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eb8:	4b8b      	ldr	r3, [pc, #556]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 8098 	beq.w	8005ff6 <HAL_RCC_OscConfig+0x186>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f040 8093 	bne.w	8005ff6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e3f6      	b.n	80066c2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005edc:	d106      	bne.n	8005eec <HAL_RCC_OscConfig+0x7c>
 8005ede:	4b82      	ldr	r3, [pc, #520]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a81      	ldr	r2, [pc, #516]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ee8:	6013      	str	r3, [r2, #0]
 8005eea:	e058      	b.n	8005f9e <HAL_RCC_OscConfig+0x12e>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d112      	bne.n	8005f1a <HAL_RCC_OscConfig+0xaa>
 8005ef4:	4b7c      	ldr	r3, [pc, #496]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a7b      	ldr	r2, [pc, #492]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	4b79      	ldr	r3, [pc, #484]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a78      	ldr	r2, [pc, #480]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005f06:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f0a:	6013      	str	r3, [r2, #0]
 8005f0c:	4b76      	ldr	r3, [pc, #472]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a75      	ldr	r2, [pc, #468]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	e041      	b.n	8005f9e <HAL_RCC_OscConfig+0x12e>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f22:	d112      	bne.n	8005f4a <HAL_RCC_OscConfig+0xda>
 8005f24:	4b70      	ldr	r3, [pc, #448]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a6f      	ldr	r2, [pc, #444]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005f2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	4b6d      	ldr	r3, [pc, #436]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a6c      	ldr	r2, [pc, #432]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005f36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f3a:	6013      	str	r3, [r2, #0]
 8005f3c:	4b6a      	ldr	r3, [pc, #424]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a69      	ldr	r2, [pc, #420]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	e029      	b.n	8005f9e <HAL_RCC_OscConfig+0x12e>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005f52:	d112      	bne.n	8005f7a <HAL_RCC_OscConfig+0x10a>
 8005f54:	4b64      	ldr	r3, [pc, #400]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a63      	ldr	r2, [pc, #396]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005f5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f5e:	6013      	str	r3, [r2, #0]
 8005f60:	4b61      	ldr	r3, [pc, #388]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a60      	ldr	r2, [pc, #384]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	4b5e      	ldr	r3, [pc, #376]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a5d      	ldr	r2, [pc, #372]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f76:	6013      	str	r3, [r2, #0]
 8005f78:	e011      	b.n	8005f9e <HAL_RCC_OscConfig+0x12e>
 8005f7a:	4b5b      	ldr	r3, [pc, #364]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a5a      	ldr	r2, [pc, #360]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	4b58      	ldr	r3, [pc, #352]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a57      	ldr	r2, [pc, #348]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	4b55      	ldr	r3, [pc, #340]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a54      	ldr	r2, [pc, #336]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005f98:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f9c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d013      	beq.n	8005fce <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa6:	f7fb fc41 	bl	800182c <HAL_GetTick>
 8005faa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005fac:	e008      	b.n	8005fc0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fae:	f7fb fc3d 	bl	800182c <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b64      	cmp	r3, #100	; 0x64
 8005fba:	d901      	bls.n	8005fc0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e380      	b.n	80066c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005fc0:	4b49      	ldr	r3, [pc, #292]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0f0      	beq.n	8005fae <HAL_RCC_OscConfig+0x13e>
 8005fcc:	e014      	b.n	8005ff8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fce:	f7fb fc2d 	bl	800182c <HAL_GetTick>
 8005fd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fd6:	f7fb fc29 	bl	800182c <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b64      	cmp	r3, #100	; 0x64
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e36c      	b.n	80066c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005fe8:	4b3f      	ldr	r3, [pc, #252]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1f0      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x166>
 8005ff4:	e000      	b.n	8005ff8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ff6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 808c 	beq.w	800611e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006006:	4b38      	ldr	r3, [pc, #224]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800600e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006010:	4b35      	ldr	r3, [pc, #212]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8006012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006014:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d007      	beq.n	800602c <HAL_RCC_OscConfig+0x1bc>
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	2b18      	cmp	r3, #24
 8006020:	d137      	bne.n	8006092 <HAL_RCC_OscConfig+0x222>
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	f003 0303 	and.w	r3, r3, #3
 8006028:	2b00      	cmp	r3, #0
 800602a:	d132      	bne.n	8006092 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800602c:	4b2e      	ldr	r3, [pc, #184]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	d005      	beq.n	8006044 <HAL_RCC_OscConfig+0x1d4>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e33e      	b.n	80066c2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006044:	4b28      	ldr	r3, [pc, #160]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f023 0219 	bic.w	r2, r3, #25
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	4925      	ldr	r1, [pc, #148]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8006052:	4313      	orrs	r3, r2
 8006054:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006056:	f7fb fbe9 	bl	800182c <HAL_GetTick>
 800605a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800605c:	e008      	b.n	8006070 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800605e:	f7fb fbe5 	bl	800182c <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e328      	b.n	80066c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006070:	4b1d      	ldr	r3, [pc, #116]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b00      	cmp	r3, #0
 800607a:	d0f0      	beq.n	800605e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800607c:	4b1a      	ldr	r3, [pc, #104]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	061b      	lsls	r3, r3, #24
 800608a:	4917      	ldr	r1, [pc, #92]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 800608c:	4313      	orrs	r3, r2
 800608e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006090:	e045      	b.n	800611e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d028      	beq.n	80060ec <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800609a:	4b13      	ldr	r3, [pc, #76]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f023 0219 	bic.w	r2, r3, #25
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	4910      	ldr	r1, [pc, #64]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ac:	f7fb fbbe 	bl	800182c <HAL_GetTick>
 80060b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060b4:	f7fb fbba 	bl	800182c <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e2fd      	b.n	80066c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060c6:	4b08      	ldr	r3, [pc, #32]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0304 	and.w	r3, r3, #4
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0f0      	beq.n	80060b4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060d2:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	061b      	lsls	r3, r3, #24
 80060e0:	4901      	ldr	r1, [pc, #4]	; (80060e8 <HAL_RCC_OscConfig+0x278>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	604b      	str	r3, [r1, #4]
 80060e6:	e01a      	b.n	800611e <HAL_RCC_OscConfig+0x2ae>
 80060e8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060ec:	4b97      	ldr	r3, [pc, #604]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a96      	ldr	r2, [pc, #600]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 80060f2:	f023 0301 	bic.w	r3, r3, #1
 80060f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f8:	f7fb fb98 	bl	800182c <HAL_GetTick>
 80060fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006100:	f7fb fb94 	bl	800182c <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e2d7      	b.n	80066c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006112:	4b8e      	ldr	r3, [pc, #568]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0304 	and.w	r3, r3, #4
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1f0      	bne.n	8006100 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0310 	and.w	r3, r3, #16
 8006126:	2b00      	cmp	r3, #0
 8006128:	d06a      	beq.n	8006200 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800612a:	4b88      	ldr	r3, [pc, #544]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006132:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006134:	4b85      	ldr	r3, [pc, #532]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 8006136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006138:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	2b08      	cmp	r3, #8
 800613e:	d007      	beq.n	8006150 <HAL_RCC_OscConfig+0x2e0>
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	2b18      	cmp	r3, #24
 8006144:	d11b      	bne.n	800617e <HAL_RCC_OscConfig+0x30e>
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f003 0303 	and.w	r3, r3, #3
 800614c:	2b01      	cmp	r3, #1
 800614e:	d116      	bne.n	800617e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006150:	4b7e      	ldr	r3, [pc, #504]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006158:	2b00      	cmp	r3, #0
 800615a:	d005      	beq.n	8006168 <HAL_RCC_OscConfig+0x2f8>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	2b80      	cmp	r3, #128	; 0x80
 8006162:	d001      	beq.n	8006168 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e2ac      	b.n	80066c2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006168:	4b78      	ldr	r3, [pc, #480]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	061b      	lsls	r3, r3, #24
 8006176:	4975      	ldr	r1, [pc, #468]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 8006178:	4313      	orrs	r3, r2
 800617a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800617c:	e040      	b.n	8006200 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d023      	beq.n	80061ce <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006186:	4b71      	ldr	r3, [pc, #452]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a70      	ldr	r2, [pc, #448]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 800618c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006192:	f7fb fb4b 	bl	800182c <HAL_GetTick>
 8006196:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006198:	e008      	b.n	80061ac <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800619a:	f7fb fb47 	bl	800182c <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e28a      	b.n	80066c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061ac:	4b67      	ldr	r3, [pc, #412]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0f0      	beq.n	800619a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061b8:	4b64      	ldr	r3, [pc, #400]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	061b      	lsls	r3, r3, #24
 80061c6:	4961      	ldr	r1, [pc, #388]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60cb      	str	r3, [r1, #12]
 80061cc:	e018      	b.n	8006200 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80061ce:	4b5f      	ldr	r3, [pc, #380]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a5e      	ldr	r2, [pc, #376]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 80061d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061da:	f7fb fb27 	bl	800182c <HAL_GetTick>
 80061de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061e0:	e008      	b.n	80061f4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80061e2:	f7fb fb23 	bl	800182c <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d901      	bls.n	80061f4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e266      	b.n	80066c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061f4:	4b55      	ldr	r3, [pc, #340]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1f0      	bne.n	80061e2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0308 	and.w	r3, r3, #8
 8006208:	2b00      	cmp	r3, #0
 800620a:	d036      	beq.n	800627a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d019      	beq.n	8006248 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006214:	4b4d      	ldr	r3, [pc, #308]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 8006216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006218:	4a4c      	ldr	r2, [pc, #304]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 800621a:	f043 0301 	orr.w	r3, r3, #1
 800621e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006220:	f7fb fb04 	bl	800182c <HAL_GetTick>
 8006224:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006226:	e008      	b.n	800623a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006228:	f7fb fb00 	bl	800182c <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e243      	b.n	80066c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800623a:	4b44      	ldr	r3, [pc, #272]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 800623c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800623e:	f003 0302 	and.w	r3, r3, #2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0f0      	beq.n	8006228 <HAL_RCC_OscConfig+0x3b8>
 8006246:	e018      	b.n	800627a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006248:	4b40      	ldr	r3, [pc, #256]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 800624a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800624c:	4a3f      	ldr	r2, [pc, #252]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 800624e:	f023 0301 	bic.w	r3, r3, #1
 8006252:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006254:	f7fb faea 	bl	800182c <HAL_GetTick>
 8006258:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800625a:	e008      	b.n	800626e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800625c:	f7fb fae6 	bl	800182c <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b02      	cmp	r3, #2
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e229      	b.n	80066c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800626e:	4b37      	ldr	r3, [pc, #220]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 8006270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1f0      	bne.n	800625c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	d036      	beq.n	80062f4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d019      	beq.n	80062c2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800628e:	4b2f      	ldr	r3, [pc, #188]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a2e      	ldr	r2, [pc, #184]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 8006294:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006298:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800629a:	f7fb fac7 	bl	800182c <HAL_GetTick>
 800629e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062a0:	e008      	b.n	80062b4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062a2:	f7fb fac3 	bl	800182c <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d901      	bls.n	80062b4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e206      	b.n	80066c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80062b4:	4b25      	ldr	r3, [pc, #148]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0f0      	beq.n	80062a2 <HAL_RCC_OscConfig+0x432>
 80062c0:	e018      	b.n	80062f4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80062c2:	4b22      	ldr	r3, [pc, #136]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a21      	ldr	r2, [pc, #132]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 80062c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80062ce:	f7fb faad 	bl	800182c <HAL_GetTick>
 80062d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062d4:	e008      	b.n	80062e8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062d6:	f7fb faa9 	bl	800182c <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d901      	bls.n	80062e8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e1ec      	b.n	80066c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062e8:	4b18      	ldr	r3, [pc, #96]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1f0      	bne.n	80062d6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0304 	and.w	r3, r3, #4
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 80af 	beq.w	8006460 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006302:	4b13      	ldr	r3, [pc, #76]	; (8006350 <HAL_RCC_OscConfig+0x4e0>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a12      	ldr	r2, [pc, #72]	; (8006350 <HAL_RCC_OscConfig+0x4e0>)
 8006308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800630c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800630e:	f7fb fa8d 	bl	800182c <HAL_GetTick>
 8006312:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006314:	e008      	b.n	8006328 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006316:	f7fb fa89 	bl	800182c <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b64      	cmp	r3, #100	; 0x64
 8006322:	d901      	bls.n	8006328 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e1cc      	b.n	80066c2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006328:	4b09      	ldr	r3, [pc, #36]	; (8006350 <HAL_RCC_OscConfig+0x4e0>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006330:	2b00      	cmp	r3, #0
 8006332:	d0f0      	beq.n	8006316 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d10b      	bne.n	8006354 <HAL_RCC_OscConfig+0x4e4>
 800633c:	4b03      	ldr	r3, [pc, #12]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 800633e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006340:	4a02      	ldr	r2, [pc, #8]	; (800634c <HAL_RCC_OscConfig+0x4dc>)
 8006342:	f043 0301 	orr.w	r3, r3, #1
 8006346:	6713      	str	r3, [r2, #112]	; 0x70
 8006348:	e05b      	b.n	8006402 <HAL_RCC_OscConfig+0x592>
 800634a:	bf00      	nop
 800634c:	58024400 	.word	0x58024400
 8006350:	58024800 	.word	0x58024800
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d112      	bne.n	8006382 <HAL_RCC_OscConfig+0x512>
 800635c:	4b9d      	ldr	r3, [pc, #628]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 800635e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006360:	4a9c      	ldr	r2, [pc, #624]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 8006362:	f023 0301 	bic.w	r3, r3, #1
 8006366:	6713      	str	r3, [r2, #112]	; 0x70
 8006368:	4b9a      	ldr	r3, [pc, #616]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 800636a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636c:	4a99      	ldr	r2, [pc, #612]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 800636e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006372:	6713      	str	r3, [r2, #112]	; 0x70
 8006374:	4b97      	ldr	r3, [pc, #604]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 8006376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006378:	4a96      	ldr	r2, [pc, #600]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 800637a:	f023 0304 	bic.w	r3, r3, #4
 800637e:	6713      	str	r3, [r2, #112]	; 0x70
 8006380:	e03f      	b.n	8006402 <HAL_RCC_OscConfig+0x592>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	2b05      	cmp	r3, #5
 8006388:	d112      	bne.n	80063b0 <HAL_RCC_OscConfig+0x540>
 800638a:	4b92      	ldr	r3, [pc, #584]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 800638c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638e:	4a91      	ldr	r2, [pc, #580]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 8006390:	f043 0304 	orr.w	r3, r3, #4
 8006394:	6713      	str	r3, [r2, #112]	; 0x70
 8006396:	4b8f      	ldr	r3, [pc, #572]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 8006398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639a:	4a8e      	ldr	r2, [pc, #568]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 800639c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063a0:	6713      	str	r3, [r2, #112]	; 0x70
 80063a2:	4b8c      	ldr	r3, [pc, #560]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 80063a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a6:	4a8b      	ldr	r2, [pc, #556]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 80063a8:	f043 0301 	orr.w	r3, r3, #1
 80063ac:	6713      	str	r3, [r2, #112]	; 0x70
 80063ae:	e028      	b.n	8006402 <HAL_RCC_OscConfig+0x592>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	2b85      	cmp	r3, #133	; 0x85
 80063b6:	d112      	bne.n	80063de <HAL_RCC_OscConfig+0x56e>
 80063b8:	4b86      	ldr	r3, [pc, #536]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 80063ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063bc:	4a85      	ldr	r2, [pc, #532]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 80063be:	f043 0304 	orr.w	r3, r3, #4
 80063c2:	6713      	str	r3, [r2, #112]	; 0x70
 80063c4:	4b83      	ldr	r3, [pc, #524]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 80063c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c8:	4a82      	ldr	r2, [pc, #520]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 80063ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ce:	6713      	str	r3, [r2, #112]	; 0x70
 80063d0:	4b80      	ldr	r3, [pc, #512]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 80063d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d4:	4a7f      	ldr	r2, [pc, #508]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 80063d6:	f043 0301 	orr.w	r3, r3, #1
 80063da:	6713      	str	r3, [r2, #112]	; 0x70
 80063dc:	e011      	b.n	8006402 <HAL_RCC_OscConfig+0x592>
 80063de:	4b7d      	ldr	r3, [pc, #500]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 80063e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e2:	4a7c      	ldr	r2, [pc, #496]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 80063e4:	f023 0301 	bic.w	r3, r3, #1
 80063e8:	6713      	str	r3, [r2, #112]	; 0x70
 80063ea:	4b7a      	ldr	r3, [pc, #488]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 80063ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ee:	4a79      	ldr	r2, [pc, #484]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 80063f0:	f023 0304 	bic.w	r3, r3, #4
 80063f4:	6713      	str	r3, [r2, #112]	; 0x70
 80063f6:	4b77      	ldr	r3, [pc, #476]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 80063f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fa:	4a76      	ldr	r2, [pc, #472]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 80063fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006400:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d015      	beq.n	8006436 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800640a:	f7fb fa0f 	bl	800182c <HAL_GetTick>
 800640e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006410:	e00a      	b.n	8006428 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006412:	f7fb fa0b 	bl	800182c <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006420:	4293      	cmp	r3, r2
 8006422:	d901      	bls.n	8006428 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e14c      	b.n	80066c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006428:	4b6a      	ldr	r3, [pc, #424]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 800642a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d0ee      	beq.n	8006412 <HAL_RCC_OscConfig+0x5a2>
 8006434:	e014      	b.n	8006460 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006436:	f7fb f9f9 	bl	800182c <HAL_GetTick>
 800643a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800643c:	e00a      	b.n	8006454 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800643e:	f7fb f9f5 	bl	800182c <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	f241 3288 	movw	r2, #5000	; 0x1388
 800644c:	4293      	cmp	r3, r2
 800644e:	d901      	bls.n	8006454 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e136      	b.n	80066c2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006454:	4b5f      	ldr	r3, [pc, #380]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 8006456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1ee      	bne.n	800643e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 812b 	beq.w	80066c0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800646a:	4b5a      	ldr	r3, [pc, #360]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006472:	2b18      	cmp	r3, #24
 8006474:	f000 80bb 	beq.w	80065ee <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	2b02      	cmp	r3, #2
 800647e:	f040 8095 	bne.w	80065ac <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006482:	4b54      	ldr	r3, [pc, #336]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a53      	ldr	r2, [pc, #332]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 8006488:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800648c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800648e:	f7fb f9cd 	bl	800182c <HAL_GetTick>
 8006492:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006494:	e008      	b.n	80064a8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006496:	f7fb f9c9 	bl	800182c <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d901      	bls.n	80064a8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e10c      	b.n	80066c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064a8:	4b4a      	ldr	r3, [pc, #296]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1f0      	bne.n	8006496 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064b4:	4b47      	ldr	r3, [pc, #284]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 80064b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064b8:	4b47      	ldr	r3, [pc, #284]	; (80065d8 <HAL_RCC_OscConfig+0x768>)
 80064ba:	4013      	ands	r3, r2
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80064c4:	0112      	lsls	r2, r2, #4
 80064c6:	430a      	orrs	r2, r1
 80064c8:	4942      	ldr	r1, [pc, #264]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	628b      	str	r3, [r1, #40]	; 0x28
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d2:	3b01      	subs	r3, #1
 80064d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064dc:	3b01      	subs	r3, #1
 80064de:	025b      	lsls	r3, r3, #9
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e8:	3b01      	subs	r3, #1
 80064ea:	041b      	lsls	r3, r3, #16
 80064ec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064f0:	431a      	orrs	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f6:	3b01      	subs	r3, #1
 80064f8:	061b      	lsls	r3, r3, #24
 80064fa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80064fe:	4935      	ldr	r1, [pc, #212]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 8006500:	4313      	orrs	r3, r2
 8006502:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006504:	4b33      	ldr	r3, [pc, #204]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	4a32      	ldr	r2, [pc, #200]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 800650a:	f023 0301 	bic.w	r3, r3, #1
 800650e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006510:	4b30      	ldr	r3, [pc, #192]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 8006512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006514:	4b31      	ldr	r3, [pc, #196]	; (80065dc <HAL_RCC_OscConfig+0x76c>)
 8006516:	4013      	ands	r3, r2
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800651c:	00d2      	lsls	r2, r2, #3
 800651e:	492d      	ldr	r1, [pc, #180]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 8006520:	4313      	orrs	r3, r2
 8006522:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006524:	4b2b      	ldr	r3, [pc, #172]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 8006526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006528:	f023 020c 	bic.w	r2, r3, #12
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006530:	4928      	ldr	r1, [pc, #160]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 8006532:	4313      	orrs	r3, r2
 8006534:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006536:	4b27      	ldr	r3, [pc, #156]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	f023 0202 	bic.w	r2, r3, #2
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006542:	4924      	ldr	r1, [pc, #144]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 8006544:	4313      	orrs	r3, r2
 8006546:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006548:	4b22      	ldr	r3, [pc, #136]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	4a21      	ldr	r2, [pc, #132]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 800654e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006552:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006554:	4b1f      	ldr	r3, [pc, #124]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	4a1e      	ldr	r2, [pc, #120]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 800655a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800655e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006560:	4b1c      	ldr	r3, [pc, #112]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	4a1b      	ldr	r2, [pc, #108]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 8006566:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800656a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800656c:	4b19      	ldr	r3, [pc, #100]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 800656e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006570:	4a18      	ldr	r2, [pc, #96]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 8006572:	f043 0301 	orr.w	r3, r3, #1
 8006576:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006578:	4b16      	ldr	r3, [pc, #88]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a15      	ldr	r2, [pc, #84]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 800657e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006584:	f7fb f952 	bl	800182c <HAL_GetTick>
 8006588:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800658c:	f7fb f94e 	bl	800182c <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e091      	b.n	80066c2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800659e:	4b0d      	ldr	r3, [pc, #52]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0f0      	beq.n	800658c <HAL_RCC_OscConfig+0x71c>
 80065aa:	e089      	b.n	80066c0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ac:	4b09      	ldr	r3, [pc, #36]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a08      	ldr	r2, [pc, #32]	; (80065d4 <HAL_RCC_OscConfig+0x764>)
 80065b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b8:	f7fb f938 	bl	800182c <HAL_GetTick>
 80065bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065be:	e00f      	b.n	80065e0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c0:	f7fb f934 	bl	800182c <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d908      	bls.n	80065e0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e077      	b.n	80066c2 <HAL_RCC_OscConfig+0x852>
 80065d2:	bf00      	nop
 80065d4:	58024400 	.word	0x58024400
 80065d8:	fffffc0c 	.word	0xfffffc0c
 80065dc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065e0:	4b3a      	ldr	r3, [pc, #232]	; (80066cc <HAL_RCC_OscConfig+0x85c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e9      	bne.n	80065c0 <HAL_RCC_OscConfig+0x750>
 80065ec:	e068      	b.n	80066c0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80065ee:	4b37      	ldr	r3, [pc, #220]	; (80066cc <HAL_RCC_OscConfig+0x85c>)
 80065f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80065f4:	4b35      	ldr	r3, [pc, #212]	; (80066cc <HAL_RCC_OscConfig+0x85c>)
 80065f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d031      	beq.n	8006666 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f003 0203 	and.w	r2, r3, #3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800660c:	429a      	cmp	r2, r3
 800660e:	d12a      	bne.n	8006666 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	091b      	lsrs	r3, r3, #4
 8006614:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800661c:	429a      	cmp	r2, r3
 800661e:	d122      	bne.n	8006666 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800662c:	429a      	cmp	r2, r3
 800662e:	d11a      	bne.n	8006666 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	0a5b      	lsrs	r3, r3, #9
 8006634:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800663e:	429a      	cmp	r2, r3
 8006640:	d111      	bne.n	8006666 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	0c1b      	lsrs	r3, r3, #16
 8006646:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006650:	429a      	cmp	r2, r3
 8006652:	d108      	bne.n	8006666 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	0e1b      	lsrs	r3, r3, #24
 8006658:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006660:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006662:	429a      	cmp	r2, r3
 8006664:	d001      	beq.n	800666a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e02b      	b.n	80066c2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800666a:	4b18      	ldr	r3, [pc, #96]	; (80066cc <HAL_RCC_OscConfig+0x85c>)
 800666c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666e:	08db      	lsrs	r3, r3, #3
 8006670:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006674:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	429a      	cmp	r2, r3
 800667e:	d01f      	beq.n	80066c0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006680:	4b12      	ldr	r3, [pc, #72]	; (80066cc <HAL_RCC_OscConfig+0x85c>)
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	4a11      	ldr	r2, [pc, #68]	; (80066cc <HAL_RCC_OscConfig+0x85c>)
 8006686:	f023 0301 	bic.w	r3, r3, #1
 800668a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800668c:	f7fb f8ce 	bl	800182c <HAL_GetTick>
 8006690:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006692:	bf00      	nop
 8006694:	f7fb f8ca 	bl	800182c <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	4293      	cmp	r3, r2
 800669e:	d0f9      	beq.n	8006694 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80066a0:	4b0a      	ldr	r3, [pc, #40]	; (80066cc <HAL_RCC_OscConfig+0x85c>)
 80066a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066a4:	4b0a      	ldr	r3, [pc, #40]	; (80066d0 <HAL_RCC_OscConfig+0x860>)
 80066a6:	4013      	ands	r3, r2
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80066ac:	00d2      	lsls	r2, r2, #3
 80066ae:	4907      	ldr	r1, [pc, #28]	; (80066cc <HAL_RCC_OscConfig+0x85c>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80066b4:	4b05      	ldr	r3, [pc, #20]	; (80066cc <HAL_RCC_OscConfig+0x85c>)
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	4a04      	ldr	r2, [pc, #16]	; (80066cc <HAL_RCC_OscConfig+0x85c>)
 80066ba:	f043 0301 	orr.w	r3, r3, #1
 80066be:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3730      	adds	r7, #48	; 0x30
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	58024400 	.word	0x58024400
 80066d0:	ffff0007 	.word	0xffff0007

080066d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e19c      	b.n	8006a22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066e8:	4b8a      	ldr	r3, [pc, #552]	; (8006914 <HAL_RCC_ClockConfig+0x240>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 030f 	and.w	r3, r3, #15
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d910      	bls.n	8006718 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066f6:	4b87      	ldr	r3, [pc, #540]	; (8006914 <HAL_RCC_ClockConfig+0x240>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f023 020f 	bic.w	r2, r3, #15
 80066fe:	4985      	ldr	r1, [pc, #532]	; (8006914 <HAL_RCC_ClockConfig+0x240>)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	4313      	orrs	r3, r2
 8006704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006706:	4b83      	ldr	r3, [pc, #524]	; (8006914 <HAL_RCC_ClockConfig+0x240>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 030f 	and.w	r3, r3, #15
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	429a      	cmp	r2, r3
 8006712:	d001      	beq.n	8006718 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e184      	b.n	8006a22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0304 	and.w	r3, r3, #4
 8006720:	2b00      	cmp	r3, #0
 8006722:	d010      	beq.n	8006746 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	691a      	ldr	r2, [r3, #16]
 8006728:	4b7b      	ldr	r3, [pc, #492]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006730:	429a      	cmp	r2, r3
 8006732:	d908      	bls.n	8006746 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006734:	4b78      	ldr	r3, [pc, #480]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	4975      	ldr	r1, [pc, #468]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 8006742:	4313      	orrs	r3, r2
 8006744:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0308 	and.w	r3, r3, #8
 800674e:	2b00      	cmp	r3, #0
 8006750:	d010      	beq.n	8006774 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	695a      	ldr	r2, [r3, #20]
 8006756:	4b70      	ldr	r3, [pc, #448]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 8006758:	69db      	ldr	r3, [r3, #28]
 800675a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800675e:	429a      	cmp	r2, r3
 8006760:	d908      	bls.n	8006774 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006762:	4b6d      	ldr	r3, [pc, #436]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	496a      	ldr	r1, [pc, #424]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 8006770:	4313      	orrs	r3, r2
 8006772:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0310 	and.w	r3, r3, #16
 800677c:	2b00      	cmp	r3, #0
 800677e:	d010      	beq.n	80067a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	699a      	ldr	r2, [r3, #24]
 8006784:	4b64      	ldr	r3, [pc, #400]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800678c:	429a      	cmp	r2, r3
 800678e:	d908      	bls.n	80067a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006790:	4b61      	ldr	r3, [pc, #388]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	495e      	ldr	r1, [pc, #376]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0320 	and.w	r3, r3, #32
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d010      	beq.n	80067d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	69da      	ldr	r2, [r3, #28]
 80067b2:	4b59      	ldr	r3, [pc, #356]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d908      	bls.n	80067d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80067be:	4b56      	ldr	r3, [pc, #344]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	4953      	ldr	r1, [pc, #332]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d010      	beq.n	80067fe <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68da      	ldr	r2, [r3, #12]
 80067e0:	4b4d      	ldr	r3, [pc, #308]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	f003 030f 	and.w	r3, r3, #15
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d908      	bls.n	80067fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067ec:	4b4a      	ldr	r3, [pc, #296]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	f023 020f 	bic.w	r2, r3, #15
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	4947      	ldr	r1, [pc, #284]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d055      	beq.n	80068b6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800680a:	4b43      	ldr	r3, [pc, #268]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	4940      	ldr	r1, [pc, #256]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 8006818:	4313      	orrs	r3, r2
 800681a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	2b02      	cmp	r3, #2
 8006822:	d107      	bne.n	8006834 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006824:	4b3c      	ldr	r3, [pc, #240]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d121      	bne.n	8006874 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e0f6      	b.n	8006a22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	2b03      	cmp	r3, #3
 800683a:	d107      	bne.n	800684c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800683c:	4b36      	ldr	r3, [pc, #216]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d115      	bne.n	8006874 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e0ea      	b.n	8006a22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d107      	bne.n	8006864 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006854:	4b30      	ldr	r3, [pc, #192]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685c:	2b00      	cmp	r3, #0
 800685e:	d109      	bne.n	8006874 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e0de      	b.n	8006a22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006864:	4b2c      	ldr	r3, [pc, #176]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0304 	and.w	r3, r3, #4
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e0d6      	b.n	8006a22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006874:	4b28      	ldr	r3, [pc, #160]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	f023 0207 	bic.w	r2, r3, #7
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	4925      	ldr	r1, [pc, #148]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 8006882:	4313      	orrs	r3, r2
 8006884:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006886:	f7fa ffd1 	bl	800182c <HAL_GetTick>
 800688a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800688c:	e00a      	b.n	80068a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800688e:	f7fa ffcd 	bl	800182c <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	f241 3288 	movw	r2, #5000	; 0x1388
 800689c:	4293      	cmp	r3, r2
 800689e:	d901      	bls.n	80068a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e0be      	b.n	8006a22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068a4:	4b1c      	ldr	r3, [pc, #112]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	00db      	lsls	r3, r3, #3
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d1eb      	bne.n	800688e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d010      	beq.n	80068e4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	4b14      	ldr	r3, [pc, #80]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d208      	bcs.n	80068e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068d2:	4b11      	ldr	r3, [pc, #68]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	f023 020f 	bic.w	r2, r3, #15
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	490e      	ldr	r1, [pc, #56]	; (8006918 <HAL_RCC_ClockConfig+0x244>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068e4:	4b0b      	ldr	r3, [pc, #44]	; (8006914 <HAL_RCC_ClockConfig+0x240>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 030f 	and.w	r3, r3, #15
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d214      	bcs.n	800691c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068f2:	4b08      	ldr	r3, [pc, #32]	; (8006914 <HAL_RCC_ClockConfig+0x240>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f023 020f 	bic.w	r2, r3, #15
 80068fa:	4906      	ldr	r1, [pc, #24]	; (8006914 <HAL_RCC_ClockConfig+0x240>)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	4313      	orrs	r3, r2
 8006900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006902:	4b04      	ldr	r3, [pc, #16]	; (8006914 <HAL_RCC_ClockConfig+0x240>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 030f 	and.w	r3, r3, #15
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	429a      	cmp	r2, r3
 800690e:	d005      	beq.n	800691c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e086      	b.n	8006a22 <HAL_RCC_ClockConfig+0x34e>
 8006914:	52002000 	.word	0x52002000
 8006918:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	2b00      	cmp	r3, #0
 8006926:	d010      	beq.n	800694a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	691a      	ldr	r2, [r3, #16]
 800692c:	4b3f      	ldr	r3, [pc, #252]	; (8006a2c <HAL_RCC_ClockConfig+0x358>)
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006934:	429a      	cmp	r2, r3
 8006936:	d208      	bcs.n	800694a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006938:	4b3c      	ldr	r3, [pc, #240]	; (8006a2c <HAL_RCC_ClockConfig+0x358>)
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	4939      	ldr	r1, [pc, #228]	; (8006a2c <HAL_RCC_ClockConfig+0x358>)
 8006946:	4313      	orrs	r3, r2
 8006948:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0308 	and.w	r3, r3, #8
 8006952:	2b00      	cmp	r3, #0
 8006954:	d010      	beq.n	8006978 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	695a      	ldr	r2, [r3, #20]
 800695a:	4b34      	ldr	r3, [pc, #208]	; (8006a2c <HAL_RCC_ClockConfig+0x358>)
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006962:	429a      	cmp	r2, r3
 8006964:	d208      	bcs.n	8006978 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006966:	4b31      	ldr	r3, [pc, #196]	; (8006a2c <HAL_RCC_ClockConfig+0x358>)
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	492e      	ldr	r1, [pc, #184]	; (8006a2c <HAL_RCC_ClockConfig+0x358>)
 8006974:	4313      	orrs	r3, r2
 8006976:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0310 	and.w	r3, r3, #16
 8006980:	2b00      	cmp	r3, #0
 8006982:	d010      	beq.n	80069a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	699a      	ldr	r2, [r3, #24]
 8006988:	4b28      	ldr	r3, [pc, #160]	; (8006a2c <HAL_RCC_ClockConfig+0x358>)
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006990:	429a      	cmp	r2, r3
 8006992:	d208      	bcs.n	80069a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006994:	4b25      	ldr	r3, [pc, #148]	; (8006a2c <HAL_RCC_ClockConfig+0x358>)
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	4922      	ldr	r1, [pc, #136]	; (8006a2c <HAL_RCC_ClockConfig+0x358>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0320 	and.w	r3, r3, #32
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d010      	beq.n	80069d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	69da      	ldr	r2, [r3, #28]
 80069b6:	4b1d      	ldr	r3, [pc, #116]	; (8006a2c <HAL_RCC_ClockConfig+0x358>)
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069be:	429a      	cmp	r2, r3
 80069c0:	d208      	bcs.n	80069d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80069c2:	4b1a      	ldr	r3, [pc, #104]	; (8006a2c <HAL_RCC_ClockConfig+0x358>)
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	4917      	ldr	r1, [pc, #92]	; (8006a2c <HAL_RCC_ClockConfig+0x358>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80069d4:	f000 f834 	bl	8006a40 <HAL_RCC_GetSysClockFreq>
 80069d8:	4602      	mov	r2, r0
 80069da:	4b14      	ldr	r3, [pc, #80]	; (8006a2c <HAL_RCC_ClockConfig+0x358>)
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	0a1b      	lsrs	r3, r3, #8
 80069e0:	f003 030f 	and.w	r3, r3, #15
 80069e4:	4912      	ldr	r1, [pc, #72]	; (8006a30 <HAL_RCC_ClockConfig+0x35c>)
 80069e6:	5ccb      	ldrb	r3, [r1, r3]
 80069e8:	f003 031f 	and.w	r3, r3, #31
 80069ec:	fa22 f303 	lsr.w	r3, r2, r3
 80069f0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80069f2:	4b0e      	ldr	r3, [pc, #56]	; (8006a2c <HAL_RCC_ClockConfig+0x358>)
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	4a0d      	ldr	r2, [pc, #52]	; (8006a30 <HAL_RCC_ClockConfig+0x35c>)
 80069fc:	5cd3      	ldrb	r3, [r2, r3]
 80069fe:	f003 031f 	and.w	r3, r3, #31
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	fa22 f303 	lsr.w	r3, r2, r3
 8006a08:	4a0a      	ldr	r2, [pc, #40]	; (8006a34 <HAL_RCC_ClockConfig+0x360>)
 8006a0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a0c:	4a0a      	ldr	r2, [pc, #40]	; (8006a38 <HAL_RCC_ClockConfig+0x364>)
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006a12:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <HAL_RCC_ClockConfig+0x368>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fa fd78 	bl	800150c <HAL_InitTick>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	58024400 	.word	0x58024400
 8006a30:	08010d58 	.word	0x08010d58
 8006a34:	24000008 	.word	0x24000008
 8006a38:	24000004 	.word	0x24000004
 8006a3c:	2400000c 	.word	0x2400000c

08006a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b089      	sub	sp, #36	; 0x24
 8006a44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a46:	4bb3      	ldr	r3, [pc, #716]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a4e:	2b18      	cmp	r3, #24
 8006a50:	f200 8155 	bhi.w	8006cfe <HAL_RCC_GetSysClockFreq+0x2be>
 8006a54:	a201      	add	r2, pc, #4	; (adr r2, 8006a5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5a:	bf00      	nop
 8006a5c:	08006ac1 	.word	0x08006ac1
 8006a60:	08006cff 	.word	0x08006cff
 8006a64:	08006cff 	.word	0x08006cff
 8006a68:	08006cff 	.word	0x08006cff
 8006a6c:	08006cff 	.word	0x08006cff
 8006a70:	08006cff 	.word	0x08006cff
 8006a74:	08006cff 	.word	0x08006cff
 8006a78:	08006cff 	.word	0x08006cff
 8006a7c:	08006ae7 	.word	0x08006ae7
 8006a80:	08006cff 	.word	0x08006cff
 8006a84:	08006cff 	.word	0x08006cff
 8006a88:	08006cff 	.word	0x08006cff
 8006a8c:	08006cff 	.word	0x08006cff
 8006a90:	08006cff 	.word	0x08006cff
 8006a94:	08006cff 	.word	0x08006cff
 8006a98:	08006cff 	.word	0x08006cff
 8006a9c:	08006aed 	.word	0x08006aed
 8006aa0:	08006cff 	.word	0x08006cff
 8006aa4:	08006cff 	.word	0x08006cff
 8006aa8:	08006cff 	.word	0x08006cff
 8006aac:	08006cff 	.word	0x08006cff
 8006ab0:	08006cff 	.word	0x08006cff
 8006ab4:	08006cff 	.word	0x08006cff
 8006ab8:	08006cff 	.word	0x08006cff
 8006abc:	08006af3 	.word	0x08006af3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ac0:	4b94      	ldr	r3, [pc, #592]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0320 	and.w	r3, r3, #32
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d009      	beq.n	8006ae0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006acc:	4b91      	ldr	r3, [pc, #580]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	08db      	lsrs	r3, r3, #3
 8006ad2:	f003 0303 	and.w	r3, r3, #3
 8006ad6:	4a90      	ldr	r2, [pc, #576]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8006adc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006ade:	e111      	b.n	8006d04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ae0:	4b8d      	ldr	r3, [pc, #564]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ae2:	61bb      	str	r3, [r7, #24]
      break;
 8006ae4:	e10e      	b.n	8006d04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006ae6:	4b8d      	ldr	r3, [pc, #564]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ae8:	61bb      	str	r3, [r7, #24]
      break;
 8006aea:	e10b      	b.n	8006d04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006aec:	4b8c      	ldr	r3, [pc, #560]	; (8006d20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006aee:	61bb      	str	r3, [r7, #24]
      break;
 8006af0:	e108      	b.n	8006d04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006af2:	4b88      	ldr	r3, [pc, #544]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af6:	f003 0303 	and.w	r3, r3, #3
 8006afa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006afc:	4b85      	ldr	r3, [pc, #532]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b00:	091b      	lsrs	r3, r3, #4
 8006b02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b06:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b08:	4b82      	ldr	r3, [pc, #520]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b12:	4b80      	ldr	r3, [pc, #512]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b16:	08db      	lsrs	r3, r3, #3
 8006b18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	fb02 f303 	mul.w	r3, r2, r3
 8006b22:	ee07 3a90 	vmov	s15, r3
 8006b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 80e1 	beq.w	8006cf8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	f000 8083 	beq.w	8006c44 <HAL_RCC_GetSysClockFreq+0x204>
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	f200 80a1 	bhi.w	8006c88 <HAL_RCC_GetSysClockFreq+0x248>
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <HAL_RCC_GetSysClockFreq+0x114>
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d056      	beq.n	8006c00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006b52:	e099      	b.n	8006c88 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b54:	4b6f      	ldr	r3, [pc, #444]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0320 	and.w	r3, r3, #32
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d02d      	beq.n	8006bbc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b60:	4b6c      	ldr	r3, [pc, #432]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	08db      	lsrs	r3, r3, #3
 8006b66:	f003 0303 	and.w	r3, r3, #3
 8006b6a:	4a6b      	ldr	r2, [pc, #428]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b70:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	ee07 3a90 	vmov	s15, r3
 8006b78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	ee07 3a90 	vmov	s15, r3
 8006b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b8a:	4b62      	ldr	r3, [pc, #392]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b9e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006d24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006bba:	e087      	b.n	8006ccc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	ee07 3a90 	vmov	s15, r3
 8006bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006d28 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bce:	4b51      	ldr	r3, [pc, #324]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8006be2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006d24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006bfe:	e065      	b.n	8006ccc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	ee07 3a90 	vmov	s15, r3
 8006c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c0a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006d2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c12:	4b40      	ldr	r3, [pc, #256]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c1a:	ee07 3a90 	vmov	s15, r3
 8006c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c26:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006d24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c42:	e043      	b.n	8006ccc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	ee07 3a90 	vmov	s15, r3
 8006c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006d30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c56:	4b2f      	ldr	r3, [pc, #188]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c5e:	ee07 3a90 	vmov	s15, r3
 8006c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c66:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c6a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006d24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c86:	e021      	b.n	8006ccc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c92:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006d2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c9a:	4b1e      	ldr	r3, [pc, #120]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca2:	ee07 3a90 	vmov	s15, r3
 8006ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006caa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006d24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006ccc:	4b11      	ldr	r3, [pc, #68]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd0:	0a5b      	lsrs	r3, r3, #9
 8006cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	ee07 3a90 	vmov	s15, r3
 8006ce0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ce4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cf0:	ee17 3a90 	vmov	r3, s15
 8006cf4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006cf6:	e005      	b.n	8006d04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	61bb      	str	r3, [r7, #24]
      break;
 8006cfc:	e002      	b.n	8006d04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006cfe:	4b07      	ldr	r3, [pc, #28]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d00:	61bb      	str	r3, [r7, #24]
      break;
 8006d02:	bf00      	nop
  }

  return sysclockfreq;
 8006d04:	69bb      	ldr	r3, [r7, #24]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3724      	adds	r7, #36	; 0x24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	58024400 	.word	0x58024400
 8006d18:	03d09000 	.word	0x03d09000
 8006d1c:	003d0900 	.word	0x003d0900
 8006d20:	007a1200 	.word	0x007a1200
 8006d24:	46000000 	.word	0x46000000
 8006d28:	4c742400 	.word	0x4c742400
 8006d2c:	4a742400 	.word	0x4a742400
 8006d30:	4af42400 	.word	0x4af42400

08006d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006d3a:	f7ff fe81 	bl	8006a40 <HAL_RCC_GetSysClockFreq>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	4b10      	ldr	r3, [pc, #64]	; (8006d84 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	0a1b      	lsrs	r3, r3, #8
 8006d46:	f003 030f 	and.w	r3, r3, #15
 8006d4a:	490f      	ldr	r1, [pc, #60]	; (8006d88 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d4c:	5ccb      	ldrb	r3, [r1, r3]
 8006d4e:	f003 031f 	and.w	r3, r3, #31
 8006d52:	fa22 f303 	lsr.w	r3, r2, r3
 8006d56:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006d58:	4b0a      	ldr	r3, [pc, #40]	; (8006d84 <HAL_RCC_GetHCLKFreq+0x50>)
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	f003 030f 	and.w	r3, r3, #15
 8006d60:	4a09      	ldr	r2, [pc, #36]	; (8006d88 <HAL_RCC_GetHCLKFreq+0x54>)
 8006d62:	5cd3      	ldrb	r3, [r2, r3]
 8006d64:	f003 031f 	and.w	r3, r3, #31
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d6e:	4a07      	ldr	r2, [pc, #28]	; (8006d8c <HAL_RCC_GetHCLKFreq+0x58>)
 8006d70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d72:	4a07      	ldr	r2, [pc, #28]	; (8006d90 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006d78:	4b04      	ldr	r3, [pc, #16]	; (8006d8c <HAL_RCC_GetHCLKFreq+0x58>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	58024400 	.word	0x58024400
 8006d88:	08010d58 	.word	0x08010d58
 8006d8c:	24000008 	.word	0x24000008
 8006d90:	24000004 	.word	0x24000004

08006d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006d98:	f7ff ffcc 	bl	8006d34 <HAL_RCC_GetHCLKFreq>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	4b06      	ldr	r3, [pc, #24]	; (8006db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	091b      	lsrs	r3, r3, #4
 8006da4:	f003 0307 	and.w	r3, r3, #7
 8006da8:	4904      	ldr	r1, [pc, #16]	; (8006dbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006daa:	5ccb      	ldrb	r3, [r1, r3]
 8006dac:	f003 031f 	and.w	r3, r3, #31
 8006db0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	58024400 	.word	0x58024400
 8006dbc:	08010d58 	.word	0x08010d58

08006dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8006dc4:	f7ff ffb6 	bl	8006d34 <HAL_RCC_GetHCLKFreq>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	4b06      	ldr	r3, [pc, #24]	; (8006de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	0a1b      	lsrs	r3, r3, #8
 8006dd0:	f003 0307 	and.w	r3, r3, #7
 8006dd4:	4904      	ldr	r1, [pc, #16]	; (8006de8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006dd6:	5ccb      	ldrb	r3, [r1, r3]
 8006dd8:	f003 031f 	and.w	r3, r3, #31
 8006ddc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	58024400 	.word	0x58024400
 8006de8:	08010d58 	.word	0x08010d58

08006dec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	223f      	movs	r2, #63	; 0x3f
 8006dfa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006dfc:	4b1a      	ldr	r3, [pc, #104]	; (8006e68 <HAL_RCC_GetClockConfig+0x7c>)
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	f003 0207 	and.w	r2, r3, #7
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8006e08:	4b17      	ldr	r3, [pc, #92]	; (8006e68 <HAL_RCC_GetClockConfig+0x7c>)
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8006e14:	4b14      	ldr	r3, [pc, #80]	; (8006e68 <HAL_RCC_GetClockConfig+0x7c>)
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	f003 020f 	and.w	r2, r3, #15
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8006e20:	4b11      	ldr	r3, [pc, #68]	; (8006e68 <HAL_RCC_GetClockConfig+0x7c>)
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8006e2c:	4b0e      	ldr	r3, [pc, #56]	; (8006e68 <HAL_RCC_GetClockConfig+0x7c>)
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8006e38:	4b0b      	ldr	r3, [pc, #44]	; (8006e68 <HAL_RCC_GetClockConfig+0x7c>)
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8006e44:	4b08      	ldr	r3, [pc, #32]	; (8006e68 <HAL_RCC_GetClockConfig+0x7c>)
 8006e46:	6a1b      	ldr	r3, [r3, #32]
 8006e48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006e50:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <HAL_RCC_GetClockConfig+0x80>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 020f 	and.w	r2, r3, #15
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	601a      	str	r2, [r3, #0]
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	58024400 	.word	0x58024400
 8006e6c:	52002000 	.word	0x52002000

08006e70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e74:	b0c8      	sub	sp, #288	; 0x120
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e82:	2300      	movs	r3, #0
 8006e84:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006e94:	2500      	movs	r5, #0
 8006e96:	ea54 0305 	orrs.w	r3, r4, r5
 8006e9a:	d049      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ea2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ea6:	d02f      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006ea8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006eac:	d828      	bhi.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006eae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006eb2:	d01a      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006eb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006eb8:	d822      	bhi.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ec2:	d007      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006ec4:	e01c      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec6:	4ba7      	ldr	r3, [pc, #668]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eca:	4aa6      	ldr	r2, [pc, #664]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ed2:	e01a      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ed8:	3308      	adds	r3, #8
 8006eda:	2102      	movs	r1, #2
 8006edc:	4618      	mov	r0, r3
 8006ede:	f002 fa6d 	bl	80093bc <RCCEx_PLL2_Config>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ee8:	e00f      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eee:	3328      	adds	r3, #40	; 0x28
 8006ef0:	2102      	movs	r1, #2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f002 fb14 	bl	8009520 <RCCEx_PLL3_Config>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006efe:	e004      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006f06:	e000      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f0a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10a      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006f12:	4b94      	ldr	r3, [pc, #592]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f16:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f20:	4a90      	ldr	r2, [pc, #576]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f22:	430b      	orrs	r3, r1
 8006f24:	6513      	str	r3, [r2, #80]	; 0x50
 8006f26:	e003      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006f3c:	f04f 0900 	mov.w	r9, #0
 8006f40:	ea58 0309 	orrs.w	r3, r8, r9
 8006f44:	d047      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d82a      	bhi.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006f50:	a201      	add	r2, pc, #4	; (adr r2, 8006f58 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f56:	bf00      	nop
 8006f58:	08006f6d 	.word	0x08006f6d
 8006f5c:	08006f7b 	.word	0x08006f7b
 8006f60:	08006f91 	.word	0x08006f91
 8006f64:	08006faf 	.word	0x08006faf
 8006f68:	08006faf 	.word	0x08006faf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f6c:	4b7d      	ldr	r3, [pc, #500]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	4a7c      	ldr	r2, [pc, #496]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f78:	e01a      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f7e:	3308      	adds	r3, #8
 8006f80:	2100      	movs	r1, #0
 8006f82:	4618      	mov	r0, r3
 8006f84:	f002 fa1a 	bl	80093bc <RCCEx_PLL2_Config>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f8e:	e00f      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f94:	3328      	adds	r3, #40	; 0x28
 8006f96:	2100      	movs	r1, #0
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f002 fac1 	bl	8009520 <RCCEx_PLL3_Config>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fa4:	e004      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006fac:	e000      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006fae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10a      	bne.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fb8:	4b6a      	ldr	r3, [pc, #424]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fbc:	f023 0107 	bic.w	r1, r3, #7
 8006fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc6:	4a67      	ldr	r2, [pc, #412]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	6513      	str	r3, [r2, #80]	; 0x50
 8006fcc:	e003      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006fd2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fde:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006fe2:	f04f 0b00 	mov.w	fp, #0
 8006fe6:	ea5a 030b 	orrs.w	r3, sl, fp
 8006fea:	d054      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8006fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006ff6:	d036      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006ff8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006ffc:	d82f      	bhi.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007002:	d032      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007008:	d829      	bhi.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800700a:	2bc0      	cmp	r3, #192	; 0xc0
 800700c:	d02f      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800700e:	2bc0      	cmp	r3, #192	; 0xc0
 8007010:	d825      	bhi.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007012:	2b80      	cmp	r3, #128	; 0x80
 8007014:	d018      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8007016:	2b80      	cmp	r3, #128	; 0x80
 8007018:	d821      	bhi.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d002      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800701e:	2b40      	cmp	r3, #64	; 0x40
 8007020:	d007      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007022:	e01c      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007024:	4b4f      	ldr	r3, [pc, #316]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007028:	4a4e      	ldr	r2, [pc, #312]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800702a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800702e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007030:	e01e      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007036:	3308      	adds	r3, #8
 8007038:	2100      	movs	r1, #0
 800703a:	4618      	mov	r0, r3
 800703c:	f002 f9be 	bl	80093bc <RCCEx_PLL2_Config>
 8007040:	4603      	mov	r3, r0
 8007042:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007046:	e013      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007048:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800704c:	3328      	adds	r3, #40	; 0x28
 800704e:	2100      	movs	r1, #0
 8007050:	4618      	mov	r0, r3
 8007052:	f002 fa65 	bl	8009520 <RCCEx_PLL3_Config>
 8007056:	4603      	mov	r3, r0
 8007058:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800705c:	e008      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007064:	e004      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007066:	bf00      	nop
 8007068:	e002      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800706a:	bf00      	nop
 800706c:	e000      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800706e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007070:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10a      	bne.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007078:	4b3a      	ldr	r3, [pc, #232]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800707a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007086:	4a37      	ldr	r2, [pc, #220]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007088:	430b      	orrs	r3, r1
 800708a:	6513      	str	r3, [r2, #80]	; 0x50
 800708c:	e003      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800708e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007092:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800709a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80070a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070a6:	2300      	movs	r3, #0
 80070a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80070ac:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80070b0:	460b      	mov	r3, r1
 80070b2:	4313      	orrs	r3, r2
 80070b4:	d05c      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80070b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070bc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80070c0:	d03b      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80070c2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80070c6:	d834      	bhi.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80070c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070cc:	d037      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80070ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070d2:	d82e      	bhi.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80070d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80070d8:	d033      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80070da:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80070de:	d828      	bhi.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80070e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070e4:	d01a      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80070e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ea:	d822      	bhi.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d003      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80070f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070f4:	d007      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80070f6:	e01c      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070f8:	4b1a      	ldr	r3, [pc, #104]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fc:	4a19      	ldr	r2, [pc, #100]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007102:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007104:	e01e      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007106:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800710a:	3308      	adds	r3, #8
 800710c:	2100      	movs	r1, #0
 800710e:	4618      	mov	r0, r3
 8007110:	f002 f954 	bl	80093bc <RCCEx_PLL2_Config>
 8007114:	4603      	mov	r3, r0
 8007116:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800711a:	e013      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800711c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007120:	3328      	adds	r3, #40	; 0x28
 8007122:	2100      	movs	r1, #0
 8007124:	4618      	mov	r0, r3
 8007126:	f002 f9fb 	bl	8009520 <RCCEx_PLL3_Config>
 800712a:	4603      	mov	r3, r0
 800712c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007130:	e008      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007138:	e004      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800713a:	bf00      	nop
 800713c:	e002      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800713e:	bf00      	nop
 8007140:	e000      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007144:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10d      	bne.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800714c:	4b05      	ldr	r3, [pc, #20]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800714e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007150:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8007154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800715a:	4a02      	ldr	r2, [pc, #8]	; (8007164 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800715c:	430b      	orrs	r3, r1
 800715e:	6513      	str	r3, [r2, #80]	; 0x50
 8007160:	e006      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007162:	bf00      	nop
 8007164:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007168:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800716c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007178:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800717c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007180:	2300      	movs	r3, #0
 8007182:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007186:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800718a:	460b      	mov	r3, r1
 800718c:	4313      	orrs	r3, r2
 800718e:	d03a      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007196:	2b30      	cmp	r3, #48	; 0x30
 8007198:	d01f      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800719a:	2b30      	cmp	r3, #48	; 0x30
 800719c:	d819      	bhi.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800719e:	2b20      	cmp	r3, #32
 80071a0:	d00c      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80071a2:	2b20      	cmp	r3, #32
 80071a4:	d815      	bhi.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d019      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80071aa:	2b10      	cmp	r3, #16
 80071ac:	d111      	bne.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ae:	4bae      	ldr	r3, [pc, #696]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b2:	4aad      	ldr	r2, [pc, #692]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80071ba:	e011      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071c0:	3308      	adds	r3, #8
 80071c2:	2102      	movs	r1, #2
 80071c4:	4618      	mov	r0, r3
 80071c6:	f002 f8f9 	bl	80093bc <RCCEx_PLL2_Config>
 80071ca:	4603      	mov	r3, r0
 80071cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80071d0:	e006      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80071d8:	e002      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80071da:	bf00      	nop
 80071dc:	e000      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80071de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10a      	bne.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80071e8:	4b9f      	ldr	r3, [pc, #636]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ec:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80071f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f6:	4a9c      	ldr	r2, [pc, #624]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071f8:	430b      	orrs	r3, r1
 80071fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071fc:	e003      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007202:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007212:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007216:	2300      	movs	r3, #0
 8007218:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800721c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007220:	460b      	mov	r3, r1
 8007222:	4313      	orrs	r3, r2
 8007224:	d051      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007226:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800722a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800722c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007230:	d035      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007232:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007236:	d82e      	bhi.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007238:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800723c:	d031      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800723e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007242:	d828      	bhi.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007248:	d01a      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800724a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800724e:	d822      	bhi.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007258:	d007      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800725a:	e01c      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800725c:	4b82      	ldr	r3, [pc, #520]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800725e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007260:	4a81      	ldr	r2, [pc, #516]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007266:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007268:	e01c      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800726a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800726e:	3308      	adds	r3, #8
 8007270:	2100      	movs	r1, #0
 8007272:	4618      	mov	r0, r3
 8007274:	f002 f8a2 	bl	80093bc <RCCEx_PLL2_Config>
 8007278:	4603      	mov	r3, r0
 800727a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800727e:	e011      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007280:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007284:	3328      	adds	r3, #40	; 0x28
 8007286:	2100      	movs	r1, #0
 8007288:	4618      	mov	r0, r3
 800728a:	f002 f949 	bl	8009520 <RCCEx_PLL3_Config>
 800728e:	4603      	mov	r3, r0
 8007290:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007294:	e006      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800729c:	e002      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800729e:	bf00      	nop
 80072a0:	e000      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80072a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10a      	bne.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80072ac:	4b6e      	ldr	r3, [pc, #440]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80072ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072b0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80072b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072ba:	4a6b      	ldr	r2, [pc, #428]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80072bc:	430b      	orrs	r3, r1
 80072be:	6513      	str	r3, [r2, #80]	; 0x50
 80072c0:	e003      	b.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80072c6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80072d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072da:	2300      	movs	r3, #0
 80072dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80072e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80072e4:	460b      	mov	r3, r1
 80072e6:	4313      	orrs	r3, r2
 80072e8:	d053      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80072ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072f4:	d033      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80072f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072fa:	d82c      	bhi.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80072fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007300:	d02f      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8007302:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007306:	d826      	bhi.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007308:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800730c:	d02b      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800730e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007312:	d820      	bhi.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007314:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007318:	d012      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800731a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800731e:	d81a      	bhi.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007320:	2b00      	cmp	r3, #0
 8007322:	d022      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007328:	d115      	bne.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800732a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800732e:	3308      	adds	r3, #8
 8007330:	2101      	movs	r1, #1
 8007332:	4618      	mov	r0, r3
 8007334:	f002 f842 	bl	80093bc <RCCEx_PLL2_Config>
 8007338:	4603      	mov	r3, r0
 800733a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800733e:	e015      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007340:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007344:	3328      	adds	r3, #40	; 0x28
 8007346:	2101      	movs	r1, #1
 8007348:	4618      	mov	r0, r3
 800734a:	f002 f8e9 	bl	8009520 <RCCEx_PLL3_Config>
 800734e:	4603      	mov	r3, r0
 8007350:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007354:	e00a      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800735c:	e006      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800735e:	bf00      	nop
 8007360:	e004      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007362:	bf00      	nop
 8007364:	e002      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007366:	bf00      	nop
 8007368:	e000      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800736a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800736c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10a      	bne.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007374:	4b3c      	ldr	r3, [pc, #240]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007378:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800737c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007382:	4a39      	ldr	r2, [pc, #228]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007384:	430b      	orrs	r3, r1
 8007386:	6513      	str	r3, [r2, #80]	; 0x50
 8007388:	e003      	b.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800738a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800738e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007392:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800739e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073a2:	2300      	movs	r3, #0
 80073a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073a8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80073ac:	460b      	mov	r3, r1
 80073ae:	4313      	orrs	r3, r2
 80073b0:	d060      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80073b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073ba:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80073be:	d039      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80073c0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80073c4:	d832      	bhi.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80073c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073ca:	d035      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80073cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073d0:	d82c      	bhi.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80073d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d6:	d031      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80073d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073dc:	d826      	bhi.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80073de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073e2:	d02d      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80073e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073e8:	d820      	bhi.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80073ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073ee:	d012      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80073f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073f4:	d81a      	bhi.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d024      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80073fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073fe:	d115      	bne.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007404:	3308      	adds	r3, #8
 8007406:	2101      	movs	r1, #1
 8007408:	4618      	mov	r0, r3
 800740a:	f001 ffd7 	bl	80093bc <RCCEx_PLL2_Config>
 800740e:	4603      	mov	r3, r0
 8007410:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007414:	e017      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800741a:	3328      	adds	r3, #40	; 0x28
 800741c:	2101      	movs	r1, #1
 800741e:	4618      	mov	r0, r3
 8007420:	f002 f87e 	bl	8009520 <RCCEx_PLL3_Config>
 8007424:	4603      	mov	r3, r0
 8007426:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800742a:	e00c      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007432:	e008      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007434:	bf00      	nop
 8007436:	e006      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007438:	bf00      	nop
 800743a:	e004      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800743c:	bf00      	nop
 800743e:	e002      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007440:	bf00      	nop
 8007442:	e000      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007446:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10e      	bne.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800744e:	4b06      	ldr	r3, [pc, #24]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007452:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007456:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800745a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800745e:	4a02      	ldr	r2, [pc, #8]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007460:	430b      	orrs	r3, r1
 8007462:	6593      	str	r3, [r2, #88]	; 0x58
 8007464:	e006      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007466:	bf00      	nop
 8007468:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800746c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007470:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007474:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007480:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007484:	2300      	movs	r3, #0
 8007486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800748a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800748e:	460b      	mov	r3, r1
 8007490:	4313      	orrs	r3, r2
 8007492:	d037      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007494:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007498:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800749a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800749e:	d00e      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80074a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074a4:	d816      	bhi.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d018      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80074aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074ae:	d111      	bne.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074b0:	4bc4      	ldr	r3, [pc, #784]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b4:	4ac3      	ldr	r2, [pc, #780]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074bc:	e00f      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074c2:	3308      	adds	r3, #8
 80074c4:	2101      	movs	r1, #1
 80074c6:	4618      	mov	r0, r3
 80074c8:	f001 ff78 	bl	80093bc <RCCEx_PLL2_Config>
 80074cc:	4603      	mov	r3, r0
 80074ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074d2:	e004      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80074da:	e000      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80074dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10a      	bne.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074e6:	4bb7      	ldr	r3, [pc, #732]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ea:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80074ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074f4:	4ab3      	ldr	r2, [pc, #716]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074f6:	430b      	orrs	r3, r1
 80074f8:	6513      	str	r3, [r2, #80]	; 0x50
 80074fa:	e003      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007500:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007504:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007510:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007514:	2300      	movs	r3, #0
 8007516:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800751a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800751e:	460b      	mov	r3, r1
 8007520:	4313      	orrs	r3, r2
 8007522:	d039      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800752a:	2b03      	cmp	r3, #3
 800752c:	d81c      	bhi.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800752e:	a201      	add	r2, pc, #4	; (adr r2, 8007534 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007534:	08007571 	.word	0x08007571
 8007538:	08007545 	.word	0x08007545
 800753c:	08007553 	.word	0x08007553
 8007540:	08007571 	.word	0x08007571
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007544:	4b9f      	ldr	r3, [pc, #636]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007548:	4a9e      	ldr	r2, [pc, #632]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800754a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800754e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007550:	e00f      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007556:	3308      	adds	r3, #8
 8007558:	2102      	movs	r1, #2
 800755a:	4618      	mov	r0, r3
 800755c:	f001 ff2e 	bl	80093bc <RCCEx_PLL2_Config>
 8007560:	4603      	mov	r3, r0
 8007562:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007566:	e004      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800756e:	e000      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007572:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10a      	bne.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800757a:	4b92      	ldr	r3, [pc, #584]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800757c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800757e:	f023 0103 	bic.w	r1, r3, #3
 8007582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007588:	4a8e      	ldr	r2, [pc, #568]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800758a:	430b      	orrs	r3, r1
 800758c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800758e:	e003      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007590:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007594:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007598:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80075a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075a8:	2300      	movs	r3, #0
 80075aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80075ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80075b2:	460b      	mov	r3, r1
 80075b4:	4313      	orrs	r3, r2
 80075b6:	f000 8099 	beq.w	80076ec <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075ba:	4b83      	ldr	r3, [pc, #524]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a82      	ldr	r2, [pc, #520]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80075c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075c6:	f7fa f931 	bl	800182c <HAL_GetTick>
 80075ca:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075ce:	e00b      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075d0:	f7fa f92c 	bl	800182c <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	2b64      	cmp	r3, #100	; 0x64
 80075de:	d903      	bls.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80075e0:	2303      	movs	r3, #3
 80075e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80075e6:	e005      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075e8:	4b77      	ldr	r3, [pc, #476]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d0ed      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80075f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d173      	bne.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80075fc:	4b71      	ldr	r3, [pc, #452]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007604:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007608:	4053      	eors	r3, r2
 800760a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800760e:	2b00      	cmp	r3, #0
 8007610:	d015      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007612:	4b6c      	ldr	r3, [pc, #432]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800761a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800761e:	4b69      	ldr	r3, [pc, #420]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007622:	4a68      	ldr	r2, [pc, #416]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007628:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800762a:	4b66      	ldr	r3, [pc, #408]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800762c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800762e:	4a65      	ldr	r2, [pc, #404]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007634:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007636:	4a63      	ldr	r2, [pc, #396]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800763c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800763e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007642:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800764a:	d118      	bne.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800764c:	f7fa f8ee 	bl	800182c <HAL_GetTick>
 8007650:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007654:	e00d      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007656:	f7fa f8e9 	bl	800182c <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007660:	1ad2      	subs	r2, r2, r3
 8007662:	f241 3388 	movw	r3, #5000	; 0x1388
 8007666:	429a      	cmp	r2, r3
 8007668:	d903      	bls.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8007670:	e005      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007672:	4b54      	ldr	r3, [pc, #336]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b00      	cmp	r3, #0
 800767c:	d0eb      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800767e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007682:	2b00      	cmp	r3, #0
 8007684:	d129      	bne.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800768a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800768e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007696:	d10e      	bne.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007698:	4b4a      	ldr	r3, [pc, #296]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80076a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80076a8:	091a      	lsrs	r2, r3, #4
 80076aa:	4b48      	ldr	r3, [pc, #288]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80076ac:	4013      	ands	r3, r2
 80076ae:	4a45      	ldr	r2, [pc, #276]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076b0:	430b      	orrs	r3, r1
 80076b2:	6113      	str	r3, [r2, #16]
 80076b4:	e005      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80076b6:	4b43      	ldr	r3, [pc, #268]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	4a42      	ldr	r2, [pc, #264]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80076c0:	6113      	str	r3, [r2, #16]
 80076c2:	4b40      	ldr	r3, [pc, #256]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076c4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80076c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80076ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076d2:	4a3c      	ldr	r2, [pc, #240]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076d4:	430b      	orrs	r3, r1
 80076d6:	6713      	str	r3, [r2, #112]	; 0x70
 80076d8:	e008      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80076de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80076e2:	e003      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80076e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80076ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f4:	f002 0301 	and.w	r3, r2, #1
 80076f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076fc:	2300      	movs	r3, #0
 80076fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007702:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007706:	460b      	mov	r3, r1
 8007708:	4313      	orrs	r3, r2
 800770a:	f000 8090 	beq.w	800782e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800770e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007716:	2b28      	cmp	r3, #40	; 0x28
 8007718:	d870      	bhi.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800771a:	a201      	add	r2, pc, #4	; (adr r2, 8007720 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800771c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007720:	08007805 	.word	0x08007805
 8007724:	080077fd 	.word	0x080077fd
 8007728:	080077fd 	.word	0x080077fd
 800772c:	080077fd 	.word	0x080077fd
 8007730:	080077fd 	.word	0x080077fd
 8007734:	080077fd 	.word	0x080077fd
 8007738:	080077fd 	.word	0x080077fd
 800773c:	080077fd 	.word	0x080077fd
 8007740:	080077d1 	.word	0x080077d1
 8007744:	080077fd 	.word	0x080077fd
 8007748:	080077fd 	.word	0x080077fd
 800774c:	080077fd 	.word	0x080077fd
 8007750:	080077fd 	.word	0x080077fd
 8007754:	080077fd 	.word	0x080077fd
 8007758:	080077fd 	.word	0x080077fd
 800775c:	080077fd 	.word	0x080077fd
 8007760:	080077e7 	.word	0x080077e7
 8007764:	080077fd 	.word	0x080077fd
 8007768:	080077fd 	.word	0x080077fd
 800776c:	080077fd 	.word	0x080077fd
 8007770:	080077fd 	.word	0x080077fd
 8007774:	080077fd 	.word	0x080077fd
 8007778:	080077fd 	.word	0x080077fd
 800777c:	080077fd 	.word	0x080077fd
 8007780:	08007805 	.word	0x08007805
 8007784:	080077fd 	.word	0x080077fd
 8007788:	080077fd 	.word	0x080077fd
 800778c:	080077fd 	.word	0x080077fd
 8007790:	080077fd 	.word	0x080077fd
 8007794:	080077fd 	.word	0x080077fd
 8007798:	080077fd 	.word	0x080077fd
 800779c:	080077fd 	.word	0x080077fd
 80077a0:	08007805 	.word	0x08007805
 80077a4:	080077fd 	.word	0x080077fd
 80077a8:	080077fd 	.word	0x080077fd
 80077ac:	080077fd 	.word	0x080077fd
 80077b0:	080077fd 	.word	0x080077fd
 80077b4:	080077fd 	.word	0x080077fd
 80077b8:	080077fd 	.word	0x080077fd
 80077bc:	080077fd 	.word	0x080077fd
 80077c0:	08007805 	.word	0x08007805
 80077c4:	58024400 	.word	0x58024400
 80077c8:	58024800 	.word	0x58024800
 80077cc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077d4:	3308      	adds	r3, #8
 80077d6:	2101      	movs	r1, #1
 80077d8:	4618      	mov	r0, r3
 80077da:	f001 fdef 	bl	80093bc <RCCEx_PLL2_Config>
 80077de:	4603      	mov	r3, r0
 80077e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80077e4:	e00f      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077ea:	3328      	adds	r3, #40	; 0x28
 80077ec:	2101      	movs	r1, #1
 80077ee:	4618      	mov	r0, r3
 80077f0:	f001 fe96 	bl	8009520 <RCCEx_PLL3_Config>
 80077f4:	4603      	mov	r3, r0
 80077f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80077fa:	e004      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007802:	e000      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007806:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10b      	bne.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800780e:	4bc0      	ldr	r3, [pc, #768]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007812:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800781a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800781e:	4abc      	ldr	r2, [pc, #752]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007820:	430b      	orrs	r3, r1
 8007822:	6553      	str	r3, [r2, #84]	; 0x54
 8007824:	e003      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007826:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800782a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800782e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007836:	f002 0302 	and.w	r3, r2, #2
 800783a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800783e:	2300      	movs	r3, #0
 8007840:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007844:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007848:	460b      	mov	r3, r1
 800784a:	4313      	orrs	r3, r2
 800784c:	d043      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800784e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007856:	2b05      	cmp	r3, #5
 8007858:	d824      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800785a:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	080078ad 	.word	0x080078ad
 8007864:	08007879 	.word	0x08007879
 8007868:	0800788f 	.word	0x0800788f
 800786c:	080078ad 	.word	0x080078ad
 8007870:	080078ad 	.word	0x080078ad
 8007874:	080078ad 	.word	0x080078ad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800787c:	3308      	adds	r3, #8
 800787e:	2101      	movs	r1, #1
 8007880:	4618      	mov	r0, r3
 8007882:	f001 fd9b 	bl	80093bc <RCCEx_PLL2_Config>
 8007886:	4603      	mov	r3, r0
 8007888:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800788c:	e00f      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800788e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007892:	3328      	adds	r3, #40	; 0x28
 8007894:	2101      	movs	r1, #1
 8007896:	4618      	mov	r0, r3
 8007898:	f001 fe42 	bl	8009520 <RCCEx_PLL3_Config>
 800789c:	4603      	mov	r3, r0
 800789e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80078a2:	e004      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80078aa:	e000      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80078ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10b      	bne.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80078b6:	4b96      	ldr	r3, [pc, #600]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80078b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ba:	f023 0107 	bic.w	r1, r3, #7
 80078be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078c6:	4a92      	ldr	r2, [pc, #584]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80078c8:	430b      	orrs	r3, r1
 80078ca:	6553      	str	r3, [r2, #84]	; 0x54
 80078cc:	e003      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80078d2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	f002 0304 	and.w	r3, r2, #4
 80078e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078e6:	2300      	movs	r3, #0
 80078e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078ec:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4313      	orrs	r3, r2
 80078f4:	d043      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80078f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078fe:	2b05      	cmp	r3, #5
 8007900:	d824      	bhi.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007902:	a201      	add	r2, pc, #4	; (adr r2, 8007908 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007908:	08007955 	.word	0x08007955
 800790c:	08007921 	.word	0x08007921
 8007910:	08007937 	.word	0x08007937
 8007914:	08007955 	.word	0x08007955
 8007918:	08007955 	.word	0x08007955
 800791c:	08007955 	.word	0x08007955
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007920:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007924:	3308      	adds	r3, #8
 8007926:	2101      	movs	r1, #1
 8007928:	4618      	mov	r0, r3
 800792a:	f001 fd47 	bl	80093bc <RCCEx_PLL2_Config>
 800792e:	4603      	mov	r3, r0
 8007930:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007934:	e00f      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007936:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800793a:	3328      	adds	r3, #40	; 0x28
 800793c:	2101      	movs	r1, #1
 800793e:	4618      	mov	r0, r3
 8007940:	f001 fdee 	bl	8009520 <RCCEx_PLL3_Config>
 8007944:	4603      	mov	r3, r0
 8007946:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800794a:	e004      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007952:	e000      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8007954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007956:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10b      	bne.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800795e:	4b6c      	ldr	r3, [pc, #432]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007962:	f023 0107 	bic.w	r1, r3, #7
 8007966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800796a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800796e:	4a68      	ldr	r2, [pc, #416]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007970:	430b      	orrs	r3, r1
 8007972:	6593      	str	r3, [r2, #88]	; 0x58
 8007974:	e003      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007976:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800797a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800797e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007986:	f002 0320 	and.w	r3, r2, #32
 800798a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800798e:	2300      	movs	r3, #0
 8007990:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007994:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007998:	460b      	mov	r3, r1
 800799a:	4313      	orrs	r3, r2
 800799c:	d055      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800799e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079aa:	d033      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80079ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079b0:	d82c      	bhi.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80079b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b6:	d02f      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80079b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079bc:	d826      	bhi.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80079be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079c2:	d02b      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80079c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079c8:	d820      	bhi.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80079ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079ce:	d012      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80079d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079d4:	d81a      	bhi.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d022      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80079da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079de:	d115      	bne.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079e4:	3308      	adds	r3, #8
 80079e6:	2100      	movs	r1, #0
 80079e8:	4618      	mov	r0, r3
 80079ea:	f001 fce7 	bl	80093bc <RCCEx_PLL2_Config>
 80079ee:	4603      	mov	r3, r0
 80079f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80079f4:	e015      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079fa:	3328      	adds	r3, #40	; 0x28
 80079fc:	2102      	movs	r1, #2
 80079fe:	4618      	mov	r0, r3
 8007a00:	f001 fd8e 	bl	8009520 <RCCEx_PLL3_Config>
 8007a04:	4603      	mov	r3, r0
 8007a06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a0a:	e00a      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007a12:	e006      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007a14:	bf00      	nop
 8007a16:	e004      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007a18:	bf00      	nop
 8007a1a:	e002      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007a1c:	bf00      	nop
 8007a1e:	e000      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10b      	bne.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a2a:	4b39      	ldr	r3, [pc, #228]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a3a:	4a35      	ldr	r2, [pc, #212]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007a3c:	430b      	orrs	r3, r1
 8007a3e:	6553      	str	r3, [r2, #84]	; 0x54
 8007a40:	e003      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007a46:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a52:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007a56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007a60:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007a64:	460b      	mov	r3, r1
 8007a66:	4313      	orrs	r3, r2
 8007a68:	d058      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007a72:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a76:	d033      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007a78:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a7c:	d82c      	bhi.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a82:	d02f      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a88:	d826      	bhi.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007a8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a8e:	d02b      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007a90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a94:	d820      	bhi.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a9a:	d012      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aa0:	d81a      	bhi.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d022      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8007aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aaa:	d115      	bne.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ab0:	3308      	adds	r3, #8
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f001 fc81 	bl	80093bc <RCCEx_PLL2_Config>
 8007aba:	4603      	mov	r3, r0
 8007abc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ac0:	e015      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ac6:	3328      	adds	r3, #40	; 0x28
 8007ac8:	2102      	movs	r1, #2
 8007aca:	4618      	mov	r0, r3
 8007acc:	f001 fd28 	bl	8009520 <RCCEx_PLL3_Config>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ad6:	e00a      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007ade:	e006      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007ae0:	bf00      	nop
 8007ae2:	e004      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007ae4:	bf00      	nop
 8007ae6:	e002      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007ae8:	bf00      	nop
 8007aea:	e000      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10e      	bne.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007af6:	4b06      	ldr	r3, [pc, #24]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007afa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007b06:	4a02      	ldr	r2, [pc, #8]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007b08:	430b      	orrs	r3, r1
 8007b0a:	6593      	str	r3, [r2, #88]	; 0x58
 8007b0c:	e006      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8007b0e:	bf00      	nop
 8007b10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007b18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b24:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007b28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b32:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007b36:	460b      	mov	r3, r1
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	d055      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b44:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007b48:	d033      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007b4a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007b4e:	d82c      	bhi.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b54:	d02f      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b5a:	d826      	bhi.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007b5c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007b60:	d02b      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007b62:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007b66:	d820      	bhi.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007b68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b6c:	d012      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007b6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b72:	d81a      	bhi.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d022      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b7c:	d115      	bne.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b82:	3308      	adds	r3, #8
 8007b84:	2100      	movs	r1, #0
 8007b86:	4618      	mov	r0, r3
 8007b88:	f001 fc18 	bl	80093bc <RCCEx_PLL2_Config>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007b92:	e015      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b98:	3328      	adds	r3, #40	; 0x28
 8007b9a:	2102      	movs	r1, #2
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f001 fcbf 	bl	8009520 <RCCEx_PLL3_Config>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ba8:	e00a      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007bb0:	e006      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007bb2:	bf00      	nop
 8007bb4:	e004      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007bb6:	bf00      	nop
 8007bb8:	e002      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007bba:	bf00      	nop
 8007bbc:	e000      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007bbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10b      	bne.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007bc8:	4ba1      	ldr	r3, [pc, #644]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bcc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007bd8:	4a9d      	ldr	r2, [pc, #628]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007bda:	430b      	orrs	r3, r1
 8007bdc:	6593      	str	r3, [r2, #88]	; 0x58
 8007bde:	e003      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007be4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	f002 0308 	and.w	r3, r2, #8
 8007bf4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007bfe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007c02:	460b      	mov	r3, r1
 8007c04:	4313      	orrs	r3, r2
 8007c06:	d01e      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c14:	d10c      	bne.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c1a:	3328      	adds	r3, #40	; 0x28
 8007c1c:	2102      	movs	r1, #2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f001 fc7e 	bl	8009520 <RCCEx_PLL3_Config>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d002      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007c30:	4b87      	ldr	r3, [pc, #540]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c40:	4a83      	ldr	r2, [pc, #524]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c42:	430b      	orrs	r3, r1
 8007c44:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4e:	f002 0310 	and.w	r3, r2, #16
 8007c52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c56:	2300      	movs	r3, #0
 8007c58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c5c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007c60:	460b      	mov	r3, r1
 8007c62:	4313      	orrs	r3, r2
 8007c64:	d01e      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c72:	d10c      	bne.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c78:	3328      	adds	r3, #40	; 0x28
 8007c7a:	2102      	movs	r1, #2
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f001 fc4f 	bl	8009520 <RCCEx_PLL3_Config>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d002      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c8e:	4b70      	ldr	r3, [pc, #448]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c9e:	4a6c      	ldr	r2, [pc, #432]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007ca0:	430b      	orrs	r3, r1
 8007ca2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cac:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007cb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	d03e      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cc8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007ccc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cd0:	d022      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8007cd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cd6:	d81b      	bhi.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d003      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8007cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ce0:	d00b      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8007ce2:	e015      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ce8:	3308      	adds	r3, #8
 8007cea:	2100      	movs	r1, #0
 8007cec:	4618      	mov	r0, r3
 8007cee:	f001 fb65 	bl	80093bc <RCCEx_PLL2_Config>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007cf8:	e00f      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cfe:	3328      	adds	r3, #40	; 0x28
 8007d00:	2102      	movs	r1, #2
 8007d02:	4618      	mov	r0, r3
 8007d04:	f001 fc0c 	bl	8009520 <RCCEx_PLL3_Config>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d0e:	e004      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007d16:	e000      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8007d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d1a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10b      	bne.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d22:	4b4b      	ldr	r3, [pc, #300]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d26:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d32:	4a47      	ldr	r2, [pc, #284]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007d34:	430b      	orrs	r3, r1
 8007d36:	6593      	str	r3, [r2, #88]	; 0x58
 8007d38:	e003      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007d3e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007d4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d50:	2300      	movs	r3, #0
 8007d52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d54:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007d58:	460b      	mov	r3, r1
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	d03b      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d6a:	d01f      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8007d6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d70:	d818      	bhi.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007d72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d76:	d003      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8007d78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d7c:	d007      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8007d7e:	e011      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d80:	4b33      	ldr	r3, [pc, #204]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d84:	4a32      	ldr	r2, [pc, #200]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d8c:	e00f      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d92:	3328      	adds	r3, #40	; 0x28
 8007d94:	2101      	movs	r1, #1
 8007d96:	4618      	mov	r0, r3
 8007d98:	f001 fbc2 	bl	8009520 <RCCEx_PLL3_Config>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8007da2:	e004      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007daa:	e000      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10b      	bne.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007db6:	4b26      	ldr	r3, [pc, #152]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc6:	4a22      	ldr	r2, [pc, #136]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	6553      	str	r3, [r2, #84]	; 0x54
 8007dcc:	e003      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007dd2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dde:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007de2:	673b      	str	r3, [r7, #112]	; 0x70
 8007de4:	2300      	movs	r3, #0
 8007de6:	677b      	str	r3, [r7, #116]	; 0x74
 8007de8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007dec:	460b      	mov	r3, r1
 8007dee:	4313      	orrs	r3, r2
 8007df0:	d034      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d003      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8007dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e00:	d007      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8007e02:	e011      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e04:	4b12      	ldr	r3, [pc, #72]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e08:	4a11      	ldr	r2, [pc, #68]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e10:	e00e      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e16:	3308      	adds	r3, #8
 8007e18:	2102      	movs	r1, #2
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f001 face 	bl	80093bc <RCCEx_PLL2_Config>
 8007e20:	4603      	mov	r3, r0
 8007e22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e26:	e003      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007e2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10d      	bne.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e38:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e46:	4a02      	ldr	r2, [pc, #8]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007e48:	430b      	orrs	r3, r1
 8007e4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e4c:	e006      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8007e4e:	bf00      	nop
 8007e50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007e58:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e64:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007e68:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e6e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007e72:	460b      	mov	r3, r1
 8007e74:	4313      	orrs	r3, r2
 8007e76:	d00c      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e7c:	3328      	adds	r3, #40	; 0x28
 8007e7e:	2102      	movs	r1, #2
 8007e80:	4618      	mov	r0, r3
 8007e82:	f001 fb4d 	bl	8009520 <RCCEx_PLL3_Config>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d002      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007e9e:	663b      	str	r3, [r7, #96]	; 0x60
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	667b      	str	r3, [r7, #100]	; 0x64
 8007ea4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	d038      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007eae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007eba:	d018      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8007ebc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ec0:	d811      	bhi.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ec6:	d014      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8007ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ecc:	d80b      	bhi.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d011      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8007ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ed6:	d106      	bne.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ed8:	4bc3      	ldr	r3, [pc, #780]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007edc:	4ac2      	ldr	r2, [pc, #776]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ee2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007ee4:	e008      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007eec:	e004      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007eee:	bf00      	nop
 8007ef0:	e002      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007ef2:	bf00      	nop
 8007ef4:	e000      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007ef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ef8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10b      	bne.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f00:	4bb9      	ldr	r3, [pc, #740]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f04:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f10:	4ab5      	ldr	r2, [pc, #724]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f12:	430b      	orrs	r3, r1
 8007f14:	6553      	str	r3, [r2, #84]	; 0x54
 8007f16:	e003      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007f1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f28:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007f2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f2e:	2300      	movs	r3, #0
 8007f30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f32:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007f36:	460b      	mov	r3, r1
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	d009      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f3c:	4baa      	ldr	r3, [pc, #680]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f4a:	4aa7      	ldr	r2, [pc, #668]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f4c:	430b      	orrs	r3, r1
 8007f4e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007f5c:	653b      	str	r3, [r7, #80]	; 0x50
 8007f5e:	2300      	movs	r3, #0
 8007f60:	657b      	str	r3, [r7, #84]	; 0x54
 8007f62:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007f66:	460b      	mov	r3, r1
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	d009      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f6c:	4b9e      	ldr	r3, [pc, #632]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f70:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f7a:	4a9b      	ldr	r2, [pc, #620]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f7c:	430b      	orrs	r3, r1
 8007f7e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f88:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007f8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f8e:	2300      	movs	r3, #0
 8007f90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f92:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007f96:	460b      	mov	r3, r1
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	d009      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007f9c:	4b92      	ldr	r3, [pc, #584]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fa0:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8007fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007faa:	4a8f      	ldr	r2, [pc, #572]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007fac:	430b      	orrs	r3, r1
 8007fae:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007fbc:	643b      	str	r3, [r7, #64]	; 0x40
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8007fc2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	d00e      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007fcc:	4b86      	ldr	r3, [pc, #536]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	4a85      	ldr	r2, [pc, #532]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007fd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007fd6:	6113      	str	r3, [r2, #16]
 8007fd8:	4b83      	ldr	r3, [pc, #524]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007fda:	6919      	ldr	r1, [r3, #16]
 8007fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fe0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007fe4:	4a80      	ldr	r2, [pc, #512]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007fe6:	430b      	orrs	r3, r1
 8007fe8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007ff6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ffc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008000:	460b      	mov	r3, r1
 8008002:	4313      	orrs	r3, r2
 8008004:	d009      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008006:	4b78      	ldr	r3, [pc, #480]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800800a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800800e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008014:	4a74      	ldr	r2, [pc, #464]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008016:	430b      	orrs	r3, r1
 8008018:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800801a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800801e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008022:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008026:	633b      	str	r3, [r7, #48]	; 0x30
 8008028:	2300      	movs	r3, #0
 800802a:	637b      	str	r3, [r7, #52]	; 0x34
 800802c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008030:	460b      	mov	r3, r1
 8008032:	4313      	orrs	r3, r2
 8008034:	d00a      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008036:	4b6c      	ldr	r3, [pc, #432]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800803a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800803e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008046:	4a68      	ldr	r2, [pc, #416]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008048:	430b      	orrs	r3, r1
 800804a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800804c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008054:	2100      	movs	r1, #0
 8008056:	62b9      	str	r1, [r7, #40]	; 0x28
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800805e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008062:	460b      	mov	r3, r1
 8008064:	4313      	orrs	r3, r2
 8008066:	d011      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008068:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800806c:	3308      	adds	r3, #8
 800806e:	2100      	movs	r1, #0
 8008070:	4618      	mov	r0, r3
 8008072:	f001 f9a3 	bl	80093bc <RCCEx_PLL2_Config>
 8008076:	4603      	mov	r3, r0
 8008078:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800807c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008084:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008088:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800808c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008094:	2100      	movs	r1, #0
 8008096:	6239      	str	r1, [r7, #32]
 8008098:	f003 0302 	and.w	r3, r3, #2
 800809c:	627b      	str	r3, [r7, #36]	; 0x24
 800809e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80080a2:	460b      	mov	r3, r1
 80080a4:	4313      	orrs	r3, r2
 80080a6:	d011      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080ac:	3308      	adds	r3, #8
 80080ae:	2101      	movs	r1, #1
 80080b0:	4618      	mov	r0, r3
 80080b2:	f001 f983 	bl	80093bc <RCCEx_PLL2_Config>
 80080b6:	4603      	mov	r3, r0
 80080b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80080bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80080c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80080cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d4:	2100      	movs	r1, #0
 80080d6:	61b9      	str	r1, [r7, #24]
 80080d8:	f003 0304 	and.w	r3, r3, #4
 80080dc:	61fb      	str	r3, [r7, #28]
 80080de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80080e2:	460b      	mov	r3, r1
 80080e4:	4313      	orrs	r3, r2
 80080e6:	d011      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080ec:	3308      	adds	r3, #8
 80080ee:	2102      	movs	r1, #2
 80080f0:	4618      	mov	r0, r3
 80080f2:	f001 f963 	bl	80093bc <RCCEx_PLL2_Config>
 80080f6:	4603      	mov	r3, r0
 80080f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80080fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008100:	2b00      	cmp	r3, #0
 8008102:	d003      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008104:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008108:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800810c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	2100      	movs	r1, #0
 8008116:	6139      	str	r1, [r7, #16]
 8008118:	f003 0308 	and.w	r3, r3, #8
 800811c:	617b      	str	r3, [r7, #20]
 800811e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008122:	460b      	mov	r3, r1
 8008124:	4313      	orrs	r3, r2
 8008126:	d011      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008128:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800812c:	3328      	adds	r3, #40	; 0x28
 800812e:	2100      	movs	r1, #0
 8008130:	4618      	mov	r0, r3
 8008132:	f001 f9f5 	bl	8009520 <RCCEx_PLL3_Config>
 8008136:	4603      	mov	r3, r0
 8008138:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800813c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008140:	2b00      	cmp	r3, #0
 8008142:	d003      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008144:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008148:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800814c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	2100      	movs	r1, #0
 8008156:	60b9      	str	r1, [r7, #8]
 8008158:	f003 0310 	and.w	r3, r3, #16
 800815c:	60fb      	str	r3, [r7, #12]
 800815e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008162:	460b      	mov	r3, r1
 8008164:	4313      	orrs	r3, r2
 8008166:	d011      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008168:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800816c:	3328      	adds	r3, #40	; 0x28
 800816e:	2101      	movs	r1, #1
 8008170:	4618      	mov	r0, r3
 8008172:	f001 f9d5 	bl	8009520 <RCCEx_PLL3_Config>
 8008176:	4603      	mov	r3, r0
 8008178:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800817c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008180:	2b00      	cmp	r3, #0
 8008182:	d003      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008184:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008188:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800818c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008194:	2100      	movs	r1, #0
 8008196:	6039      	str	r1, [r7, #0]
 8008198:	f003 0320 	and.w	r3, r3, #32
 800819c:	607b      	str	r3, [r7, #4]
 800819e:	e9d7 1200 	ldrd	r1, r2, [r7]
 80081a2:	460b      	mov	r3, r1
 80081a4:	4313      	orrs	r3, r2
 80081a6:	d011      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081ac:	3328      	adds	r3, #40	; 0x28
 80081ae:	2102      	movs	r1, #2
 80081b0:	4618      	mov	r0, r3
 80081b2:	f001 f9b5 	bl	8009520 <RCCEx_PLL3_Config>
 80081b6:	4603      	mov	r3, r0
 80081b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80081bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d003      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80081c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80081cc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d101      	bne.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	e000      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
}
 80081da:	4618      	mov	r0, r3
 80081dc:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80081e0:	46bd      	mov	sp, r7
 80081e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081e6:	bf00      	nop
 80081e8:	58024400 	.word	0x58024400

080081ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b090      	sub	sp, #64	; 0x40
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80081f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081fa:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80081fe:	430b      	orrs	r3, r1
 8008200:	f040 8094 	bne.w	800832c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008204:	4b97      	ldr	r3, [pc, #604]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008208:	f003 0307 	and.w	r3, r3, #7
 800820c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800820e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008210:	2b04      	cmp	r3, #4
 8008212:	f200 8087 	bhi.w	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008216:	a201      	add	r2, pc, #4	; (adr r2, 800821c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821c:	08008231 	.word	0x08008231
 8008220:	08008259 	.word	0x08008259
 8008224:	08008281 	.word	0x08008281
 8008228:	0800831d 	.word	0x0800831d
 800822c:	080082a9 	.word	0x080082a9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008230:	4b8c      	ldr	r3, [pc, #560]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008238:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800823c:	d108      	bne.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800823e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008242:	4618      	mov	r0, r3
 8008244:	f000 ff68 	bl	8009118 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800824c:	f000 bc97 	b.w	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008250:	2300      	movs	r3, #0
 8008252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008254:	f000 bc93 	b.w	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008258:	4b82      	ldr	r3, [pc, #520]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008260:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008264:	d108      	bne.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008266:	f107 0318 	add.w	r3, r7, #24
 800826a:	4618      	mov	r0, r3
 800826c:	f000 fcac 	bl	8008bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008274:	f000 bc83 	b.w	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008278:	2300      	movs	r3, #0
 800827a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800827c:	f000 bc7f 	b.w	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008280:	4b78      	ldr	r3, [pc, #480]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800828c:	d108      	bne.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800828e:	f107 030c 	add.w	r3, r7, #12
 8008292:	4618      	mov	r0, r3
 8008294:	f000 fdec 	bl	8008e70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800829c:	f000 bc6f 	b.w	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80082a0:	2300      	movs	r3, #0
 80082a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082a4:	f000 bc6b 	b.w	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082a8:	4b6e      	ldr	r3, [pc, #440]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082b0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082b2:	4b6c      	ldr	r3, [pc, #432]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0304 	and.w	r3, r3, #4
 80082ba:	2b04      	cmp	r3, #4
 80082bc:	d10c      	bne.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80082be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d109      	bne.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082c4:	4b67      	ldr	r3, [pc, #412]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	08db      	lsrs	r3, r3, #3
 80082ca:	f003 0303 	and.w	r3, r3, #3
 80082ce:	4a66      	ldr	r2, [pc, #408]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80082d0:	fa22 f303 	lsr.w	r3, r2, r3
 80082d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082d6:	e01f      	b.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082d8:	4b62      	ldr	r3, [pc, #392]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082e4:	d106      	bne.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80082e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082ec:	d102      	bne.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80082ee:	4b5f      	ldr	r3, [pc, #380]	; (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80082f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082f2:	e011      	b.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082f4:	4b5b      	ldr	r3, [pc, #364]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008300:	d106      	bne.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008308:	d102      	bne.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800830a:	4b59      	ldr	r3, [pc, #356]	; (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800830c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800830e:	e003      	b.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008310:	2300      	movs	r3, #0
 8008312:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008314:	f000 bc33 	b.w	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008318:	f000 bc31 	b.w	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800831c:	4b55      	ldr	r3, [pc, #340]	; (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800831e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008320:	f000 bc2d 	b.w	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008324:	2300      	movs	r3, #0
 8008326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008328:	f000 bc29 	b.w	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800832c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008330:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008334:	430b      	orrs	r3, r1
 8008336:	f040 809f 	bne.w	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800833a:	4b4a      	ldr	r3, [pc, #296]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800833c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800833e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008342:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800834a:	d04d      	beq.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800834c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008352:	f200 8084 	bhi.w	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008358:	2bc0      	cmp	r3, #192	; 0xc0
 800835a:	d07d      	beq.n	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800835c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835e:	2bc0      	cmp	r3, #192	; 0xc0
 8008360:	d87d      	bhi.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008364:	2b80      	cmp	r3, #128	; 0x80
 8008366:	d02d      	beq.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8008368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836a:	2b80      	cmp	r3, #128	; 0x80
 800836c:	d877      	bhi.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800836e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008370:	2b00      	cmp	r3, #0
 8008372:	d003      	beq.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8008374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008376:	2b40      	cmp	r3, #64	; 0x40
 8008378:	d012      	beq.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800837a:	e070      	b.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800837c:	4b39      	ldr	r3, [pc, #228]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008384:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008388:	d107      	bne.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800838a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800838e:	4618      	mov	r0, r3
 8008390:	f000 fec2 	bl	8009118 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008396:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008398:	e3f1      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800839a:	2300      	movs	r3, #0
 800839c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800839e:	e3ee      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083a0:	4b30      	ldr	r3, [pc, #192]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083ac:	d107      	bne.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083ae:	f107 0318 	add.w	r3, r7, #24
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 fc08 	bl	8008bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083bc:	e3df      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c2:	e3dc      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083c4:	4b27      	ldr	r3, [pc, #156]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083d0:	d107      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083d2:	f107 030c 	add.w	r3, r7, #12
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 fd4a 	bl	8008e70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083e0:	e3cd      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083e6:	e3ca      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083e8:	4b1e      	ldr	r3, [pc, #120]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083f0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083f2:	4b1c      	ldr	r3, [pc, #112]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0304 	and.w	r3, r3, #4
 80083fa:	2b04      	cmp	r3, #4
 80083fc:	d10c      	bne.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80083fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008400:	2b00      	cmp	r3, #0
 8008402:	d109      	bne.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008404:	4b17      	ldr	r3, [pc, #92]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	08db      	lsrs	r3, r3, #3
 800840a:	f003 0303 	and.w	r3, r3, #3
 800840e:	4a16      	ldr	r2, [pc, #88]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008410:	fa22 f303 	lsr.w	r3, r2, r3
 8008414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008416:	e01e      	b.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008418:	4b12      	ldr	r3, [pc, #72]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008424:	d106      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008428:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800842c:	d102      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800842e:	4b0f      	ldr	r3, [pc, #60]	; (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008430:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008432:	e010      	b.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008434:	4b0b      	ldr	r3, [pc, #44]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800843c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008440:	d106      	bne.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008448:	d102      	bne.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800844a:	4b09      	ldr	r3, [pc, #36]	; (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800844c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800844e:	e002      	b.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008450:	2300      	movs	r3, #0
 8008452:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008454:	e393      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008456:	e392      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008458:	4b06      	ldr	r3, [pc, #24]	; (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800845a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800845c:	e38f      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800845e:	2300      	movs	r3, #0
 8008460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008462:	e38c      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008464:	58024400 	.word	0x58024400
 8008468:	03d09000 	.word	0x03d09000
 800846c:	003d0900 	.word	0x003d0900
 8008470:	007a1200 	.word	0x007a1200
 8008474:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8008478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800847c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008480:	430b      	orrs	r3, r1
 8008482:	f040 809c 	bne.w	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8008486:	4b9e      	ldr	r3, [pc, #632]	; (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800848a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800848e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008496:	d054      	beq.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8008498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800849e:	f200 808b 	bhi.w	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80084a8:	f000 8083 	beq.w	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80084ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80084b2:	f200 8081 	bhi.w	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084bc:	d02f      	beq.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80084be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084c4:	d878      	bhi.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80084c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d004      	beq.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80084cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084d2:	d012      	beq.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80084d4:	e070      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084d6:	4b8a      	ldr	r3, [pc, #552]	; (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084e2:	d107      	bne.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084e8:	4618      	mov	r0, r3
 80084ea:	f000 fe15 	bl	8009118 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084f2:	e344      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80084f4:	2300      	movs	r3, #0
 80084f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084f8:	e341      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084fa:	4b81      	ldr	r3, [pc, #516]	; (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008502:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008506:	d107      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008508:	f107 0318 	add.w	r3, r7, #24
 800850c:	4618      	mov	r0, r3
 800850e:	f000 fb5b 	bl	8008bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008516:	e332      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008518:	2300      	movs	r3, #0
 800851a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800851c:	e32f      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800851e:	4b78      	ldr	r3, [pc, #480]	; (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800852a:	d107      	bne.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800852c:	f107 030c 	add.w	r3, r7, #12
 8008530:	4618      	mov	r0, r3
 8008532:	f000 fc9d 	bl	8008e70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800853a:	e320      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800853c:	2300      	movs	r3, #0
 800853e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008540:	e31d      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008542:	4b6f      	ldr	r3, [pc, #444]	; (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008546:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800854a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800854c:	4b6c      	ldr	r3, [pc, #432]	; (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0304 	and.w	r3, r3, #4
 8008554:	2b04      	cmp	r3, #4
 8008556:	d10c      	bne.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8008558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855a:	2b00      	cmp	r3, #0
 800855c:	d109      	bne.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800855e:	4b68      	ldr	r3, [pc, #416]	; (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	08db      	lsrs	r3, r3, #3
 8008564:	f003 0303 	and.w	r3, r3, #3
 8008568:	4a66      	ldr	r2, [pc, #408]	; (8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800856a:	fa22 f303 	lsr.w	r3, r2, r3
 800856e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008570:	e01e      	b.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008572:	4b63      	ldr	r3, [pc, #396]	; (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800857a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800857e:	d106      	bne.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008582:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008586:	d102      	bne.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008588:	4b5f      	ldr	r3, [pc, #380]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800858a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800858c:	e010      	b.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800858e:	4b5c      	ldr	r3, [pc, #368]	; (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008596:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800859a:	d106      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800859c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800859e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085a2:	d102      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085a4:	4b59      	ldr	r3, [pc, #356]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80085a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085a8:	e002      	b.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085aa:	2300      	movs	r3, #0
 80085ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 80085ae:	e2e6      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80085b0:	e2e5      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085b2:	4b57      	ldr	r3, [pc, #348]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80085b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085b6:	e2e2      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80085b8:	2300      	movs	r3, #0
 80085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085bc:	e2df      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80085be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085c2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80085c6:	430b      	orrs	r3, r1
 80085c8:	f040 80a7 	bne.w	800871a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80085cc:	4b4c      	ldr	r3, [pc, #304]	; (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80085ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085d0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80085d4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80085d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085dc:	d055      	beq.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80085de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085e4:	f200 8096 	bhi.w	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80085e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085ee:	f000 8084 	beq.w	80086fa <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80085f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085f8:	f200 808c 	bhi.w	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80085fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008602:	d030      	beq.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8008604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800860a:	f200 8083 	bhi.w	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800860e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008610:	2b00      	cmp	r3, #0
 8008612:	d004      	beq.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800861a:	d012      	beq.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800861c:	e07a      	b.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800861e:	4b38      	ldr	r3, [pc, #224]	; (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008626:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800862a:	d107      	bne.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800862c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008630:	4618      	mov	r0, r3
 8008632:	f000 fd71 	bl	8009118 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008638:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800863a:	e2a0      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800863c:	2300      	movs	r3, #0
 800863e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008640:	e29d      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008642:	4b2f      	ldr	r3, [pc, #188]	; (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800864a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800864e:	d107      	bne.n	8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008650:	f107 0318 	add.w	r3, r7, #24
 8008654:	4618      	mov	r0, r3
 8008656:	f000 fab7 	bl	8008bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800865e:	e28e      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008660:	2300      	movs	r3, #0
 8008662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008664:	e28b      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008666:	4b26      	ldr	r3, [pc, #152]	; (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800866e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008672:	d107      	bne.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008674:	f107 030c 	add.w	r3, r7, #12
 8008678:	4618      	mov	r0, r3
 800867a:	f000 fbf9 	bl	8008e70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008682:	e27c      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008684:	2300      	movs	r3, #0
 8008686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008688:	e279      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800868a:	4b1d      	ldr	r3, [pc, #116]	; (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800868c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800868e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008692:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008694:	4b1a      	ldr	r3, [pc, #104]	; (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0304 	and.w	r3, r3, #4
 800869c:	2b04      	cmp	r3, #4
 800869e:	d10c      	bne.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 80086a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d109      	bne.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086a6:	4b16      	ldr	r3, [pc, #88]	; (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	08db      	lsrs	r3, r3, #3
 80086ac:	f003 0303 	and.w	r3, r3, #3
 80086b0:	4a14      	ldr	r2, [pc, #80]	; (8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80086b2:	fa22 f303 	lsr.w	r3, r2, r3
 80086b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086b8:	e01e      	b.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086ba:	4b11      	ldr	r3, [pc, #68]	; (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086c6:	d106      	bne.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80086c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086ce:	d102      	bne.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80086d0:	4b0d      	ldr	r3, [pc, #52]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80086d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086d4:	e010      	b.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086d6:	4b0a      	ldr	r3, [pc, #40]	; (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086e2:	d106      	bne.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80086e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086ea:	d102      	bne.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80086ec:	4b07      	ldr	r3, [pc, #28]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80086ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086f0:	e002      	b.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80086f2:	2300      	movs	r3, #0
 80086f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80086f6:	e242      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80086f8:	e241      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80086fa:	4b05      	ldr	r3, [pc, #20]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80086fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086fe:	e23e      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008700:	58024400 	.word	0x58024400
 8008704:	03d09000 	.word	0x03d09000
 8008708:	003d0900 	.word	0x003d0900
 800870c:	007a1200 	.word	0x007a1200
 8008710:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008718:	e231      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800871a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800871e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008722:	430b      	orrs	r3, r1
 8008724:	f040 8085 	bne.w	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008728:	4b9c      	ldr	r3, [pc, #624]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800872a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800872c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008730:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008734:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008738:	d06b      	beq.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800873a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008740:	d874      	bhi.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008744:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008748:	d056      	beq.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800874a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008750:	d86c      	bhi.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008754:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008758:	d03b      	beq.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800875a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008760:	d864      	bhi.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008768:	d021      	beq.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800876a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008770:	d85c      	bhi.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008774:	2b00      	cmp	r3, #0
 8008776:	d004      	beq.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8008778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800877e:	d004      	beq.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8008780:	e054      	b.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008782:	f7fe fb07 	bl	8006d94 <HAL_RCC_GetPCLK1Freq>
 8008786:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008788:	e1f9      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800878a:	4b84      	ldr	r3, [pc, #528]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008792:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008796:	d107      	bne.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008798:	f107 0318 	add.w	r3, r7, #24
 800879c:	4618      	mov	r0, r3
 800879e:	f000 fa13 	bl	8008bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087a6:	e1ea      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80087a8:	2300      	movs	r3, #0
 80087aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087ac:	e1e7      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087ae:	4b7b      	ldr	r3, [pc, #492]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087ba:	d107      	bne.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087bc:	f107 030c 	add.w	r3, r7, #12
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 fb55 	bl	8008e70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ca:	e1d8      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80087cc:	2300      	movs	r3, #0
 80087ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087d0:	e1d5      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80087d2:	4b72      	ldr	r3, [pc, #456]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0304 	and.w	r3, r3, #4
 80087da:	2b04      	cmp	r3, #4
 80087dc:	d109      	bne.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087de:	4b6f      	ldr	r3, [pc, #444]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	08db      	lsrs	r3, r3, #3
 80087e4:	f003 0303 	and.w	r3, r3, #3
 80087e8:	4a6d      	ldr	r2, [pc, #436]	; (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80087ea:	fa22 f303 	lsr.w	r3, r2, r3
 80087ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087f0:	e1c5      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087f6:	e1c2      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80087f8:	4b68      	ldr	r3, [pc, #416]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008804:	d102      	bne.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8008806:	4b67      	ldr	r3, [pc, #412]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008808:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800880a:	e1b8      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800880c:	2300      	movs	r3, #0
 800880e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008810:	e1b5      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008812:	4b62      	ldr	r3, [pc, #392]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800881a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800881e:	d102      	bne.n	8008826 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8008820:	4b61      	ldr	r3, [pc, #388]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8008822:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008824:	e1ab      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008826:	2300      	movs	r3, #0
 8008828:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800882a:	e1a8      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800882c:	2300      	movs	r3, #0
 800882e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008830:	e1a5      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008832:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008836:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800883a:	430b      	orrs	r3, r1
 800883c:	d173      	bne.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800883e:	4b57      	ldr	r3, [pc, #348]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008842:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008846:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800884e:	d02f      	beq.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8008850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008856:	d863      	bhi.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885a:	2b00      	cmp	r3, #0
 800885c:	d004      	beq.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800885e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008864:	d012      	beq.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8008866:	e05b      	b.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008868:	4b4c      	ldr	r3, [pc, #304]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008870:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008874:	d107      	bne.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008876:	f107 0318 	add.w	r3, r7, #24
 800887a:	4618      	mov	r0, r3
 800887c:	f000 f9a4 	bl	8008bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008884:	e17b      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008886:	2300      	movs	r3, #0
 8008888:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800888a:	e178      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800888c:	4b43      	ldr	r3, [pc, #268]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008898:	d107      	bne.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800889a:	f107 030c 	add.w	r3, r7, #12
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 fae6 	bl	8008e70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088a8:	e169      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80088aa:	2300      	movs	r3, #0
 80088ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088ae:	e166      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088b0:	4b3a      	ldr	r3, [pc, #232]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80088b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088b8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088ba:	4b38      	ldr	r3, [pc, #224]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 0304 	and.w	r3, r3, #4
 80088c2:	2b04      	cmp	r3, #4
 80088c4:	d10c      	bne.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80088c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d109      	bne.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088cc:	4b33      	ldr	r3, [pc, #204]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	08db      	lsrs	r3, r3, #3
 80088d2:	f003 0303 	and.w	r3, r3, #3
 80088d6:	4a32      	ldr	r2, [pc, #200]	; (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80088d8:	fa22 f303 	lsr.w	r3, r2, r3
 80088dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088de:	e01e      	b.n	800891e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088e0:	4b2e      	ldr	r3, [pc, #184]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ec:	d106      	bne.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80088ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088f4:	d102      	bne.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80088f6:	4b2b      	ldr	r3, [pc, #172]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80088f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088fa:	e010      	b.n	800891e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088fc:	4b27      	ldr	r3, [pc, #156]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008908:	d106      	bne.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800890a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800890c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008910:	d102      	bne.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008912:	4b25      	ldr	r3, [pc, #148]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8008914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008916:	e002      	b.n	800891e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008918:	2300      	movs	r3, #0
 800891a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800891c:	e12f      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800891e:	e12e      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008920:	2300      	movs	r3, #0
 8008922:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008924:	e12b      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008926:	e9d7 2300 	ldrd	r2, r3, [r7]
 800892a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800892e:	430b      	orrs	r3, r1
 8008930:	d13c      	bne.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008932:	4b1a      	ldr	r3, [pc, #104]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800893a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800893c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893e:	2b00      	cmp	r3, #0
 8008940:	d004      	beq.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8008942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008948:	d012      	beq.n	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800894a:	e023      	b.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800894c:	4b13      	ldr	r3, [pc, #76]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008954:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008958:	d107      	bne.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800895a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800895e:	4618      	mov	r0, r3
 8008960:	f000 fbda 	bl	8009118 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008966:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008968:	e109      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800896a:	2300      	movs	r3, #0
 800896c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800896e:	e106      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008970:	4b0a      	ldr	r3, [pc, #40]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008978:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800897c:	d107      	bne.n	800898e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800897e:	f107 0318 	add.w	r3, r7, #24
 8008982:	4618      	mov	r0, r3
 8008984:	f000 f920 	bl	8008bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008988:	6a3b      	ldr	r3, [r7, #32]
 800898a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800898c:	e0f7      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800898e:	2300      	movs	r3, #0
 8008990:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008992:	e0f4      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008994:	2300      	movs	r3, #0
 8008996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008998:	e0f1      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800899a:	bf00      	nop
 800899c:	58024400 	.word	0x58024400
 80089a0:	03d09000 	.word	0x03d09000
 80089a4:	003d0900 	.word	0x003d0900
 80089a8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80089ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089b0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80089b4:	430b      	orrs	r3, r1
 80089b6:	f040 8091 	bne.w	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80089ba:	4b73      	ldr	r3, [pc, #460]	; (8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80089bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089be:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80089c2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80089c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80089ca:	f000 8081 	beq.w	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80089ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80089d4:	d87f      	bhi.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80089d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089dc:	d06b      	beq.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80089de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089e4:	d877      	bhi.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80089e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089ec:	d056      	beq.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80089ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089f4:	d86f      	bhi.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80089f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089fc:	d03b      	beq.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80089fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a04:	d867      	bhi.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a0c:	d021      	beq.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8008a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a14:	d85f      	bhi.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d004      	beq.n	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a22:	d004      	beq.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8008a24:	e057      	b.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008a26:	f000 f8b9 	bl	8008b9c <HAL_RCCEx_GetD3PCLK1Freq>
 8008a2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a2c:	e0a7      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a2e:	4b56      	ldr	r3, [pc, #344]	; (8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a3a:	d107      	bne.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a3c:	f107 0318 	add.w	r3, r7, #24
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 f8c1 	bl	8008bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a4a:	e098      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a50:	e095      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a52:	4b4d      	ldr	r3, [pc, #308]	; (8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a5e:	d107      	bne.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a60:	f107 030c 	add.w	r3, r7, #12
 8008a64:	4618      	mov	r0, r3
 8008a66:	f000 fa03 	bl	8008e70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a6e:	e086      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008a70:	2300      	movs	r3, #0
 8008a72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a74:	e083      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a76:	4b44      	ldr	r3, [pc, #272]	; (8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 0304 	and.w	r3, r3, #4
 8008a7e:	2b04      	cmp	r3, #4
 8008a80:	d109      	bne.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a82:	4b41      	ldr	r3, [pc, #260]	; (8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	08db      	lsrs	r3, r3, #3
 8008a88:	f003 0303 	and.w	r3, r3, #3
 8008a8c:	4a3f      	ldr	r2, [pc, #252]	; (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a94:	e073      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008a96:	2300      	movs	r3, #0
 8008a98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a9a:	e070      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008a9c:	4b3a      	ldr	r3, [pc, #232]	; (8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aa8:	d102      	bne.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8008aaa:	4b39      	ldr	r3, [pc, #228]	; (8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8008aac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aae:	e066      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ab4:	e063      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ab6:	4b34      	ldr	r3, [pc, #208]	; (8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008abe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ac2:	d102      	bne.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8008ac4:	4b33      	ldr	r3, [pc, #204]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8008ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ac8:	e059      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ace:	e056      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ad0:	4b31      	ldr	r3, [pc, #196]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8008ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ad4:	e053      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ada:	e050      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008adc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ae0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008ae4:	430b      	orrs	r3, r1
 8008ae6:	d148      	bne.n	8008b7a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008ae8:	4b27      	ldr	r3, [pc, #156]	; (8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008af0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008af8:	d02a      	beq.n	8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8008afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b00:	d838      	bhi.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d004      	beq.n	8008b12 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8008b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b0e:	d00d      	beq.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8008b10:	e030      	b.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b12:	4b1d      	ldr	r3, [pc, #116]	; (8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b1e:	d102      	bne.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8008b20:	4b1c      	ldr	r3, [pc, #112]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8008b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b24:	e02b      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008b26:	2300      	movs	r3, #0
 8008b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b2a:	e028      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b2c:	4b16      	ldr	r3, [pc, #88]	; (8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b38:	d107      	bne.n	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 faea 	bl	8009118 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b48:	e019      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b4e:	e016      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b50:	4b0d      	ldr	r3, [pc, #52]	; (8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b5c:	d107      	bne.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b5e:	f107 0318 	add.w	r3, r7, #24
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 f830 	bl	8008bc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b6c:	e007      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b72:	e004      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008b74:	2300      	movs	r3, #0
 8008b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b78:	e001      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3740      	adds	r7, #64	; 0x40
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	58024400 	.word	0x58024400
 8008b8c:	03d09000 	.word	0x03d09000
 8008b90:	003d0900 	.word	0x003d0900
 8008b94:	007a1200 	.word	0x007a1200
 8008b98:	00bb8000 	.word	0x00bb8000

08008b9c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008ba0:	f7fe f8c8 	bl	8006d34 <HAL_RCC_GetHCLKFreq>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	4b06      	ldr	r3, [pc, #24]	; (8008bc0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	091b      	lsrs	r3, r3, #4
 8008bac:	f003 0307 	and.w	r3, r3, #7
 8008bb0:	4904      	ldr	r1, [pc, #16]	; (8008bc4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008bb2:	5ccb      	ldrb	r3, [r1, r3]
 8008bb4:	f003 031f 	and.w	r3, r3, #31
 8008bb8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	58024400 	.word	0x58024400
 8008bc4:	08010d58 	.word	0x08010d58

08008bc8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b089      	sub	sp, #36	; 0x24
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bd0:	4ba1      	ldr	r3, [pc, #644]	; (8008e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd4:	f003 0303 	and.w	r3, r3, #3
 8008bd8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008bda:	4b9f      	ldr	r3, [pc, #636]	; (8008e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bde:	0b1b      	lsrs	r3, r3, #12
 8008be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008be4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008be6:	4b9c      	ldr	r3, [pc, #624]	; (8008e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bea:	091b      	lsrs	r3, r3, #4
 8008bec:	f003 0301 	and.w	r3, r3, #1
 8008bf0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008bf2:	4b99      	ldr	r3, [pc, #612]	; (8008e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bf6:	08db      	lsrs	r3, r3, #3
 8008bf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	fb02 f303 	mul.w	r3, r2, r3
 8008c02:	ee07 3a90 	vmov	s15, r3
 8008c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 8111 	beq.w	8008e38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	f000 8083 	beq.w	8008d24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	f200 80a1 	bhi.w	8008d68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d003      	beq.n	8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d056      	beq.n	8008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008c32:	e099      	b.n	8008d68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c34:	4b88      	ldr	r3, [pc, #544]	; (8008e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0320 	and.w	r3, r3, #32
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d02d      	beq.n	8008c9c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c40:	4b85      	ldr	r3, [pc, #532]	; (8008e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	08db      	lsrs	r3, r3, #3
 8008c46:	f003 0303 	and.w	r3, r3, #3
 8008c4a:	4a84      	ldr	r2, [pc, #528]	; (8008e5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c50:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	ee07 3a90 	vmov	s15, r3
 8008c58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	ee07 3a90 	vmov	s15, r3
 8008c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c6a:	4b7b      	ldr	r3, [pc, #492]	; (8008e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c72:	ee07 3a90 	vmov	s15, r3
 8008c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008e60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c9a:	e087      	b.n	8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	ee07 3a90 	vmov	s15, r3
 8008ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ca6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008e64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cae:	4b6a      	ldr	r3, [pc, #424]	; (8008e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cb6:	ee07 3a90 	vmov	s15, r3
 8008cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cc2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008e60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cde:	e065      	b.n	8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	ee07 3a90 	vmov	s15, r3
 8008ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cf2:	4b59      	ldr	r3, [pc, #356]	; (8008e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cfa:	ee07 3a90 	vmov	s15, r3
 8008cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008e60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d22:	e043      	b.n	8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	ee07 3a90 	vmov	s15, r3
 8008d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008e6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d36:	4b48      	ldr	r3, [pc, #288]	; (8008e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d3e:	ee07 3a90 	vmov	s15, r3
 8008d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008e60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d66:	e021      	b.n	8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d7a:	4b37      	ldr	r3, [pc, #220]	; (8008e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d82:	ee07 3a90 	vmov	s15, r3
 8008d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008e60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008daa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008dac:	4b2a      	ldr	r3, [pc, #168]	; (8008e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db0:	0a5b      	lsrs	r3, r3, #9
 8008db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008db6:	ee07 3a90 	vmov	s15, r3
 8008dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008dc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dd2:	ee17 2a90 	vmov	r2, s15
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008dda:	4b1f      	ldr	r3, [pc, #124]	; (8008e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dde:	0c1b      	lsrs	r3, r3, #16
 8008de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008de4:	ee07 3a90 	vmov	s15, r3
 8008de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008df0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008df4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e00:	ee17 2a90 	vmov	r2, s15
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008e08:	4b13      	ldr	r3, [pc, #76]	; (8008e58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0c:	0e1b      	lsrs	r3, r3, #24
 8008e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e12:	ee07 3a90 	vmov	s15, r3
 8008e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e22:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e2e:	ee17 2a90 	vmov	r2, s15
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008e36:	e008      	b.n	8008e4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	609a      	str	r2, [r3, #8]
}
 8008e4a:	bf00      	nop
 8008e4c:	3724      	adds	r7, #36	; 0x24
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	58024400 	.word	0x58024400
 8008e5c:	03d09000 	.word	0x03d09000
 8008e60:	46000000 	.word	0x46000000
 8008e64:	4c742400 	.word	0x4c742400
 8008e68:	4a742400 	.word	0x4a742400
 8008e6c:	4af42400 	.word	0x4af42400

08008e70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b089      	sub	sp, #36	; 0x24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e78:	4ba1      	ldr	r3, [pc, #644]	; (8009100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e7c:	f003 0303 	and.w	r3, r3, #3
 8008e80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008e82:	4b9f      	ldr	r3, [pc, #636]	; (8009100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e86:	0d1b      	lsrs	r3, r3, #20
 8008e88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008e8e:	4b9c      	ldr	r3, [pc, #624]	; (8009100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e92:	0a1b      	lsrs	r3, r3, #8
 8008e94:	f003 0301 	and.w	r3, r3, #1
 8008e98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008e9a:	4b99      	ldr	r3, [pc, #612]	; (8009100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e9e:	08db      	lsrs	r3, r3, #3
 8008ea0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ea4:	693a      	ldr	r2, [r7, #16]
 8008ea6:	fb02 f303 	mul.w	r3, r2, r3
 8008eaa:	ee07 3a90 	vmov	s15, r3
 8008eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f000 8111 	beq.w	80090e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	f000 8083 	beq.w	8008fcc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	f200 80a1 	bhi.w	8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d003      	beq.n	8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d056      	beq.n	8008f88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008eda:	e099      	b.n	8009010 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008edc:	4b88      	ldr	r3, [pc, #544]	; (8009100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0320 	and.w	r3, r3, #32
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d02d      	beq.n	8008f44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ee8:	4b85      	ldr	r3, [pc, #532]	; (8009100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	08db      	lsrs	r3, r3, #3
 8008eee:	f003 0303 	and.w	r3, r3, #3
 8008ef2:	4a84      	ldr	r2, [pc, #528]	; (8009104 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	ee07 3a90 	vmov	s15, r3
 8008f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	ee07 3a90 	vmov	s15, r3
 8008f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f12:	4b7b      	ldr	r3, [pc, #492]	; (8009100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f1a:	ee07 3a90 	vmov	s15, r3
 8008f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f22:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009108 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f42:	e087      	b.n	8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	ee07 3a90 	vmov	s15, r3
 8008f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800910c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f56:	4b6a      	ldr	r3, [pc, #424]	; (8009100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f5e:	ee07 3a90 	vmov	s15, r3
 8008f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009108 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f86:	e065      	b.n	8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	ee07 3a90 	vmov	s15, r3
 8008f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009110 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f9a:	4b59      	ldr	r3, [pc, #356]	; (8009100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fa2:	ee07 3a90 	vmov	s15, r3
 8008fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009108 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fca:	e043      	b.n	8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	ee07 3a90 	vmov	s15, r3
 8008fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009114 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fde:	4b48      	ldr	r3, [pc, #288]	; (8009100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fe6:	ee07 3a90 	vmov	s15, r3
 8008fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ff2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009108 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800900a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800900e:	e021      	b.n	8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	ee07 3a90 	vmov	s15, r3
 8009016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800901a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009110 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800901e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009022:	4b37      	ldr	r3, [pc, #220]	; (8009100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800902a:	ee07 3a90 	vmov	s15, r3
 800902e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009032:	ed97 6a03 	vldr	s12, [r7, #12]
 8009036:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009108 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800903a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800903e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800904a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800904e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009052:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009054:	4b2a      	ldr	r3, [pc, #168]	; (8009100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009058:	0a5b      	lsrs	r3, r3, #9
 800905a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800905e:	ee07 3a90 	vmov	s15, r3
 8009062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009066:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800906a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800906e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800907a:	ee17 2a90 	vmov	r2, s15
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009082:	4b1f      	ldr	r3, [pc, #124]	; (8009100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009086:	0c1b      	lsrs	r3, r3, #16
 8009088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800908c:	ee07 3a90 	vmov	s15, r3
 8009090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009094:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009098:	ee37 7a87 	vadd.f32	s14, s15, s14
 800909c:	edd7 6a07 	vldr	s13, [r7, #28]
 80090a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090a8:	ee17 2a90 	vmov	r2, s15
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80090b0:	4b13      	ldr	r3, [pc, #76]	; (8009100 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b4:	0e1b      	lsrs	r3, r3, #24
 80090b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090ba:	ee07 3a90 	vmov	s15, r3
 80090be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80090ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090d6:	ee17 2a90 	vmov	r2, s15
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80090de:	e008      	b.n	80090f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	609a      	str	r2, [r3, #8]
}
 80090f2:	bf00      	nop
 80090f4:	3724      	adds	r7, #36	; 0x24
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	58024400 	.word	0x58024400
 8009104:	03d09000 	.word	0x03d09000
 8009108:	46000000 	.word	0x46000000
 800910c:	4c742400 	.word	0x4c742400
 8009110:	4a742400 	.word	0x4a742400
 8009114:	4af42400 	.word	0x4af42400

08009118 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009118:	b480      	push	{r7}
 800911a:	b089      	sub	sp, #36	; 0x24
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009120:	4ba0      	ldr	r3, [pc, #640]	; (80093a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009124:	f003 0303 	and.w	r3, r3, #3
 8009128:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800912a:	4b9e      	ldr	r3, [pc, #632]	; (80093a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800912c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800912e:	091b      	lsrs	r3, r3, #4
 8009130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009134:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009136:	4b9b      	ldr	r3, [pc, #620]	; (80093a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913a:	f003 0301 	and.w	r3, r3, #1
 800913e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009140:	4b98      	ldr	r3, [pc, #608]	; (80093a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009144:	08db      	lsrs	r3, r3, #3
 8009146:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800914a:	693a      	ldr	r2, [r7, #16]
 800914c:	fb02 f303 	mul.w	r3, r2, r3
 8009150:	ee07 3a90 	vmov	s15, r3
 8009154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009158:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	2b00      	cmp	r3, #0
 8009160:	f000 8111 	beq.w	8009386 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	2b02      	cmp	r3, #2
 8009168:	f000 8083 	beq.w	8009272 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	2b02      	cmp	r3, #2
 8009170:	f200 80a1 	bhi.w	80092b6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d003      	beq.n	8009182 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d056      	beq.n	800922e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009180:	e099      	b.n	80092b6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009182:	4b88      	ldr	r3, [pc, #544]	; (80093a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 0320 	and.w	r3, r3, #32
 800918a:	2b00      	cmp	r3, #0
 800918c:	d02d      	beq.n	80091ea <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800918e:	4b85      	ldr	r3, [pc, #532]	; (80093a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	08db      	lsrs	r3, r3, #3
 8009194:	f003 0303 	and.w	r3, r3, #3
 8009198:	4a83      	ldr	r2, [pc, #524]	; (80093a8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800919a:	fa22 f303 	lsr.w	r3, r2, r3
 800919e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	ee07 3a90 	vmov	s15, r3
 80091a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	ee07 3a90 	vmov	s15, r3
 80091b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091b8:	4b7a      	ldr	r3, [pc, #488]	; (80093a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091c0:	ee07 3a90 	vmov	s15, r3
 80091c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80091cc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80093ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091e4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80091e8:	e087      	b.n	80092fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	ee07 3a90 	vmov	s15, r3
 80091f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091f4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80093b0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80091f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091fc:	4b69      	ldr	r3, [pc, #420]	; (80093a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009204:	ee07 3a90 	vmov	s15, r3
 8009208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800920c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009210:	eddf 5a66 	vldr	s11, [pc, #408]	; 80093ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009214:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009218:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800921c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009220:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009228:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800922c:	e065      	b.n	80092fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	ee07 3a90 	vmov	s15, r3
 8009234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009238:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80093b4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800923c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009240:	4b58      	ldr	r3, [pc, #352]	; (80093a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009248:	ee07 3a90 	vmov	s15, r3
 800924c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009250:	ed97 6a03 	vldr	s12, [r7, #12]
 8009254:	eddf 5a55 	vldr	s11, [pc, #340]	; 80093ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009258:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800925c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009260:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009264:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800926c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009270:	e043      	b.n	80092fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	ee07 3a90 	vmov	s15, r3
 8009278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800927c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80093b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009280:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009284:	4b47      	ldr	r3, [pc, #284]	; (80093a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800928c:	ee07 3a90 	vmov	s15, r3
 8009290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009294:	ed97 6a03 	vldr	s12, [r7, #12]
 8009298:	eddf 5a44 	vldr	s11, [pc, #272]	; 80093ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800929c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092b4:	e021      	b.n	80092fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	ee07 3a90 	vmov	s15, r3
 80092bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80093b0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80092c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092c8:	4b36      	ldr	r3, [pc, #216]	; (80093a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092d0:	ee07 3a90 	vmov	s15, r3
 80092d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80092dc:	eddf 5a33 	vldr	s11, [pc, #204]	; 80093ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092f8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80092fa:	4b2a      	ldr	r3, [pc, #168]	; (80093a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092fe:	0a5b      	lsrs	r3, r3, #9
 8009300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009304:	ee07 3a90 	vmov	s15, r3
 8009308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800930c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009310:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009314:	edd7 6a07 	vldr	s13, [r7, #28]
 8009318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800931c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009320:	ee17 2a90 	vmov	r2, s15
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009328:	4b1e      	ldr	r3, [pc, #120]	; (80093a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800932a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800932c:	0c1b      	lsrs	r3, r3, #16
 800932e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009332:	ee07 3a90 	vmov	s15, r3
 8009336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800933a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800933e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009342:	edd7 6a07 	vldr	s13, [r7, #28]
 8009346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800934a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800934e:	ee17 2a90 	vmov	r2, s15
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009356:	4b13      	ldr	r3, [pc, #76]	; (80093a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800935a:	0e1b      	lsrs	r3, r3, #24
 800935c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009360:	ee07 3a90 	vmov	s15, r3
 8009364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009368:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800936c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009370:	edd7 6a07 	vldr	s13, [r7, #28]
 8009374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800937c:	ee17 2a90 	vmov	r2, s15
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009384:	e008      	b.n	8009398 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	609a      	str	r2, [r3, #8]
}
 8009398:	bf00      	nop
 800939a:	3724      	adds	r7, #36	; 0x24
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr
 80093a4:	58024400 	.word	0x58024400
 80093a8:	03d09000 	.word	0x03d09000
 80093ac:	46000000 	.word	0x46000000
 80093b0:	4c742400 	.word	0x4c742400
 80093b4:	4a742400 	.word	0x4a742400
 80093b8:	4af42400 	.word	0x4af42400

080093bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80093ca:	4b53      	ldr	r3, [pc, #332]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 80093cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ce:	f003 0303 	and.w	r3, r3, #3
 80093d2:	2b03      	cmp	r3, #3
 80093d4:	d101      	bne.n	80093da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	e099      	b.n	800950e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80093da:	4b4f      	ldr	r3, [pc, #316]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a4e      	ldr	r2, [pc, #312]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 80093e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80093e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093e6:	f7f8 fa21 	bl	800182c <HAL_GetTick>
 80093ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80093ec:	e008      	b.n	8009400 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80093ee:	f7f8 fa1d 	bl	800182c <HAL_GetTick>
 80093f2:	4602      	mov	r2, r0
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	d901      	bls.n	8009400 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80093fc:	2303      	movs	r3, #3
 80093fe:	e086      	b.n	800950e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009400:	4b45      	ldr	r3, [pc, #276]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1f0      	bne.n	80093ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800940c:	4b42      	ldr	r3, [pc, #264]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 800940e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009410:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	031b      	lsls	r3, r3, #12
 800941a:	493f      	ldr	r1, [pc, #252]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 800941c:	4313      	orrs	r3, r2
 800941e:	628b      	str	r3, [r1, #40]	; 0x28
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	3b01      	subs	r3, #1
 8009426:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	3b01      	subs	r3, #1
 8009430:	025b      	lsls	r3, r3, #9
 8009432:	b29b      	uxth	r3, r3
 8009434:	431a      	orrs	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	3b01      	subs	r3, #1
 800943c:	041b      	lsls	r3, r3, #16
 800943e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009442:	431a      	orrs	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	3b01      	subs	r3, #1
 800944a:	061b      	lsls	r3, r3, #24
 800944c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009450:	4931      	ldr	r1, [pc, #196]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 8009452:	4313      	orrs	r3, r2
 8009454:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009456:	4b30      	ldr	r3, [pc, #192]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 8009458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	492d      	ldr	r1, [pc, #180]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 8009464:	4313      	orrs	r3, r2
 8009466:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009468:	4b2b      	ldr	r3, [pc, #172]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 800946a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946c:	f023 0220 	bic.w	r2, r3, #32
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	4928      	ldr	r1, [pc, #160]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 8009476:	4313      	orrs	r3, r2
 8009478:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800947a:	4b27      	ldr	r3, [pc, #156]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 800947c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947e:	4a26      	ldr	r2, [pc, #152]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 8009480:	f023 0310 	bic.w	r3, r3, #16
 8009484:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009486:	4b24      	ldr	r3, [pc, #144]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 8009488:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800948a:	4b24      	ldr	r3, [pc, #144]	; (800951c <RCCEx_PLL2_Config+0x160>)
 800948c:	4013      	ands	r3, r2
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	69d2      	ldr	r2, [r2, #28]
 8009492:	00d2      	lsls	r2, r2, #3
 8009494:	4920      	ldr	r1, [pc, #128]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 8009496:	4313      	orrs	r3, r2
 8009498:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800949a:	4b1f      	ldr	r3, [pc, #124]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 800949c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949e:	4a1e      	ldr	r2, [pc, #120]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 80094a0:	f043 0310 	orr.w	r3, r3, #16
 80094a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d106      	bne.n	80094ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80094ac:	4b1a      	ldr	r3, [pc, #104]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 80094ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b0:	4a19      	ldr	r2, [pc, #100]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 80094b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80094b8:	e00f      	b.n	80094da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d106      	bne.n	80094ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80094c0:	4b15      	ldr	r3, [pc, #84]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 80094c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c4:	4a14      	ldr	r2, [pc, #80]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 80094c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80094cc:	e005      	b.n	80094da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80094ce:	4b12      	ldr	r3, [pc, #72]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 80094d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d2:	4a11      	ldr	r2, [pc, #68]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 80094d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80094d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80094da:	4b0f      	ldr	r3, [pc, #60]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a0e      	ldr	r2, [pc, #56]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 80094e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80094e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094e6:	f7f8 f9a1 	bl	800182c <HAL_GetTick>
 80094ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80094ec:	e008      	b.n	8009500 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80094ee:	f7f8 f99d 	bl	800182c <HAL_GetTick>
 80094f2:	4602      	mov	r2, r0
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	d901      	bls.n	8009500 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80094fc:	2303      	movs	r3, #3
 80094fe:	e006      	b.n	800950e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009500:	4b05      	ldr	r3, [pc, #20]	; (8009518 <RCCEx_PLL2_Config+0x15c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009508:	2b00      	cmp	r3, #0
 800950a:	d0f0      	beq.n	80094ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800950c:	7bfb      	ldrb	r3, [r7, #15]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	58024400 	.word	0x58024400
 800951c:	ffff0007 	.word	0xffff0007

08009520 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800952e:	4b53      	ldr	r3, [pc, #332]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 8009530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009532:	f003 0303 	and.w	r3, r3, #3
 8009536:	2b03      	cmp	r3, #3
 8009538:	d101      	bne.n	800953e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e099      	b.n	8009672 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800953e:	4b4f      	ldr	r3, [pc, #316]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a4e      	ldr	r2, [pc, #312]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 8009544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009548:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800954a:	f7f8 f96f 	bl	800182c <HAL_GetTick>
 800954e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009550:	e008      	b.n	8009564 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009552:	f7f8 f96b 	bl	800182c <HAL_GetTick>
 8009556:	4602      	mov	r2, r0
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	2b02      	cmp	r3, #2
 800955e:	d901      	bls.n	8009564 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	e086      	b.n	8009672 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009564:	4b45      	ldr	r3, [pc, #276]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1f0      	bne.n	8009552 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009570:	4b42      	ldr	r3, [pc, #264]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 8009572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009574:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	051b      	lsls	r3, r3, #20
 800957e:	493f      	ldr	r1, [pc, #252]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 8009580:	4313      	orrs	r3, r2
 8009582:	628b      	str	r3, [r1, #40]	; 0x28
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	3b01      	subs	r3, #1
 800958a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	3b01      	subs	r3, #1
 8009594:	025b      	lsls	r3, r3, #9
 8009596:	b29b      	uxth	r3, r3
 8009598:	431a      	orrs	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	3b01      	subs	r3, #1
 80095a0:	041b      	lsls	r3, r3, #16
 80095a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80095a6:	431a      	orrs	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	3b01      	subs	r3, #1
 80095ae:	061b      	lsls	r3, r3, #24
 80095b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80095b4:	4931      	ldr	r1, [pc, #196]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 80095b6:	4313      	orrs	r3, r2
 80095b8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80095ba:	4b30      	ldr	r3, [pc, #192]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 80095bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	695b      	ldr	r3, [r3, #20]
 80095c6:	492d      	ldr	r1, [pc, #180]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 80095c8:	4313      	orrs	r3, r2
 80095ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80095cc:	4b2b      	ldr	r3, [pc, #172]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 80095ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	699b      	ldr	r3, [r3, #24]
 80095d8:	4928      	ldr	r1, [pc, #160]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80095de:	4b27      	ldr	r3, [pc, #156]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 80095e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e2:	4a26      	ldr	r2, [pc, #152]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 80095e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80095ea:	4b24      	ldr	r3, [pc, #144]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 80095ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095ee:	4b24      	ldr	r3, [pc, #144]	; (8009680 <RCCEx_PLL3_Config+0x160>)
 80095f0:	4013      	ands	r3, r2
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	69d2      	ldr	r2, [r2, #28]
 80095f6:	00d2      	lsls	r2, r2, #3
 80095f8:	4920      	ldr	r1, [pc, #128]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 80095fa:	4313      	orrs	r3, r2
 80095fc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80095fe:	4b1f      	ldr	r3, [pc, #124]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 8009600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009602:	4a1e      	ldr	r2, [pc, #120]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 8009604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009608:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d106      	bne.n	800961e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009610:	4b1a      	ldr	r3, [pc, #104]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 8009612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009614:	4a19      	ldr	r2, [pc, #100]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 8009616:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800961a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800961c:	e00f      	b.n	800963e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	2b01      	cmp	r3, #1
 8009622:	d106      	bne.n	8009632 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009624:	4b15      	ldr	r3, [pc, #84]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 8009626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009628:	4a14      	ldr	r2, [pc, #80]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 800962a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800962e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009630:	e005      	b.n	800963e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009632:	4b12      	ldr	r3, [pc, #72]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 8009634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009636:	4a11      	ldr	r2, [pc, #68]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 8009638:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800963c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800963e:	4b0f      	ldr	r3, [pc, #60]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a0e      	ldr	r2, [pc, #56]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 8009644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009648:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800964a:	f7f8 f8ef 	bl	800182c <HAL_GetTick>
 800964e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009650:	e008      	b.n	8009664 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009652:	f7f8 f8eb 	bl	800182c <HAL_GetTick>
 8009656:	4602      	mov	r2, r0
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	1ad3      	subs	r3, r2, r3
 800965c:	2b02      	cmp	r3, #2
 800965e:	d901      	bls.n	8009664 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009660:	2303      	movs	r3, #3
 8009662:	e006      	b.n	8009672 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009664:	4b05      	ldr	r3, [pc, #20]	; (800967c <RCCEx_PLL3_Config+0x15c>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800966c:	2b00      	cmp	r3, #0
 800966e:	d0f0      	beq.n	8009652 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009670:	7bfb      	ldrb	r3, [r7, #15]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	58024400 	.word	0x58024400
 8009680:	ffff0007 	.word	0xffff0007

08009684 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d101      	bne.n	8009696 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e049      	b.n	800972a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d106      	bne.n	80096b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f7f7 fe32 	bl	8001314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2202      	movs	r2, #2
 80096b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	3304      	adds	r3, #4
 80096c0:	4619      	mov	r1, r3
 80096c2:	4610      	mov	r0, r2
 80096c4:	f000 fd48 	bl	800a158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
	...

08009734 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009742:	b2db      	uxtb	r3, r3
 8009744:	2b01      	cmp	r3, #1
 8009746:	d001      	beq.n	800974c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e04c      	b.n	80097e6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2202      	movs	r2, #2
 8009750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a26      	ldr	r2, [pc, #152]	; (80097f4 <HAL_TIM_Base_Start+0xc0>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d022      	beq.n	80097a4 <HAL_TIM_Base_Start+0x70>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009766:	d01d      	beq.n	80097a4 <HAL_TIM_Base_Start+0x70>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a22      	ldr	r2, [pc, #136]	; (80097f8 <HAL_TIM_Base_Start+0xc4>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d018      	beq.n	80097a4 <HAL_TIM_Base_Start+0x70>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a21      	ldr	r2, [pc, #132]	; (80097fc <HAL_TIM_Base_Start+0xc8>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d013      	beq.n	80097a4 <HAL_TIM_Base_Start+0x70>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a1f      	ldr	r2, [pc, #124]	; (8009800 <HAL_TIM_Base_Start+0xcc>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d00e      	beq.n	80097a4 <HAL_TIM_Base_Start+0x70>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a1e      	ldr	r2, [pc, #120]	; (8009804 <HAL_TIM_Base_Start+0xd0>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d009      	beq.n	80097a4 <HAL_TIM_Base_Start+0x70>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a1c      	ldr	r2, [pc, #112]	; (8009808 <HAL_TIM_Base_Start+0xd4>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d004      	beq.n	80097a4 <HAL_TIM_Base_Start+0x70>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a1b      	ldr	r2, [pc, #108]	; (800980c <HAL_TIM_Base_Start+0xd8>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d115      	bne.n	80097d0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	689a      	ldr	r2, [r3, #8]
 80097aa:	4b19      	ldr	r3, [pc, #100]	; (8009810 <HAL_TIM_Base_Start+0xdc>)
 80097ac:	4013      	ands	r3, r2
 80097ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2b06      	cmp	r3, #6
 80097b4:	d015      	beq.n	80097e2 <HAL_TIM_Base_Start+0xae>
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097bc:	d011      	beq.n	80097e2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f042 0201 	orr.w	r2, r2, #1
 80097cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097ce:	e008      	b.n	80097e2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f042 0201 	orr.w	r2, r2, #1
 80097de:	601a      	str	r2, [r3, #0]
 80097e0:	e000      	b.n	80097e4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	40010000 	.word	0x40010000
 80097f8:	40000400 	.word	0x40000400
 80097fc:	40000800 	.word	0x40000800
 8009800:	40000c00 	.word	0x40000c00
 8009804:	40010400 	.word	0x40010400
 8009808:	40001800 	.word	0x40001800
 800980c:	40014000 	.word	0x40014000
 8009810:	00010007 	.word	0x00010007

08009814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009822:	b2db      	uxtb	r3, r3
 8009824:	2b01      	cmp	r3, #1
 8009826:	d001      	beq.n	800982c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	e054      	b.n	80098d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2202      	movs	r2, #2
 8009830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68da      	ldr	r2, [r3, #12]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f042 0201 	orr.w	r2, r2, #1
 8009842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a26      	ldr	r2, [pc, #152]	; (80098e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d022      	beq.n	8009894 <HAL_TIM_Base_Start_IT+0x80>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009856:	d01d      	beq.n	8009894 <HAL_TIM_Base_Start_IT+0x80>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a22      	ldr	r2, [pc, #136]	; (80098e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d018      	beq.n	8009894 <HAL_TIM_Base_Start_IT+0x80>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a21      	ldr	r2, [pc, #132]	; (80098ec <HAL_TIM_Base_Start_IT+0xd8>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d013      	beq.n	8009894 <HAL_TIM_Base_Start_IT+0x80>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a1f      	ldr	r2, [pc, #124]	; (80098f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d00e      	beq.n	8009894 <HAL_TIM_Base_Start_IT+0x80>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a1e      	ldr	r2, [pc, #120]	; (80098f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d009      	beq.n	8009894 <HAL_TIM_Base_Start_IT+0x80>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a1c      	ldr	r2, [pc, #112]	; (80098f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d004      	beq.n	8009894 <HAL_TIM_Base_Start_IT+0x80>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a1b      	ldr	r2, [pc, #108]	; (80098fc <HAL_TIM_Base_Start_IT+0xe8>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d115      	bne.n	80098c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	689a      	ldr	r2, [r3, #8]
 800989a:	4b19      	ldr	r3, [pc, #100]	; (8009900 <HAL_TIM_Base_Start_IT+0xec>)
 800989c:	4013      	ands	r3, r2
 800989e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2b06      	cmp	r3, #6
 80098a4:	d015      	beq.n	80098d2 <HAL_TIM_Base_Start_IT+0xbe>
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098ac:	d011      	beq.n	80098d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f042 0201 	orr.w	r2, r2, #1
 80098bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098be:	e008      	b.n	80098d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f042 0201 	orr.w	r2, r2, #1
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	e000      	b.n	80098d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	40010000 	.word	0x40010000
 80098e8:	40000400 	.word	0x40000400
 80098ec:	40000800 	.word	0x40000800
 80098f0:	40000c00 	.word	0x40000c00
 80098f4:	40010400 	.word	0x40010400
 80098f8:	40001800 	.word	0x40001800
 80098fc:	40014000 	.word	0x40014000
 8009900:	00010007 	.word	0x00010007

08009904 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d101      	bne.n	8009916 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	e049      	b.n	80099aa <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b00      	cmp	r3, #0
 8009920:	d106      	bne.n	8009930 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f841 	bl	80099b2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2202      	movs	r2, #2
 8009934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	3304      	adds	r3, #4
 8009940:	4619      	mov	r1, r3
 8009942:	4610      	mov	r0, r2
 8009944:	f000 fc08 	bl	800a158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b083      	sub	sp, #12
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80099ba:	bf00      	nop
 80099bc:	370c      	adds	r7, #12
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr
	...

080099c8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d109      	bne.n	80099ec <HAL_TIM_OC_Start+0x24>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	bf14      	ite	ne
 80099e4:	2301      	movne	r3, #1
 80099e6:	2300      	moveq	r3, #0
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	e03c      	b.n	8009a66 <HAL_TIM_OC_Start+0x9e>
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	2b04      	cmp	r3, #4
 80099f0:	d109      	bne.n	8009a06 <HAL_TIM_OC_Start+0x3e>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	bf14      	ite	ne
 80099fe:	2301      	movne	r3, #1
 8009a00:	2300      	moveq	r3, #0
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	e02f      	b.n	8009a66 <HAL_TIM_OC_Start+0x9e>
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	2b08      	cmp	r3, #8
 8009a0a:	d109      	bne.n	8009a20 <HAL_TIM_OC_Start+0x58>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	bf14      	ite	ne
 8009a18:	2301      	movne	r3, #1
 8009a1a:	2300      	moveq	r3, #0
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	e022      	b.n	8009a66 <HAL_TIM_OC_Start+0x9e>
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	2b0c      	cmp	r3, #12
 8009a24:	d109      	bne.n	8009a3a <HAL_TIM_OC_Start+0x72>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	bf14      	ite	ne
 8009a32:	2301      	movne	r3, #1
 8009a34:	2300      	moveq	r3, #0
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	e015      	b.n	8009a66 <HAL_TIM_OC_Start+0x9e>
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	2b10      	cmp	r3, #16
 8009a3e:	d109      	bne.n	8009a54 <HAL_TIM_OC_Start+0x8c>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	bf14      	ite	ne
 8009a4c:	2301      	movne	r3, #1
 8009a4e:	2300      	moveq	r3, #0
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	e008      	b.n	8009a66 <HAL_TIM_OC_Start+0x9e>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	bf14      	ite	ne
 8009a60:	2301      	movne	r3, #1
 8009a62:	2300      	moveq	r3, #0
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d001      	beq.n	8009a6e <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e0a1      	b.n	8009bb2 <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d104      	bne.n	8009a7e <HAL_TIM_OC_Start+0xb6>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2202      	movs	r2, #2
 8009a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a7c:	e023      	b.n	8009ac6 <HAL_TIM_OC_Start+0xfe>
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	2b04      	cmp	r3, #4
 8009a82:	d104      	bne.n	8009a8e <HAL_TIM_OC_Start+0xc6>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2202      	movs	r2, #2
 8009a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a8c:	e01b      	b.n	8009ac6 <HAL_TIM_OC_Start+0xfe>
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	2b08      	cmp	r3, #8
 8009a92:	d104      	bne.n	8009a9e <HAL_TIM_OC_Start+0xd6>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2202      	movs	r2, #2
 8009a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a9c:	e013      	b.n	8009ac6 <HAL_TIM_OC_Start+0xfe>
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	2b0c      	cmp	r3, #12
 8009aa2:	d104      	bne.n	8009aae <HAL_TIM_OC_Start+0xe6>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2202      	movs	r2, #2
 8009aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009aac:	e00b      	b.n	8009ac6 <HAL_TIM_OC_Start+0xfe>
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	2b10      	cmp	r3, #16
 8009ab2:	d104      	bne.n	8009abe <HAL_TIM_OC_Start+0xf6>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009abc:	e003      	b.n	8009ac6 <HAL_TIM_OC_Start+0xfe>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2202      	movs	r2, #2
 8009ac2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2201      	movs	r2, #1
 8009acc:	6839      	ldr	r1, [r7, #0]
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f000 ff50 	bl	800a974 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a38      	ldr	r2, [pc, #224]	; (8009bbc <HAL_TIM_OC_Start+0x1f4>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d013      	beq.n	8009b06 <HAL_TIM_OC_Start+0x13e>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a37      	ldr	r2, [pc, #220]	; (8009bc0 <HAL_TIM_OC_Start+0x1f8>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d00e      	beq.n	8009b06 <HAL_TIM_OC_Start+0x13e>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a35      	ldr	r2, [pc, #212]	; (8009bc4 <HAL_TIM_OC_Start+0x1fc>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d009      	beq.n	8009b06 <HAL_TIM_OC_Start+0x13e>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a34      	ldr	r2, [pc, #208]	; (8009bc8 <HAL_TIM_OC_Start+0x200>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d004      	beq.n	8009b06 <HAL_TIM_OC_Start+0x13e>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a32      	ldr	r2, [pc, #200]	; (8009bcc <HAL_TIM_OC_Start+0x204>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d101      	bne.n	8009b0a <HAL_TIM_OC_Start+0x142>
 8009b06:	2301      	movs	r3, #1
 8009b08:	e000      	b.n	8009b0c <HAL_TIM_OC_Start+0x144>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d007      	beq.n	8009b20 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a25      	ldr	r2, [pc, #148]	; (8009bbc <HAL_TIM_OC_Start+0x1f4>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d022      	beq.n	8009b70 <HAL_TIM_OC_Start+0x1a8>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b32:	d01d      	beq.n	8009b70 <HAL_TIM_OC_Start+0x1a8>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a25      	ldr	r2, [pc, #148]	; (8009bd0 <HAL_TIM_OC_Start+0x208>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d018      	beq.n	8009b70 <HAL_TIM_OC_Start+0x1a8>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a24      	ldr	r2, [pc, #144]	; (8009bd4 <HAL_TIM_OC_Start+0x20c>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d013      	beq.n	8009b70 <HAL_TIM_OC_Start+0x1a8>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a22      	ldr	r2, [pc, #136]	; (8009bd8 <HAL_TIM_OC_Start+0x210>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d00e      	beq.n	8009b70 <HAL_TIM_OC_Start+0x1a8>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a1a      	ldr	r2, [pc, #104]	; (8009bc0 <HAL_TIM_OC_Start+0x1f8>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d009      	beq.n	8009b70 <HAL_TIM_OC_Start+0x1a8>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a1e      	ldr	r2, [pc, #120]	; (8009bdc <HAL_TIM_OC_Start+0x214>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d004      	beq.n	8009b70 <HAL_TIM_OC_Start+0x1a8>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a16      	ldr	r2, [pc, #88]	; (8009bc4 <HAL_TIM_OC_Start+0x1fc>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d115      	bne.n	8009b9c <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	689a      	ldr	r2, [r3, #8]
 8009b76:	4b1a      	ldr	r3, [pc, #104]	; (8009be0 <HAL_TIM_OC_Start+0x218>)
 8009b78:	4013      	ands	r3, r2
 8009b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2b06      	cmp	r3, #6
 8009b80:	d015      	beq.n	8009bae <HAL_TIM_OC_Start+0x1e6>
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b88:	d011      	beq.n	8009bae <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f042 0201 	orr.w	r2, r2, #1
 8009b98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b9a:	e008      	b.n	8009bae <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f042 0201 	orr.w	r2, r2, #1
 8009baa:	601a      	str	r2, [r3, #0]
 8009bac:	e000      	b.n	8009bb0 <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	40010000 	.word	0x40010000
 8009bc0:	40010400 	.word	0x40010400
 8009bc4:	40014000 	.word	0x40014000
 8009bc8:	40014400 	.word	0x40014400
 8009bcc:	40014800 	.word	0x40014800
 8009bd0:	40000400 	.word	0x40000400
 8009bd4:	40000800 	.word	0x40000800
 8009bd8:	40000c00 	.word	0x40000c00
 8009bdc:	40001800 	.word	0x40001800
 8009be0:	00010007 	.word	0x00010007

08009be4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	f003 0302 	and.w	r3, r3, #2
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d122      	bne.n	8009c40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	f003 0302 	and.w	r3, r3, #2
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d11b      	bne.n	8009c40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f06f 0202 	mvn.w	r2, #2
 8009c10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2201      	movs	r2, #1
 8009c16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	f003 0303 	and.w	r3, r3, #3
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d003      	beq.n	8009c2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fa78 	bl	800a11c <HAL_TIM_IC_CaptureCallback>
 8009c2c:	e005      	b.n	8009c3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fa6a 	bl	800a108 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 fa7b 	bl	800a130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	691b      	ldr	r3, [r3, #16]
 8009c46:	f003 0304 	and.w	r3, r3, #4
 8009c4a:	2b04      	cmp	r3, #4
 8009c4c:	d122      	bne.n	8009c94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	f003 0304 	and.w	r3, r3, #4
 8009c58:	2b04      	cmp	r3, #4
 8009c5a:	d11b      	bne.n	8009c94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f06f 0204 	mvn.w	r2, #4
 8009c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2202      	movs	r2, #2
 8009c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	699b      	ldr	r3, [r3, #24]
 8009c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d003      	beq.n	8009c82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fa4e 	bl	800a11c <HAL_TIM_IC_CaptureCallback>
 8009c80:	e005      	b.n	8009c8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 fa40 	bl	800a108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fa51 	bl	800a130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	f003 0308 	and.w	r3, r3, #8
 8009c9e:	2b08      	cmp	r3, #8
 8009ca0:	d122      	bne.n	8009ce8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	f003 0308 	and.w	r3, r3, #8
 8009cac:	2b08      	cmp	r3, #8
 8009cae:	d11b      	bne.n	8009ce8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f06f 0208 	mvn.w	r2, #8
 8009cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2204      	movs	r2, #4
 8009cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	69db      	ldr	r3, [r3, #28]
 8009cc6:	f003 0303 	and.w	r3, r3, #3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d003      	beq.n	8009cd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fa24 	bl	800a11c <HAL_TIM_IC_CaptureCallback>
 8009cd4:	e005      	b.n	8009ce2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 fa16 	bl	800a108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fa27 	bl	800a130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	f003 0310 	and.w	r3, r3, #16
 8009cf2:	2b10      	cmp	r3, #16
 8009cf4:	d122      	bne.n	8009d3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	f003 0310 	and.w	r3, r3, #16
 8009d00:	2b10      	cmp	r3, #16
 8009d02:	d11b      	bne.n	8009d3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f06f 0210 	mvn.w	r2, #16
 8009d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2208      	movs	r2, #8
 8009d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	69db      	ldr	r3, [r3, #28]
 8009d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d003      	beq.n	8009d2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f9fa 	bl	800a11c <HAL_TIM_IC_CaptureCallback>
 8009d28:	e005      	b.n	8009d36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 f9ec 	bl	800a108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 f9fd 	bl	800a130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	f003 0301 	and.w	r3, r3, #1
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d10e      	bne.n	8009d68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	f003 0301 	and.w	r3, r3, #1
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d107      	bne.n	8009d68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f06f 0201 	mvn.w	r2, #1
 8009d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f7f7 f9fe 	bl	8001164 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d72:	2b80      	cmp	r3, #128	; 0x80
 8009d74:	d10e      	bne.n	8009d94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d80:	2b80      	cmp	r3, #128	; 0x80
 8009d82:	d107      	bne.n	8009d94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 ff4e 	bl	800ac30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009da2:	d10e      	bne.n	8009dc2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dae:	2b80      	cmp	r3, #128	; 0x80
 8009db0:	d107      	bne.n	8009dc2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 ff41 	bl	800ac44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dcc:	2b40      	cmp	r3, #64	; 0x40
 8009dce:	d10e      	bne.n	8009dee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dda:	2b40      	cmp	r3, #64	; 0x40
 8009ddc:	d107      	bne.n	8009dee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 f9ab 	bl	800a144 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	f003 0320 	and.w	r3, r3, #32
 8009df8:	2b20      	cmp	r3, #32
 8009dfa:	d10e      	bne.n	8009e1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	f003 0320 	and.w	r3, r3, #32
 8009e06:	2b20      	cmp	r3, #32
 8009e08:	d107      	bne.n	8009e1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f06f 0220 	mvn.w	r2, #32
 8009e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 ff01 	bl	800ac1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e1a:	bf00      	nop
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
	...

08009e24 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b086      	sub	sp, #24
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d101      	bne.n	8009e42 <HAL_TIM_OC_ConfigChannel+0x1e>
 8009e3e:	2302      	movs	r3, #2
 8009e40:	e066      	b.n	8009f10 <HAL_TIM_OC_ConfigChannel+0xec>
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2b14      	cmp	r3, #20
 8009e4e:	d857      	bhi.n	8009f00 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009e50:	a201      	add	r2, pc, #4	; (adr r2, 8009e58 <HAL_TIM_OC_ConfigChannel+0x34>)
 8009e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e56:	bf00      	nop
 8009e58:	08009ead 	.word	0x08009ead
 8009e5c:	08009f01 	.word	0x08009f01
 8009e60:	08009f01 	.word	0x08009f01
 8009e64:	08009f01 	.word	0x08009f01
 8009e68:	08009ebb 	.word	0x08009ebb
 8009e6c:	08009f01 	.word	0x08009f01
 8009e70:	08009f01 	.word	0x08009f01
 8009e74:	08009f01 	.word	0x08009f01
 8009e78:	08009ec9 	.word	0x08009ec9
 8009e7c:	08009f01 	.word	0x08009f01
 8009e80:	08009f01 	.word	0x08009f01
 8009e84:	08009f01 	.word	0x08009f01
 8009e88:	08009ed7 	.word	0x08009ed7
 8009e8c:	08009f01 	.word	0x08009f01
 8009e90:	08009f01 	.word	0x08009f01
 8009e94:	08009f01 	.word	0x08009f01
 8009e98:	08009ee5 	.word	0x08009ee5
 8009e9c:	08009f01 	.word	0x08009f01
 8009ea0:	08009f01 	.word	0x08009f01
 8009ea4:	08009f01 	.word	0x08009f01
 8009ea8:	08009ef3 	.word	0x08009ef3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68b9      	ldr	r1, [r7, #8]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f000 f9ea 	bl	800a28c <TIM_OC1_SetConfig>
      break;
 8009eb8:	e025      	b.n	8009f06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68b9      	ldr	r1, [r7, #8]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 fa73 	bl	800a3ac <TIM_OC2_SetConfig>
      break;
 8009ec6:	e01e      	b.n	8009f06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68b9      	ldr	r1, [r7, #8]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f000 faf6 	bl	800a4c0 <TIM_OC3_SetConfig>
      break;
 8009ed4:	e017      	b.n	8009f06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68b9      	ldr	r1, [r7, #8]
 8009edc:	4618      	mov	r0, r3
 8009ede:	f000 fb77 	bl	800a5d0 <TIM_OC4_SetConfig>
      break;
 8009ee2:	e010      	b.n	8009f06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68b9      	ldr	r1, [r7, #8]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 fbda 	bl	800a6a4 <TIM_OC5_SetConfig>
      break;
 8009ef0:	e009      	b.n	8009f06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68b9      	ldr	r1, [r7, #8]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 fc37 	bl	800a76c <TIM_OC6_SetConfig>
      break;
 8009efe:	e002      	b.n	8009f06 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	75fb      	strb	r3, [r7, #23]
      break;
 8009f04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3718      	adds	r7, #24
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f22:	2300      	movs	r3, #0
 8009f24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d101      	bne.n	8009f34 <HAL_TIM_ConfigClockSource+0x1c>
 8009f30:	2302      	movs	r3, #2
 8009f32:	e0dc      	b.n	800a0ee <HAL_TIM_ConfigClockSource+0x1d6>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2202      	movs	r2, #2
 8009f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f4c:	68ba      	ldr	r2, [r7, #8]
 8009f4e:	4b6a      	ldr	r3, [pc, #424]	; (800a0f8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009f50:	4013      	ands	r3, r2
 8009f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a64      	ldr	r2, [pc, #400]	; (800a0fc <HAL_TIM_ConfigClockSource+0x1e4>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	f000 80a9 	beq.w	800a0c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009f70:	4a62      	ldr	r2, [pc, #392]	; (800a0fc <HAL_TIM_ConfigClockSource+0x1e4>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	f200 80ae 	bhi.w	800a0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009f78:	4a61      	ldr	r2, [pc, #388]	; (800a100 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	f000 80a1 	beq.w	800a0c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009f80:	4a5f      	ldr	r2, [pc, #380]	; (800a100 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	f200 80a6 	bhi.w	800a0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009f88:	4a5e      	ldr	r2, [pc, #376]	; (800a104 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	f000 8099 	beq.w	800a0c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009f90:	4a5c      	ldr	r2, [pc, #368]	; (800a104 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	f200 809e 	bhi.w	800a0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009f98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009f9c:	f000 8091 	beq.w	800a0c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009fa0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009fa4:	f200 8096 	bhi.w	800a0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fac:	f000 8089 	beq.w	800a0c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009fb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fb4:	f200 808e 	bhi.w	800a0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fbc:	d03e      	beq.n	800a03c <HAL_TIM_ConfigClockSource+0x124>
 8009fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fc2:	f200 8087 	bhi.w	800a0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fca:	f000 8086 	beq.w	800a0da <HAL_TIM_ConfigClockSource+0x1c2>
 8009fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fd2:	d87f      	bhi.n	800a0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fd4:	2b70      	cmp	r3, #112	; 0x70
 8009fd6:	d01a      	beq.n	800a00e <HAL_TIM_ConfigClockSource+0xf6>
 8009fd8:	2b70      	cmp	r3, #112	; 0x70
 8009fda:	d87b      	bhi.n	800a0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fdc:	2b60      	cmp	r3, #96	; 0x60
 8009fde:	d050      	beq.n	800a082 <HAL_TIM_ConfigClockSource+0x16a>
 8009fe0:	2b60      	cmp	r3, #96	; 0x60
 8009fe2:	d877      	bhi.n	800a0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fe4:	2b50      	cmp	r3, #80	; 0x50
 8009fe6:	d03c      	beq.n	800a062 <HAL_TIM_ConfigClockSource+0x14a>
 8009fe8:	2b50      	cmp	r3, #80	; 0x50
 8009fea:	d873      	bhi.n	800a0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fec:	2b40      	cmp	r3, #64	; 0x40
 8009fee:	d058      	beq.n	800a0a2 <HAL_TIM_ConfigClockSource+0x18a>
 8009ff0:	2b40      	cmp	r3, #64	; 0x40
 8009ff2:	d86f      	bhi.n	800a0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ff4:	2b30      	cmp	r3, #48	; 0x30
 8009ff6:	d064      	beq.n	800a0c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009ff8:	2b30      	cmp	r3, #48	; 0x30
 8009ffa:	d86b      	bhi.n	800a0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ffc:	2b20      	cmp	r3, #32
 8009ffe:	d060      	beq.n	800a0c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a000:	2b20      	cmp	r3, #32
 800a002:	d867      	bhi.n	800a0d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a004:	2b00      	cmp	r3, #0
 800a006:	d05c      	beq.n	800a0c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a008:	2b10      	cmp	r3, #16
 800a00a:	d05a      	beq.n	800a0c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a00c:	e062      	b.n	800a0d4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6818      	ldr	r0, [r3, #0]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	6899      	ldr	r1, [r3, #8]
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	685a      	ldr	r2, [r3, #4]
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	f000 fc89 	bl	800a934 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a030:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	68ba      	ldr	r2, [r7, #8]
 800a038:	609a      	str	r2, [r3, #8]
      break;
 800a03a:	e04f      	b.n	800a0dc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6818      	ldr	r0, [r3, #0]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	6899      	ldr	r1, [r3, #8]
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	685a      	ldr	r2, [r3, #4]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	f000 fc72 	bl	800a934 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	689a      	ldr	r2, [r3, #8]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a05e:	609a      	str	r2, [r3, #8]
      break;
 800a060:	e03c      	b.n	800a0dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6818      	ldr	r0, [r3, #0]
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	6859      	ldr	r1, [r3, #4]
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	461a      	mov	r2, r3
 800a070:	f000 fbe2 	bl	800a838 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2150      	movs	r1, #80	; 0x50
 800a07a:	4618      	mov	r0, r3
 800a07c:	f000 fc3c 	bl	800a8f8 <TIM_ITRx_SetConfig>
      break;
 800a080:	e02c      	b.n	800a0dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6818      	ldr	r0, [r3, #0]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	6859      	ldr	r1, [r3, #4]
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	461a      	mov	r2, r3
 800a090:	f000 fc01 	bl	800a896 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2160      	movs	r1, #96	; 0x60
 800a09a:	4618      	mov	r0, r3
 800a09c:	f000 fc2c 	bl	800a8f8 <TIM_ITRx_SetConfig>
      break;
 800a0a0:	e01c      	b.n	800a0dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6818      	ldr	r0, [r3, #0]
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	6859      	ldr	r1, [r3, #4]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	f000 fbc2 	bl	800a838 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2140      	movs	r1, #64	; 0x40
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 fc1c 	bl	800a8f8 <TIM_ITRx_SetConfig>
      break;
 800a0c0:	e00c      	b.n	800a0dc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	4610      	mov	r0, r2
 800a0ce:	f000 fc13 	bl	800a8f8 <TIM_ITRx_SetConfig>
      break;
 800a0d2:	e003      	b.n	800a0dc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a0d8:	e000      	b.n	800a0dc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a0da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a0ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	ffceff88 	.word	0xffceff88
 800a0fc:	00100040 	.word	0x00100040
 800a100:	00100030 	.word	0x00100030
 800a104:	00100020 	.word	0x00100020

0800a108 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a124:	bf00      	nop
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a14c:	bf00      	nop
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a40      	ldr	r2, [pc, #256]	; (800a26c <TIM_Base_SetConfig+0x114>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d013      	beq.n	800a198 <TIM_Base_SetConfig+0x40>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a176:	d00f      	beq.n	800a198 <TIM_Base_SetConfig+0x40>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a3d      	ldr	r2, [pc, #244]	; (800a270 <TIM_Base_SetConfig+0x118>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d00b      	beq.n	800a198 <TIM_Base_SetConfig+0x40>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a3c      	ldr	r2, [pc, #240]	; (800a274 <TIM_Base_SetConfig+0x11c>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d007      	beq.n	800a198 <TIM_Base_SetConfig+0x40>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a3b      	ldr	r2, [pc, #236]	; (800a278 <TIM_Base_SetConfig+0x120>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d003      	beq.n	800a198 <TIM_Base_SetConfig+0x40>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a3a      	ldr	r2, [pc, #232]	; (800a27c <TIM_Base_SetConfig+0x124>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d108      	bne.n	800a1aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a19e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a2f      	ldr	r2, [pc, #188]	; (800a26c <TIM_Base_SetConfig+0x114>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d01f      	beq.n	800a1f2 <TIM_Base_SetConfig+0x9a>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1b8:	d01b      	beq.n	800a1f2 <TIM_Base_SetConfig+0x9a>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a2c      	ldr	r2, [pc, #176]	; (800a270 <TIM_Base_SetConfig+0x118>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d017      	beq.n	800a1f2 <TIM_Base_SetConfig+0x9a>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a2b      	ldr	r2, [pc, #172]	; (800a274 <TIM_Base_SetConfig+0x11c>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d013      	beq.n	800a1f2 <TIM_Base_SetConfig+0x9a>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a2a      	ldr	r2, [pc, #168]	; (800a278 <TIM_Base_SetConfig+0x120>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d00f      	beq.n	800a1f2 <TIM_Base_SetConfig+0x9a>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a29      	ldr	r2, [pc, #164]	; (800a27c <TIM_Base_SetConfig+0x124>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d00b      	beq.n	800a1f2 <TIM_Base_SetConfig+0x9a>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a28      	ldr	r2, [pc, #160]	; (800a280 <TIM_Base_SetConfig+0x128>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d007      	beq.n	800a1f2 <TIM_Base_SetConfig+0x9a>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a27      	ldr	r2, [pc, #156]	; (800a284 <TIM_Base_SetConfig+0x12c>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d003      	beq.n	800a1f2 <TIM_Base_SetConfig+0x9a>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4a26      	ldr	r2, [pc, #152]	; (800a288 <TIM_Base_SetConfig+0x130>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d108      	bne.n	800a204 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	4313      	orrs	r3, r2
 800a202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	695b      	ldr	r3, [r3, #20]
 800a20e:	4313      	orrs	r3, r2
 800a210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	689a      	ldr	r2, [r3, #8]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a10      	ldr	r2, [pc, #64]	; (800a26c <TIM_Base_SetConfig+0x114>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d00f      	beq.n	800a250 <TIM_Base_SetConfig+0xf8>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4a12      	ldr	r2, [pc, #72]	; (800a27c <TIM_Base_SetConfig+0x124>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d00b      	beq.n	800a250 <TIM_Base_SetConfig+0xf8>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	4a11      	ldr	r2, [pc, #68]	; (800a280 <TIM_Base_SetConfig+0x128>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d007      	beq.n	800a250 <TIM_Base_SetConfig+0xf8>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	4a10      	ldr	r2, [pc, #64]	; (800a284 <TIM_Base_SetConfig+0x12c>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d003      	beq.n	800a250 <TIM_Base_SetConfig+0xf8>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	4a0f      	ldr	r2, [pc, #60]	; (800a288 <TIM_Base_SetConfig+0x130>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d103      	bne.n	800a258 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	691a      	ldr	r2, [r3, #16]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2201      	movs	r2, #1
 800a25c:	615a      	str	r2, [r3, #20]
}
 800a25e:	bf00      	nop
 800a260:	3714      	adds	r7, #20
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	40010000 	.word	0x40010000
 800a270:	40000400 	.word	0x40000400
 800a274:	40000800 	.word	0x40000800
 800a278:	40000c00 	.word	0x40000c00
 800a27c:	40010400 	.word	0x40010400
 800a280:	40014000 	.word	0x40014000
 800a284:	40014400 	.word	0x40014400
 800a288:	40014800 	.word	0x40014800

0800a28c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b087      	sub	sp, #28
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6a1b      	ldr	r3, [r3, #32]
 800a29a:	f023 0201 	bic.w	r2, r3, #1
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6a1b      	ldr	r3, [r3, #32]
 800a2a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	699b      	ldr	r3, [r3, #24]
 800a2b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	4b37      	ldr	r3, [pc, #220]	; (800a394 <TIM_OC1_SetConfig+0x108>)
 800a2b8:	4013      	ands	r3, r2
 800a2ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f023 0303 	bic.w	r3, r3, #3
 800a2c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	f023 0302 	bic.w	r3, r3, #2
 800a2d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4a2d      	ldr	r2, [pc, #180]	; (800a398 <TIM_OC1_SetConfig+0x10c>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d00f      	beq.n	800a308 <TIM_OC1_SetConfig+0x7c>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4a2c      	ldr	r2, [pc, #176]	; (800a39c <TIM_OC1_SetConfig+0x110>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d00b      	beq.n	800a308 <TIM_OC1_SetConfig+0x7c>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	4a2b      	ldr	r2, [pc, #172]	; (800a3a0 <TIM_OC1_SetConfig+0x114>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d007      	beq.n	800a308 <TIM_OC1_SetConfig+0x7c>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a2a      	ldr	r2, [pc, #168]	; (800a3a4 <TIM_OC1_SetConfig+0x118>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d003      	beq.n	800a308 <TIM_OC1_SetConfig+0x7c>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4a29      	ldr	r2, [pc, #164]	; (800a3a8 <TIM_OC1_SetConfig+0x11c>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d10c      	bne.n	800a322 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	f023 0308 	bic.w	r3, r3, #8
 800a30e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	697a      	ldr	r2, [r7, #20]
 800a316:	4313      	orrs	r3, r2
 800a318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	f023 0304 	bic.w	r3, r3, #4
 800a320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	4a1c      	ldr	r2, [pc, #112]	; (800a398 <TIM_OC1_SetConfig+0x10c>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d00f      	beq.n	800a34a <TIM_OC1_SetConfig+0xbe>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4a1b      	ldr	r2, [pc, #108]	; (800a39c <TIM_OC1_SetConfig+0x110>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d00b      	beq.n	800a34a <TIM_OC1_SetConfig+0xbe>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4a1a      	ldr	r2, [pc, #104]	; (800a3a0 <TIM_OC1_SetConfig+0x114>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d007      	beq.n	800a34a <TIM_OC1_SetConfig+0xbe>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4a19      	ldr	r2, [pc, #100]	; (800a3a4 <TIM_OC1_SetConfig+0x118>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d003      	beq.n	800a34a <TIM_OC1_SetConfig+0xbe>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a18      	ldr	r2, [pc, #96]	; (800a3a8 <TIM_OC1_SetConfig+0x11c>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d111      	bne.n	800a36e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	695b      	ldr	r3, [r3, #20]
 800a35e:	693a      	ldr	r2, [r7, #16]
 800a360:	4313      	orrs	r3, r2
 800a362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	699b      	ldr	r3, [r3, #24]
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	693a      	ldr	r2, [r7, #16]
 800a372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	685a      	ldr	r2, [r3, #4]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	697a      	ldr	r2, [r7, #20]
 800a386:	621a      	str	r2, [r3, #32]
}
 800a388:	bf00      	nop
 800a38a:	371c      	adds	r7, #28
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	fffeff8f 	.word	0xfffeff8f
 800a398:	40010000 	.word	0x40010000
 800a39c:	40010400 	.word	0x40010400
 800a3a0:	40014000 	.word	0x40014000
 800a3a4:	40014400 	.word	0x40014400
 800a3a8:	40014800 	.word	0x40014800

0800a3ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b087      	sub	sp, #28
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a1b      	ldr	r3, [r3, #32]
 800a3ba:	f023 0210 	bic.w	r2, r3, #16
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a1b      	ldr	r3, [r3, #32]
 800a3c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	699b      	ldr	r3, [r3, #24]
 800a3d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	4b34      	ldr	r3, [pc, #208]	; (800a4a8 <TIM_OC2_SetConfig+0xfc>)
 800a3d8:	4013      	ands	r3, r2
 800a3da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	021b      	lsls	r3, r3, #8
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	f023 0320 	bic.w	r3, r3, #32
 800a3f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	011b      	lsls	r3, r3, #4
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	4313      	orrs	r3, r2
 800a402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a29      	ldr	r2, [pc, #164]	; (800a4ac <TIM_OC2_SetConfig+0x100>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d003      	beq.n	800a414 <TIM_OC2_SetConfig+0x68>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4a28      	ldr	r2, [pc, #160]	; (800a4b0 <TIM_OC2_SetConfig+0x104>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d10d      	bne.n	800a430 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a41a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	011b      	lsls	r3, r3, #4
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	4313      	orrs	r3, r2
 800a426:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a42e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	4a1e      	ldr	r2, [pc, #120]	; (800a4ac <TIM_OC2_SetConfig+0x100>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d00f      	beq.n	800a458 <TIM_OC2_SetConfig+0xac>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	4a1d      	ldr	r2, [pc, #116]	; (800a4b0 <TIM_OC2_SetConfig+0x104>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d00b      	beq.n	800a458 <TIM_OC2_SetConfig+0xac>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	4a1c      	ldr	r2, [pc, #112]	; (800a4b4 <TIM_OC2_SetConfig+0x108>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d007      	beq.n	800a458 <TIM_OC2_SetConfig+0xac>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	4a1b      	ldr	r2, [pc, #108]	; (800a4b8 <TIM_OC2_SetConfig+0x10c>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d003      	beq.n	800a458 <TIM_OC2_SetConfig+0xac>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4a1a      	ldr	r2, [pc, #104]	; (800a4bc <TIM_OC2_SetConfig+0x110>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d113      	bne.n	800a480 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a45e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a466:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	695b      	ldr	r3, [r3, #20]
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	693a      	ldr	r2, [r7, #16]
 800a470:	4313      	orrs	r3, r2
 800a472:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	699b      	ldr	r3, [r3, #24]
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	693a      	ldr	r2, [r7, #16]
 800a47c:	4313      	orrs	r3, r2
 800a47e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	693a      	ldr	r2, [r7, #16]
 800a484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	685a      	ldr	r2, [r3, #4]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	697a      	ldr	r2, [r7, #20]
 800a498:	621a      	str	r2, [r3, #32]
}
 800a49a:	bf00      	nop
 800a49c:	371c      	adds	r7, #28
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	feff8fff 	.word	0xfeff8fff
 800a4ac:	40010000 	.word	0x40010000
 800a4b0:	40010400 	.word	0x40010400
 800a4b4:	40014000 	.word	0x40014000
 800a4b8:	40014400 	.word	0x40014400
 800a4bc:	40014800 	.word	0x40014800

0800a4c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b087      	sub	sp, #28
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a1b      	ldr	r3, [r3, #32]
 800a4ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a1b      	ldr	r3, [r3, #32]
 800a4da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	69db      	ldr	r3, [r3, #28]
 800a4e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	4b33      	ldr	r3, [pc, #204]	; (800a5b8 <TIM_OC3_SetConfig+0xf8>)
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f023 0303 	bic.w	r3, r3, #3
 800a4f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	021b      	lsls	r3, r3, #8
 800a510:	697a      	ldr	r2, [r7, #20]
 800a512:	4313      	orrs	r3, r2
 800a514:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4a28      	ldr	r2, [pc, #160]	; (800a5bc <TIM_OC3_SetConfig+0xfc>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d003      	beq.n	800a526 <TIM_OC3_SetConfig+0x66>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4a27      	ldr	r2, [pc, #156]	; (800a5c0 <TIM_OC3_SetConfig+0x100>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d10d      	bne.n	800a542 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a52c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	021b      	lsls	r3, r3, #8
 800a534:	697a      	ldr	r2, [r7, #20]
 800a536:	4313      	orrs	r3, r2
 800a538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4a1d      	ldr	r2, [pc, #116]	; (800a5bc <TIM_OC3_SetConfig+0xfc>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d00f      	beq.n	800a56a <TIM_OC3_SetConfig+0xaa>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4a1c      	ldr	r2, [pc, #112]	; (800a5c0 <TIM_OC3_SetConfig+0x100>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d00b      	beq.n	800a56a <TIM_OC3_SetConfig+0xaa>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	4a1b      	ldr	r2, [pc, #108]	; (800a5c4 <TIM_OC3_SetConfig+0x104>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d007      	beq.n	800a56a <TIM_OC3_SetConfig+0xaa>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4a1a      	ldr	r2, [pc, #104]	; (800a5c8 <TIM_OC3_SetConfig+0x108>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d003      	beq.n	800a56a <TIM_OC3_SetConfig+0xaa>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	4a19      	ldr	r2, [pc, #100]	; (800a5cc <TIM_OC3_SetConfig+0x10c>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d113      	bne.n	800a592 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	011b      	lsls	r3, r3, #4
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	4313      	orrs	r3, r2
 800a584:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	699b      	ldr	r3, [r3, #24]
 800a58a:	011b      	lsls	r3, r3, #4
 800a58c:	693a      	ldr	r2, [r7, #16]
 800a58e:	4313      	orrs	r3, r2
 800a590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	693a      	ldr	r2, [r7, #16]
 800a596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	685a      	ldr	r2, [r3, #4]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	697a      	ldr	r2, [r7, #20]
 800a5aa:	621a      	str	r2, [r3, #32]
}
 800a5ac:	bf00      	nop
 800a5ae:	371c      	adds	r7, #28
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr
 800a5b8:	fffeff8f 	.word	0xfffeff8f
 800a5bc:	40010000 	.word	0x40010000
 800a5c0:	40010400 	.word	0x40010400
 800a5c4:	40014000 	.word	0x40014000
 800a5c8:	40014400 	.word	0x40014400
 800a5cc:	40014800 	.word	0x40014800

0800a5d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b087      	sub	sp, #28
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a1b      	ldr	r3, [r3, #32]
 800a5de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a1b      	ldr	r3, [r3, #32]
 800a5ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	69db      	ldr	r3, [r3, #28]
 800a5f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	4b24      	ldr	r3, [pc, #144]	; (800a68c <TIM_OC4_SetConfig+0xbc>)
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	021b      	lsls	r3, r3, #8
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	4313      	orrs	r3, r2
 800a612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a61a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	031b      	lsls	r3, r3, #12
 800a622:	693a      	ldr	r2, [r7, #16]
 800a624:	4313      	orrs	r3, r2
 800a626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a19      	ldr	r2, [pc, #100]	; (800a690 <TIM_OC4_SetConfig+0xc0>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d00f      	beq.n	800a650 <TIM_OC4_SetConfig+0x80>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a18      	ldr	r2, [pc, #96]	; (800a694 <TIM_OC4_SetConfig+0xc4>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d00b      	beq.n	800a650 <TIM_OC4_SetConfig+0x80>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4a17      	ldr	r2, [pc, #92]	; (800a698 <TIM_OC4_SetConfig+0xc8>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d007      	beq.n	800a650 <TIM_OC4_SetConfig+0x80>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4a16      	ldr	r2, [pc, #88]	; (800a69c <TIM_OC4_SetConfig+0xcc>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d003      	beq.n	800a650 <TIM_OC4_SetConfig+0x80>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	4a15      	ldr	r2, [pc, #84]	; (800a6a0 <TIM_OC4_SetConfig+0xd0>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d109      	bne.n	800a664 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a656:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	695b      	ldr	r3, [r3, #20]
 800a65c:	019b      	lsls	r3, r3, #6
 800a65e:	697a      	ldr	r2, [r7, #20]
 800a660:	4313      	orrs	r3, r2
 800a662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	697a      	ldr	r2, [r7, #20]
 800a668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	685a      	ldr	r2, [r3, #4]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	693a      	ldr	r2, [r7, #16]
 800a67c:	621a      	str	r2, [r3, #32]
}
 800a67e:	bf00      	nop
 800a680:	371c      	adds	r7, #28
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	feff8fff 	.word	0xfeff8fff
 800a690:	40010000 	.word	0x40010000
 800a694:	40010400 	.word	0x40010400
 800a698:	40014000 	.word	0x40014000
 800a69c:	40014400 	.word	0x40014400
 800a6a0:	40014800 	.word	0x40014800

0800a6a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b087      	sub	sp, #28
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a1b      	ldr	r3, [r3, #32]
 800a6b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a1b      	ldr	r3, [r3, #32]
 800a6be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	4b21      	ldr	r3, [pc, #132]	; (800a754 <TIM_OC5_SetConfig+0xb0>)
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a6e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	041b      	lsls	r3, r3, #16
 800a6ec:	693a      	ldr	r2, [r7, #16]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4a18      	ldr	r2, [pc, #96]	; (800a758 <TIM_OC5_SetConfig+0xb4>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d00f      	beq.n	800a71a <TIM_OC5_SetConfig+0x76>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4a17      	ldr	r2, [pc, #92]	; (800a75c <TIM_OC5_SetConfig+0xb8>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d00b      	beq.n	800a71a <TIM_OC5_SetConfig+0x76>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	4a16      	ldr	r2, [pc, #88]	; (800a760 <TIM_OC5_SetConfig+0xbc>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d007      	beq.n	800a71a <TIM_OC5_SetConfig+0x76>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4a15      	ldr	r2, [pc, #84]	; (800a764 <TIM_OC5_SetConfig+0xc0>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d003      	beq.n	800a71a <TIM_OC5_SetConfig+0x76>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4a14      	ldr	r2, [pc, #80]	; (800a768 <TIM_OC5_SetConfig+0xc4>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d109      	bne.n	800a72e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a720:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	695b      	ldr	r3, [r3, #20]
 800a726:	021b      	lsls	r3, r3, #8
 800a728:	697a      	ldr	r2, [r7, #20]
 800a72a:	4313      	orrs	r3, r2
 800a72c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	697a      	ldr	r2, [r7, #20]
 800a732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	68fa      	ldr	r2, [r7, #12]
 800a738:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	685a      	ldr	r2, [r3, #4]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	621a      	str	r2, [r3, #32]
}
 800a748:	bf00      	nop
 800a74a:	371c      	adds	r7, #28
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr
 800a754:	fffeff8f 	.word	0xfffeff8f
 800a758:	40010000 	.word	0x40010000
 800a75c:	40010400 	.word	0x40010400
 800a760:	40014000 	.word	0x40014000
 800a764:	40014400 	.word	0x40014400
 800a768:	40014800 	.word	0x40014800

0800a76c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b087      	sub	sp, #28
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a1b      	ldr	r3, [r3, #32]
 800a77a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a1b      	ldr	r3, [r3, #32]
 800a786:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	4b22      	ldr	r3, [pc, #136]	; (800a820 <TIM_OC6_SetConfig+0xb4>)
 800a798:	4013      	ands	r3, r2
 800a79a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	021b      	lsls	r3, r3, #8
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a7ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	051b      	lsls	r3, r3, #20
 800a7b6:	693a      	ldr	r2, [r7, #16]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	4a19      	ldr	r2, [pc, #100]	; (800a824 <TIM_OC6_SetConfig+0xb8>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d00f      	beq.n	800a7e4 <TIM_OC6_SetConfig+0x78>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a18      	ldr	r2, [pc, #96]	; (800a828 <TIM_OC6_SetConfig+0xbc>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d00b      	beq.n	800a7e4 <TIM_OC6_SetConfig+0x78>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4a17      	ldr	r2, [pc, #92]	; (800a82c <TIM_OC6_SetConfig+0xc0>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d007      	beq.n	800a7e4 <TIM_OC6_SetConfig+0x78>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	4a16      	ldr	r2, [pc, #88]	; (800a830 <TIM_OC6_SetConfig+0xc4>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d003      	beq.n	800a7e4 <TIM_OC6_SetConfig+0x78>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	4a15      	ldr	r2, [pc, #84]	; (800a834 <TIM_OC6_SetConfig+0xc8>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d109      	bne.n	800a7f8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	695b      	ldr	r3, [r3, #20]
 800a7f0:	029b      	lsls	r3, r3, #10
 800a7f2:	697a      	ldr	r2, [r7, #20]
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	697a      	ldr	r2, [r7, #20]
 800a7fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	685a      	ldr	r2, [r3, #4]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	693a      	ldr	r2, [r7, #16]
 800a810:	621a      	str	r2, [r3, #32]
}
 800a812:	bf00      	nop
 800a814:	371c      	adds	r7, #28
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	feff8fff 	.word	0xfeff8fff
 800a824:	40010000 	.word	0x40010000
 800a828:	40010400 	.word	0x40010400
 800a82c:	40014000 	.word	0x40014000
 800a830:	40014400 	.word	0x40014400
 800a834:	40014800 	.word	0x40014800

0800a838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a838:	b480      	push	{r7}
 800a83a:	b087      	sub	sp, #28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6a1b      	ldr	r3, [r3, #32]
 800a848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	6a1b      	ldr	r3, [r3, #32]
 800a84e:	f023 0201 	bic.w	r2, r3, #1
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	011b      	lsls	r3, r3, #4
 800a868:	693a      	ldr	r2, [r7, #16]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	f023 030a 	bic.w	r3, r3, #10
 800a874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a876:	697a      	ldr	r2, [r7, #20]
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	4313      	orrs	r3, r2
 800a87c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	693a      	ldr	r2, [r7, #16]
 800a882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	697a      	ldr	r2, [r7, #20]
 800a888:	621a      	str	r2, [r3, #32]
}
 800a88a:	bf00      	nop
 800a88c:	371c      	adds	r7, #28
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a896:	b480      	push	{r7}
 800a898:	b087      	sub	sp, #28
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	60f8      	str	r0, [r7, #12]
 800a89e:	60b9      	str	r1, [r7, #8]
 800a8a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6a1b      	ldr	r3, [r3, #32]
 800a8a6:	f023 0210 	bic.w	r2, r3, #16
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6a1b      	ldr	r3, [r3, #32]
 800a8b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a8c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	031b      	lsls	r3, r3, #12
 800a8c6:	697a      	ldr	r2, [r7, #20]
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a8d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	011b      	lsls	r3, r3, #4
 800a8d8:	693a      	ldr	r2, [r7, #16]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	697a      	ldr	r2, [r7, #20]
 800a8e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	621a      	str	r2, [r3, #32]
}
 800a8ea:	bf00      	nop
 800a8ec:	371c      	adds	r7, #28
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
	...

0800a8f8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	4b09      	ldr	r3, [pc, #36]	; (800a930 <TIM_ITRx_SetConfig+0x38>)
 800a90c:	4013      	ands	r3, r2
 800a90e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a910:	683a      	ldr	r2, [r7, #0]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	4313      	orrs	r3, r2
 800a916:	f043 0307 	orr.w	r3, r3, #7
 800a91a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	609a      	str	r2, [r3, #8]
}
 800a922:	bf00      	nop
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	ffcfff8f 	.word	0xffcfff8f

0800a934 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a934:	b480      	push	{r7}
 800a936:	b087      	sub	sp, #28
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	607a      	str	r2, [r7, #4]
 800a940:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a94e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	021a      	lsls	r2, r3, #8
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	431a      	orrs	r2, r3
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	697a      	ldr	r2, [r7, #20]
 800a95e:	4313      	orrs	r3, r2
 800a960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	697a      	ldr	r2, [r7, #20]
 800a966:	609a      	str	r2, [r3, #8]
}
 800a968:	bf00      	nop
 800a96a:	371c      	adds	r7, #28
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a974:	b480      	push	{r7}
 800a976:	b087      	sub	sp, #28
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	f003 031f 	and.w	r3, r3, #31
 800a986:	2201      	movs	r2, #1
 800a988:	fa02 f303 	lsl.w	r3, r2, r3
 800a98c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6a1a      	ldr	r2, [r3, #32]
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	43db      	mvns	r3, r3
 800a996:	401a      	ands	r2, r3
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6a1a      	ldr	r2, [r3, #32]
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	f003 031f 	and.w	r3, r3, #31
 800a9a6:	6879      	ldr	r1, [r7, #4]
 800a9a8:	fa01 f303 	lsl.w	r3, r1, r3
 800a9ac:	431a      	orrs	r2, r3
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	621a      	str	r2, [r3, #32]
}
 800a9b2:	bf00      	nop
 800a9b4:	371c      	adds	r7, #28
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
	...

0800a9c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d101      	bne.n	800a9d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a9d4:	2302      	movs	r3, #2
 800a9d6:	e06d      	b.n	800aab4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2202      	movs	r2, #2
 800a9e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	689b      	ldr	r3, [r3, #8]
 800a9f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a30      	ldr	r2, [pc, #192]	; (800aac0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d004      	beq.n	800aa0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a2f      	ldr	r2, [pc, #188]	; (800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d108      	bne.n	800aa1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aa12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a20      	ldr	r2, [pc, #128]	; (800aac0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d022      	beq.n	800aa88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa4a:	d01d      	beq.n	800aa88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a1d      	ldr	r2, [pc, #116]	; (800aac8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d018      	beq.n	800aa88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a1c      	ldr	r2, [pc, #112]	; (800aacc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d013      	beq.n	800aa88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a1a      	ldr	r2, [pc, #104]	; (800aad0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d00e      	beq.n	800aa88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a15      	ldr	r2, [pc, #84]	; (800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d009      	beq.n	800aa88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a16      	ldr	r2, [pc, #88]	; (800aad4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d004      	beq.n	800aa88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a15      	ldr	r2, [pc, #84]	; (800aad8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d10c      	bne.n	800aaa2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	68ba      	ldr	r2, [r7, #8]
 800aa96:	4313      	orrs	r3, r2
 800aa98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	68ba      	ldr	r2, [r7, #8]
 800aaa0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3714      	adds	r7, #20
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr
 800aac0:	40010000 	.word	0x40010000
 800aac4:	40010400 	.word	0x40010400
 800aac8:	40000400 	.word	0x40000400
 800aacc:	40000800 	.word	0x40000800
 800aad0:	40000c00 	.word	0x40000c00
 800aad4:	40001800 	.word	0x40001800
 800aad8:	40014000 	.word	0x40014000

0800aadc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aae6:	2300      	movs	r3, #0
 800aae8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d101      	bne.n	800aaf8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aaf4:	2302      	movs	r3, #2
 800aaf6:	e087      	b.n	800ac08 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4313      	orrs	r3, r2
 800ab36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	4313      	orrs	r3, r2
 800ab44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	695b      	ldr	r3, [r3, #20]
 800ab50:	4313      	orrs	r3, r2
 800ab52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	699b      	ldr	r3, [r3, #24]
 800ab6c:	041b      	lsls	r3, r3, #16
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a27      	ldr	r2, [pc, #156]	; (800ac14 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d004      	beq.n	800ab86 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a25      	ldr	r2, [pc, #148]	; (800ac18 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d106      	bne.n	800ab94 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	69db      	ldr	r3, [r3, #28]
 800ab90:	4313      	orrs	r3, r2
 800ab92:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a1e      	ldr	r2, [pc, #120]	; (800ac14 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d004      	beq.n	800aba8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a1d      	ldr	r2, [pc, #116]	; (800ac18 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d126      	bne.n	800abf6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb2:	051b      	lsls	r3, r3, #20
 800abb4:	4313      	orrs	r3, r2
 800abb6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	6a1b      	ldr	r3, [r3, #32]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd0:	4313      	orrs	r3, r2
 800abd2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a0e      	ldr	r2, [pc, #56]	; (800ac14 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d004      	beq.n	800abe8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a0d      	ldr	r2, [pc, #52]	; (800ac18 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d106      	bne.n	800abf6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf2:	4313      	orrs	r3, r2
 800abf4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac06:	2300      	movs	r3, #0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3714      	adds	r7, #20
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr
 800ac14:	40010000 	.word	0x40010000
 800ac18:	40010400 	.word	0x40010400

0800ac1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac24:	bf00      	nop
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac38:	bf00      	nop
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ac4c:	bf00      	nop
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d101      	bne.n	800ac6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac66:	2301      	movs	r3, #1
 800ac68:	e042      	b.n	800acf0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d106      	bne.n	800ac82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f7f6 fba7 	bl	80013d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2224      	movs	r2, #36	; 0x24
 800ac86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f022 0201 	bic.w	r2, r2, #1
 800ac98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 f8ca 	bl	800ae34 <UART_SetConfig>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d101      	bne.n	800acaa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e022      	b.n	800acf0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d002      	beq.n	800acb8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 ff2a 	bl	800bb0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	685a      	ldr	r2, [r3, #4]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800acc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	689a      	ldr	r2, [r3, #8]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800acd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f042 0201 	orr.w	r2, r2, #1
 800ace6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 ffb1 	bl	800bc50 <UART_CheckIdleState>
 800acee:	4603      	mov	r3, r0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b08a      	sub	sp, #40	; 0x28
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	4613      	mov	r3, r2
 800ad04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad0c:	2b20      	cmp	r3, #32
 800ad0e:	d167      	bne.n	800ade0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d002      	beq.n	800ad1c <HAL_UART_Transmit_DMA+0x24>
 800ad16:	88fb      	ldrh	r3, [r7, #6]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d101      	bne.n	800ad20 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e060      	b.n	800ade2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	68ba      	ldr	r2, [r7, #8]
 800ad24:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	88fa      	ldrh	r2, [r7, #6]
 800ad2a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	88fa      	ldrh	r2, [r7, #6]
 800ad32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2221      	movs	r2, #33	; 0x21
 800ad42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d028      	beq.n	800ada0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad52:	4a26      	ldr	r2, [pc, #152]	; (800adec <HAL_UART_Transmit_DMA+0xf4>)
 800ad54:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad5a:	4a25      	ldr	r2, [pc, #148]	; (800adf0 <HAL_UART_Transmit_DMA+0xf8>)
 800ad5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad62:	4a24      	ldr	r2, [pc, #144]	; (800adf4 <HAL_UART_Transmit_DMA+0xfc>)
 800ad64:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad76:	4619      	mov	r1, r3
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	3328      	adds	r3, #40	; 0x28
 800ad7e:	461a      	mov	r2, r3
 800ad80:	88fb      	ldrh	r3, [r7, #6]
 800ad82:	f7f8 fd2d 	bl	80037e0 <HAL_DMA_Start_IT>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d009      	beq.n	800ada0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2210      	movs	r2, #16
 800ad90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2220      	movs	r2, #32
 800ad98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	e020      	b.n	800ade2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2240      	movs	r2, #64	; 0x40
 800ada6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	3308      	adds	r3, #8
 800adae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	e853 3f00 	ldrex	r3, [r3]
 800adb6:	613b      	str	r3, [r7, #16]
   return(result);
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adbe:	627b      	str	r3, [r7, #36]	; 0x24
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	3308      	adds	r3, #8
 800adc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adc8:	623a      	str	r2, [r7, #32]
 800adca:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adcc:	69f9      	ldr	r1, [r7, #28]
 800adce:	6a3a      	ldr	r2, [r7, #32]
 800add0:	e841 2300 	strex	r3, r2, [r1]
 800add4:	61bb      	str	r3, [r7, #24]
   return(result);
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d1e5      	bne.n	800ada8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800addc:	2300      	movs	r3, #0
 800adde:	e000      	b.n	800ade2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ade0:	2302      	movs	r3, #2
  }
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3728      	adds	r7, #40	; 0x28
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	0800bfc1 	.word	0x0800bfc1
 800adf0:	0800c057 	.word	0x0800c057
 800adf4:	0800c073 	.word	0x0800c073

0800adf8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b083      	sub	sp, #12
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ae00:	bf00      	nop
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ae14:	bf00      	nop
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ae28:	bf00      	nop
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae38:	b092      	sub	sp, #72	; 0x48
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	689a      	ldr	r2, [r3, #8]
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	691b      	ldr	r3, [r3, #16]
 800ae4c:	431a      	orrs	r2, r3
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	695b      	ldr	r3, [r3, #20]
 800ae52:	431a      	orrs	r2, r3
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	69db      	ldr	r3, [r3, #28]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	4bbe      	ldr	r3, [pc, #760]	; (800b15c <UART_SetConfig+0x328>)
 800ae64:	4013      	ands	r3, r2
 800ae66:	697a      	ldr	r2, [r7, #20]
 800ae68:	6812      	ldr	r2, [r2, #0]
 800ae6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ae6c:	430b      	orrs	r3, r1
 800ae6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	68da      	ldr	r2, [r3, #12]
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	430a      	orrs	r2, r1
 800ae84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	699b      	ldr	r3, [r3, #24]
 800ae8a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4ab3      	ldr	r2, [pc, #716]	; (800b160 <UART_SetConfig+0x32c>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d004      	beq.n	800aea0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	6a1b      	ldr	r3, [r3, #32]
 800ae9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	689a      	ldr	r2, [r3, #8]
 800aea6:	4baf      	ldr	r3, [pc, #700]	; (800b164 <UART_SetConfig+0x330>)
 800aea8:	4013      	ands	r3, r2
 800aeaa:	697a      	ldr	r2, [r7, #20]
 800aeac:	6812      	ldr	r2, [r2, #0]
 800aeae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aeb0:	430b      	orrs	r3, r1
 800aeb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeba:	f023 010f 	bic.w	r1, r3, #15
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	430a      	orrs	r2, r1
 800aec8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4aa6      	ldr	r2, [pc, #664]	; (800b168 <UART_SetConfig+0x334>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d177      	bne.n	800afc4 <UART_SetConfig+0x190>
 800aed4:	4ba5      	ldr	r3, [pc, #660]	; (800b16c <UART_SetConfig+0x338>)
 800aed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aed8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aedc:	2b28      	cmp	r3, #40	; 0x28
 800aede:	d86d      	bhi.n	800afbc <UART_SetConfig+0x188>
 800aee0:	a201      	add	r2, pc, #4	; (adr r2, 800aee8 <UART_SetConfig+0xb4>)
 800aee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee6:	bf00      	nop
 800aee8:	0800af8d 	.word	0x0800af8d
 800aeec:	0800afbd 	.word	0x0800afbd
 800aef0:	0800afbd 	.word	0x0800afbd
 800aef4:	0800afbd 	.word	0x0800afbd
 800aef8:	0800afbd 	.word	0x0800afbd
 800aefc:	0800afbd 	.word	0x0800afbd
 800af00:	0800afbd 	.word	0x0800afbd
 800af04:	0800afbd 	.word	0x0800afbd
 800af08:	0800af95 	.word	0x0800af95
 800af0c:	0800afbd 	.word	0x0800afbd
 800af10:	0800afbd 	.word	0x0800afbd
 800af14:	0800afbd 	.word	0x0800afbd
 800af18:	0800afbd 	.word	0x0800afbd
 800af1c:	0800afbd 	.word	0x0800afbd
 800af20:	0800afbd 	.word	0x0800afbd
 800af24:	0800afbd 	.word	0x0800afbd
 800af28:	0800af9d 	.word	0x0800af9d
 800af2c:	0800afbd 	.word	0x0800afbd
 800af30:	0800afbd 	.word	0x0800afbd
 800af34:	0800afbd 	.word	0x0800afbd
 800af38:	0800afbd 	.word	0x0800afbd
 800af3c:	0800afbd 	.word	0x0800afbd
 800af40:	0800afbd 	.word	0x0800afbd
 800af44:	0800afbd 	.word	0x0800afbd
 800af48:	0800afa5 	.word	0x0800afa5
 800af4c:	0800afbd 	.word	0x0800afbd
 800af50:	0800afbd 	.word	0x0800afbd
 800af54:	0800afbd 	.word	0x0800afbd
 800af58:	0800afbd 	.word	0x0800afbd
 800af5c:	0800afbd 	.word	0x0800afbd
 800af60:	0800afbd 	.word	0x0800afbd
 800af64:	0800afbd 	.word	0x0800afbd
 800af68:	0800afad 	.word	0x0800afad
 800af6c:	0800afbd 	.word	0x0800afbd
 800af70:	0800afbd 	.word	0x0800afbd
 800af74:	0800afbd 	.word	0x0800afbd
 800af78:	0800afbd 	.word	0x0800afbd
 800af7c:	0800afbd 	.word	0x0800afbd
 800af80:	0800afbd 	.word	0x0800afbd
 800af84:	0800afbd 	.word	0x0800afbd
 800af88:	0800afb5 	.word	0x0800afb5
 800af8c:	2301      	movs	r3, #1
 800af8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af92:	e326      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800af94:	2304      	movs	r3, #4
 800af96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af9a:	e322      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800af9c:	2308      	movs	r3, #8
 800af9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afa2:	e31e      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800afa4:	2310      	movs	r3, #16
 800afa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afaa:	e31a      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800afac:	2320      	movs	r3, #32
 800afae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afb2:	e316      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800afb4:	2340      	movs	r3, #64	; 0x40
 800afb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afba:	e312      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800afbc:	2380      	movs	r3, #128	; 0x80
 800afbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afc2:	e30e      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a69      	ldr	r2, [pc, #420]	; (800b170 <UART_SetConfig+0x33c>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d130      	bne.n	800b030 <UART_SetConfig+0x1fc>
 800afce:	4b67      	ldr	r3, [pc, #412]	; (800b16c <UART_SetConfig+0x338>)
 800afd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afd2:	f003 0307 	and.w	r3, r3, #7
 800afd6:	2b05      	cmp	r3, #5
 800afd8:	d826      	bhi.n	800b028 <UART_SetConfig+0x1f4>
 800afda:	a201      	add	r2, pc, #4	; (adr r2, 800afe0 <UART_SetConfig+0x1ac>)
 800afdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe0:	0800aff9 	.word	0x0800aff9
 800afe4:	0800b001 	.word	0x0800b001
 800afe8:	0800b009 	.word	0x0800b009
 800afec:	0800b011 	.word	0x0800b011
 800aff0:	0800b019 	.word	0x0800b019
 800aff4:	0800b021 	.word	0x0800b021
 800aff8:	2300      	movs	r3, #0
 800affa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800affe:	e2f0      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b000:	2304      	movs	r3, #4
 800b002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b006:	e2ec      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b008:	2308      	movs	r3, #8
 800b00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b00e:	e2e8      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b010:	2310      	movs	r3, #16
 800b012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b016:	e2e4      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b018:	2320      	movs	r3, #32
 800b01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b01e:	e2e0      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b020:	2340      	movs	r3, #64	; 0x40
 800b022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b026:	e2dc      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b028:	2380      	movs	r3, #128	; 0x80
 800b02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b02e:	e2d8      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a4f      	ldr	r2, [pc, #316]	; (800b174 <UART_SetConfig+0x340>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d130      	bne.n	800b09c <UART_SetConfig+0x268>
 800b03a:	4b4c      	ldr	r3, [pc, #304]	; (800b16c <UART_SetConfig+0x338>)
 800b03c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b03e:	f003 0307 	and.w	r3, r3, #7
 800b042:	2b05      	cmp	r3, #5
 800b044:	d826      	bhi.n	800b094 <UART_SetConfig+0x260>
 800b046:	a201      	add	r2, pc, #4	; (adr r2, 800b04c <UART_SetConfig+0x218>)
 800b048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b04c:	0800b065 	.word	0x0800b065
 800b050:	0800b06d 	.word	0x0800b06d
 800b054:	0800b075 	.word	0x0800b075
 800b058:	0800b07d 	.word	0x0800b07d
 800b05c:	0800b085 	.word	0x0800b085
 800b060:	0800b08d 	.word	0x0800b08d
 800b064:	2300      	movs	r3, #0
 800b066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b06a:	e2ba      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b06c:	2304      	movs	r3, #4
 800b06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b072:	e2b6      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b074:	2308      	movs	r3, #8
 800b076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b07a:	e2b2      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b07c:	2310      	movs	r3, #16
 800b07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b082:	e2ae      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b084:	2320      	movs	r3, #32
 800b086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b08a:	e2aa      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b08c:	2340      	movs	r3, #64	; 0x40
 800b08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b092:	e2a6      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b094:	2380      	movs	r3, #128	; 0x80
 800b096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b09a:	e2a2      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a35      	ldr	r2, [pc, #212]	; (800b178 <UART_SetConfig+0x344>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d130      	bne.n	800b108 <UART_SetConfig+0x2d4>
 800b0a6:	4b31      	ldr	r3, [pc, #196]	; (800b16c <UART_SetConfig+0x338>)
 800b0a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0aa:	f003 0307 	and.w	r3, r3, #7
 800b0ae:	2b05      	cmp	r3, #5
 800b0b0:	d826      	bhi.n	800b100 <UART_SetConfig+0x2cc>
 800b0b2:	a201      	add	r2, pc, #4	; (adr r2, 800b0b8 <UART_SetConfig+0x284>)
 800b0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b8:	0800b0d1 	.word	0x0800b0d1
 800b0bc:	0800b0d9 	.word	0x0800b0d9
 800b0c0:	0800b0e1 	.word	0x0800b0e1
 800b0c4:	0800b0e9 	.word	0x0800b0e9
 800b0c8:	0800b0f1 	.word	0x0800b0f1
 800b0cc:	0800b0f9 	.word	0x0800b0f9
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0d6:	e284      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b0d8:	2304      	movs	r3, #4
 800b0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0de:	e280      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b0e0:	2308      	movs	r3, #8
 800b0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0e6:	e27c      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b0e8:	2310      	movs	r3, #16
 800b0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ee:	e278      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b0f0:	2320      	movs	r3, #32
 800b0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0f6:	e274      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b0f8:	2340      	movs	r3, #64	; 0x40
 800b0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0fe:	e270      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b100:	2380      	movs	r3, #128	; 0x80
 800b102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b106:	e26c      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a1b      	ldr	r2, [pc, #108]	; (800b17c <UART_SetConfig+0x348>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d142      	bne.n	800b198 <UART_SetConfig+0x364>
 800b112:	4b16      	ldr	r3, [pc, #88]	; (800b16c <UART_SetConfig+0x338>)
 800b114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b116:	f003 0307 	and.w	r3, r3, #7
 800b11a:	2b05      	cmp	r3, #5
 800b11c:	d838      	bhi.n	800b190 <UART_SetConfig+0x35c>
 800b11e:	a201      	add	r2, pc, #4	; (adr r2, 800b124 <UART_SetConfig+0x2f0>)
 800b120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b124:	0800b13d 	.word	0x0800b13d
 800b128:	0800b145 	.word	0x0800b145
 800b12c:	0800b14d 	.word	0x0800b14d
 800b130:	0800b155 	.word	0x0800b155
 800b134:	0800b181 	.word	0x0800b181
 800b138:	0800b189 	.word	0x0800b189
 800b13c:	2300      	movs	r3, #0
 800b13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b142:	e24e      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b144:	2304      	movs	r3, #4
 800b146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b14a:	e24a      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b14c:	2308      	movs	r3, #8
 800b14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b152:	e246      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b154:	2310      	movs	r3, #16
 800b156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b15a:	e242      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b15c:	cfff69f3 	.word	0xcfff69f3
 800b160:	58000c00 	.word	0x58000c00
 800b164:	11fff4ff 	.word	0x11fff4ff
 800b168:	40011000 	.word	0x40011000
 800b16c:	58024400 	.word	0x58024400
 800b170:	40004400 	.word	0x40004400
 800b174:	40004800 	.word	0x40004800
 800b178:	40004c00 	.word	0x40004c00
 800b17c:	40005000 	.word	0x40005000
 800b180:	2320      	movs	r3, #32
 800b182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b186:	e22c      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b188:	2340      	movs	r3, #64	; 0x40
 800b18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b18e:	e228      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b190:	2380      	movs	r3, #128	; 0x80
 800b192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b196:	e224      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4ab1      	ldr	r2, [pc, #708]	; (800b464 <UART_SetConfig+0x630>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d176      	bne.n	800b290 <UART_SetConfig+0x45c>
 800b1a2:	4bb1      	ldr	r3, [pc, #708]	; (800b468 <UART_SetConfig+0x634>)
 800b1a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b1aa:	2b28      	cmp	r3, #40	; 0x28
 800b1ac:	d86c      	bhi.n	800b288 <UART_SetConfig+0x454>
 800b1ae:	a201      	add	r2, pc, #4	; (adr r2, 800b1b4 <UART_SetConfig+0x380>)
 800b1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b4:	0800b259 	.word	0x0800b259
 800b1b8:	0800b289 	.word	0x0800b289
 800b1bc:	0800b289 	.word	0x0800b289
 800b1c0:	0800b289 	.word	0x0800b289
 800b1c4:	0800b289 	.word	0x0800b289
 800b1c8:	0800b289 	.word	0x0800b289
 800b1cc:	0800b289 	.word	0x0800b289
 800b1d0:	0800b289 	.word	0x0800b289
 800b1d4:	0800b261 	.word	0x0800b261
 800b1d8:	0800b289 	.word	0x0800b289
 800b1dc:	0800b289 	.word	0x0800b289
 800b1e0:	0800b289 	.word	0x0800b289
 800b1e4:	0800b289 	.word	0x0800b289
 800b1e8:	0800b289 	.word	0x0800b289
 800b1ec:	0800b289 	.word	0x0800b289
 800b1f0:	0800b289 	.word	0x0800b289
 800b1f4:	0800b269 	.word	0x0800b269
 800b1f8:	0800b289 	.word	0x0800b289
 800b1fc:	0800b289 	.word	0x0800b289
 800b200:	0800b289 	.word	0x0800b289
 800b204:	0800b289 	.word	0x0800b289
 800b208:	0800b289 	.word	0x0800b289
 800b20c:	0800b289 	.word	0x0800b289
 800b210:	0800b289 	.word	0x0800b289
 800b214:	0800b271 	.word	0x0800b271
 800b218:	0800b289 	.word	0x0800b289
 800b21c:	0800b289 	.word	0x0800b289
 800b220:	0800b289 	.word	0x0800b289
 800b224:	0800b289 	.word	0x0800b289
 800b228:	0800b289 	.word	0x0800b289
 800b22c:	0800b289 	.word	0x0800b289
 800b230:	0800b289 	.word	0x0800b289
 800b234:	0800b279 	.word	0x0800b279
 800b238:	0800b289 	.word	0x0800b289
 800b23c:	0800b289 	.word	0x0800b289
 800b240:	0800b289 	.word	0x0800b289
 800b244:	0800b289 	.word	0x0800b289
 800b248:	0800b289 	.word	0x0800b289
 800b24c:	0800b289 	.word	0x0800b289
 800b250:	0800b289 	.word	0x0800b289
 800b254:	0800b281 	.word	0x0800b281
 800b258:	2301      	movs	r3, #1
 800b25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b25e:	e1c0      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b260:	2304      	movs	r3, #4
 800b262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b266:	e1bc      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b268:	2308      	movs	r3, #8
 800b26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b26e:	e1b8      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b270:	2310      	movs	r3, #16
 800b272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b276:	e1b4      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b278:	2320      	movs	r3, #32
 800b27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b27e:	e1b0      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b280:	2340      	movs	r3, #64	; 0x40
 800b282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b286:	e1ac      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b288:	2380      	movs	r3, #128	; 0x80
 800b28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b28e:	e1a8      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a75      	ldr	r2, [pc, #468]	; (800b46c <UART_SetConfig+0x638>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d130      	bne.n	800b2fc <UART_SetConfig+0x4c8>
 800b29a:	4b73      	ldr	r3, [pc, #460]	; (800b468 <UART_SetConfig+0x634>)
 800b29c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b29e:	f003 0307 	and.w	r3, r3, #7
 800b2a2:	2b05      	cmp	r3, #5
 800b2a4:	d826      	bhi.n	800b2f4 <UART_SetConfig+0x4c0>
 800b2a6:	a201      	add	r2, pc, #4	; (adr r2, 800b2ac <UART_SetConfig+0x478>)
 800b2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ac:	0800b2c5 	.word	0x0800b2c5
 800b2b0:	0800b2cd 	.word	0x0800b2cd
 800b2b4:	0800b2d5 	.word	0x0800b2d5
 800b2b8:	0800b2dd 	.word	0x0800b2dd
 800b2bc:	0800b2e5 	.word	0x0800b2e5
 800b2c0:	0800b2ed 	.word	0x0800b2ed
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ca:	e18a      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b2cc:	2304      	movs	r3, #4
 800b2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2d2:	e186      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b2d4:	2308      	movs	r3, #8
 800b2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2da:	e182      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b2dc:	2310      	movs	r3, #16
 800b2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2e2:	e17e      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b2e4:	2320      	movs	r3, #32
 800b2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ea:	e17a      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b2ec:	2340      	movs	r3, #64	; 0x40
 800b2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2f2:	e176      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b2f4:	2380      	movs	r3, #128	; 0x80
 800b2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2fa:	e172      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a5b      	ldr	r2, [pc, #364]	; (800b470 <UART_SetConfig+0x63c>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d130      	bne.n	800b368 <UART_SetConfig+0x534>
 800b306:	4b58      	ldr	r3, [pc, #352]	; (800b468 <UART_SetConfig+0x634>)
 800b308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b30a:	f003 0307 	and.w	r3, r3, #7
 800b30e:	2b05      	cmp	r3, #5
 800b310:	d826      	bhi.n	800b360 <UART_SetConfig+0x52c>
 800b312:	a201      	add	r2, pc, #4	; (adr r2, 800b318 <UART_SetConfig+0x4e4>)
 800b314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b318:	0800b331 	.word	0x0800b331
 800b31c:	0800b339 	.word	0x0800b339
 800b320:	0800b341 	.word	0x0800b341
 800b324:	0800b349 	.word	0x0800b349
 800b328:	0800b351 	.word	0x0800b351
 800b32c:	0800b359 	.word	0x0800b359
 800b330:	2300      	movs	r3, #0
 800b332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b336:	e154      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b338:	2304      	movs	r3, #4
 800b33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b33e:	e150      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b340:	2308      	movs	r3, #8
 800b342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b346:	e14c      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b348:	2310      	movs	r3, #16
 800b34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b34e:	e148      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b350:	2320      	movs	r3, #32
 800b352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b356:	e144      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b358:	2340      	movs	r3, #64	; 0x40
 800b35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b35e:	e140      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b360:	2380      	movs	r3, #128	; 0x80
 800b362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b366:	e13c      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a41      	ldr	r2, [pc, #260]	; (800b474 <UART_SetConfig+0x640>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	f040 8082 	bne.w	800b478 <UART_SetConfig+0x644>
 800b374:	4b3c      	ldr	r3, [pc, #240]	; (800b468 <UART_SetConfig+0x634>)
 800b376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b378:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b37c:	2b28      	cmp	r3, #40	; 0x28
 800b37e:	d86d      	bhi.n	800b45c <UART_SetConfig+0x628>
 800b380:	a201      	add	r2, pc, #4	; (adr r2, 800b388 <UART_SetConfig+0x554>)
 800b382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b386:	bf00      	nop
 800b388:	0800b42d 	.word	0x0800b42d
 800b38c:	0800b45d 	.word	0x0800b45d
 800b390:	0800b45d 	.word	0x0800b45d
 800b394:	0800b45d 	.word	0x0800b45d
 800b398:	0800b45d 	.word	0x0800b45d
 800b39c:	0800b45d 	.word	0x0800b45d
 800b3a0:	0800b45d 	.word	0x0800b45d
 800b3a4:	0800b45d 	.word	0x0800b45d
 800b3a8:	0800b435 	.word	0x0800b435
 800b3ac:	0800b45d 	.word	0x0800b45d
 800b3b0:	0800b45d 	.word	0x0800b45d
 800b3b4:	0800b45d 	.word	0x0800b45d
 800b3b8:	0800b45d 	.word	0x0800b45d
 800b3bc:	0800b45d 	.word	0x0800b45d
 800b3c0:	0800b45d 	.word	0x0800b45d
 800b3c4:	0800b45d 	.word	0x0800b45d
 800b3c8:	0800b43d 	.word	0x0800b43d
 800b3cc:	0800b45d 	.word	0x0800b45d
 800b3d0:	0800b45d 	.word	0x0800b45d
 800b3d4:	0800b45d 	.word	0x0800b45d
 800b3d8:	0800b45d 	.word	0x0800b45d
 800b3dc:	0800b45d 	.word	0x0800b45d
 800b3e0:	0800b45d 	.word	0x0800b45d
 800b3e4:	0800b45d 	.word	0x0800b45d
 800b3e8:	0800b445 	.word	0x0800b445
 800b3ec:	0800b45d 	.word	0x0800b45d
 800b3f0:	0800b45d 	.word	0x0800b45d
 800b3f4:	0800b45d 	.word	0x0800b45d
 800b3f8:	0800b45d 	.word	0x0800b45d
 800b3fc:	0800b45d 	.word	0x0800b45d
 800b400:	0800b45d 	.word	0x0800b45d
 800b404:	0800b45d 	.word	0x0800b45d
 800b408:	0800b44d 	.word	0x0800b44d
 800b40c:	0800b45d 	.word	0x0800b45d
 800b410:	0800b45d 	.word	0x0800b45d
 800b414:	0800b45d 	.word	0x0800b45d
 800b418:	0800b45d 	.word	0x0800b45d
 800b41c:	0800b45d 	.word	0x0800b45d
 800b420:	0800b45d 	.word	0x0800b45d
 800b424:	0800b45d 	.word	0x0800b45d
 800b428:	0800b455 	.word	0x0800b455
 800b42c:	2301      	movs	r3, #1
 800b42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b432:	e0d6      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b434:	2304      	movs	r3, #4
 800b436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b43a:	e0d2      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b43c:	2308      	movs	r3, #8
 800b43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b442:	e0ce      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b444:	2310      	movs	r3, #16
 800b446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b44a:	e0ca      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b44c:	2320      	movs	r3, #32
 800b44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b452:	e0c6      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b454:	2340      	movs	r3, #64	; 0x40
 800b456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b45a:	e0c2      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b45c:	2380      	movs	r3, #128	; 0x80
 800b45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b462:	e0be      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b464:	40011400 	.word	0x40011400
 800b468:	58024400 	.word	0x58024400
 800b46c:	40007800 	.word	0x40007800
 800b470:	40007c00 	.word	0x40007c00
 800b474:	40011800 	.word	0x40011800
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4aad      	ldr	r2, [pc, #692]	; (800b734 <UART_SetConfig+0x900>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d176      	bne.n	800b570 <UART_SetConfig+0x73c>
 800b482:	4bad      	ldr	r3, [pc, #692]	; (800b738 <UART_SetConfig+0x904>)
 800b484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b486:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b48a:	2b28      	cmp	r3, #40	; 0x28
 800b48c:	d86c      	bhi.n	800b568 <UART_SetConfig+0x734>
 800b48e:	a201      	add	r2, pc, #4	; (adr r2, 800b494 <UART_SetConfig+0x660>)
 800b490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b494:	0800b539 	.word	0x0800b539
 800b498:	0800b569 	.word	0x0800b569
 800b49c:	0800b569 	.word	0x0800b569
 800b4a0:	0800b569 	.word	0x0800b569
 800b4a4:	0800b569 	.word	0x0800b569
 800b4a8:	0800b569 	.word	0x0800b569
 800b4ac:	0800b569 	.word	0x0800b569
 800b4b0:	0800b569 	.word	0x0800b569
 800b4b4:	0800b541 	.word	0x0800b541
 800b4b8:	0800b569 	.word	0x0800b569
 800b4bc:	0800b569 	.word	0x0800b569
 800b4c0:	0800b569 	.word	0x0800b569
 800b4c4:	0800b569 	.word	0x0800b569
 800b4c8:	0800b569 	.word	0x0800b569
 800b4cc:	0800b569 	.word	0x0800b569
 800b4d0:	0800b569 	.word	0x0800b569
 800b4d4:	0800b549 	.word	0x0800b549
 800b4d8:	0800b569 	.word	0x0800b569
 800b4dc:	0800b569 	.word	0x0800b569
 800b4e0:	0800b569 	.word	0x0800b569
 800b4e4:	0800b569 	.word	0x0800b569
 800b4e8:	0800b569 	.word	0x0800b569
 800b4ec:	0800b569 	.word	0x0800b569
 800b4f0:	0800b569 	.word	0x0800b569
 800b4f4:	0800b551 	.word	0x0800b551
 800b4f8:	0800b569 	.word	0x0800b569
 800b4fc:	0800b569 	.word	0x0800b569
 800b500:	0800b569 	.word	0x0800b569
 800b504:	0800b569 	.word	0x0800b569
 800b508:	0800b569 	.word	0x0800b569
 800b50c:	0800b569 	.word	0x0800b569
 800b510:	0800b569 	.word	0x0800b569
 800b514:	0800b559 	.word	0x0800b559
 800b518:	0800b569 	.word	0x0800b569
 800b51c:	0800b569 	.word	0x0800b569
 800b520:	0800b569 	.word	0x0800b569
 800b524:	0800b569 	.word	0x0800b569
 800b528:	0800b569 	.word	0x0800b569
 800b52c:	0800b569 	.word	0x0800b569
 800b530:	0800b569 	.word	0x0800b569
 800b534:	0800b561 	.word	0x0800b561
 800b538:	2301      	movs	r3, #1
 800b53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b53e:	e050      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b540:	2304      	movs	r3, #4
 800b542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b546:	e04c      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b548:	2308      	movs	r3, #8
 800b54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b54e:	e048      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b550:	2310      	movs	r3, #16
 800b552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b556:	e044      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b558:	2320      	movs	r3, #32
 800b55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b55e:	e040      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b560:	2340      	movs	r3, #64	; 0x40
 800b562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b566:	e03c      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b568:	2380      	movs	r3, #128	; 0x80
 800b56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b56e:	e038      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a71      	ldr	r2, [pc, #452]	; (800b73c <UART_SetConfig+0x908>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d130      	bne.n	800b5dc <UART_SetConfig+0x7a8>
 800b57a:	4b6f      	ldr	r3, [pc, #444]	; (800b738 <UART_SetConfig+0x904>)
 800b57c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b57e:	f003 0307 	and.w	r3, r3, #7
 800b582:	2b05      	cmp	r3, #5
 800b584:	d826      	bhi.n	800b5d4 <UART_SetConfig+0x7a0>
 800b586:	a201      	add	r2, pc, #4	; (adr r2, 800b58c <UART_SetConfig+0x758>)
 800b588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b58c:	0800b5a5 	.word	0x0800b5a5
 800b590:	0800b5ad 	.word	0x0800b5ad
 800b594:	0800b5b5 	.word	0x0800b5b5
 800b598:	0800b5bd 	.word	0x0800b5bd
 800b59c:	0800b5c5 	.word	0x0800b5c5
 800b5a0:	0800b5cd 	.word	0x0800b5cd
 800b5a4:	2302      	movs	r3, #2
 800b5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5aa:	e01a      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b5ac:	2304      	movs	r3, #4
 800b5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5b2:	e016      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b5b4:	2308      	movs	r3, #8
 800b5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ba:	e012      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b5bc:	2310      	movs	r3, #16
 800b5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5c2:	e00e      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b5c4:	2320      	movs	r3, #32
 800b5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ca:	e00a      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b5cc:	2340      	movs	r3, #64	; 0x40
 800b5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5d2:	e006      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b5d4:	2380      	movs	r3, #128	; 0x80
 800b5d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5da:	e002      	b.n	800b5e2 <UART_SetConfig+0x7ae>
 800b5dc:	2380      	movs	r3, #128	; 0x80
 800b5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a55      	ldr	r2, [pc, #340]	; (800b73c <UART_SetConfig+0x908>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	f040 80f8 	bne.w	800b7de <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b5ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b5f2:	2b20      	cmp	r3, #32
 800b5f4:	dc46      	bgt.n	800b684 <UART_SetConfig+0x850>
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	db75      	blt.n	800b6e6 <UART_SetConfig+0x8b2>
 800b5fa:	3b02      	subs	r3, #2
 800b5fc:	2b1e      	cmp	r3, #30
 800b5fe:	d872      	bhi.n	800b6e6 <UART_SetConfig+0x8b2>
 800b600:	a201      	add	r2, pc, #4	; (adr r2, 800b608 <UART_SetConfig+0x7d4>)
 800b602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b606:	bf00      	nop
 800b608:	0800b68b 	.word	0x0800b68b
 800b60c:	0800b6e7 	.word	0x0800b6e7
 800b610:	0800b693 	.word	0x0800b693
 800b614:	0800b6e7 	.word	0x0800b6e7
 800b618:	0800b6e7 	.word	0x0800b6e7
 800b61c:	0800b6e7 	.word	0x0800b6e7
 800b620:	0800b6a3 	.word	0x0800b6a3
 800b624:	0800b6e7 	.word	0x0800b6e7
 800b628:	0800b6e7 	.word	0x0800b6e7
 800b62c:	0800b6e7 	.word	0x0800b6e7
 800b630:	0800b6e7 	.word	0x0800b6e7
 800b634:	0800b6e7 	.word	0x0800b6e7
 800b638:	0800b6e7 	.word	0x0800b6e7
 800b63c:	0800b6e7 	.word	0x0800b6e7
 800b640:	0800b6b3 	.word	0x0800b6b3
 800b644:	0800b6e7 	.word	0x0800b6e7
 800b648:	0800b6e7 	.word	0x0800b6e7
 800b64c:	0800b6e7 	.word	0x0800b6e7
 800b650:	0800b6e7 	.word	0x0800b6e7
 800b654:	0800b6e7 	.word	0x0800b6e7
 800b658:	0800b6e7 	.word	0x0800b6e7
 800b65c:	0800b6e7 	.word	0x0800b6e7
 800b660:	0800b6e7 	.word	0x0800b6e7
 800b664:	0800b6e7 	.word	0x0800b6e7
 800b668:	0800b6e7 	.word	0x0800b6e7
 800b66c:	0800b6e7 	.word	0x0800b6e7
 800b670:	0800b6e7 	.word	0x0800b6e7
 800b674:	0800b6e7 	.word	0x0800b6e7
 800b678:	0800b6e7 	.word	0x0800b6e7
 800b67c:	0800b6e7 	.word	0x0800b6e7
 800b680:	0800b6d9 	.word	0x0800b6d9
 800b684:	2b40      	cmp	r3, #64	; 0x40
 800b686:	d02a      	beq.n	800b6de <UART_SetConfig+0x8aa>
 800b688:	e02d      	b.n	800b6e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b68a:	f7fd fa87 	bl	8008b9c <HAL_RCCEx_GetD3PCLK1Freq>
 800b68e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b690:	e02f      	b.n	800b6f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b696:	4618      	mov	r0, r3
 800b698:	f7fd fa96 	bl	8008bc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6a0:	e027      	b.n	800b6f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6a2:	f107 0318 	add.w	r3, r7, #24
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7fd fbe2 	bl	8008e70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6b0:	e01f      	b.n	800b6f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6b2:	4b21      	ldr	r3, [pc, #132]	; (800b738 <UART_SetConfig+0x904>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f003 0320 	and.w	r3, r3, #32
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d009      	beq.n	800b6d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b6be:	4b1e      	ldr	r3, [pc, #120]	; (800b738 <UART_SetConfig+0x904>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	08db      	lsrs	r3, r3, #3
 800b6c4:	f003 0303 	and.w	r3, r3, #3
 800b6c8:	4a1d      	ldr	r2, [pc, #116]	; (800b740 <UART_SetConfig+0x90c>)
 800b6ca:	fa22 f303 	lsr.w	r3, r2, r3
 800b6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b6d0:	e00f      	b.n	800b6f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b6d2:	4b1b      	ldr	r3, [pc, #108]	; (800b740 <UART_SetConfig+0x90c>)
 800b6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6d6:	e00c      	b.n	800b6f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b6d8:	4b1a      	ldr	r3, [pc, #104]	; (800b744 <UART_SetConfig+0x910>)
 800b6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6dc:	e009      	b.n	800b6f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6e4:	e005      	b.n	800b6f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b6f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b6f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f000 81ee 	beq.w	800bad6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6fe:	4a12      	ldr	r2, [pc, #72]	; (800b748 <UART_SetConfig+0x914>)
 800b700:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b704:	461a      	mov	r2, r3
 800b706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b708:	fbb3 f3f2 	udiv	r3, r3, r2
 800b70c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	685a      	ldr	r2, [r3, #4]
 800b712:	4613      	mov	r3, r2
 800b714:	005b      	lsls	r3, r3, #1
 800b716:	4413      	add	r3, r2
 800b718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d305      	bcc.n	800b72a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b726:	429a      	cmp	r2, r3
 800b728:	d910      	bls.n	800b74c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b730:	e1d1      	b.n	800bad6 <UART_SetConfig+0xca2>
 800b732:	bf00      	nop
 800b734:	40011c00 	.word	0x40011c00
 800b738:	58024400 	.word	0x58024400
 800b73c:	58000c00 	.word	0x58000c00
 800b740:	03d09000 	.word	0x03d09000
 800b744:	003d0900 	.word	0x003d0900
 800b748:	08010d70 	.word	0x08010d70
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b74e:	2200      	movs	r2, #0
 800b750:	60bb      	str	r3, [r7, #8]
 800b752:	60fa      	str	r2, [r7, #12]
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b758:	4ac0      	ldr	r2, [pc, #768]	; (800ba5c <UART_SetConfig+0xc28>)
 800b75a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b75e:	b29b      	uxth	r3, r3
 800b760:	2200      	movs	r2, #0
 800b762:	603b      	str	r3, [r7, #0]
 800b764:	607a      	str	r2, [r7, #4]
 800b766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b76a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b76e:	f7f4 fdbf 	bl	80002f0 <__aeabi_uldivmod>
 800b772:	4602      	mov	r2, r0
 800b774:	460b      	mov	r3, r1
 800b776:	4610      	mov	r0, r2
 800b778:	4619      	mov	r1, r3
 800b77a:	f04f 0200 	mov.w	r2, #0
 800b77e:	f04f 0300 	mov.w	r3, #0
 800b782:	020b      	lsls	r3, r1, #8
 800b784:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b788:	0202      	lsls	r2, r0, #8
 800b78a:	6979      	ldr	r1, [r7, #20]
 800b78c:	6849      	ldr	r1, [r1, #4]
 800b78e:	0849      	lsrs	r1, r1, #1
 800b790:	2000      	movs	r0, #0
 800b792:	460c      	mov	r4, r1
 800b794:	4605      	mov	r5, r0
 800b796:	eb12 0804 	adds.w	r8, r2, r4
 800b79a:	eb43 0905 	adc.w	r9, r3, r5
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	469a      	mov	sl, r3
 800b7a6:	4693      	mov	fp, r2
 800b7a8:	4652      	mov	r2, sl
 800b7aa:	465b      	mov	r3, fp
 800b7ac:	4640      	mov	r0, r8
 800b7ae:	4649      	mov	r1, r9
 800b7b0:	f7f4 fd9e 	bl	80002f0 <__aeabi_uldivmod>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	4613      	mov	r3, r2
 800b7ba:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7c2:	d308      	bcc.n	800b7d6 <UART_SetConfig+0x9a2>
 800b7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7ca:	d204      	bcs.n	800b7d6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7d2:	60da      	str	r2, [r3, #12]
 800b7d4:	e17f      	b.n	800bad6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b7dc:	e17b      	b.n	800bad6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	69db      	ldr	r3, [r3, #28]
 800b7e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7e6:	f040 80bd 	bne.w	800b964 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b7ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b7ee:	2b20      	cmp	r3, #32
 800b7f0:	dc48      	bgt.n	800b884 <UART_SetConfig+0xa50>
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	db7b      	blt.n	800b8ee <UART_SetConfig+0xaba>
 800b7f6:	2b20      	cmp	r3, #32
 800b7f8:	d879      	bhi.n	800b8ee <UART_SetConfig+0xaba>
 800b7fa:	a201      	add	r2, pc, #4	; (adr r2, 800b800 <UART_SetConfig+0x9cc>)
 800b7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b800:	0800b88b 	.word	0x0800b88b
 800b804:	0800b893 	.word	0x0800b893
 800b808:	0800b8ef 	.word	0x0800b8ef
 800b80c:	0800b8ef 	.word	0x0800b8ef
 800b810:	0800b89b 	.word	0x0800b89b
 800b814:	0800b8ef 	.word	0x0800b8ef
 800b818:	0800b8ef 	.word	0x0800b8ef
 800b81c:	0800b8ef 	.word	0x0800b8ef
 800b820:	0800b8ab 	.word	0x0800b8ab
 800b824:	0800b8ef 	.word	0x0800b8ef
 800b828:	0800b8ef 	.word	0x0800b8ef
 800b82c:	0800b8ef 	.word	0x0800b8ef
 800b830:	0800b8ef 	.word	0x0800b8ef
 800b834:	0800b8ef 	.word	0x0800b8ef
 800b838:	0800b8ef 	.word	0x0800b8ef
 800b83c:	0800b8ef 	.word	0x0800b8ef
 800b840:	0800b8bb 	.word	0x0800b8bb
 800b844:	0800b8ef 	.word	0x0800b8ef
 800b848:	0800b8ef 	.word	0x0800b8ef
 800b84c:	0800b8ef 	.word	0x0800b8ef
 800b850:	0800b8ef 	.word	0x0800b8ef
 800b854:	0800b8ef 	.word	0x0800b8ef
 800b858:	0800b8ef 	.word	0x0800b8ef
 800b85c:	0800b8ef 	.word	0x0800b8ef
 800b860:	0800b8ef 	.word	0x0800b8ef
 800b864:	0800b8ef 	.word	0x0800b8ef
 800b868:	0800b8ef 	.word	0x0800b8ef
 800b86c:	0800b8ef 	.word	0x0800b8ef
 800b870:	0800b8ef 	.word	0x0800b8ef
 800b874:	0800b8ef 	.word	0x0800b8ef
 800b878:	0800b8ef 	.word	0x0800b8ef
 800b87c:	0800b8ef 	.word	0x0800b8ef
 800b880:	0800b8e1 	.word	0x0800b8e1
 800b884:	2b40      	cmp	r3, #64	; 0x40
 800b886:	d02e      	beq.n	800b8e6 <UART_SetConfig+0xab2>
 800b888:	e031      	b.n	800b8ee <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b88a:	f7fb fa83 	bl	8006d94 <HAL_RCC_GetPCLK1Freq>
 800b88e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b890:	e033      	b.n	800b8fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b892:	f7fb fa95 	bl	8006dc0 <HAL_RCC_GetPCLK2Freq>
 800b896:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b898:	e02f      	b.n	800b8fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b89a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7fd f992 	bl	8008bc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8a8:	e027      	b.n	800b8fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8aa:	f107 0318 	add.w	r3, r7, #24
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7fd fade 	bl	8008e70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b8b4:	69fb      	ldr	r3, [r7, #28]
 800b8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8b8:	e01f      	b.n	800b8fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8ba:	4b69      	ldr	r3, [pc, #420]	; (800ba60 <UART_SetConfig+0xc2c>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f003 0320 	and.w	r3, r3, #32
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d009      	beq.n	800b8da <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b8c6:	4b66      	ldr	r3, [pc, #408]	; (800ba60 <UART_SetConfig+0xc2c>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	08db      	lsrs	r3, r3, #3
 800b8cc:	f003 0303 	and.w	r3, r3, #3
 800b8d0:	4a64      	ldr	r2, [pc, #400]	; (800ba64 <UART_SetConfig+0xc30>)
 800b8d2:	fa22 f303 	lsr.w	r3, r2, r3
 800b8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b8d8:	e00f      	b.n	800b8fa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b8da:	4b62      	ldr	r3, [pc, #392]	; (800ba64 <UART_SetConfig+0xc30>)
 800b8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8de:	e00c      	b.n	800b8fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b8e0:	4b61      	ldr	r3, [pc, #388]	; (800ba68 <UART_SetConfig+0xc34>)
 800b8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8e4:	e009      	b.n	800b8fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8ec:	e005      	b.n	800b8fa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b8f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b8fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f000 80ea 	beq.w	800bad6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b906:	4a55      	ldr	r2, [pc, #340]	; (800ba5c <UART_SetConfig+0xc28>)
 800b908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b90c:	461a      	mov	r2, r3
 800b90e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b910:	fbb3 f3f2 	udiv	r3, r3, r2
 800b914:	005a      	lsls	r2, r3, #1
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	085b      	lsrs	r3, r3, #1
 800b91c:	441a      	add	r2, r3
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	fbb2 f3f3 	udiv	r3, r2, r3
 800b926:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92a:	2b0f      	cmp	r3, #15
 800b92c:	d916      	bls.n	800b95c <UART_SetConfig+0xb28>
 800b92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b934:	d212      	bcs.n	800b95c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b938:	b29b      	uxth	r3, r3
 800b93a:	f023 030f 	bic.w	r3, r3, #15
 800b93e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b942:	085b      	lsrs	r3, r3, #1
 800b944:	b29b      	uxth	r3, r3
 800b946:	f003 0307 	and.w	r3, r3, #7
 800b94a:	b29a      	uxth	r2, r3
 800b94c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b94e:	4313      	orrs	r3, r2
 800b950:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b958:	60da      	str	r2, [r3, #12]
 800b95a:	e0bc      	b.n	800bad6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b95c:	2301      	movs	r3, #1
 800b95e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b962:	e0b8      	b.n	800bad6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b964:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b968:	2b20      	cmp	r3, #32
 800b96a:	dc4b      	bgt.n	800ba04 <UART_SetConfig+0xbd0>
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f2c0 8087 	blt.w	800ba80 <UART_SetConfig+0xc4c>
 800b972:	2b20      	cmp	r3, #32
 800b974:	f200 8084 	bhi.w	800ba80 <UART_SetConfig+0xc4c>
 800b978:	a201      	add	r2, pc, #4	; (adr r2, 800b980 <UART_SetConfig+0xb4c>)
 800b97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b97e:	bf00      	nop
 800b980:	0800ba0b 	.word	0x0800ba0b
 800b984:	0800ba13 	.word	0x0800ba13
 800b988:	0800ba81 	.word	0x0800ba81
 800b98c:	0800ba81 	.word	0x0800ba81
 800b990:	0800ba1b 	.word	0x0800ba1b
 800b994:	0800ba81 	.word	0x0800ba81
 800b998:	0800ba81 	.word	0x0800ba81
 800b99c:	0800ba81 	.word	0x0800ba81
 800b9a0:	0800ba2b 	.word	0x0800ba2b
 800b9a4:	0800ba81 	.word	0x0800ba81
 800b9a8:	0800ba81 	.word	0x0800ba81
 800b9ac:	0800ba81 	.word	0x0800ba81
 800b9b0:	0800ba81 	.word	0x0800ba81
 800b9b4:	0800ba81 	.word	0x0800ba81
 800b9b8:	0800ba81 	.word	0x0800ba81
 800b9bc:	0800ba81 	.word	0x0800ba81
 800b9c0:	0800ba3b 	.word	0x0800ba3b
 800b9c4:	0800ba81 	.word	0x0800ba81
 800b9c8:	0800ba81 	.word	0x0800ba81
 800b9cc:	0800ba81 	.word	0x0800ba81
 800b9d0:	0800ba81 	.word	0x0800ba81
 800b9d4:	0800ba81 	.word	0x0800ba81
 800b9d8:	0800ba81 	.word	0x0800ba81
 800b9dc:	0800ba81 	.word	0x0800ba81
 800b9e0:	0800ba81 	.word	0x0800ba81
 800b9e4:	0800ba81 	.word	0x0800ba81
 800b9e8:	0800ba81 	.word	0x0800ba81
 800b9ec:	0800ba81 	.word	0x0800ba81
 800b9f0:	0800ba81 	.word	0x0800ba81
 800b9f4:	0800ba81 	.word	0x0800ba81
 800b9f8:	0800ba81 	.word	0x0800ba81
 800b9fc:	0800ba81 	.word	0x0800ba81
 800ba00:	0800ba73 	.word	0x0800ba73
 800ba04:	2b40      	cmp	r3, #64	; 0x40
 800ba06:	d037      	beq.n	800ba78 <UART_SetConfig+0xc44>
 800ba08:	e03a      	b.n	800ba80 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba0a:	f7fb f9c3 	bl	8006d94 <HAL_RCC_GetPCLK1Freq>
 800ba0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ba10:	e03c      	b.n	800ba8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba12:	f7fb f9d5 	bl	8006dc0 <HAL_RCC_GetPCLK2Freq>
 800ba16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ba18:	e038      	b.n	800ba8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7fd f8d2 	bl	8008bc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba28:	e030      	b.n	800ba8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba2a:	f107 0318 	add.w	r3, r7, #24
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7fd fa1e 	bl	8008e70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba34:	69fb      	ldr	r3, [r7, #28]
 800ba36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba38:	e028      	b.n	800ba8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba3a:	4b09      	ldr	r3, [pc, #36]	; (800ba60 <UART_SetConfig+0xc2c>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f003 0320 	and.w	r3, r3, #32
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d012      	beq.n	800ba6c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba46:	4b06      	ldr	r3, [pc, #24]	; (800ba60 <UART_SetConfig+0xc2c>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	08db      	lsrs	r3, r3, #3
 800ba4c:	f003 0303 	and.w	r3, r3, #3
 800ba50:	4a04      	ldr	r2, [pc, #16]	; (800ba64 <UART_SetConfig+0xc30>)
 800ba52:	fa22 f303 	lsr.w	r3, r2, r3
 800ba56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba58:	e018      	b.n	800ba8c <UART_SetConfig+0xc58>
 800ba5a:	bf00      	nop
 800ba5c:	08010d70 	.word	0x08010d70
 800ba60:	58024400 	.word	0x58024400
 800ba64:	03d09000 	.word	0x03d09000
 800ba68:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ba6c:	4b24      	ldr	r3, [pc, #144]	; (800bb00 <UART_SetConfig+0xccc>)
 800ba6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba70:	e00c      	b.n	800ba8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba72:	4b24      	ldr	r3, [pc, #144]	; (800bb04 <UART_SetConfig+0xcd0>)
 800ba74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba76:	e009      	b.n	800ba8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba7e:	e005      	b.n	800ba8c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ba80:	2300      	movs	r3, #0
 800ba82:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ba84:	2301      	movs	r3, #1
 800ba86:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ba8a:	bf00      	nop
    }

    if (pclk != 0U)
 800ba8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d021      	beq.n	800bad6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba96:	4a1c      	ldr	r2, [pc, #112]	; (800bb08 <UART_SetConfig+0xcd4>)
 800ba98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baa0:	fbb3 f2f2 	udiv	r2, r3, r2
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	085b      	lsrs	r3, r3, #1
 800baaa:	441a      	add	r2, r3
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bab4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab8:	2b0f      	cmp	r3, #15
 800baba:	d909      	bls.n	800bad0 <UART_SetConfig+0xc9c>
 800babc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800babe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bac2:	d205      	bcs.n	800bad0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	60da      	str	r2, [r3, #12]
 800bace:	e002      	b.n	800bad6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bad0:	2301      	movs	r3, #1
 800bad2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	2201      	movs	r2, #1
 800bada:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	2201      	movs	r2, #1
 800bae2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	2200      	movs	r2, #0
 800baea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	2200      	movs	r2, #0
 800baf0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800baf2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3748      	adds	r7, #72	; 0x48
 800bafa:	46bd      	mov	sp, r7
 800bafc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb00:	03d09000 	.word	0x03d09000
 800bb04:	003d0900 	.word	0x003d0900
 800bb08:	08010d70 	.word	0x08010d70

0800bb0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb18:	f003 0301 	and.w	r3, r3, #1
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00a      	beq.n	800bb36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	430a      	orrs	r2, r1
 800bb34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb3a:	f003 0302 	and.w	r3, r3, #2
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d00a      	beq.n	800bb58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	430a      	orrs	r2, r1
 800bb56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb5c:	f003 0304 	and.w	r3, r3, #4
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d00a      	beq.n	800bb7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	430a      	orrs	r2, r1
 800bb78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb7e:	f003 0308 	and.w	r3, r3, #8
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d00a      	beq.n	800bb9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	430a      	orrs	r2, r1
 800bb9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bba0:	f003 0310 	and.w	r3, r3, #16
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d00a      	beq.n	800bbbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	430a      	orrs	r2, r1
 800bbbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc2:	f003 0320 	and.w	r3, r3, #32
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d00a      	beq.n	800bbe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	430a      	orrs	r2, r1
 800bbde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d01a      	beq.n	800bc22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	430a      	orrs	r2, r1
 800bc00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc0a:	d10a      	bne.n	800bc22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	430a      	orrs	r2, r1
 800bc20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d00a      	beq.n	800bc44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	430a      	orrs	r2, r1
 800bc42:	605a      	str	r2, [r3, #4]
  }
}
 800bc44:	bf00      	nop
 800bc46:	370c      	adds	r7, #12
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr

0800bc50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b098      	sub	sp, #96	; 0x60
 800bc54:	af02      	add	r7, sp, #8
 800bc56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bc60:	f7f5 fde4 	bl	800182c <HAL_GetTick>
 800bc64:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f003 0308 	and.w	r3, r3, #8
 800bc70:	2b08      	cmp	r3, #8
 800bc72:	d12f      	bne.n	800bcd4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bc78:	9300      	str	r3, [sp, #0]
 800bc7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f000 f88e 	bl	800bda4 <UART_WaitOnFlagUntilTimeout>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d022      	beq.n	800bcd4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc96:	e853 3f00 	ldrex	r3, [r3]
 800bc9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bca2:	653b      	str	r3, [r7, #80]	; 0x50
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	461a      	mov	r2, r3
 800bcaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcac:	647b      	str	r3, [r7, #68]	; 0x44
 800bcae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bcb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcb4:	e841 2300 	strex	r3, r2, [r1]
 800bcb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bcba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d1e6      	bne.n	800bc8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2220      	movs	r2, #32
 800bcc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcd0:	2303      	movs	r3, #3
 800bcd2:	e063      	b.n	800bd9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f003 0304 	and.w	r3, r3, #4
 800bcde:	2b04      	cmp	r3, #4
 800bce0:	d149      	bne.n	800bd76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bce2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcea:	2200      	movs	r2, #0
 800bcec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 f857 	bl	800bda4 <UART_WaitOnFlagUntilTimeout>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d03c      	beq.n	800bd76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd04:	e853 3f00 	ldrex	r3, [r3]
 800bd08:	623b      	str	r3, [r7, #32]
   return(result);
 800bd0a:	6a3b      	ldr	r3, [r7, #32]
 800bd0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd10:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	461a      	mov	r2, r3
 800bd18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd1a:	633b      	str	r3, [r7, #48]	; 0x30
 800bd1c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd22:	e841 2300 	strex	r3, r2, [r1]
 800bd26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1e6      	bne.n	800bcfc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	3308      	adds	r3, #8
 800bd34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	e853 3f00 	ldrex	r3, [r3]
 800bd3c:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f023 0301 	bic.w	r3, r3, #1
 800bd44:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	3308      	adds	r3, #8
 800bd4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd4e:	61fa      	str	r2, [r7, #28]
 800bd50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd52:	69b9      	ldr	r1, [r7, #24]
 800bd54:	69fa      	ldr	r2, [r7, #28]
 800bd56:	e841 2300 	strex	r3, r2, [r1]
 800bd5a:	617b      	str	r3, [r7, #20]
   return(result);
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d1e5      	bne.n	800bd2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2220      	movs	r2, #32
 800bd66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd72:	2303      	movs	r3, #3
 800bd74:	e012      	b.n	800bd9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2220      	movs	r2, #32
 800bd7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2220      	movs	r2, #32
 800bd82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2200      	movs	r2, #0
 800bd96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3758      	adds	r7, #88	; 0x58
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	603b      	str	r3, [r7, #0]
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdb4:	e049      	b.n	800be4a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdbc:	d045      	beq.n	800be4a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bdbe:	f7f5 fd35 	bl	800182c <HAL_GetTick>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	1ad3      	subs	r3, r2, r3
 800bdc8:	69ba      	ldr	r2, [r7, #24]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d302      	bcc.n	800bdd4 <UART_WaitOnFlagUntilTimeout+0x30>
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d101      	bne.n	800bdd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bdd4:	2303      	movs	r3, #3
 800bdd6:	e048      	b.n	800be6a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f003 0304 	and.w	r3, r3, #4
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d031      	beq.n	800be4a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	69db      	ldr	r3, [r3, #28]
 800bdec:	f003 0308 	and.w	r3, r3, #8
 800bdf0:	2b08      	cmp	r3, #8
 800bdf2:	d110      	bne.n	800be16 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2208      	movs	r2, #8
 800bdfa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800bdfc:	68f8      	ldr	r0, [r7, #12]
 800bdfe:	f000 f879 	bl	800bef4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2208      	movs	r2, #8
 800be06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	2200      	movs	r2, #0
 800be0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800be12:	2301      	movs	r3, #1
 800be14:	e029      	b.n	800be6a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	69db      	ldr	r3, [r3, #28]
 800be1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be24:	d111      	bne.n	800be4a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	f000 f85f 	bl	800bef4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2220      	movs	r2, #32
 800be3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2200      	movs	r2, #0
 800be42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800be46:	2303      	movs	r3, #3
 800be48:	e00f      	b.n	800be6a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	69da      	ldr	r2, [r3, #28]
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	4013      	ands	r3, r2
 800be54:	68ba      	ldr	r2, [r7, #8]
 800be56:	429a      	cmp	r2, r3
 800be58:	bf0c      	ite	eq
 800be5a:	2301      	moveq	r3, #1
 800be5c:	2300      	movne	r3, #0
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	461a      	mov	r2, r3
 800be62:	79fb      	ldrb	r3, [r7, #7]
 800be64:	429a      	cmp	r2, r3
 800be66:	d0a6      	beq.n	800bdb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3710      	adds	r7, #16
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}

0800be72 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800be72:	b480      	push	{r7}
 800be74:	b08f      	sub	sp, #60	; 0x3c
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be80:	6a3b      	ldr	r3, [r7, #32]
 800be82:	e853 3f00 	ldrex	r3, [r3]
 800be86:	61fb      	str	r3, [r7, #28]
   return(result);
 800be88:	69fb      	ldr	r3, [r7, #28]
 800be8a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800be8e:	637b      	str	r3, [r7, #52]	; 0x34
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	461a      	mov	r2, r3
 800be96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be9a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bea0:	e841 2300 	strex	r3, r2, [r1]
 800bea4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d1e6      	bne.n	800be7a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	3308      	adds	r3, #8
 800beb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	e853 3f00 	ldrex	r3, [r3]
 800beba:	60bb      	str	r3, [r7, #8]
   return(result);
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bec2:	633b      	str	r3, [r7, #48]	; 0x30
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	3308      	adds	r3, #8
 800beca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800becc:	61ba      	str	r2, [r7, #24]
 800bece:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed0:	6979      	ldr	r1, [r7, #20]
 800bed2:	69ba      	ldr	r2, [r7, #24]
 800bed4:	e841 2300 	strex	r3, r2, [r1]
 800bed8:	613b      	str	r3, [r7, #16]
   return(result);
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d1e5      	bne.n	800beac <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2220      	movs	r2, #32
 800bee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800bee8:	bf00      	nop
 800beea:	373c      	adds	r7, #60	; 0x3c
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b095      	sub	sp, #84	; 0x54
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf04:	e853 3f00 	ldrex	r3, [r3]
 800bf08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf10:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	461a      	mov	r2, r3
 800bf18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf1a:	643b      	str	r3, [r7, #64]	; 0x40
 800bf1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf22:	e841 2300 	strex	r3, r2, [r1]
 800bf26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d1e6      	bne.n	800befc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	3308      	adds	r3, #8
 800bf34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf36:	6a3b      	ldr	r3, [r7, #32]
 800bf38:	e853 3f00 	ldrex	r3, [r3]
 800bf3c:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf3e:	69fa      	ldr	r2, [r7, #28]
 800bf40:	4b1e      	ldr	r3, [pc, #120]	; (800bfbc <UART_EndRxTransfer+0xc8>)
 800bf42:	4013      	ands	r3, r2
 800bf44:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	3308      	adds	r3, #8
 800bf4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf56:	e841 2300 	strex	r3, r2, [r1]
 800bf5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d1e5      	bne.n	800bf2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d118      	bne.n	800bf9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	e853 3f00 	ldrex	r3, [r3]
 800bf76:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	f023 0310 	bic.w	r3, r3, #16
 800bf7e:	647b      	str	r3, [r7, #68]	; 0x44
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	461a      	mov	r2, r3
 800bf86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf88:	61bb      	str	r3, [r7, #24]
 800bf8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf8c:	6979      	ldr	r1, [r7, #20]
 800bf8e:	69ba      	ldr	r2, [r7, #24]
 800bf90:	e841 2300 	strex	r3, r2, [r1]
 800bf94:	613b      	str	r3, [r7, #16]
   return(result);
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d1e6      	bne.n	800bf6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2220      	movs	r2, #32
 800bfa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bfb0:	bf00      	nop
 800bfb2:	3754      	adds	r7, #84	; 0x54
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr
 800bfbc:	effffffe 	.word	0xeffffffe

0800bfc0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b090      	sub	sp, #64	; 0x40
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfcc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	69db      	ldr	r3, [r3, #28]
 800bfd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfd6:	d037      	beq.n	800c048 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800bfd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bfe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	3308      	adds	r3, #8
 800bfe6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfea:	e853 3f00 	ldrex	r3, [r3]
 800bfee:	623b      	str	r3, [r7, #32]
   return(result);
 800bff0:	6a3b      	ldr	r3, [r7, #32]
 800bff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bff6:	63bb      	str	r3, [r7, #56]	; 0x38
 800bff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	3308      	adds	r3, #8
 800bffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c000:	633a      	str	r2, [r7, #48]	; 0x30
 800c002:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c004:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c008:	e841 2300 	strex	r3, r2, [r1]
 800c00c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c010:	2b00      	cmp	r3, #0
 800c012:	d1e5      	bne.n	800bfe0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	e853 3f00 	ldrex	r3, [r3]
 800c020:	60fb      	str	r3, [r7, #12]
   return(result);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c028:	637b      	str	r3, [r7, #52]	; 0x34
 800c02a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	461a      	mov	r2, r3
 800c030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c032:	61fb      	str	r3, [r7, #28]
 800c034:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c036:	69b9      	ldr	r1, [r7, #24]
 800c038:	69fa      	ldr	r2, [r7, #28]
 800c03a:	e841 2300 	strex	r3, r2, [r1]
 800c03e:	617b      	str	r3, [r7, #20]
   return(result);
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d1e6      	bne.n	800c014 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c046:	e002      	b.n	800c04e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800c048:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c04a:	f7fe fed5 	bl	800adf8 <HAL_UART_TxCpltCallback>
}
 800c04e:	bf00      	nop
 800c050:	3740      	adds	r7, #64	; 0x40
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b084      	sub	sp, #16
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c062:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c064:	68f8      	ldr	r0, [r7, #12]
 800c066:	f7fe fed1 	bl	800ae0c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c06a:	bf00      	nop
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}

0800c072 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c072:	b580      	push	{r7, lr}
 800c074:	b086      	sub	sp, #24
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c07e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c086:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c08e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	689b      	ldr	r3, [r3, #8]
 800c096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c09a:	2b80      	cmp	r3, #128	; 0x80
 800c09c:	d109      	bne.n	800c0b2 <UART_DMAError+0x40>
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	2b21      	cmp	r3, #33	; 0x21
 800c0a2:	d106      	bne.n	800c0b2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c0ac:	6978      	ldr	r0, [r7, #20]
 800c0ae:	f7ff fee0 	bl	800be72 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	689b      	ldr	r3, [r3, #8]
 800c0b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0bc:	2b40      	cmp	r3, #64	; 0x40
 800c0be:	d109      	bne.n	800c0d4 <UART_DMAError+0x62>
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2b22      	cmp	r3, #34	; 0x22
 800c0c4:	d106      	bne.n	800c0d4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c0ce:	6978      	ldr	r0, [r7, #20]
 800c0d0:	f7ff ff10 	bl	800bef4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0da:	f043 0210 	orr.w	r2, r3, #16
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c0e4:	6978      	ldr	r0, [r7, #20]
 800c0e6:	f7fe fe9b 	bl	800ae20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0ea:	bf00      	nop
 800c0ec:	3718      	adds	r7, #24
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}

0800c0f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c0f2:	b480      	push	{r7}
 800c0f4:	b085      	sub	sp, #20
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c100:	2b01      	cmp	r3, #1
 800c102:	d101      	bne.n	800c108 <HAL_UARTEx_DisableFifoMode+0x16>
 800c104:	2302      	movs	r3, #2
 800c106:	e027      	b.n	800c158 <HAL_UARTEx_DisableFifoMode+0x66>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2201      	movs	r2, #1
 800c10c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2224      	movs	r2, #36	; 0x24
 800c114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f022 0201 	bic.w	r2, r2, #1
 800c12e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c136:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	68fa      	ldr	r2, [r7, #12]
 800c144:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2220      	movs	r2, #32
 800c14a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c156:	2300      	movs	r3, #0
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3714      	adds	r7, #20
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr

0800c164 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c174:	2b01      	cmp	r3, #1
 800c176:	d101      	bne.n	800c17c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c178:	2302      	movs	r3, #2
 800c17a:	e02d      	b.n	800c1d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2201      	movs	r2, #1
 800c180:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2224      	movs	r2, #36	; 0x24
 800c188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f022 0201 	bic.w	r2, r2, #1
 800c1a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	689b      	ldr	r3, [r3, #8]
 800c1aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	683a      	ldr	r2, [r7, #0]
 800c1b4:	430a      	orrs	r2, r1
 800c1b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 f84f 	bl	800c25c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	68fa      	ldr	r2, [r7, #12]
 800c1c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2220      	movs	r2, #32
 800c1ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c1d6:	2300      	movs	r3, #0
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3710      	adds	r7, #16
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d101      	bne.n	800c1f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c1f4:	2302      	movs	r3, #2
 800c1f6:	e02d      	b.n	800c254 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2224      	movs	r2, #36	; 0x24
 800c204:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f022 0201 	bic.w	r2, r2, #1
 800c21e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	689b      	ldr	r3, [r3, #8]
 800c226:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	683a      	ldr	r2, [r7, #0]
 800c230:	430a      	orrs	r2, r1
 800c232:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 f811 	bl	800c25c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	68fa      	ldr	r2, [r7, #12]
 800c240:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2220      	movs	r2, #32
 800c246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2200      	movs	r2, #0
 800c24e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c252:	2300      	movs	r3, #0
}
 800c254:	4618      	mov	r0, r3
 800c256:	3710      	adds	r7, #16
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b085      	sub	sp, #20
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d108      	bne.n	800c27e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2201      	movs	r2, #1
 800c270:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2201      	movs	r2, #1
 800c278:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c27c:	e031      	b.n	800c2e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c27e:	2310      	movs	r3, #16
 800c280:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c282:	2310      	movs	r3, #16
 800c284:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	689b      	ldr	r3, [r3, #8]
 800c28c:	0e5b      	lsrs	r3, r3, #25
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	f003 0307 	and.w	r3, r3, #7
 800c294:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	0f5b      	lsrs	r3, r3, #29
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	f003 0307 	and.w	r3, r3, #7
 800c2a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c2a6:	7bbb      	ldrb	r3, [r7, #14]
 800c2a8:	7b3a      	ldrb	r2, [r7, #12]
 800c2aa:	4911      	ldr	r1, [pc, #68]	; (800c2f0 <UARTEx_SetNbDataToProcess+0x94>)
 800c2ac:	5c8a      	ldrb	r2, [r1, r2]
 800c2ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c2b2:	7b3a      	ldrb	r2, [r7, #12]
 800c2b4:	490f      	ldr	r1, [pc, #60]	; (800c2f4 <UARTEx_SetNbDataToProcess+0x98>)
 800c2b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c2b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2bc:	b29a      	uxth	r2, r3
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c2c4:	7bfb      	ldrb	r3, [r7, #15]
 800c2c6:	7b7a      	ldrb	r2, [r7, #13]
 800c2c8:	4909      	ldr	r1, [pc, #36]	; (800c2f0 <UARTEx_SetNbDataToProcess+0x94>)
 800c2ca:	5c8a      	ldrb	r2, [r1, r2]
 800c2cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c2d0:	7b7a      	ldrb	r2, [r7, #13]
 800c2d2:	4908      	ldr	r1, [pc, #32]	; (800c2f4 <UARTEx_SetNbDataToProcess+0x98>)
 800c2d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c2d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2da:	b29a      	uxth	r2, r3
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c2e2:	bf00      	nop
 800c2e4:	3714      	adds	r7, #20
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr
 800c2ee:	bf00      	nop
 800c2f0:	08010d88 	.word	0x08010d88
 800c2f4:	08010d90 	.word	0x08010d90

0800c2f8 <__NVIC_SetPriority>:
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b083      	sub	sp, #12
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	4603      	mov	r3, r0
 800c300:	6039      	str	r1, [r7, #0]
 800c302:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c304:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	db0a      	blt.n	800c322 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	b2da      	uxtb	r2, r3
 800c310:	490c      	ldr	r1, [pc, #48]	; (800c344 <__NVIC_SetPriority+0x4c>)
 800c312:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c316:	0112      	lsls	r2, r2, #4
 800c318:	b2d2      	uxtb	r2, r2
 800c31a:	440b      	add	r3, r1
 800c31c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c320:	e00a      	b.n	800c338 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	b2da      	uxtb	r2, r3
 800c326:	4908      	ldr	r1, [pc, #32]	; (800c348 <__NVIC_SetPriority+0x50>)
 800c328:	88fb      	ldrh	r3, [r7, #6]
 800c32a:	f003 030f 	and.w	r3, r3, #15
 800c32e:	3b04      	subs	r3, #4
 800c330:	0112      	lsls	r2, r2, #4
 800c332:	b2d2      	uxtb	r2, r2
 800c334:	440b      	add	r3, r1
 800c336:	761a      	strb	r2, [r3, #24]
}
 800c338:	bf00      	nop
 800c33a:	370c      	adds	r7, #12
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr
 800c344:	e000e100 	.word	0xe000e100
 800c348:	e000ed00 	.word	0xe000ed00

0800c34c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c34c:	b580      	push	{r7, lr}
 800c34e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c350:	4b05      	ldr	r3, [pc, #20]	; (800c368 <SysTick_Handler+0x1c>)
 800c352:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c354:	f002 f93e 	bl	800e5d4 <xTaskGetSchedulerState>
 800c358:	4603      	mov	r3, r0
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d001      	beq.n	800c362 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c35e:	f003 f823 	bl	800f3a8 <xPortSysTickHandler>
  }
}
 800c362:	bf00      	nop
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	e000e010 	.word	0xe000e010

0800c36c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c36c:	b580      	push	{r7, lr}
 800c36e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c370:	2100      	movs	r1, #0
 800c372:	f06f 0004 	mvn.w	r0, #4
 800c376:	f7ff ffbf 	bl	800c2f8 <__NVIC_SetPriority>
#endif
}
 800c37a:	bf00      	nop
 800c37c:	bd80      	pop	{r7, pc}
	...

0800c380 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c386:	f3ef 8305 	mrs	r3, IPSR
 800c38a:	603b      	str	r3, [r7, #0]
  return(result);
 800c38c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d003      	beq.n	800c39a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c392:	f06f 0305 	mvn.w	r3, #5
 800c396:	607b      	str	r3, [r7, #4]
 800c398:	e00c      	b.n	800c3b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c39a:	4b0a      	ldr	r3, [pc, #40]	; (800c3c4 <osKernelInitialize+0x44>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d105      	bne.n	800c3ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c3a2:	4b08      	ldr	r3, [pc, #32]	; (800c3c4 <osKernelInitialize+0x44>)
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	607b      	str	r3, [r7, #4]
 800c3ac:	e002      	b.n	800c3b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c3ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c3b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c3b4:	687b      	ldr	r3, [r7, #4]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	370c      	adds	r7, #12
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop
 800c3c4:	2404a36c 	.word	0x2404a36c

0800c3c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3ce:	f3ef 8305 	mrs	r3, IPSR
 800c3d2:	603b      	str	r3, [r7, #0]
  return(result);
 800c3d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d003      	beq.n	800c3e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c3da:	f06f 0305 	mvn.w	r3, #5
 800c3de:	607b      	str	r3, [r7, #4]
 800c3e0:	e010      	b.n	800c404 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c3e2:	4b0b      	ldr	r3, [pc, #44]	; (800c410 <osKernelStart+0x48>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	d109      	bne.n	800c3fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c3ea:	f7ff ffbf 	bl	800c36c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c3ee:	4b08      	ldr	r3, [pc, #32]	; (800c410 <osKernelStart+0x48>)
 800c3f0:	2202      	movs	r2, #2
 800c3f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c3f4:	f001 fca6 	bl	800dd44 <vTaskStartScheduler>
      stat = osOK;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	607b      	str	r3, [r7, #4]
 800c3fc:	e002      	b.n	800c404 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c3fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c402:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c404:	687b      	ldr	r3, [r7, #4]
}
 800c406:	4618      	mov	r0, r3
 800c408:	3708      	adds	r7, #8
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	2404a36c 	.word	0x2404a36c

0800c414 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c414:	b580      	push	{r7, lr}
 800c416:	b08e      	sub	sp, #56	; 0x38
 800c418:	af04      	add	r7, sp, #16
 800c41a:	60f8      	str	r0, [r7, #12]
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c420:	2300      	movs	r3, #0
 800c422:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c424:	f3ef 8305 	mrs	r3, IPSR
 800c428:	617b      	str	r3, [r7, #20]
  return(result);
 800c42a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d17e      	bne.n	800c52e <osThreadNew+0x11a>
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d07b      	beq.n	800c52e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c436:	2380      	movs	r3, #128	; 0x80
 800c438:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c43a:	2318      	movs	r3, #24
 800c43c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c43e:	2300      	movs	r3, #0
 800c440:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c442:	f04f 33ff 	mov.w	r3, #4294967295
 800c446:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d045      	beq.n	800c4da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d002      	beq.n	800c45c <osThreadNew+0x48>
        name = attr->name;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	699b      	ldr	r3, [r3, #24]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d002      	beq.n	800c46a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	699b      	ldr	r3, [r3, #24]
 800c468:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c46a:	69fb      	ldr	r3, [r7, #28]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d008      	beq.n	800c482 <osThreadNew+0x6e>
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	2b38      	cmp	r3, #56	; 0x38
 800c474:	d805      	bhi.n	800c482 <osThreadNew+0x6e>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	f003 0301 	and.w	r3, r3, #1
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d001      	beq.n	800c486 <osThreadNew+0x72>
        return (NULL);
 800c482:	2300      	movs	r3, #0
 800c484:	e054      	b.n	800c530 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	695b      	ldr	r3, [r3, #20]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d003      	beq.n	800c496 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	695b      	ldr	r3, [r3, #20]
 800c492:	089b      	lsrs	r3, r3, #2
 800c494:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	689b      	ldr	r3, [r3, #8]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00e      	beq.n	800c4bc <osThreadNew+0xa8>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	68db      	ldr	r3, [r3, #12]
 800c4a2:	2b5b      	cmp	r3, #91	; 0x5b
 800c4a4:	d90a      	bls.n	800c4bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d006      	beq.n	800c4bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	695b      	ldr	r3, [r3, #20]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d002      	beq.n	800c4bc <osThreadNew+0xa8>
        mem = 1;
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	61bb      	str	r3, [r7, #24]
 800c4ba:	e010      	b.n	800c4de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d10c      	bne.n	800c4de <osThreadNew+0xca>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	68db      	ldr	r3, [r3, #12]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d108      	bne.n	800c4de <osThreadNew+0xca>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	691b      	ldr	r3, [r3, #16]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d104      	bne.n	800c4de <osThreadNew+0xca>
          mem = 0;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	61bb      	str	r3, [r7, #24]
 800c4d8:	e001      	b.n	800c4de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c4de:	69bb      	ldr	r3, [r7, #24]
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d110      	bne.n	800c506 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c4ec:	9202      	str	r2, [sp, #8]
 800c4ee:	9301      	str	r3, [sp, #4]
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	9300      	str	r3, [sp, #0]
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	6a3a      	ldr	r2, [r7, #32]
 800c4f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c4fa:	68f8      	ldr	r0, [r7, #12]
 800c4fc:	f001 fa4c 	bl	800d998 <xTaskCreateStatic>
 800c500:	4603      	mov	r3, r0
 800c502:	613b      	str	r3, [r7, #16]
 800c504:	e013      	b.n	800c52e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d110      	bne.n	800c52e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c50c:	6a3b      	ldr	r3, [r7, #32]
 800c50e:	b29a      	uxth	r2, r3
 800c510:	f107 0310 	add.w	r3, r7, #16
 800c514:	9301      	str	r3, [sp, #4]
 800c516:	69fb      	ldr	r3, [r7, #28]
 800c518:	9300      	str	r3, [sp, #0]
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c51e:	68f8      	ldr	r0, [r7, #12]
 800c520:	f001 fa97 	bl	800da52 <xTaskCreate>
 800c524:	4603      	mov	r3, r0
 800c526:	2b01      	cmp	r3, #1
 800c528:	d001      	beq.n	800c52e <osThreadNew+0x11a>
            hTask = NULL;
 800c52a:	2300      	movs	r3, #0
 800c52c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c52e:	693b      	ldr	r3, [r7, #16]
}
 800c530:	4618      	mov	r0, r3
 800c532:	3728      	adds	r7, #40	; 0x28
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c540:	f3ef 8305 	mrs	r3, IPSR
 800c544:	60bb      	str	r3, [r7, #8]
  return(result);
 800c546:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d003      	beq.n	800c554 <osDelay+0x1c>
    stat = osErrorISR;
 800c54c:	f06f 0305 	mvn.w	r3, #5
 800c550:	60fb      	str	r3, [r7, #12]
 800c552:	e007      	b.n	800c564 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c554:	2300      	movs	r3, #0
 800c556:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d002      	beq.n	800c564 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f001 fbbc 	bl	800dcdc <vTaskDelay>
    }
  }

  return (stat);
 800c564:	68fb      	ldr	r3, [r7, #12]
}
 800c566:	4618      	mov	r0, r3
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c56e:	b580      	push	{r7, lr}
 800c570:	b08a      	sub	sp, #40	; 0x28
 800c572:	af02      	add	r7, sp, #8
 800c574:	60f8      	str	r0, [r7, #12]
 800c576:	60b9      	str	r1, [r7, #8]
 800c578:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c57a:	2300      	movs	r3, #0
 800c57c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c57e:	f3ef 8305 	mrs	r3, IPSR
 800c582:	613b      	str	r3, [r7, #16]
  return(result);
 800c584:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c586:	2b00      	cmp	r3, #0
 800c588:	d175      	bne.n	800c676 <osSemaphoreNew+0x108>
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d072      	beq.n	800c676 <osSemaphoreNew+0x108>
 800c590:	68ba      	ldr	r2, [r7, #8]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	429a      	cmp	r2, r3
 800c596:	d86e      	bhi.n	800c676 <osSemaphoreNew+0x108>
    mem = -1;
 800c598:	f04f 33ff 	mov.w	r3, #4294967295
 800c59c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d015      	beq.n	800c5d0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d006      	beq.n	800c5ba <osSemaphoreNew+0x4c>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	2b4f      	cmp	r3, #79	; 0x4f
 800c5b2:	d902      	bls.n	800c5ba <osSemaphoreNew+0x4c>
        mem = 1;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	61bb      	str	r3, [r7, #24]
 800c5b8:	e00c      	b.n	800c5d4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	689b      	ldr	r3, [r3, #8]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d108      	bne.n	800c5d4 <osSemaphoreNew+0x66>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	68db      	ldr	r3, [r3, #12]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d104      	bne.n	800c5d4 <osSemaphoreNew+0x66>
          mem = 0;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	61bb      	str	r3, [r7, #24]
 800c5ce:	e001      	b.n	800c5d4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c5d4:	69bb      	ldr	r3, [r7, #24]
 800c5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5da:	d04c      	beq.n	800c676 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d128      	bne.n	800c634 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c5e2:	69bb      	ldr	r3, [r7, #24]
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d10a      	bne.n	800c5fe <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	689b      	ldr	r3, [r3, #8]
 800c5ec:	2203      	movs	r2, #3
 800c5ee:	9200      	str	r2, [sp, #0]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	2100      	movs	r1, #0
 800c5f4:	2001      	movs	r0, #1
 800c5f6:	f000 fa29 	bl	800ca4c <xQueueGenericCreateStatic>
 800c5fa:	61f8      	str	r0, [r7, #28]
 800c5fc:	e005      	b.n	800c60a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c5fe:	2203      	movs	r2, #3
 800c600:	2100      	movs	r1, #0
 800c602:	2001      	movs	r0, #1
 800c604:	f000 fa9a 	bl	800cb3c <xQueueGenericCreate>
 800c608:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c60a:	69fb      	ldr	r3, [r7, #28]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d022      	beq.n	800c656 <osSemaphoreNew+0xe8>
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d01f      	beq.n	800c656 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c616:	2300      	movs	r3, #0
 800c618:	2200      	movs	r2, #0
 800c61a:	2100      	movs	r1, #0
 800c61c:	69f8      	ldr	r0, [r7, #28]
 800c61e:	f000 fb55 	bl	800cccc <xQueueGenericSend>
 800c622:	4603      	mov	r3, r0
 800c624:	2b01      	cmp	r3, #1
 800c626:	d016      	beq.n	800c656 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c628:	69f8      	ldr	r0, [r7, #28]
 800c62a:	f000 ffe1 	bl	800d5f0 <vQueueDelete>
            hSemaphore = NULL;
 800c62e:	2300      	movs	r3, #0
 800c630:	61fb      	str	r3, [r7, #28]
 800c632:	e010      	b.n	800c656 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c634:	69bb      	ldr	r3, [r7, #24]
 800c636:	2b01      	cmp	r3, #1
 800c638:	d108      	bne.n	800c64c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	461a      	mov	r2, r3
 800c640:	68b9      	ldr	r1, [r7, #8]
 800c642:	68f8      	ldr	r0, [r7, #12]
 800c644:	f000 fad7 	bl	800cbf6 <xQueueCreateCountingSemaphoreStatic>
 800c648:	61f8      	str	r0, [r7, #28]
 800c64a:	e004      	b.n	800c656 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c64c:	68b9      	ldr	r1, [r7, #8]
 800c64e:	68f8      	ldr	r0, [r7, #12]
 800c650:	f000 fb08 	bl	800cc64 <xQueueCreateCountingSemaphore>
 800c654:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d00c      	beq.n	800c676 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d003      	beq.n	800c66a <osSemaphoreNew+0xfc>
          name = attr->name;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	617b      	str	r3, [r7, #20]
 800c668:	e001      	b.n	800c66e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c66a:	2300      	movs	r3, #0
 800c66c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c66e:	6979      	ldr	r1, [r7, #20]
 800c670:	69f8      	ldr	r0, [r7, #28]
 800c672:	f001 f909 	bl	800d888 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c676:	69fb      	ldr	r3, [r7, #28]
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3720      	adds	r7, #32
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c680:	b580      	push	{r7, lr}
 800c682:	b086      	sub	sp, #24
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c68e:	2300      	movs	r3, #0
 800c690:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d103      	bne.n	800c6a0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c698:	f06f 0303 	mvn.w	r3, #3
 800c69c:	617b      	str	r3, [r7, #20]
 800c69e:	e039      	b.n	800c714 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6a0:	f3ef 8305 	mrs	r3, IPSR
 800c6a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c6a6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d022      	beq.n	800c6f2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d003      	beq.n	800c6ba <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c6b2:	f06f 0303 	mvn.w	r3, #3
 800c6b6:	617b      	str	r3, [r7, #20]
 800c6b8:	e02c      	b.n	800c714 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c6be:	f107 0308 	add.w	r3, r7, #8
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	2100      	movs	r1, #0
 800c6c6:	6938      	ldr	r0, [r7, #16]
 800c6c8:	f000 ff12 	bl	800d4f0 <xQueueReceiveFromISR>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d003      	beq.n	800c6da <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c6d2:	f06f 0302 	mvn.w	r3, #2
 800c6d6:	617b      	str	r3, [r7, #20]
 800c6d8:	e01c      	b.n	800c714 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d019      	beq.n	800c714 <osSemaphoreAcquire+0x94>
 800c6e0:	4b0f      	ldr	r3, [pc, #60]	; (800c720 <osSemaphoreAcquire+0xa0>)
 800c6e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6e6:	601a      	str	r2, [r3, #0]
 800c6e8:	f3bf 8f4f 	dsb	sy
 800c6ec:	f3bf 8f6f 	isb	sy
 800c6f0:	e010      	b.n	800c714 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c6f2:	6839      	ldr	r1, [r7, #0]
 800c6f4:	6938      	ldr	r0, [r7, #16]
 800c6f6:	f000 fdef 	bl	800d2d8 <xQueueSemaphoreTake>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d009      	beq.n	800c714 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d003      	beq.n	800c70e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c706:	f06f 0301 	mvn.w	r3, #1
 800c70a:	617b      	str	r3, [r7, #20]
 800c70c:	e002      	b.n	800c714 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c70e:	f06f 0302 	mvn.w	r3, #2
 800c712:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c714:	697b      	ldr	r3, [r7, #20]
}
 800c716:	4618      	mov	r0, r3
 800c718:	3718      	adds	r7, #24
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	e000ed04 	.word	0xe000ed04

0800c724 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c724:	b580      	push	{r7, lr}
 800c726:	b086      	sub	sp, #24
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c730:	2300      	movs	r3, #0
 800c732:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d103      	bne.n	800c742 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c73a:	f06f 0303 	mvn.w	r3, #3
 800c73e:	617b      	str	r3, [r7, #20]
 800c740:	e02c      	b.n	800c79c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c742:	f3ef 8305 	mrs	r3, IPSR
 800c746:	60fb      	str	r3, [r7, #12]
  return(result);
 800c748:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d01a      	beq.n	800c784 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c74e:	2300      	movs	r3, #0
 800c750:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c752:	f107 0308 	add.w	r3, r7, #8
 800c756:	4619      	mov	r1, r3
 800c758:	6938      	ldr	r0, [r7, #16]
 800c75a:	f000 fc50 	bl	800cffe <xQueueGiveFromISR>
 800c75e:	4603      	mov	r3, r0
 800c760:	2b01      	cmp	r3, #1
 800c762:	d003      	beq.n	800c76c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c764:	f06f 0302 	mvn.w	r3, #2
 800c768:	617b      	str	r3, [r7, #20]
 800c76a:	e017      	b.n	800c79c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d014      	beq.n	800c79c <osSemaphoreRelease+0x78>
 800c772:	4b0d      	ldr	r3, [pc, #52]	; (800c7a8 <osSemaphoreRelease+0x84>)
 800c774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c778:	601a      	str	r2, [r3, #0]
 800c77a:	f3bf 8f4f 	dsb	sy
 800c77e:	f3bf 8f6f 	isb	sy
 800c782:	e00b      	b.n	800c79c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c784:	2300      	movs	r3, #0
 800c786:	2200      	movs	r2, #0
 800c788:	2100      	movs	r1, #0
 800c78a:	6938      	ldr	r0, [r7, #16]
 800c78c:	f000 fa9e 	bl	800cccc <xQueueGenericSend>
 800c790:	4603      	mov	r3, r0
 800c792:	2b01      	cmp	r3, #1
 800c794:	d002      	beq.n	800c79c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c796:	f06f 0302 	mvn.w	r3, #2
 800c79a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c79c:	697b      	ldr	r3, [r7, #20]
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3718      	adds	r7, #24
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	e000ed04 	.word	0xe000ed04

0800c7ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c7ac:	b480      	push	{r7}
 800c7ae:	b085      	sub	sp, #20
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	4a07      	ldr	r2, [pc, #28]	; (800c7d8 <vApplicationGetIdleTaskMemory+0x2c>)
 800c7bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	4a06      	ldr	r2, [pc, #24]	; (800c7dc <vApplicationGetIdleTaskMemory+0x30>)
 800c7c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2280      	movs	r2, #128	; 0x80
 800c7c8:	601a      	str	r2, [r3, #0]
}
 800c7ca:	bf00      	nop
 800c7cc:	3714      	adds	r7, #20
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr
 800c7d6:	bf00      	nop
 800c7d8:	2404a370 	.word	0x2404a370
 800c7dc:	2404a3cc 	.word	0x2404a3cc

0800c7e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c7e0:	b480      	push	{r7}
 800c7e2:	b085      	sub	sp, #20
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	4a07      	ldr	r2, [pc, #28]	; (800c80c <vApplicationGetTimerTaskMemory+0x2c>)
 800c7f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	4a06      	ldr	r2, [pc, #24]	; (800c810 <vApplicationGetTimerTaskMemory+0x30>)
 800c7f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c7fe:	601a      	str	r2, [r3, #0]
}
 800c800:	bf00      	nop
 800c802:	3714      	adds	r7, #20
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr
 800c80c:	2404a5cc 	.word	0x2404a5cc
 800c810:	2404a628 	.word	0x2404a628

0800c814 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f103 0208 	add.w	r2, r3, #8
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f04f 32ff 	mov.w	r2, #4294967295
 800c82c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f103 0208 	add.w	r2, r3, #8
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f103 0208 	add.w	r2, r3, #8
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c848:	bf00      	nop
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2200      	movs	r2, #0
 800c860:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c862:	bf00      	nop
 800c864:	370c      	adds	r7, #12
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr

0800c86e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c86e:	b480      	push	{r7}
 800c870:	b085      	sub	sp, #20
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	685b      	ldr	r3, [r3, #4]
 800c87c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	68fa      	ldr	r2, [r7, #12]
 800c882:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	689a      	ldr	r2, [r3, #8]
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	689b      	ldr	r3, [r3, #8]
 800c890:	683a      	ldr	r2, [r7, #0]
 800c892:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	683a      	ldr	r2, [r7, #0]
 800c898:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	1c5a      	adds	r2, r3, #1
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	601a      	str	r2, [r3, #0]
}
 800c8aa:	bf00      	nop
 800c8ac:	3714      	adds	r7, #20
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b4:	4770      	bx	lr

0800c8b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c8b6:	b480      	push	{r7}
 800c8b8:	b085      	sub	sp, #20
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
 800c8be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8cc:	d103      	bne.n	800c8d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	691b      	ldr	r3, [r3, #16]
 800c8d2:	60fb      	str	r3, [r7, #12]
 800c8d4:	e00c      	b.n	800c8f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	3308      	adds	r3, #8
 800c8da:	60fb      	str	r3, [r7, #12]
 800c8dc:	e002      	b.n	800c8e4 <vListInsert+0x2e>
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	60fb      	str	r3, [r7, #12]
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	68ba      	ldr	r2, [r7, #8]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d2f6      	bcs.n	800c8de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	685a      	ldr	r2, [r3, #4]
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	683a      	ldr	r2, [r7, #0]
 800c8fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	68fa      	ldr	r2, [r7, #12]
 800c904:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	683a      	ldr	r2, [r7, #0]
 800c90a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	1c5a      	adds	r2, r3, #1
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	601a      	str	r2, [r3, #0]
}
 800c91c:	bf00      	nop
 800c91e:	3714      	adds	r7, #20
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c928:	b480      	push	{r7}
 800c92a:	b085      	sub	sp, #20
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	691b      	ldr	r3, [r3, #16]
 800c934:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	6892      	ldr	r2, [r2, #8]
 800c93e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	689b      	ldr	r3, [r3, #8]
 800c944:	687a      	ldr	r2, [r7, #4]
 800c946:	6852      	ldr	r2, [r2, #4]
 800c948:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	429a      	cmp	r2, r3
 800c952:	d103      	bne.n	800c95c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	689a      	ldr	r2, [r3, #8]
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	1e5a      	subs	r2, r3, #1
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
}
 800c970:	4618      	mov	r0, r3
 800c972:	3714      	adds	r7, #20
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d10a      	bne.n	800c9a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c994:	f383 8811 	msr	BASEPRI, r3
 800c998:	f3bf 8f6f 	isb	sy
 800c99c:	f3bf 8f4f 	dsb	sy
 800c9a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c9a2:	bf00      	nop
 800c9a4:	e7fe      	b.n	800c9a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c9a6:	f002 fc6d 	bl	800f284 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9b2:	68f9      	ldr	r1, [r7, #12]
 800c9b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c9b6:	fb01 f303 	mul.w	r3, r1, r3
 800c9ba:	441a      	add	r2, r3
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9d6:	3b01      	subs	r3, #1
 800c9d8:	68f9      	ldr	r1, [r7, #12]
 800c9da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c9dc:	fb01 f303 	mul.w	r3, r1, r3
 800c9e0:	441a      	add	r2, r3
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	22ff      	movs	r2, #255	; 0xff
 800c9ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	22ff      	movs	r2, #255	; 0xff
 800c9f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d114      	bne.n	800ca26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	691b      	ldr	r3, [r3, #16]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d01a      	beq.n	800ca3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	3310      	adds	r3, #16
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f001 fc25 	bl	800e258 <xTaskRemoveFromEventList>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d012      	beq.n	800ca3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ca14:	4b0c      	ldr	r3, [pc, #48]	; (800ca48 <xQueueGenericReset+0xcc>)
 800ca16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca1a:	601a      	str	r2, [r3, #0]
 800ca1c:	f3bf 8f4f 	dsb	sy
 800ca20:	f3bf 8f6f 	isb	sy
 800ca24:	e009      	b.n	800ca3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	3310      	adds	r3, #16
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7ff fef2 	bl	800c814 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	3324      	adds	r3, #36	; 0x24
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7ff feed 	bl	800c814 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ca3a:	f002 fc53 	bl	800f2e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ca3e:	2301      	movs	r3, #1
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3710      	adds	r7, #16
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	e000ed04 	.word	0xe000ed04

0800ca4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b08e      	sub	sp, #56	; 0x38
 800ca50:	af02      	add	r7, sp, #8
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	607a      	str	r2, [r7, #4]
 800ca58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d10a      	bne.n	800ca76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ca60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca64:	f383 8811 	msr	BASEPRI, r3
 800ca68:	f3bf 8f6f 	isb	sy
 800ca6c:	f3bf 8f4f 	dsb	sy
 800ca70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ca72:	bf00      	nop
 800ca74:	e7fe      	b.n	800ca74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d10a      	bne.n	800ca92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ca7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca80:	f383 8811 	msr	BASEPRI, r3
 800ca84:	f3bf 8f6f 	isb	sy
 800ca88:	f3bf 8f4f 	dsb	sy
 800ca8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca8e:	bf00      	nop
 800ca90:	e7fe      	b.n	800ca90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d002      	beq.n	800ca9e <xQueueGenericCreateStatic+0x52>
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d001      	beq.n	800caa2 <xQueueGenericCreateStatic+0x56>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	e000      	b.n	800caa4 <xQueueGenericCreateStatic+0x58>
 800caa2:	2300      	movs	r3, #0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d10a      	bne.n	800cabe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800caa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caac:	f383 8811 	msr	BASEPRI, r3
 800cab0:	f3bf 8f6f 	isb	sy
 800cab4:	f3bf 8f4f 	dsb	sy
 800cab8:	623b      	str	r3, [r7, #32]
}
 800caba:	bf00      	nop
 800cabc:	e7fe      	b.n	800cabc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d102      	bne.n	800caca <xQueueGenericCreateStatic+0x7e>
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d101      	bne.n	800cace <xQueueGenericCreateStatic+0x82>
 800caca:	2301      	movs	r3, #1
 800cacc:	e000      	b.n	800cad0 <xQueueGenericCreateStatic+0x84>
 800cace:	2300      	movs	r3, #0
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d10a      	bne.n	800caea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad8:	f383 8811 	msr	BASEPRI, r3
 800cadc:	f3bf 8f6f 	isb	sy
 800cae0:	f3bf 8f4f 	dsb	sy
 800cae4:	61fb      	str	r3, [r7, #28]
}
 800cae6:	bf00      	nop
 800cae8:	e7fe      	b.n	800cae8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800caea:	2350      	movs	r3, #80	; 0x50
 800caec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	2b50      	cmp	r3, #80	; 0x50
 800caf2:	d00a      	beq.n	800cb0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800caf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf8:	f383 8811 	msr	BASEPRI, r3
 800cafc:	f3bf 8f6f 	isb	sy
 800cb00:	f3bf 8f4f 	dsb	sy
 800cb04:	61bb      	str	r3, [r7, #24]
}
 800cb06:	bf00      	nop
 800cb08:	e7fe      	b.n	800cb08 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cb0a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d00d      	beq.n	800cb32 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb18:	2201      	movs	r2, #1
 800cb1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cb1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb24:	9300      	str	r3, [sp, #0]
 800cb26:	4613      	mov	r3, r2
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	68b9      	ldr	r1, [r7, #8]
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f000 f83f 	bl	800cbb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3730      	adds	r7, #48	; 0x30
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b08a      	sub	sp, #40	; 0x28
 800cb40:	af02      	add	r7, sp, #8
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	4613      	mov	r3, r2
 800cb48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d10a      	bne.n	800cb66 <xQueueGenericCreate+0x2a>
	__asm volatile
 800cb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb54:	f383 8811 	msr	BASEPRI, r3
 800cb58:	f3bf 8f6f 	isb	sy
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	613b      	str	r3, [r7, #16]
}
 800cb62:	bf00      	nop
 800cb64:	e7fe      	b.n	800cb64 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	68ba      	ldr	r2, [r7, #8]
 800cb6a:	fb02 f303 	mul.w	r3, r2, r3
 800cb6e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	3350      	adds	r3, #80	; 0x50
 800cb74:	4618      	mov	r0, r3
 800cb76:	f002 fca7 	bl	800f4c8 <pvPortMalloc>
 800cb7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cb7c:	69bb      	ldr	r3, [r7, #24]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d011      	beq.n	800cba6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cb82:	69bb      	ldr	r3, [r7, #24]
 800cb84:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	3350      	adds	r3, #80	; 0x50
 800cb8a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cb8c:	69bb      	ldr	r3, [r7, #24]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cb94:	79fa      	ldrb	r2, [r7, #7]
 800cb96:	69bb      	ldr	r3, [r7, #24]
 800cb98:	9300      	str	r3, [sp, #0]
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	697a      	ldr	r2, [r7, #20]
 800cb9e:	68b9      	ldr	r1, [r7, #8]
 800cba0:	68f8      	ldr	r0, [r7, #12]
 800cba2:	f000 f805 	bl	800cbb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cba6:	69bb      	ldr	r3, [r7, #24]
	}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3720      	adds	r7, #32
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	60f8      	str	r0, [r7, #12]
 800cbb8:	60b9      	str	r1, [r7, #8]
 800cbba:	607a      	str	r2, [r7, #4]
 800cbbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d103      	bne.n	800cbcc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cbc4:	69bb      	ldr	r3, [r7, #24]
 800cbc6:	69ba      	ldr	r2, [r7, #24]
 800cbc8:	601a      	str	r2, [r3, #0]
 800cbca:	e002      	b.n	800cbd2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cbcc:	69bb      	ldr	r3, [r7, #24]
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cbd2:	69bb      	ldr	r3, [r7, #24]
 800cbd4:	68fa      	ldr	r2, [r7, #12]
 800cbd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cbd8:	69bb      	ldr	r3, [r7, #24]
 800cbda:	68ba      	ldr	r2, [r7, #8]
 800cbdc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cbde:	2101      	movs	r1, #1
 800cbe0:	69b8      	ldr	r0, [r7, #24]
 800cbe2:	f7ff fecb 	bl	800c97c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cbe6:	69bb      	ldr	r3, [r7, #24]
 800cbe8:	78fa      	ldrb	r2, [r7, #3]
 800cbea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cbee:	bf00      	nop
 800cbf0:	3710      	adds	r7, #16
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}

0800cbf6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800cbf6:	b580      	push	{r7, lr}
 800cbf8:	b08a      	sub	sp, #40	; 0x28
 800cbfa:	af02      	add	r7, sp, #8
 800cbfc:	60f8      	str	r0, [r7, #12]
 800cbfe:	60b9      	str	r1, [r7, #8]
 800cc00:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d10a      	bne.n	800cc1e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800cc08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0c:	f383 8811 	msr	BASEPRI, r3
 800cc10:	f3bf 8f6f 	isb	sy
 800cc14:	f3bf 8f4f 	dsb	sy
 800cc18:	61bb      	str	r3, [r7, #24]
}
 800cc1a:	bf00      	nop
 800cc1c:	e7fe      	b.n	800cc1c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cc1e:	68ba      	ldr	r2, [r7, #8]
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d90a      	bls.n	800cc3c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800cc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2a:	f383 8811 	msr	BASEPRI, r3
 800cc2e:	f3bf 8f6f 	isb	sy
 800cc32:	f3bf 8f4f 	dsb	sy
 800cc36:	617b      	str	r3, [r7, #20]
}
 800cc38:	bf00      	nop
 800cc3a:	e7fe      	b.n	800cc3a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cc3c:	2302      	movs	r3, #2
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2200      	movs	r2, #0
 800cc44:	2100      	movs	r1, #0
 800cc46:	68f8      	ldr	r0, [r7, #12]
 800cc48:	f7ff ff00 	bl	800ca4c <xQueueGenericCreateStatic>
 800cc4c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800cc4e:	69fb      	ldr	r3, [r7, #28]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d002      	beq.n	800cc5a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cc54:	69fb      	ldr	r3, [r7, #28]
 800cc56:	68ba      	ldr	r2, [r7, #8]
 800cc58:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cc5a:	69fb      	ldr	r3, [r7, #28]
	}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3720      	adds	r7, #32
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}

0800cc64 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b086      	sub	sp, #24
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d10a      	bne.n	800cc8a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800cc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc78:	f383 8811 	msr	BASEPRI, r3
 800cc7c:	f3bf 8f6f 	isb	sy
 800cc80:	f3bf 8f4f 	dsb	sy
 800cc84:	613b      	str	r3, [r7, #16]
}
 800cc86:	bf00      	nop
 800cc88:	e7fe      	b.n	800cc88 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cc8a:	683a      	ldr	r2, [r7, #0]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d90a      	bls.n	800cca8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800cc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc96:	f383 8811 	msr	BASEPRI, r3
 800cc9a:	f3bf 8f6f 	isb	sy
 800cc9e:	f3bf 8f4f 	dsb	sy
 800cca2:	60fb      	str	r3, [r7, #12]
}
 800cca4:	bf00      	nop
 800cca6:	e7fe      	b.n	800cca6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cca8:	2202      	movs	r2, #2
 800ccaa:	2100      	movs	r1, #0
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f7ff ff45 	bl	800cb3c <xQueueGenericCreate>
 800ccb2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d002      	beq.n	800ccc0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	683a      	ldr	r2, [r7, #0]
 800ccbe:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ccc0:	697b      	ldr	r3, [r7, #20]
	}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3718      	adds	r7, #24
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}
	...

0800cccc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b08e      	sub	sp, #56	; 0x38
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	60f8      	str	r0, [r7, #12]
 800ccd4:	60b9      	str	r1, [r7, #8]
 800ccd6:	607a      	str	r2, [r7, #4]
 800ccd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d10a      	bne.n	800ccfe <xQueueGenericSend+0x32>
	__asm volatile
 800cce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccec:	f383 8811 	msr	BASEPRI, r3
 800ccf0:	f3bf 8f6f 	isb	sy
 800ccf4:	f3bf 8f4f 	dsb	sy
 800ccf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ccfa:	bf00      	nop
 800ccfc:	e7fe      	b.n	800ccfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d103      	bne.n	800cd0c <xQueueGenericSend+0x40>
 800cd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d101      	bne.n	800cd10 <xQueueGenericSend+0x44>
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	e000      	b.n	800cd12 <xQueueGenericSend+0x46>
 800cd10:	2300      	movs	r3, #0
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d10a      	bne.n	800cd2c <xQueueGenericSend+0x60>
	__asm volatile
 800cd16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd1a:	f383 8811 	msr	BASEPRI, r3
 800cd1e:	f3bf 8f6f 	isb	sy
 800cd22:	f3bf 8f4f 	dsb	sy
 800cd26:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd28:	bf00      	nop
 800cd2a:	e7fe      	b.n	800cd2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	2b02      	cmp	r3, #2
 800cd30:	d103      	bne.n	800cd3a <xQueueGenericSend+0x6e>
 800cd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	d101      	bne.n	800cd3e <xQueueGenericSend+0x72>
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e000      	b.n	800cd40 <xQueueGenericSend+0x74>
 800cd3e:	2300      	movs	r3, #0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d10a      	bne.n	800cd5a <xQueueGenericSend+0x8e>
	__asm volatile
 800cd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd48:	f383 8811 	msr	BASEPRI, r3
 800cd4c:	f3bf 8f6f 	isb	sy
 800cd50:	f3bf 8f4f 	dsb	sy
 800cd54:	623b      	str	r3, [r7, #32]
}
 800cd56:	bf00      	nop
 800cd58:	e7fe      	b.n	800cd58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd5a:	f001 fc3b 	bl	800e5d4 <xTaskGetSchedulerState>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d102      	bne.n	800cd6a <xQueueGenericSend+0x9e>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d101      	bne.n	800cd6e <xQueueGenericSend+0xa2>
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	e000      	b.n	800cd70 <xQueueGenericSend+0xa4>
 800cd6e:	2300      	movs	r3, #0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d10a      	bne.n	800cd8a <xQueueGenericSend+0xbe>
	__asm volatile
 800cd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd78:	f383 8811 	msr	BASEPRI, r3
 800cd7c:	f3bf 8f6f 	isb	sy
 800cd80:	f3bf 8f4f 	dsb	sy
 800cd84:	61fb      	str	r3, [r7, #28]
}
 800cd86:	bf00      	nop
 800cd88:	e7fe      	b.n	800cd88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd8a:	f002 fa7b 	bl	800f284 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d302      	bcc.n	800cda0 <xQueueGenericSend+0xd4>
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	2b02      	cmp	r3, #2
 800cd9e:	d129      	bne.n	800cdf4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cda0:	683a      	ldr	r2, [r7, #0]
 800cda2:	68b9      	ldr	r1, [r7, #8]
 800cda4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cda6:	f000 fc5e 	bl	800d666 <prvCopyDataToQueue>
 800cdaa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d010      	beq.n	800cdd6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb6:	3324      	adds	r3, #36	; 0x24
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f001 fa4d 	bl	800e258 <xTaskRemoveFromEventList>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d013      	beq.n	800cdec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cdc4:	4b3f      	ldr	r3, [pc, #252]	; (800cec4 <xQueueGenericSend+0x1f8>)
 800cdc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdca:	601a      	str	r2, [r3, #0]
 800cdcc:	f3bf 8f4f 	dsb	sy
 800cdd0:	f3bf 8f6f 	isb	sy
 800cdd4:	e00a      	b.n	800cdec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d007      	beq.n	800cdec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cddc:	4b39      	ldr	r3, [pc, #228]	; (800cec4 <xQueueGenericSend+0x1f8>)
 800cdde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cde2:	601a      	str	r2, [r3, #0]
 800cde4:	f3bf 8f4f 	dsb	sy
 800cde8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cdec:	f002 fa7a 	bl	800f2e4 <vPortExitCritical>
				return pdPASS;
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	e063      	b.n	800cebc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d103      	bne.n	800ce02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cdfa:	f002 fa73 	bl	800f2e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	e05c      	b.n	800cebc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d106      	bne.n	800ce16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce08:	f107 0314 	add.w	r3, r7, #20
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f001 fa87 	bl	800e320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce12:	2301      	movs	r3, #1
 800ce14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce16:	f002 fa65 	bl	800f2e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce1a:	f000 fff9 	bl	800de10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce1e:	f002 fa31 	bl	800f284 <vPortEnterCritical>
 800ce22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce28:	b25b      	sxtb	r3, r3
 800ce2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce2e:	d103      	bne.n	800ce38 <xQueueGenericSend+0x16c>
 800ce30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce32:	2200      	movs	r2, #0
 800ce34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce3e:	b25b      	sxtb	r3, r3
 800ce40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce44:	d103      	bne.n	800ce4e <xQueueGenericSend+0x182>
 800ce46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce4e:	f002 fa49 	bl	800f2e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce52:	1d3a      	adds	r2, r7, #4
 800ce54:	f107 0314 	add.w	r3, r7, #20
 800ce58:	4611      	mov	r1, r2
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f001 fa76 	bl	800e34c <xTaskCheckForTimeOut>
 800ce60:	4603      	mov	r3, r0
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d124      	bne.n	800ceb0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ce66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce68:	f000 fcf5 	bl	800d856 <prvIsQueueFull>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d018      	beq.n	800cea4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ce72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce74:	3310      	adds	r3, #16
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	4611      	mov	r1, r2
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f001 f99c 	bl	800e1b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ce80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce82:	f000 fc80 	bl	800d786 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ce86:	f000 ffd1 	bl	800de2c <xTaskResumeAll>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	f47f af7c 	bne.w	800cd8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ce92:	4b0c      	ldr	r3, [pc, #48]	; (800cec4 <xQueueGenericSend+0x1f8>)
 800ce94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce98:	601a      	str	r2, [r3, #0]
 800ce9a:	f3bf 8f4f 	dsb	sy
 800ce9e:	f3bf 8f6f 	isb	sy
 800cea2:	e772      	b.n	800cd8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cea6:	f000 fc6e 	bl	800d786 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ceaa:	f000 ffbf 	bl	800de2c <xTaskResumeAll>
 800ceae:	e76c      	b.n	800cd8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ceb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ceb2:	f000 fc68 	bl	800d786 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ceb6:	f000 ffb9 	bl	800de2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ceba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3738      	adds	r7, #56	; 0x38
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	e000ed04 	.word	0xe000ed04

0800cec8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b090      	sub	sp, #64	; 0x40
 800cecc:	af00      	add	r7, sp, #0
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	60b9      	str	r1, [r7, #8]
 800ced2:	607a      	str	r2, [r7, #4]
 800ced4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ceda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d10a      	bne.n	800cef6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee4:	f383 8811 	msr	BASEPRI, r3
 800cee8:	f3bf 8f6f 	isb	sy
 800ceec:	f3bf 8f4f 	dsb	sy
 800cef0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cef2:	bf00      	nop
 800cef4:	e7fe      	b.n	800cef4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d103      	bne.n	800cf04 <xQueueGenericSendFromISR+0x3c>
 800cefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d101      	bne.n	800cf08 <xQueueGenericSendFromISR+0x40>
 800cf04:	2301      	movs	r3, #1
 800cf06:	e000      	b.n	800cf0a <xQueueGenericSendFromISR+0x42>
 800cf08:	2300      	movs	r3, #0
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d10a      	bne.n	800cf24 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cf0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf12:	f383 8811 	msr	BASEPRI, r3
 800cf16:	f3bf 8f6f 	isb	sy
 800cf1a:	f3bf 8f4f 	dsb	sy
 800cf1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf20:	bf00      	nop
 800cf22:	e7fe      	b.n	800cf22 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	2b02      	cmp	r3, #2
 800cf28:	d103      	bne.n	800cf32 <xQueueGenericSendFromISR+0x6a>
 800cf2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	d101      	bne.n	800cf36 <xQueueGenericSendFromISR+0x6e>
 800cf32:	2301      	movs	r3, #1
 800cf34:	e000      	b.n	800cf38 <xQueueGenericSendFromISR+0x70>
 800cf36:	2300      	movs	r3, #0
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d10a      	bne.n	800cf52 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cf3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf40:	f383 8811 	msr	BASEPRI, r3
 800cf44:	f3bf 8f6f 	isb	sy
 800cf48:	f3bf 8f4f 	dsb	sy
 800cf4c:	623b      	str	r3, [r7, #32]
}
 800cf4e:	bf00      	nop
 800cf50:	e7fe      	b.n	800cf50 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf52:	f002 fa79 	bl	800f448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cf56:	f3ef 8211 	mrs	r2, BASEPRI
 800cf5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf5e:	f383 8811 	msr	BASEPRI, r3
 800cf62:	f3bf 8f6f 	isb	sy
 800cf66:	f3bf 8f4f 	dsb	sy
 800cf6a:	61fa      	str	r2, [r7, #28]
 800cf6c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cf6e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf70:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cf72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d302      	bcc.n	800cf84 <xQueueGenericSendFromISR+0xbc>
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	2b02      	cmp	r3, #2
 800cf82:	d12f      	bne.n	800cfe4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf92:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf94:	683a      	ldr	r2, [r7, #0]
 800cf96:	68b9      	ldr	r1, [r7, #8]
 800cf98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf9a:	f000 fb64 	bl	800d666 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cf9e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cfa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa6:	d112      	bne.n	800cfce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d016      	beq.n	800cfde <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb2:	3324      	adds	r3, #36	; 0x24
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f001 f94f 	bl	800e258 <xTaskRemoveFromEventList>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d00e      	beq.n	800cfde <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d00b      	beq.n	800cfde <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2201      	movs	r2, #1
 800cfca:	601a      	str	r2, [r3, #0]
 800cfcc:	e007      	b.n	800cfde <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cfce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	b2db      	uxtb	r3, r3
 800cfd6:	b25a      	sxtb	r2, r3
 800cfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cfde:	2301      	movs	r3, #1
 800cfe0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cfe2:	e001      	b.n	800cfe8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cff2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3740      	adds	r7, #64	; 0x40
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}

0800cffe <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cffe:	b580      	push	{r7, lr}
 800d000:	b08e      	sub	sp, #56	; 0x38
 800d002:	af00      	add	r7, sp, #0
 800d004:	6078      	str	r0, [r7, #4]
 800d006:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d10a      	bne.n	800d028 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d016:	f383 8811 	msr	BASEPRI, r3
 800d01a:	f3bf 8f6f 	isb	sy
 800d01e:	f3bf 8f4f 	dsb	sy
 800d022:	623b      	str	r3, [r7, #32]
}
 800d024:	bf00      	nop
 800d026:	e7fe      	b.n	800d026 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d02a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d00a      	beq.n	800d046 <xQueueGiveFromISR+0x48>
	__asm volatile
 800d030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d034:	f383 8811 	msr	BASEPRI, r3
 800d038:	f3bf 8f6f 	isb	sy
 800d03c:	f3bf 8f4f 	dsb	sy
 800d040:	61fb      	str	r3, [r7, #28]
}
 800d042:	bf00      	nop
 800d044:	e7fe      	b.n	800d044 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d103      	bne.n	800d056 <xQueueGiveFromISR+0x58>
 800d04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d050:	689b      	ldr	r3, [r3, #8]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d101      	bne.n	800d05a <xQueueGiveFromISR+0x5c>
 800d056:	2301      	movs	r3, #1
 800d058:	e000      	b.n	800d05c <xQueueGiveFromISR+0x5e>
 800d05a:	2300      	movs	r3, #0
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d10a      	bne.n	800d076 <xQueueGiveFromISR+0x78>
	__asm volatile
 800d060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d064:	f383 8811 	msr	BASEPRI, r3
 800d068:	f3bf 8f6f 	isb	sy
 800d06c:	f3bf 8f4f 	dsb	sy
 800d070:	61bb      	str	r3, [r7, #24]
}
 800d072:	bf00      	nop
 800d074:	e7fe      	b.n	800d074 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d076:	f002 f9e7 	bl	800f448 <vPortValidateInterruptPriority>
	__asm volatile
 800d07a:	f3ef 8211 	mrs	r2, BASEPRI
 800d07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d082:	f383 8811 	msr	BASEPRI, r3
 800d086:	f3bf 8f6f 	isb	sy
 800d08a:	f3bf 8f4f 	dsb	sy
 800d08e:	617a      	str	r2, [r7, #20]
 800d090:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d092:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d094:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d09a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d22b      	bcs.n	800d0fe <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b2:	1c5a      	adds	r2, r3, #1
 800d0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d0b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c0:	d112      	bne.n	800d0e8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d016      	beq.n	800d0f8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0cc:	3324      	adds	r3, #36	; 0x24
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f001 f8c2 	bl	800e258 <xTaskRemoveFromEventList>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d00e      	beq.n	800d0f8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d00b      	beq.n	800d0f8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	601a      	str	r2, [r3, #0]
 800d0e6:	e007      	b.n	800d0f8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d0e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	b2db      	uxtb	r3, r3
 800d0f0:	b25a      	sxtb	r2, r3
 800d0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	637b      	str	r3, [r7, #52]	; 0x34
 800d0fc:	e001      	b.n	800d102 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d0fe:	2300      	movs	r3, #0
 800d100:	637b      	str	r3, [r7, #52]	; 0x34
 800d102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d104:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	f383 8811 	msr	BASEPRI, r3
}
 800d10c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d110:	4618      	mov	r0, r3
 800d112:	3738      	adds	r7, #56	; 0x38
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}

0800d118 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b08c      	sub	sp, #48	; 0x30
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d124:	2300      	movs	r3, #0
 800d126:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d10a      	bne.n	800d148 <xQueueReceive+0x30>
	__asm volatile
 800d132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d136:	f383 8811 	msr	BASEPRI, r3
 800d13a:	f3bf 8f6f 	isb	sy
 800d13e:	f3bf 8f4f 	dsb	sy
 800d142:	623b      	str	r3, [r7, #32]
}
 800d144:	bf00      	nop
 800d146:	e7fe      	b.n	800d146 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d103      	bne.n	800d156 <xQueueReceive+0x3e>
 800d14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d152:	2b00      	cmp	r3, #0
 800d154:	d101      	bne.n	800d15a <xQueueReceive+0x42>
 800d156:	2301      	movs	r3, #1
 800d158:	e000      	b.n	800d15c <xQueueReceive+0x44>
 800d15a:	2300      	movs	r3, #0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d10a      	bne.n	800d176 <xQueueReceive+0x5e>
	__asm volatile
 800d160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d164:	f383 8811 	msr	BASEPRI, r3
 800d168:	f3bf 8f6f 	isb	sy
 800d16c:	f3bf 8f4f 	dsb	sy
 800d170:	61fb      	str	r3, [r7, #28]
}
 800d172:	bf00      	nop
 800d174:	e7fe      	b.n	800d174 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d176:	f001 fa2d 	bl	800e5d4 <xTaskGetSchedulerState>
 800d17a:	4603      	mov	r3, r0
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d102      	bne.n	800d186 <xQueueReceive+0x6e>
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d101      	bne.n	800d18a <xQueueReceive+0x72>
 800d186:	2301      	movs	r3, #1
 800d188:	e000      	b.n	800d18c <xQueueReceive+0x74>
 800d18a:	2300      	movs	r3, #0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d10a      	bne.n	800d1a6 <xQueueReceive+0x8e>
	__asm volatile
 800d190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d194:	f383 8811 	msr	BASEPRI, r3
 800d198:	f3bf 8f6f 	isb	sy
 800d19c:	f3bf 8f4f 	dsb	sy
 800d1a0:	61bb      	str	r3, [r7, #24]
}
 800d1a2:	bf00      	nop
 800d1a4:	e7fe      	b.n	800d1a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1a6:	f002 f86d 	bl	800f284 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d01f      	beq.n	800d1f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d1b6:	68b9      	ldr	r1, [r7, #8]
 800d1b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1ba:	f000 fabe 	bl	800d73a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c0:	1e5a      	subs	r2, r3, #1
 800d1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c8:	691b      	ldr	r3, [r3, #16]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d00f      	beq.n	800d1ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d0:	3310      	adds	r3, #16
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f001 f840 	bl	800e258 <xTaskRemoveFromEventList>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d007      	beq.n	800d1ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d1de:	4b3d      	ldr	r3, [pc, #244]	; (800d2d4 <xQueueReceive+0x1bc>)
 800d1e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1e4:	601a      	str	r2, [r3, #0]
 800d1e6:	f3bf 8f4f 	dsb	sy
 800d1ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d1ee:	f002 f879 	bl	800f2e4 <vPortExitCritical>
				return pdPASS;
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	e069      	b.n	800d2ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d103      	bne.n	800d204 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d1fc:	f002 f872 	bl	800f2e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d200:	2300      	movs	r3, #0
 800d202:	e062      	b.n	800d2ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d206:	2b00      	cmp	r3, #0
 800d208:	d106      	bne.n	800d218 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d20a:	f107 0310 	add.w	r3, r7, #16
 800d20e:	4618      	mov	r0, r3
 800d210:	f001 f886 	bl	800e320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d214:	2301      	movs	r3, #1
 800d216:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d218:	f002 f864 	bl	800f2e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d21c:	f000 fdf8 	bl	800de10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d220:	f002 f830 	bl	800f284 <vPortEnterCritical>
 800d224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d226:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d22a:	b25b      	sxtb	r3, r3
 800d22c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d230:	d103      	bne.n	800d23a <xQueueReceive+0x122>
 800d232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d234:	2200      	movs	r2, #0
 800d236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d240:	b25b      	sxtb	r3, r3
 800d242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d246:	d103      	bne.n	800d250 <xQueueReceive+0x138>
 800d248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d24a:	2200      	movs	r2, #0
 800d24c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d250:	f002 f848 	bl	800f2e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d254:	1d3a      	adds	r2, r7, #4
 800d256:	f107 0310 	add.w	r3, r7, #16
 800d25a:	4611      	mov	r1, r2
 800d25c:	4618      	mov	r0, r3
 800d25e:	f001 f875 	bl	800e34c <xTaskCheckForTimeOut>
 800d262:	4603      	mov	r3, r0
 800d264:	2b00      	cmp	r3, #0
 800d266:	d123      	bne.n	800d2b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d26a:	f000 fade 	bl	800d82a <prvIsQueueEmpty>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d017      	beq.n	800d2a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d276:	3324      	adds	r3, #36	; 0x24
 800d278:	687a      	ldr	r2, [r7, #4]
 800d27a:	4611      	mov	r1, r2
 800d27c:	4618      	mov	r0, r3
 800d27e:	f000 ff9b 	bl	800e1b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d284:	f000 fa7f 	bl	800d786 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d288:	f000 fdd0 	bl	800de2c <xTaskResumeAll>
 800d28c:	4603      	mov	r3, r0
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d189      	bne.n	800d1a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d292:	4b10      	ldr	r3, [pc, #64]	; (800d2d4 <xQueueReceive+0x1bc>)
 800d294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d298:	601a      	str	r2, [r3, #0]
 800d29a:	f3bf 8f4f 	dsb	sy
 800d29e:	f3bf 8f6f 	isb	sy
 800d2a2:	e780      	b.n	800d1a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d2a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2a6:	f000 fa6e 	bl	800d786 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2aa:	f000 fdbf 	bl	800de2c <xTaskResumeAll>
 800d2ae:	e77a      	b.n	800d1a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d2b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2b2:	f000 fa68 	bl	800d786 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2b6:	f000 fdb9 	bl	800de2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2bc:	f000 fab5 	bl	800d82a <prvIsQueueEmpty>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	f43f af6f 	beq.w	800d1a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d2c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3730      	adds	r7, #48	; 0x30
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	e000ed04 	.word	0xe000ed04

0800d2d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b08e      	sub	sp, #56	; 0x38
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d10a      	bne.n	800d30a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f8:	f383 8811 	msr	BASEPRI, r3
 800d2fc:	f3bf 8f6f 	isb	sy
 800d300:	f3bf 8f4f 	dsb	sy
 800d304:	623b      	str	r3, [r7, #32]
}
 800d306:	bf00      	nop
 800d308:	e7fe      	b.n	800d308 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d00a      	beq.n	800d328 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d316:	f383 8811 	msr	BASEPRI, r3
 800d31a:	f3bf 8f6f 	isb	sy
 800d31e:	f3bf 8f4f 	dsb	sy
 800d322:	61fb      	str	r3, [r7, #28]
}
 800d324:	bf00      	nop
 800d326:	e7fe      	b.n	800d326 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d328:	f001 f954 	bl	800e5d4 <xTaskGetSchedulerState>
 800d32c:	4603      	mov	r3, r0
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d102      	bne.n	800d338 <xQueueSemaphoreTake+0x60>
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d101      	bne.n	800d33c <xQueueSemaphoreTake+0x64>
 800d338:	2301      	movs	r3, #1
 800d33a:	e000      	b.n	800d33e <xQueueSemaphoreTake+0x66>
 800d33c:	2300      	movs	r3, #0
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d10a      	bne.n	800d358 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d346:	f383 8811 	msr	BASEPRI, r3
 800d34a:	f3bf 8f6f 	isb	sy
 800d34e:	f3bf 8f4f 	dsb	sy
 800d352:	61bb      	str	r3, [r7, #24]
}
 800d354:	bf00      	nop
 800d356:	e7fe      	b.n	800d356 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d358:	f001 ff94 	bl	800f284 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d360:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d364:	2b00      	cmp	r3, #0
 800d366:	d024      	beq.n	800d3b2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36a:	1e5a      	subs	r2, r3, #1
 800d36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d104      	bne.n	800d382 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d378:	f001 faa2 	bl	800e8c0 <pvTaskIncrementMutexHeldCount>
 800d37c:	4602      	mov	r2, r0
 800d37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d380:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d384:	691b      	ldr	r3, [r3, #16]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d00f      	beq.n	800d3aa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38c:	3310      	adds	r3, #16
 800d38e:	4618      	mov	r0, r3
 800d390:	f000 ff62 	bl	800e258 <xTaskRemoveFromEventList>
 800d394:	4603      	mov	r3, r0
 800d396:	2b00      	cmp	r3, #0
 800d398:	d007      	beq.n	800d3aa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d39a:	4b54      	ldr	r3, [pc, #336]	; (800d4ec <xQueueSemaphoreTake+0x214>)
 800d39c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3a0:	601a      	str	r2, [r3, #0]
 800d3a2:	f3bf 8f4f 	dsb	sy
 800d3a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d3aa:	f001 ff9b 	bl	800f2e4 <vPortExitCritical>
				return pdPASS;
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	e097      	b.n	800d4e2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d111      	bne.n	800d3dc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d00a      	beq.n	800d3d4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c2:	f383 8811 	msr	BASEPRI, r3
 800d3c6:	f3bf 8f6f 	isb	sy
 800d3ca:	f3bf 8f4f 	dsb	sy
 800d3ce:	617b      	str	r3, [r7, #20]
}
 800d3d0:	bf00      	nop
 800d3d2:	e7fe      	b.n	800d3d2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d3d4:	f001 ff86 	bl	800f2e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	e082      	b.n	800d4e2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d106      	bne.n	800d3f0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3e2:	f107 030c 	add.w	r3, r7, #12
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f000 ff9a 	bl	800e320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3f0:	f001 ff78 	bl	800f2e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3f4:	f000 fd0c 	bl	800de10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3f8:	f001 ff44 	bl	800f284 <vPortEnterCritical>
 800d3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d402:	b25b      	sxtb	r3, r3
 800d404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d408:	d103      	bne.n	800d412 <xQueueSemaphoreTake+0x13a>
 800d40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40c:	2200      	movs	r2, #0
 800d40e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d418:	b25b      	sxtb	r3, r3
 800d41a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d41e:	d103      	bne.n	800d428 <xQueueSemaphoreTake+0x150>
 800d420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d422:	2200      	movs	r2, #0
 800d424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d428:	f001 ff5c 	bl	800f2e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d42c:	463a      	mov	r2, r7
 800d42e:	f107 030c 	add.w	r3, r7, #12
 800d432:	4611      	mov	r1, r2
 800d434:	4618      	mov	r0, r3
 800d436:	f000 ff89 	bl	800e34c <xTaskCheckForTimeOut>
 800d43a:	4603      	mov	r3, r0
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d132      	bne.n	800d4a6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d440:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d442:	f000 f9f2 	bl	800d82a <prvIsQueueEmpty>
 800d446:	4603      	mov	r3, r0
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d026      	beq.n	800d49a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d109      	bne.n	800d468 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d454:	f001 ff16 	bl	800f284 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45a:	689b      	ldr	r3, [r3, #8]
 800d45c:	4618      	mov	r0, r3
 800d45e:	f001 f8d7 	bl	800e610 <xTaskPriorityInherit>
 800d462:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d464:	f001 ff3e 	bl	800f2e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46a:	3324      	adds	r3, #36	; 0x24
 800d46c:	683a      	ldr	r2, [r7, #0]
 800d46e:	4611      	mov	r1, r2
 800d470:	4618      	mov	r0, r3
 800d472:	f000 fea1 	bl	800e1b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d476:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d478:	f000 f985 	bl	800d786 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d47c:	f000 fcd6 	bl	800de2c <xTaskResumeAll>
 800d480:	4603      	mov	r3, r0
 800d482:	2b00      	cmp	r3, #0
 800d484:	f47f af68 	bne.w	800d358 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d488:	4b18      	ldr	r3, [pc, #96]	; (800d4ec <xQueueSemaphoreTake+0x214>)
 800d48a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d48e:	601a      	str	r2, [r3, #0]
 800d490:	f3bf 8f4f 	dsb	sy
 800d494:	f3bf 8f6f 	isb	sy
 800d498:	e75e      	b.n	800d358 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d49a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d49c:	f000 f973 	bl	800d786 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d4a0:	f000 fcc4 	bl	800de2c <xTaskResumeAll>
 800d4a4:	e758      	b.n	800d358 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d4a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4a8:	f000 f96d 	bl	800d786 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d4ac:	f000 fcbe 	bl	800de2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d4b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4b2:	f000 f9ba 	bl	800d82a <prvIsQueueEmpty>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	f43f af4d 	beq.w	800d358 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d00d      	beq.n	800d4e0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d4c4:	f001 fede 	bl	800f284 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d4c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4ca:	f000 f8b4 	bl	800d636 <prvGetDisinheritPriorityAfterTimeout>
 800d4ce:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d2:	689b      	ldr	r3, [r3, #8]
 800d4d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f001 f970 	bl	800e7bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d4dc:	f001 ff02 	bl	800f2e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d4e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3738      	adds	r7, #56	; 0x38
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	e000ed04 	.word	0xe000ed04

0800d4f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b08e      	sub	sp, #56	; 0x38
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d502:	2b00      	cmp	r3, #0
 800d504:	d10a      	bne.n	800d51c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50a:	f383 8811 	msr	BASEPRI, r3
 800d50e:	f3bf 8f6f 	isb	sy
 800d512:	f3bf 8f4f 	dsb	sy
 800d516:	623b      	str	r3, [r7, #32]
}
 800d518:	bf00      	nop
 800d51a:	e7fe      	b.n	800d51a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d103      	bne.n	800d52a <xQueueReceiveFromISR+0x3a>
 800d522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d526:	2b00      	cmp	r3, #0
 800d528:	d101      	bne.n	800d52e <xQueueReceiveFromISR+0x3e>
 800d52a:	2301      	movs	r3, #1
 800d52c:	e000      	b.n	800d530 <xQueueReceiveFromISR+0x40>
 800d52e:	2300      	movs	r3, #0
 800d530:	2b00      	cmp	r3, #0
 800d532:	d10a      	bne.n	800d54a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d538:	f383 8811 	msr	BASEPRI, r3
 800d53c:	f3bf 8f6f 	isb	sy
 800d540:	f3bf 8f4f 	dsb	sy
 800d544:	61fb      	str	r3, [r7, #28]
}
 800d546:	bf00      	nop
 800d548:	e7fe      	b.n	800d548 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d54a:	f001 ff7d 	bl	800f448 <vPortValidateInterruptPriority>
	__asm volatile
 800d54e:	f3ef 8211 	mrs	r2, BASEPRI
 800d552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d556:	f383 8811 	msr	BASEPRI, r3
 800d55a:	f3bf 8f6f 	isb	sy
 800d55e:	f3bf 8f4f 	dsb	sy
 800d562:	61ba      	str	r2, [r7, #24]
 800d564:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d566:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d568:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d56e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d572:	2b00      	cmp	r3, #0
 800d574:	d02f      	beq.n	800d5d6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d578:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d57c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d580:	68b9      	ldr	r1, [r7, #8]
 800d582:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d584:	f000 f8d9 	bl	800d73a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58a:	1e5a      	subs	r2, r3, #1
 800d58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d590:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d598:	d112      	bne.n	800d5c0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d59c:	691b      	ldr	r3, [r3, #16]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d016      	beq.n	800d5d0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a4:	3310      	adds	r3, #16
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f000 fe56 	bl	800e258 <xTaskRemoveFromEventList>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d00e      	beq.n	800d5d0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d00b      	beq.n	800d5d0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	601a      	str	r2, [r3, #0]
 800d5be:	e007      	b.n	800d5d0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d5c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	b2db      	uxtb	r3, r3
 800d5c8:	b25a      	sxtb	r2, r3
 800d5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	637b      	str	r3, [r7, #52]	; 0x34
 800d5d4:	e001      	b.n	800d5da <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	637b      	str	r3, [r7, #52]	; 0x34
 800d5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	f383 8811 	msr	BASEPRI, r3
}
 800d5e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3738      	adds	r7, #56	; 0x38
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d10a      	bne.n	800d618 <vQueueDelete+0x28>
	__asm volatile
 800d602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d606:	f383 8811 	msr	BASEPRI, r3
 800d60a:	f3bf 8f6f 	isb	sy
 800d60e:	f3bf 8f4f 	dsb	sy
 800d612:	60bb      	str	r3, [r7, #8]
}
 800d614:	bf00      	nop
 800d616:	e7fe      	b.n	800d616 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f000 f95f 	bl	800d8dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d624:	2b00      	cmp	r3, #0
 800d626:	d102      	bne.n	800d62e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d628:	68f8      	ldr	r0, [r7, #12]
 800d62a:	f002 f819 	bl	800f660 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d62e:	bf00      	nop
 800d630:	3710      	adds	r7, #16
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}

0800d636 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d636:	b480      	push	{r7}
 800d638:	b085      	sub	sp, #20
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d642:	2b00      	cmp	r3, #0
 800d644:	d006      	beq.n	800d654 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d650:	60fb      	str	r3, [r7, #12]
 800d652:	e001      	b.n	800d658 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d654:	2300      	movs	r3, #0
 800d656:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d658:	68fb      	ldr	r3, [r7, #12]
	}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3714      	adds	r7, #20
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr

0800d666 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b086      	sub	sp, #24
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	60f8      	str	r0, [r7, #12]
 800d66e:	60b9      	str	r1, [r7, #8]
 800d670:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d672:	2300      	movs	r3, #0
 800d674:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d67a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d680:	2b00      	cmp	r3, #0
 800d682:	d10d      	bne.n	800d6a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d14d      	bne.n	800d728 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	689b      	ldr	r3, [r3, #8]
 800d690:	4618      	mov	r0, r3
 800d692:	f001 f825 	bl	800e6e0 <xTaskPriorityDisinherit>
 800d696:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2200      	movs	r2, #0
 800d69c:	609a      	str	r2, [r3, #8]
 800d69e:	e043      	b.n	800d728 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d119      	bne.n	800d6da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	6858      	ldr	r0, [r3, #4]
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	68b9      	ldr	r1, [r7, #8]
 800d6b2:	f003 f9df 	bl	8010a74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	685a      	ldr	r2, [r3, #4]
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6be:	441a      	add	r2, r3
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	685a      	ldr	r2, [r3, #4]
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	689b      	ldr	r3, [r3, #8]
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d32b      	bcc.n	800d728 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681a      	ldr	r2, [r3, #0]
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	605a      	str	r2, [r3, #4]
 800d6d8:	e026      	b.n	800d728 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	68d8      	ldr	r0, [r3, #12]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	68b9      	ldr	r1, [r7, #8]
 800d6e6:	f003 f9c5 	bl	8010a74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	68da      	ldr	r2, [r3, #12]
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6f2:	425b      	negs	r3, r3
 800d6f4:	441a      	add	r2, r3
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	68da      	ldr	r2, [r3, #12]
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	429a      	cmp	r2, r3
 800d704:	d207      	bcs.n	800d716 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	689a      	ldr	r2, [r3, #8]
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d70e:	425b      	negs	r3, r3
 800d710:	441a      	add	r2, r3
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2b02      	cmp	r3, #2
 800d71a:	d105      	bne.n	800d728 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d002      	beq.n	800d728 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	3b01      	subs	r3, #1
 800d726:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	1c5a      	adds	r2, r3, #1
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d730:	697b      	ldr	r3, [r7, #20]
}
 800d732:	4618      	mov	r0, r3
 800d734:	3718      	adds	r7, #24
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}

0800d73a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d73a:	b580      	push	{r7, lr}
 800d73c:	b082      	sub	sp, #8
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]
 800d742:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d018      	beq.n	800d77e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	68da      	ldr	r2, [r3, #12]
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d754:	441a      	add	r2, r3
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	68da      	ldr	r2, [r3, #12]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	689b      	ldr	r3, [r3, #8]
 800d762:	429a      	cmp	r2, r3
 800d764:	d303      	bcc.n	800d76e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	68d9      	ldr	r1, [r3, #12]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d776:	461a      	mov	r2, r3
 800d778:	6838      	ldr	r0, [r7, #0]
 800d77a:	f003 f97b 	bl	8010a74 <memcpy>
	}
}
 800d77e:	bf00      	nop
 800d780:	3708      	adds	r7, #8
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}

0800d786 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d786:	b580      	push	{r7, lr}
 800d788:	b084      	sub	sp, #16
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d78e:	f001 fd79 	bl	800f284 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d798:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d79a:	e011      	b.n	800d7c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d012      	beq.n	800d7ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	3324      	adds	r3, #36	; 0x24
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f000 fd55 	bl	800e258 <xTaskRemoveFromEventList>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d001      	beq.n	800d7b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d7b4:	f000 fe2c 	bl	800e410 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d7b8:	7bfb      	ldrb	r3, [r7, #15]
 800d7ba:	3b01      	subs	r3, #1
 800d7bc:	b2db      	uxtb	r3, r3
 800d7be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d7c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	dce9      	bgt.n	800d79c <prvUnlockQueue+0x16>
 800d7c8:	e000      	b.n	800d7cc <prvUnlockQueue+0x46>
					break;
 800d7ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	22ff      	movs	r2, #255	; 0xff
 800d7d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d7d4:	f001 fd86 	bl	800f2e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d7d8:	f001 fd54 	bl	800f284 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7e4:	e011      	b.n	800d80a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	691b      	ldr	r3, [r3, #16]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d012      	beq.n	800d814 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	3310      	adds	r3, #16
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f000 fd30 	bl	800e258 <xTaskRemoveFromEventList>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d001      	beq.n	800d802 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d7fe:	f000 fe07 	bl	800e410 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d802:	7bbb      	ldrb	r3, [r7, #14]
 800d804:	3b01      	subs	r3, #1
 800d806:	b2db      	uxtb	r3, r3
 800d808:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d80a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	dce9      	bgt.n	800d7e6 <prvUnlockQueue+0x60>
 800d812:	e000      	b.n	800d816 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d814:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	22ff      	movs	r2, #255	; 0xff
 800d81a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d81e:	f001 fd61 	bl	800f2e4 <vPortExitCritical>
}
 800d822:	bf00      	nop
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}

0800d82a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b084      	sub	sp, #16
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d832:	f001 fd27 	bl	800f284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d102      	bne.n	800d844 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d83e:	2301      	movs	r3, #1
 800d840:	60fb      	str	r3, [r7, #12]
 800d842:	e001      	b.n	800d848 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d844:	2300      	movs	r3, #0
 800d846:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d848:	f001 fd4c 	bl	800f2e4 <vPortExitCritical>

	return xReturn;
 800d84c:	68fb      	ldr	r3, [r7, #12]
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3710      	adds	r7, #16
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}

0800d856 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d856:	b580      	push	{r7, lr}
 800d858:	b084      	sub	sp, #16
 800d85a:	af00      	add	r7, sp, #0
 800d85c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d85e:	f001 fd11 	bl	800f284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d102      	bne.n	800d874 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d86e:	2301      	movs	r3, #1
 800d870:	60fb      	str	r3, [r7, #12]
 800d872:	e001      	b.n	800d878 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d874:	2300      	movs	r3, #0
 800d876:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d878:	f001 fd34 	bl	800f2e4 <vPortExitCritical>

	return xReturn;
 800d87c:	68fb      	ldr	r3, [r7, #12]
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3710      	adds	r7, #16
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
	...

0800d888 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d888:	b480      	push	{r7}
 800d88a:	b085      	sub	sp, #20
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d892:	2300      	movs	r3, #0
 800d894:	60fb      	str	r3, [r7, #12]
 800d896:	e014      	b.n	800d8c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d898:	4a0f      	ldr	r2, [pc, #60]	; (800d8d8 <vQueueAddToRegistry+0x50>)
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d10b      	bne.n	800d8bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d8a4:	490c      	ldr	r1, [pc, #48]	; (800d8d8 <vQueueAddToRegistry+0x50>)
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	683a      	ldr	r2, [r7, #0]
 800d8aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d8ae:	4a0a      	ldr	r2, [pc, #40]	; (800d8d8 <vQueueAddToRegistry+0x50>)
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	00db      	lsls	r3, r3, #3
 800d8b4:	4413      	add	r3, r2
 800d8b6:	687a      	ldr	r2, [r7, #4]
 800d8b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d8ba:	e006      	b.n	800d8ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	3301      	adds	r3, #1
 800d8c0:	60fb      	str	r3, [r7, #12]
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2b07      	cmp	r3, #7
 800d8c6:	d9e7      	bls.n	800d898 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d8c8:	bf00      	nop
 800d8ca:	bf00      	nop
 800d8cc:	3714      	adds	r7, #20
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr
 800d8d6:	bf00      	nop
 800d8d8:	2404aa28 	.word	0x2404aa28

0800d8dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d8dc:	b480      	push	{r7}
 800d8de:	b085      	sub	sp, #20
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	60fb      	str	r3, [r7, #12]
 800d8e8:	e016      	b.n	800d918 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d8ea:	4a10      	ldr	r2, [pc, #64]	; (800d92c <vQueueUnregisterQueue+0x50>)
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	00db      	lsls	r3, r3, #3
 800d8f0:	4413      	add	r3, r2
 800d8f2:	685b      	ldr	r3, [r3, #4]
 800d8f4:	687a      	ldr	r2, [r7, #4]
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d10b      	bne.n	800d912 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d8fa:	4a0c      	ldr	r2, [pc, #48]	; (800d92c <vQueueUnregisterQueue+0x50>)
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2100      	movs	r1, #0
 800d900:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d904:	4a09      	ldr	r2, [pc, #36]	; (800d92c <vQueueUnregisterQueue+0x50>)
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	00db      	lsls	r3, r3, #3
 800d90a:	4413      	add	r3, r2
 800d90c:	2200      	movs	r2, #0
 800d90e:	605a      	str	r2, [r3, #4]
				break;
 800d910:	e006      	b.n	800d920 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	3301      	adds	r3, #1
 800d916:	60fb      	str	r3, [r7, #12]
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2b07      	cmp	r3, #7
 800d91c:	d9e5      	bls.n	800d8ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d91e:	bf00      	nop
 800d920:	bf00      	nop
 800d922:	3714      	adds	r7, #20
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr
 800d92c:	2404aa28 	.word	0x2404aa28

0800d930 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d930:	b580      	push	{r7, lr}
 800d932:	b086      	sub	sp, #24
 800d934:	af00      	add	r7, sp, #0
 800d936:	60f8      	str	r0, [r7, #12]
 800d938:	60b9      	str	r1, [r7, #8]
 800d93a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d940:	f001 fca0 	bl	800f284 <vPortEnterCritical>
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d94a:	b25b      	sxtb	r3, r3
 800d94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d950:	d103      	bne.n	800d95a <vQueueWaitForMessageRestricted+0x2a>
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	2200      	movs	r2, #0
 800d956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d960:	b25b      	sxtb	r3, r3
 800d962:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d966:	d103      	bne.n	800d970 <vQueueWaitForMessageRestricted+0x40>
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	2200      	movs	r2, #0
 800d96c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d970:	f001 fcb8 	bl	800f2e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d106      	bne.n	800d98a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	3324      	adds	r3, #36	; 0x24
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	68b9      	ldr	r1, [r7, #8]
 800d984:	4618      	mov	r0, r3
 800d986:	f000 fc3b 	bl	800e200 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d98a:	6978      	ldr	r0, [r7, #20]
 800d98c:	f7ff fefb 	bl	800d786 <prvUnlockQueue>
	}
 800d990:	bf00      	nop
 800d992:	3718      	adds	r7, #24
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b08e      	sub	sp, #56	; 0x38
 800d99c:	af04      	add	r7, sp, #16
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	607a      	str	r2, [r7, #4]
 800d9a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d9a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d10a      	bne.n	800d9c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b0:	f383 8811 	msr	BASEPRI, r3
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	623b      	str	r3, [r7, #32]
}
 800d9be:	bf00      	nop
 800d9c0:	e7fe      	b.n	800d9c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d10a      	bne.n	800d9de <xTaskCreateStatic+0x46>
	__asm volatile
 800d9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9cc:	f383 8811 	msr	BASEPRI, r3
 800d9d0:	f3bf 8f6f 	isb	sy
 800d9d4:	f3bf 8f4f 	dsb	sy
 800d9d8:	61fb      	str	r3, [r7, #28]
}
 800d9da:	bf00      	nop
 800d9dc:	e7fe      	b.n	800d9dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d9de:	235c      	movs	r3, #92	; 0x5c
 800d9e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	2b5c      	cmp	r3, #92	; 0x5c
 800d9e6:	d00a      	beq.n	800d9fe <xTaskCreateStatic+0x66>
	__asm volatile
 800d9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ec:	f383 8811 	msr	BASEPRI, r3
 800d9f0:	f3bf 8f6f 	isb	sy
 800d9f4:	f3bf 8f4f 	dsb	sy
 800d9f8:	61bb      	str	r3, [r7, #24]
}
 800d9fa:	bf00      	nop
 800d9fc:	e7fe      	b.n	800d9fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d9fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800da00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da02:	2b00      	cmp	r3, #0
 800da04:	d01e      	beq.n	800da44 <xTaskCreateStatic+0xac>
 800da06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d01b      	beq.n	800da44 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800da0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800da10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800da16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da18:	2202      	movs	r2, #2
 800da1a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800da1e:	2300      	movs	r3, #0
 800da20:	9303      	str	r3, [sp, #12]
 800da22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da24:	9302      	str	r3, [sp, #8]
 800da26:	f107 0314 	add.w	r3, r7, #20
 800da2a:	9301      	str	r3, [sp, #4]
 800da2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2e:	9300      	str	r3, [sp, #0]
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	68b9      	ldr	r1, [r7, #8]
 800da36:	68f8      	ldr	r0, [r7, #12]
 800da38:	f000 f850 	bl	800dadc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da3e:	f000 f8dd 	bl	800dbfc <prvAddNewTaskToReadyList>
 800da42:	e001      	b.n	800da48 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800da44:	2300      	movs	r3, #0
 800da46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800da48:	697b      	ldr	r3, [r7, #20]
	}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3728      	adds	r7, #40	; 0x28
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}

0800da52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800da52:	b580      	push	{r7, lr}
 800da54:	b08c      	sub	sp, #48	; 0x30
 800da56:	af04      	add	r7, sp, #16
 800da58:	60f8      	str	r0, [r7, #12]
 800da5a:	60b9      	str	r1, [r7, #8]
 800da5c:	603b      	str	r3, [r7, #0]
 800da5e:	4613      	mov	r3, r2
 800da60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800da62:	88fb      	ldrh	r3, [r7, #6]
 800da64:	009b      	lsls	r3, r3, #2
 800da66:	4618      	mov	r0, r3
 800da68:	f001 fd2e 	bl	800f4c8 <pvPortMalloc>
 800da6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d00e      	beq.n	800da92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800da74:	205c      	movs	r0, #92	; 0x5c
 800da76:	f001 fd27 	bl	800f4c8 <pvPortMalloc>
 800da7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d003      	beq.n	800da8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800da82:	69fb      	ldr	r3, [r7, #28]
 800da84:	697a      	ldr	r2, [r7, #20]
 800da86:	631a      	str	r2, [r3, #48]	; 0x30
 800da88:	e005      	b.n	800da96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800da8a:	6978      	ldr	r0, [r7, #20]
 800da8c:	f001 fde8 	bl	800f660 <vPortFree>
 800da90:	e001      	b.n	800da96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800da92:	2300      	movs	r3, #0
 800da94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800da96:	69fb      	ldr	r3, [r7, #28]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d017      	beq.n	800dacc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800da9c:	69fb      	ldr	r3, [r7, #28]
 800da9e:	2200      	movs	r2, #0
 800daa0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800daa4:	88fa      	ldrh	r2, [r7, #6]
 800daa6:	2300      	movs	r3, #0
 800daa8:	9303      	str	r3, [sp, #12]
 800daaa:	69fb      	ldr	r3, [r7, #28]
 800daac:	9302      	str	r3, [sp, #8]
 800daae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab0:	9301      	str	r3, [sp, #4]
 800dab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab4:	9300      	str	r3, [sp, #0]
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	68b9      	ldr	r1, [r7, #8]
 800daba:	68f8      	ldr	r0, [r7, #12]
 800dabc:	f000 f80e 	bl	800dadc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dac0:	69f8      	ldr	r0, [r7, #28]
 800dac2:	f000 f89b 	bl	800dbfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dac6:	2301      	movs	r3, #1
 800dac8:	61bb      	str	r3, [r7, #24]
 800daca:	e002      	b.n	800dad2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dacc:	f04f 33ff 	mov.w	r3, #4294967295
 800dad0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dad2:	69bb      	ldr	r3, [r7, #24]
	}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3720      	adds	r7, #32
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b088      	sub	sp, #32
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	60f8      	str	r0, [r7, #12]
 800dae4:	60b9      	str	r1, [r7, #8]
 800dae6:	607a      	str	r2, [r7, #4]
 800dae8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800daea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	461a      	mov	r2, r3
 800daf4:	21a5      	movs	r1, #165	; 0xa5
 800daf6:	f002 ffcb 	bl	8010a90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dafc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dafe:	6879      	ldr	r1, [r7, #4]
 800db00:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800db04:	440b      	add	r3, r1
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	4413      	add	r3, r2
 800db0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	f023 0307 	bic.w	r3, r3, #7
 800db12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800db14:	69bb      	ldr	r3, [r7, #24]
 800db16:	f003 0307 	and.w	r3, r3, #7
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d00a      	beq.n	800db34 <prvInitialiseNewTask+0x58>
	__asm volatile
 800db1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db22:	f383 8811 	msr	BASEPRI, r3
 800db26:	f3bf 8f6f 	isb	sy
 800db2a:	f3bf 8f4f 	dsb	sy
 800db2e:	617b      	str	r3, [r7, #20]
}
 800db30:	bf00      	nop
 800db32:	e7fe      	b.n	800db32 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d01f      	beq.n	800db7a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db3a:	2300      	movs	r3, #0
 800db3c:	61fb      	str	r3, [r7, #28]
 800db3e:	e012      	b.n	800db66 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800db40:	68ba      	ldr	r2, [r7, #8]
 800db42:	69fb      	ldr	r3, [r7, #28]
 800db44:	4413      	add	r3, r2
 800db46:	7819      	ldrb	r1, [r3, #0]
 800db48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	4413      	add	r3, r2
 800db4e:	3334      	adds	r3, #52	; 0x34
 800db50:	460a      	mov	r2, r1
 800db52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800db54:	68ba      	ldr	r2, [r7, #8]
 800db56:	69fb      	ldr	r3, [r7, #28]
 800db58:	4413      	add	r3, r2
 800db5a:	781b      	ldrb	r3, [r3, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d006      	beq.n	800db6e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	3301      	adds	r3, #1
 800db64:	61fb      	str	r3, [r7, #28]
 800db66:	69fb      	ldr	r3, [r7, #28]
 800db68:	2b0f      	cmp	r3, #15
 800db6a:	d9e9      	bls.n	800db40 <prvInitialiseNewTask+0x64>
 800db6c:	e000      	b.n	800db70 <prvInitialiseNewTask+0x94>
			{
				break;
 800db6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800db70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db72:	2200      	movs	r2, #0
 800db74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800db78:	e003      	b.n	800db82 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800db7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7c:	2200      	movs	r2, #0
 800db7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800db82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db84:	2b37      	cmp	r3, #55	; 0x37
 800db86:	d901      	bls.n	800db8c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800db88:	2337      	movs	r3, #55	; 0x37
 800db8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800db8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800db92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db96:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800db98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9a:	2200      	movs	r2, #0
 800db9c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800db9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba0:	3304      	adds	r3, #4
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7fe fe56 	bl	800c854 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbaa:	3318      	adds	r3, #24
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7fe fe51 	bl	800c854 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbb6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbc6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbca:	2200      	movs	r2, #0
 800dbcc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dbd6:	683a      	ldr	r2, [r7, #0]
 800dbd8:	68f9      	ldr	r1, [r7, #12]
 800dbda:	69b8      	ldr	r0, [r7, #24]
 800dbdc:	f001 fa26 	bl	800f02c <pxPortInitialiseStack>
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d002      	beq.n	800dbf2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbf2:	bf00      	nop
 800dbf4:	3720      	adds	r7, #32
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
	...

0800dbfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dc04:	f001 fb3e 	bl	800f284 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dc08:	4b2d      	ldr	r3, [pc, #180]	; (800dcc0 <prvAddNewTaskToReadyList+0xc4>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	4a2c      	ldr	r2, [pc, #176]	; (800dcc0 <prvAddNewTaskToReadyList+0xc4>)
 800dc10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dc12:	4b2c      	ldr	r3, [pc, #176]	; (800dcc4 <prvAddNewTaskToReadyList+0xc8>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d109      	bne.n	800dc2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dc1a:	4a2a      	ldr	r2, [pc, #168]	; (800dcc4 <prvAddNewTaskToReadyList+0xc8>)
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dc20:	4b27      	ldr	r3, [pc, #156]	; (800dcc0 <prvAddNewTaskToReadyList+0xc4>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d110      	bne.n	800dc4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dc28:	f000 fc16 	bl	800e458 <prvInitialiseTaskLists>
 800dc2c:	e00d      	b.n	800dc4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dc2e:	4b26      	ldr	r3, [pc, #152]	; (800dcc8 <prvAddNewTaskToReadyList+0xcc>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d109      	bne.n	800dc4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dc36:	4b23      	ldr	r3, [pc, #140]	; (800dcc4 <prvAddNewTaskToReadyList+0xc8>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d802      	bhi.n	800dc4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dc44:	4a1f      	ldr	r2, [pc, #124]	; (800dcc4 <prvAddNewTaskToReadyList+0xc8>)
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dc4a:	4b20      	ldr	r3, [pc, #128]	; (800dccc <prvAddNewTaskToReadyList+0xd0>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	3301      	adds	r3, #1
 800dc50:	4a1e      	ldr	r2, [pc, #120]	; (800dccc <prvAddNewTaskToReadyList+0xd0>)
 800dc52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dc54:	4b1d      	ldr	r3, [pc, #116]	; (800dccc <prvAddNewTaskToReadyList+0xd0>)
 800dc56:	681a      	ldr	r2, [r3, #0]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc60:	4b1b      	ldr	r3, [pc, #108]	; (800dcd0 <prvAddNewTaskToReadyList+0xd4>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d903      	bls.n	800dc70 <prvAddNewTaskToReadyList+0x74>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc6c:	4a18      	ldr	r2, [pc, #96]	; (800dcd0 <prvAddNewTaskToReadyList+0xd4>)
 800dc6e:	6013      	str	r3, [r2, #0]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc74:	4613      	mov	r3, r2
 800dc76:	009b      	lsls	r3, r3, #2
 800dc78:	4413      	add	r3, r2
 800dc7a:	009b      	lsls	r3, r3, #2
 800dc7c:	4a15      	ldr	r2, [pc, #84]	; (800dcd4 <prvAddNewTaskToReadyList+0xd8>)
 800dc7e:	441a      	add	r2, r3
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	3304      	adds	r3, #4
 800dc84:	4619      	mov	r1, r3
 800dc86:	4610      	mov	r0, r2
 800dc88:	f7fe fdf1 	bl	800c86e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dc8c:	f001 fb2a 	bl	800f2e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dc90:	4b0d      	ldr	r3, [pc, #52]	; (800dcc8 <prvAddNewTaskToReadyList+0xcc>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d00e      	beq.n	800dcb6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dc98:	4b0a      	ldr	r3, [pc, #40]	; (800dcc4 <prvAddNewTaskToReadyList+0xc8>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d207      	bcs.n	800dcb6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dca6:	4b0c      	ldr	r3, [pc, #48]	; (800dcd8 <prvAddNewTaskToReadyList+0xdc>)
 800dca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcac:	601a      	str	r2, [r3, #0]
 800dcae:	f3bf 8f4f 	dsb	sy
 800dcb2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcb6:	bf00      	nop
 800dcb8:	3708      	adds	r7, #8
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	2404af3c 	.word	0x2404af3c
 800dcc4:	2404aa68 	.word	0x2404aa68
 800dcc8:	2404af48 	.word	0x2404af48
 800dccc:	2404af58 	.word	0x2404af58
 800dcd0:	2404af44 	.word	0x2404af44
 800dcd4:	2404aa6c 	.word	0x2404aa6c
 800dcd8:	e000ed04 	.word	0xe000ed04

0800dcdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b084      	sub	sp, #16
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dce4:	2300      	movs	r3, #0
 800dce6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d017      	beq.n	800dd1e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dcee:	4b13      	ldr	r3, [pc, #76]	; (800dd3c <vTaskDelay+0x60>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d00a      	beq.n	800dd0c <vTaskDelay+0x30>
	__asm volatile
 800dcf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcfa:	f383 8811 	msr	BASEPRI, r3
 800dcfe:	f3bf 8f6f 	isb	sy
 800dd02:	f3bf 8f4f 	dsb	sy
 800dd06:	60bb      	str	r3, [r7, #8]
}
 800dd08:	bf00      	nop
 800dd0a:	e7fe      	b.n	800dd0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dd0c:	f000 f880 	bl	800de10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dd10:	2100      	movs	r1, #0
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f000 fde8 	bl	800e8e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dd18:	f000 f888 	bl	800de2c <xTaskResumeAll>
 800dd1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d107      	bne.n	800dd34 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dd24:	4b06      	ldr	r3, [pc, #24]	; (800dd40 <vTaskDelay+0x64>)
 800dd26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd2a:	601a      	str	r2, [r3, #0]
 800dd2c:	f3bf 8f4f 	dsb	sy
 800dd30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd34:	bf00      	nop
 800dd36:	3710      	adds	r7, #16
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	2404af64 	.word	0x2404af64
 800dd40:	e000ed04 	.word	0xe000ed04

0800dd44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b08a      	sub	sp, #40	; 0x28
 800dd48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dd52:	463a      	mov	r2, r7
 800dd54:	1d39      	adds	r1, r7, #4
 800dd56:	f107 0308 	add.w	r3, r7, #8
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7fe fd26 	bl	800c7ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dd60:	6839      	ldr	r1, [r7, #0]
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	68ba      	ldr	r2, [r7, #8]
 800dd66:	9202      	str	r2, [sp, #8]
 800dd68:	9301      	str	r3, [sp, #4]
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	9300      	str	r3, [sp, #0]
 800dd6e:	2300      	movs	r3, #0
 800dd70:	460a      	mov	r2, r1
 800dd72:	4921      	ldr	r1, [pc, #132]	; (800ddf8 <vTaskStartScheduler+0xb4>)
 800dd74:	4821      	ldr	r0, [pc, #132]	; (800ddfc <vTaskStartScheduler+0xb8>)
 800dd76:	f7ff fe0f 	bl	800d998 <xTaskCreateStatic>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	4a20      	ldr	r2, [pc, #128]	; (800de00 <vTaskStartScheduler+0xbc>)
 800dd7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dd80:	4b1f      	ldr	r3, [pc, #124]	; (800de00 <vTaskStartScheduler+0xbc>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d002      	beq.n	800dd8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dd88:	2301      	movs	r3, #1
 800dd8a:	617b      	str	r3, [r7, #20]
 800dd8c:	e001      	b.n	800dd92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d102      	bne.n	800dd9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dd98:	f000 fdfa 	bl	800e990 <xTimerCreateTimerTask>
 800dd9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	d116      	bne.n	800ddd2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800dda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda8:	f383 8811 	msr	BASEPRI, r3
 800ddac:	f3bf 8f6f 	isb	sy
 800ddb0:	f3bf 8f4f 	dsb	sy
 800ddb4:	613b      	str	r3, [r7, #16]
}
 800ddb6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ddb8:	4b12      	ldr	r3, [pc, #72]	; (800de04 <vTaskStartScheduler+0xc0>)
 800ddba:	f04f 32ff 	mov.w	r2, #4294967295
 800ddbe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ddc0:	4b11      	ldr	r3, [pc, #68]	; (800de08 <vTaskStartScheduler+0xc4>)
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ddc6:	4b11      	ldr	r3, [pc, #68]	; (800de0c <vTaskStartScheduler+0xc8>)
 800ddc8:	2200      	movs	r2, #0
 800ddca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ddcc:	f001 f9b8 	bl	800f140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ddd0:	e00e      	b.n	800ddf0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd8:	d10a      	bne.n	800ddf0 <vTaskStartScheduler+0xac>
	__asm volatile
 800ddda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddde:	f383 8811 	msr	BASEPRI, r3
 800dde2:	f3bf 8f6f 	isb	sy
 800dde6:	f3bf 8f4f 	dsb	sy
 800ddea:	60fb      	str	r3, [r7, #12]
}
 800ddec:	bf00      	nop
 800ddee:	e7fe      	b.n	800ddee <vTaskStartScheduler+0xaa>
}
 800ddf0:	bf00      	nop
 800ddf2:	3718      	adds	r7, #24
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	08010c80 	.word	0x08010c80
 800ddfc:	0800e429 	.word	0x0800e429
 800de00:	2404af60 	.word	0x2404af60
 800de04:	2404af5c 	.word	0x2404af5c
 800de08:	2404af48 	.word	0x2404af48
 800de0c:	2404af40 	.word	0x2404af40

0800de10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800de10:	b480      	push	{r7}
 800de12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800de14:	4b04      	ldr	r3, [pc, #16]	; (800de28 <vTaskSuspendAll+0x18>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	3301      	adds	r3, #1
 800de1a:	4a03      	ldr	r2, [pc, #12]	; (800de28 <vTaskSuspendAll+0x18>)
 800de1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800de1e:	bf00      	nop
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr
 800de28:	2404af64 	.word	0x2404af64

0800de2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b084      	sub	sp, #16
 800de30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800de32:	2300      	movs	r3, #0
 800de34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800de36:	2300      	movs	r3, #0
 800de38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800de3a:	4b42      	ldr	r3, [pc, #264]	; (800df44 <xTaskResumeAll+0x118>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d10a      	bne.n	800de58 <xTaskResumeAll+0x2c>
	__asm volatile
 800de42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de46:	f383 8811 	msr	BASEPRI, r3
 800de4a:	f3bf 8f6f 	isb	sy
 800de4e:	f3bf 8f4f 	dsb	sy
 800de52:	603b      	str	r3, [r7, #0]
}
 800de54:	bf00      	nop
 800de56:	e7fe      	b.n	800de56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800de58:	f001 fa14 	bl	800f284 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800de5c:	4b39      	ldr	r3, [pc, #228]	; (800df44 <xTaskResumeAll+0x118>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	3b01      	subs	r3, #1
 800de62:	4a38      	ldr	r2, [pc, #224]	; (800df44 <xTaskResumeAll+0x118>)
 800de64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de66:	4b37      	ldr	r3, [pc, #220]	; (800df44 <xTaskResumeAll+0x118>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d162      	bne.n	800df34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800de6e:	4b36      	ldr	r3, [pc, #216]	; (800df48 <xTaskResumeAll+0x11c>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d05e      	beq.n	800df34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de76:	e02f      	b.n	800ded8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de78:	4b34      	ldr	r3, [pc, #208]	; (800df4c <xTaskResumeAll+0x120>)
 800de7a:	68db      	ldr	r3, [r3, #12]
 800de7c:	68db      	ldr	r3, [r3, #12]
 800de7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	3318      	adds	r3, #24
 800de84:	4618      	mov	r0, r3
 800de86:	f7fe fd4f 	bl	800c928 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	3304      	adds	r3, #4
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fe fd4a 	bl	800c928 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de98:	4b2d      	ldr	r3, [pc, #180]	; (800df50 <xTaskResumeAll+0x124>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d903      	bls.n	800dea8 <xTaskResumeAll+0x7c>
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea4:	4a2a      	ldr	r2, [pc, #168]	; (800df50 <xTaskResumeAll+0x124>)
 800dea6:	6013      	str	r3, [r2, #0]
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deac:	4613      	mov	r3, r2
 800deae:	009b      	lsls	r3, r3, #2
 800deb0:	4413      	add	r3, r2
 800deb2:	009b      	lsls	r3, r3, #2
 800deb4:	4a27      	ldr	r2, [pc, #156]	; (800df54 <xTaskResumeAll+0x128>)
 800deb6:	441a      	add	r2, r3
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	3304      	adds	r3, #4
 800debc:	4619      	mov	r1, r3
 800debe:	4610      	mov	r0, r2
 800dec0:	f7fe fcd5 	bl	800c86e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dec8:	4b23      	ldr	r3, [pc, #140]	; (800df58 <xTaskResumeAll+0x12c>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dece:	429a      	cmp	r2, r3
 800ded0:	d302      	bcc.n	800ded8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ded2:	4b22      	ldr	r3, [pc, #136]	; (800df5c <xTaskResumeAll+0x130>)
 800ded4:	2201      	movs	r2, #1
 800ded6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ded8:	4b1c      	ldr	r3, [pc, #112]	; (800df4c <xTaskResumeAll+0x120>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d1cb      	bne.n	800de78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d001      	beq.n	800deea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dee6:	f000 fb55 	bl	800e594 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800deea:	4b1d      	ldr	r3, [pc, #116]	; (800df60 <xTaskResumeAll+0x134>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d010      	beq.n	800df18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800def6:	f000 f847 	bl	800df88 <xTaskIncrementTick>
 800defa:	4603      	mov	r3, r0
 800defc:	2b00      	cmp	r3, #0
 800defe:	d002      	beq.n	800df06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800df00:	4b16      	ldr	r3, [pc, #88]	; (800df5c <xTaskResumeAll+0x130>)
 800df02:	2201      	movs	r2, #1
 800df04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	3b01      	subs	r3, #1
 800df0a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d1f1      	bne.n	800def6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800df12:	4b13      	ldr	r3, [pc, #76]	; (800df60 <xTaskResumeAll+0x134>)
 800df14:	2200      	movs	r2, #0
 800df16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800df18:	4b10      	ldr	r3, [pc, #64]	; (800df5c <xTaskResumeAll+0x130>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d009      	beq.n	800df34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800df20:	2301      	movs	r3, #1
 800df22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800df24:	4b0f      	ldr	r3, [pc, #60]	; (800df64 <xTaskResumeAll+0x138>)
 800df26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df2a:	601a      	str	r2, [r3, #0]
 800df2c:	f3bf 8f4f 	dsb	sy
 800df30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df34:	f001 f9d6 	bl	800f2e4 <vPortExitCritical>

	return xAlreadyYielded;
 800df38:	68bb      	ldr	r3, [r7, #8]
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3710      	adds	r7, #16
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	2404af64 	.word	0x2404af64
 800df48:	2404af3c 	.word	0x2404af3c
 800df4c:	2404aefc 	.word	0x2404aefc
 800df50:	2404af44 	.word	0x2404af44
 800df54:	2404aa6c 	.word	0x2404aa6c
 800df58:	2404aa68 	.word	0x2404aa68
 800df5c:	2404af50 	.word	0x2404af50
 800df60:	2404af4c 	.word	0x2404af4c
 800df64:	e000ed04 	.word	0xe000ed04

0800df68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800df68:	b480      	push	{r7}
 800df6a:	b083      	sub	sp, #12
 800df6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800df6e:	4b05      	ldr	r3, [pc, #20]	; (800df84 <xTaskGetTickCount+0x1c>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800df74:	687b      	ldr	r3, [r7, #4]
}
 800df76:	4618      	mov	r0, r3
 800df78:	370c      	adds	r7, #12
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop
 800df84:	2404af40 	.word	0x2404af40

0800df88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b086      	sub	sp, #24
 800df8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800df8e:	2300      	movs	r3, #0
 800df90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df92:	4b4f      	ldr	r3, [pc, #316]	; (800e0d0 <xTaskIncrementTick+0x148>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	f040 808f 	bne.w	800e0ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800df9c:	4b4d      	ldr	r3, [pc, #308]	; (800e0d4 <xTaskIncrementTick+0x14c>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dfa4:	4a4b      	ldr	r2, [pc, #300]	; (800e0d4 <xTaskIncrementTick+0x14c>)
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d120      	bne.n	800dff2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dfb0:	4b49      	ldr	r3, [pc, #292]	; (800e0d8 <xTaskIncrementTick+0x150>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d00a      	beq.n	800dfd0 <xTaskIncrementTick+0x48>
	__asm volatile
 800dfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfbe:	f383 8811 	msr	BASEPRI, r3
 800dfc2:	f3bf 8f6f 	isb	sy
 800dfc6:	f3bf 8f4f 	dsb	sy
 800dfca:	603b      	str	r3, [r7, #0]
}
 800dfcc:	bf00      	nop
 800dfce:	e7fe      	b.n	800dfce <xTaskIncrementTick+0x46>
 800dfd0:	4b41      	ldr	r3, [pc, #260]	; (800e0d8 <xTaskIncrementTick+0x150>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	60fb      	str	r3, [r7, #12]
 800dfd6:	4b41      	ldr	r3, [pc, #260]	; (800e0dc <xTaskIncrementTick+0x154>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4a3f      	ldr	r2, [pc, #252]	; (800e0d8 <xTaskIncrementTick+0x150>)
 800dfdc:	6013      	str	r3, [r2, #0]
 800dfde:	4a3f      	ldr	r2, [pc, #252]	; (800e0dc <xTaskIncrementTick+0x154>)
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	6013      	str	r3, [r2, #0]
 800dfe4:	4b3e      	ldr	r3, [pc, #248]	; (800e0e0 <xTaskIncrementTick+0x158>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	3301      	adds	r3, #1
 800dfea:	4a3d      	ldr	r2, [pc, #244]	; (800e0e0 <xTaskIncrementTick+0x158>)
 800dfec:	6013      	str	r3, [r2, #0]
 800dfee:	f000 fad1 	bl	800e594 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dff2:	4b3c      	ldr	r3, [pc, #240]	; (800e0e4 <xTaskIncrementTick+0x15c>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	693a      	ldr	r2, [r7, #16]
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d349      	bcc.n	800e090 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dffc:	4b36      	ldr	r3, [pc, #216]	; (800e0d8 <xTaskIncrementTick+0x150>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d104      	bne.n	800e010 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e006:	4b37      	ldr	r3, [pc, #220]	; (800e0e4 <xTaskIncrementTick+0x15c>)
 800e008:	f04f 32ff 	mov.w	r2, #4294967295
 800e00c:	601a      	str	r2, [r3, #0]
					break;
 800e00e:	e03f      	b.n	800e090 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e010:	4b31      	ldr	r3, [pc, #196]	; (800e0d8 <xTaskIncrementTick+0x150>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	68db      	ldr	r3, [r3, #12]
 800e016:	68db      	ldr	r3, [r3, #12]
 800e018:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	685b      	ldr	r3, [r3, #4]
 800e01e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e020:	693a      	ldr	r2, [r7, #16]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	429a      	cmp	r2, r3
 800e026:	d203      	bcs.n	800e030 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e028:	4a2e      	ldr	r2, [pc, #184]	; (800e0e4 <xTaskIncrementTick+0x15c>)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e02e:	e02f      	b.n	800e090 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	3304      	adds	r3, #4
 800e034:	4618      	mov	r0, r3
 800e036:	f7fe fc77 	bl	800c928 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d004      	beq.n	800e04c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	3318      	adds	r3, #24
 800e046:	4618      	mov	r0, r3
 800e048:	f7fe fc6e 	bl	800c928 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e050:	4b25      	ldr	r3, [pc, #148]	; (800e0e8 <xTaskIncrementTick+0x160>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	429a      	cmp	r2, r3
 800e056:	d903      	bls.n	800e060 <xTaskIncrementTick+0xd8>
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e05c:	4a22      	ldr	r2, [pc, #136]	; (800e0e8 <xTaskIncrementTick+0x160>)
 800e05e:	6013      	str	r3, [r2, #0]
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e064:	4613      	mov	r3, r2
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	4413      	add	r3, r2
 800e06a:	009b      	lsls	r3, r3, #2
 800e06c:	4a1f      	ldr	r2, [pc, #124]	; (800e0ec <xTaskIncrementTick+0x164>)
 800e06e:	441a      	add	r2, r3
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	3304      	adds	r3, #4
 800e074:	4619      	mov	r1, r3
 800e076:	4610      	mov	r0, r2
 800e078:	f7fe fbf9 	bl	800c86e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e080:	4b1b      	ldr	r3, [pc, #108]	; (800e0f0 <xTaskIncrementTick+0x168>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e086:	429a      	cmp	r2, r3
 800e088:	d3b8      	bcc.n	800dffc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e08a:	2301      	movs	r3, #1
 800e08c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e08e:	e7b5      	b.n	800dffc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e090:	4b17      	ldr	r3, [pc, #92]	; (800e0f0 <xTaskIncrementTick+0x168>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e096:	4915      	ldr	r1, [pc, #84]	; (800e0ec <xTaskIncrementTick+0x164>)
 800e098:	4613      	mov	r3, r2
 800e09a:	009b      	lsls	r3, r3, #2
 800e09c:	4413      	add	r3, r2
 800e09e:	009b      	lsls	r3, r3, #2
 800e0a0:	440b      	add	r3, r1
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d901      	bls.n	800e0ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e0ac:	4b11      	ldr	r3, [pc, #68]	; (800e0f4 <xTaskIncrementTick+0x16c>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d007      	beq.n	800e0c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	617b      	str	r3, [r7, #20]
 800e0b8:	e004      	b.n	800e0c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e0ba:	4b0f      	ldr	r3, [pc, #60]	; (800e0f8 <xTaskIncrementTick+0x170>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	3301      	adds	r3, #1
 800e0c0:	4a0d      	ldr	r2, [pc, #52]	; (800e0f8 <xTaskIncrementTick+0x170>)
 800e0c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e0c4:	697b      	ldr	r3, [r7, #20]
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3718      	adds	r7, #24
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	2404af64 	.word	0x2404af64
 800e0d4:	2404af40 	.word	0x2404af40
 800e0d8:	2404aef4 	.word	0x2404aef4
 800e0dc:	2404aef8 	.word	0x2404aef8
 800e0e0:	2404af54 	.word	0x2404af54
 800e0e4:	2404af5c 	.word	0x2404af5c
 800e0e8:	2404af44 	.word	0x2404af44
 800e0ec:	2404aa6c 	.word	0x2404aa6c
 800e0f0:	2404aa68 	.word	0x2404aa68
 800e0f4:	2404af50 	.word	0x2404af50
 800e0f8:	2404af4c 	.word	0x2404af4c

0800e0fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b085      	sub	sp, #20
 800e100:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e102:	4b28      	ldr	r3, [pc, #160]	; (800e1a4 <vTaskSwitchContext+0xa8>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d003      	beq.n	800e112 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e10a:	4b27      	ldr	r3, [pc, #156]	; (800e1a8 <vTaskSwitchContext+0xac>)
 800e10c:	2201      	movs	r2, #1
 800e10e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e110:	e041      	b.n	800e196 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e112:	4b25      	ldr	r3, [pc, #148]	; (800e1a8 <vTaskSwitchContext+0xac>)
 800e114:	2200      	movs	r2, #0
 800e116:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e118:	4b24      	ldr	r3, [pc, #144]	; (800e1ac <vTaskSwitchContext+0xb0>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	60fb      	str	r3, [r7, #12]
 800e11e:	e010      	b.n	800e142 <vTaskSwitchContext+0x46>
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d10a      	bne.n	800e13c <vTaskSwitchContext+0x40>
	__asm volatile
 800e126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e12a:	f383 8811 	msr	BASEPRI, r3
 800e12e:	f3bf 8f6f 	isb	sy
 800e132:	f3bf 8f4f 	dsb	sy
 800e136:	607b      	str	r3, [r7, #4]
}
 800e138:	bf00      	nop
 800e13a:	e7fe      	b.n	800e13a <vTaskSwitchContext+0x3e>
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	3b01      	subs	r3, #1
 800e140:	60fb      	str	r3, [r7, #12]
 800e142:	491b      	ldr	r1, [pc, #108]	; (800e1b0 <vTaskSwitchContext+0xb4>)
 800e144:	68fa      	ldr	r2, [r7, #12]
 800e146:	4613      	mov	r3, r2
 800e148:	009b      	lsls	r3, r3, #2
 800e14a:	4413      	add	r3, r2
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	440b      	add	r3, r1
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d0e4      	beq.n	800e120 <vTaskSwitchContext+0x24>
 800e156:	68fa      	ldr	r2, [r7, #12]
 800e158:	4613      	mov	r3, r2
 800e15a:	009b      	lsls	r3, r3, #2
 800e15c:	4413      	add	r3, r2
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	4a13      	ldr	r2, [pc, #76]	; (800e1b0 <vTaskSwitchContext+0xb4>)
 800e162:	4413      	add	r3, r2
 800e164:	60bb      	str	r3, [r7, #8]
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	685a      	ldr	r2, [r3, #4]
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	605a      	str	r2, [r3, #4]
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	685a      	ldr	r2, [r3, #4]
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	3308      	adds	r3, #8
 800e178:	429a      	cmp	r2, r3
 800e17a:	d104      	bne.n	800e186 <vTaskSwitchContext+0x8a>
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	685a      	ldr	r2, [r3, #4]
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	605a      	str	r2, [r3, #4]
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	685b      	ldr	r3, [r3, #4]
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	4a09      	ldr	r2, [pc, #36]	; (800e1b4 <vTaskSwitchContext+0xb8>)
 800e18e:	6013      	str	r3, [r2, #0]
 800e190:	4a06      	ldr	r2, [pc, #24]	; (800e1ac <vTaskSwitchContext+0xb0>)
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	6013      	str	r3, [r2, #0]
}
 800e196:	bf00      	nop
 800e198:	3714      	adds	r7, #20
 800e19a:	46bd      	mov	sp, r7
 800e19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a0:	4770      	bx	lr
 800e1a2:	bf00      	nop
 800e1a4:	2404af64 	.word	0x2404af64
 800e1a8:	2404af50 	.word	0x2404af50
 800e1ac:	2404af44 	.word	0x2404af44
 800e1b0:	2404aa6c 	.word	0x2404aa6c
 800e1b4:	2404aa68 	.word	0x2404aa68

0800e1b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b084      	sub	sp, #16
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d10a      	bne.n	800e1de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1cc:	f383 8811 	msr	BASEPRI, r3
 800e1d0:	f3bf 8f6f 	isb	sy
 800e1d4:	f3bf 8f4f 	dsb	sy
 800e1d8:	60fb      	str	r3, [r7, #12]
}
 800e1da:	bf00      	nop
 800e1dc:	e7fe      	b.n	800e1dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e1de:	4b07      	ldr	r3, [pc, #28]	; (800e1fc <vTaskPlaceOnEventList+0x44>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	3318      	adds	r3, #24
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f7fe fb65 	bl	800c8b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e1ec:	2101      	movs	r1, #1
 800e1ee:	6838      	ldr	r0, [r7, #0]
 800e1f0:	f000 fb7a 	bl	800e8e8 <prvAddCurrentTaskToDelayedList>
}
 800e1f4:	bf00      	nop
 800e1f6:	3710      	adds	r7, #16
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}
 800e1fc:	2404aa68 	.word	0x2404aa68

0800e200 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e200:	b580      	push	{r7, lr}
 800e202:	b086      	sub	sp, #24
 800e204:	af00      	add	r7, sp, #0
 800e206:	60f8      	str	r0, [r7, #12]
 800e208:	60b9      	str	r1, [r7, #8]
 800e20a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d10a      	bne.n	800e228 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e216:	f383 8811 	msr	BASEPRI, r3
 800e21a:	f3bf 8f6f 	isb	sy
 800e21e:	f3bf 8f4f 	dsb	sy
 800e222:	617b      	str	r3, [r7, #20]
}
 800e224:	bf00      	nop
 800e226:	e7fe      	b.n	800e226 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e228:	4b0a      	ldr	r3, [pc, #40]	; (800e254 <vTaskPlaceOnEventListRestricted+0x54>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	3318      	adds	r3, #24
 800e22e:	4619      	mov	r1, r3
 800e230:	68f8      	ldr	r0, [r7, #12]
 800e232:	f7fe fb1c 	bl	800c86e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d002      	beq.n	800e242 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e23c:	f04f 33ff 	mov.w	r3, #4294967295
 800e240:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e242:	6879      	ldr	r1, [r7, #4]
 800e244:	68b8      	ldr	r0, [r7, #8]
 800e246:	f000 fb4f 	bl	800e8e8 <prvAddCurrentTaskToDelayedList>
	}
 800e24a:	bf00      	nop
 800e24c:	3718      	adds	r7, #24
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop
 800e254:	2404aa68 	.word	0x2404aa68

0800e258 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b086      	sub	sp, #24
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	68db      	ldr	r3, [r3, #12]
 800e264:	68db      	ldr	r3, [r3, #12]
 800e266:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d10a      	bne.n	800e284 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e272:	f383 8811 	msr	BASEPRI, r3
 800e276:	f3bf 8f6f 	isb	sy
 800e27a:	f3bf 8f4f 	dsb	sy
 800e27e:	60fb      	str	r3, [r7, #12]
}
 800e280:	bf00      	nop
 800e282:	e7fe      	b.n	800e282 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	3318      	adds	r3, #24
 800e288:	4618      	mov	r0, r3
 800e28a:	f7fe fb4d 	bl	800c928 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e28e:	4b1e      	ldr	r3, [pc, #120]	; (800e308 <xTaskRemoveFromEventList+0xb0>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d11d      	bne.n	800e2d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	3304      	adds	r3, #4
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7fe fb44 	bl	800c928 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2a4:	4b19      	ldr	r3, [pc, #100]	; (800e30c <xTaskRemoveFromEventList+0xb4>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d903      	bls.n	800e2b4 <xTaskRemoveFromEventList+0x5c>
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2b0:	4a16      	ldr	r2, [pc, #88]	; (800e30c <xTaskRemoveFromEventList+0xb4>)
 800e2b2:	6013      	str	r3, [r2, #0]
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2b8:	4613      	mov	r3, r2
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	4413      	add	r3, r2
 800e2be:	009b      	lsls	r3, r3, #2
 800e2c0:	4a13      	ldr	r2, [pc, #76]	; (800e310 <xTaskRemoveFromEventList+0xb8>)
 800e2c2:	441a      	add	r2, r3
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	3304      	adds	r3, #4
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	4610      	mov	r0, r2
 800e2cc:	f7fe facf 	bl	800c86e <vListInsertEnd>
 800e2d0:	e005      	b.n	800e2de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	3318      	adds	r3, #24
 800e2d6:	4619      	mov	r1, r3
 800e2d8:	480e      	ldr	r0, [pc, #56]	; (800e314 <xTaskRemoveFromEventList+0xbc>)
 800e2da:	f7fe fac8 	bl	800c86e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2e2:	4b0d      	ldr	r3, [pc, #52]	; (800e318 <xTaskRemoveFromEventList+0xc0>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d905      	bls.n	800e2f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e2f0:	4b0a      	ldr	r3, [pc, #40]	; (800e31c <xTaskRemoveFromEventList+0xc4>)
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	601a      	str	r2, [r3, #0]
 800e2f6:	e001      	b.n	800e2fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e2fc:	697b      	ldr	r3, [r7, #20]
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3718      	adds	r7, #24
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop
 800e308:	2404af64 	.word	0x2404af64
 800e30c:	2404af44 	.word	0x2404af44
 800e310:	2404aa6c 	.word	0x2404aa6c
 800e314:	2404aefc 	.word	0x2404aefc
 800e318:	2404aa68 	.word	0x2404aa68
 800e31c:	2404af50 	.word	0x2404af50

0800e320 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e320:	b480      	push	{r7}
 800e322:	b083      	sub	sp, #12
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e328:	4b06      	ldr	r3, [pc, #24]	; (800e344 <vTaskInternalSetTimeOutState+0x24>)
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e330:	4b05      	ldr	r3, [pc, #20]	; (800e348 <vTaskInternalSetTimeOutState+0x28>)
 800e332:	681a      	ldr	r2, [r3, #0]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	605a      	str	r2, [r3, #4]
}
 800e338:	bf00      	nop
 800e33a:	370c      	adds	r7, #12
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr
 800e344:	2404af54 	.word	0x2404af54
 800e348:	2404af40 	.word	0x2404af40

0800e34c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b088      	sub	sp, #32
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
 800e354:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d10a      	bne.n	800e372 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e360:	f383 8811 	msr	BASEPRI, r3
 800e364:	f3bf 8f6f 	isb	sy
 800e368:	f3bf 8f4f 	dsb	sy
 800e36c:	613b      	str	r3, [r7, #16]
}
 800e36e:	bf00      	nop
 800e370:	e7fe      	b.n	800e370 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d10a      	bne.n	800e38e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e37c:	f383 8811 	msr	BASEPRI, r3
 800e380:	f3bf 8f6f 	isb	sy
 800e384:	f3bf 8f4f 	dsb	sy
 800e388:	60fb      	str	r3, [r7, #12]
}
 800e38a:	bf00      	nop
 800e38c:	e7fe      	b.n	800e38c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e38e:	f000 ff79 	bl	800f284 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e392:	4b1d      	ldr	r3, [pc, #116]	; (800e408 <xTaskCheckForTimeOut+0xbc>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	69ba      	ldr	r2, [r7, #24]
 800e39e:	1ad3      	subs	r3, r2, r3
 800e3a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3aa:	d102      	bne.n	800e3b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	61fb      	str	r3, [r7, #28]
 800e3b0:	e023      	b.n	800e3fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	4b15      	ldr	r3, [pc, #84]	; (800e40c <xTaskCheckForTimeOut+0xc0>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d007      	beq.n	800e3ce <xTaskCheckForTimeOut+0x82>
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	685b      	ldr	r3, [r3, #4]
 800e3c2:	69ba      	ldr	r2, [r7, #24]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d302      	bcc.n	800e3ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	61fb      	str	r3, [r7, #28]
 800e3cc:	e015      	b.n	800e3fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	697a      	ldr	r2, [r7, #20]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d20b      	bcs.n	800e3f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	1ad2      	subs	r2, r2, r3
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f7ff ff9b 	bl	800e320 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	61fb      	str	r3, [r7, #28]
 800e3ee:	e004      	b.n	800e3fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e3fa:	f000 ff73 	bl	800f2e4 <vPortExitCritical>

	return xReturn;
 800e3fe:	69fb      	ldr	r3, [r7, #28]
}
 800e400:	4618      	mov	r0, r3
 800e402:	3720      	adds	r7, #32
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}
 800e408:	2404af40 	.word	0x2404af40
 800e40c:	2404af54 	.word	0x2404af54

0800e410 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e410:	b480      	push	{r7}
 800e412:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e414:	4b03      	ldr	r3, [pc, #12]	; (800e424 <vTaskMissedYield+0x14>)
 800e416:	2201      	movs	r2, #1
 800e418:	601a      	str	r2, [r3, #0]
}
 800e41a:	bf00      	nop
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr
 800e424:	2404af50 	.word	0x2404af50

0800e428 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e430:	f000 f852 	bl	800e4d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e434:	4b06      	ldr	r3, [pc, #24]	; (800e450 <prvIdleTask+0x28>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	2b01      	cmp	r3, #1
 800e43a:	d9f9      	bls.n	800e430 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e43c:	4b05      	ldr	r3, [pc, #20]	; (800e454 <prvIdleTask+0x2c>)
 800e43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e442:	601a      	str	r2, [r3, #0]
 800e444:	f3bf 8f4f 	dsb	sy
 800e448:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e44c:	e7f0      	b.n	800e430 <prvIdleTask+0x8>
 800e44e:	bf00      	nop
 800e450:	2404aa6c 	.word	0x2404aa6c
 800e454:	e000ed04 	.word	0xe000ed04

0800e458 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e45e:	2300      	movs	r3, #0
 800e460:	607b      	str	r3, [r7, #4]
 800e462:	e00c      	b.n	800e47e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e464:	687a      	ldr	r2, [r7, #4]
 800e466:	4613      	mov	r3, r2
 800e468:	009b      	lsls	r3, r3, #2
 800e46a:	4413      	add	r3, r2
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	4a12      	ldr	r2, [pc, #72]	; (800e4b8 <prvInitialiseTaskLists+0x60>)
 800e470:	4413      	add	r3, r2
 800e472:	4618      	mov	r0, r3
 800e474:	f7fe f9ce 	bl	800c814 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	3301      	adds	r3, #1
 800e47c:	607b      	str	r3, [r7, #4]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2b37      	cmp	r3, #55	; 0x37
 800e482:	d9ef      	bls.n	800e464 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e484:	480d      	ldr	r0, [pc, #52]	; (800e4bc <prvInitialiseTaskLists+0x64>)
 800e486:	f7fe f9c5 	bl	800c814 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e48a:	480d      	ldr	r0, [pc, #52]	; (800e4c0 <prvInitialiseTaskLists+0x68>)
 800e48c:	f7fe f9c2 	bl	800c814 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e490:	480c      	ldr	r0, [pc, #48]	; (800e4c4 <prvInitialiseTaskLists+0x6c>)
 800e492:	f7fe f9bf 	bl	800c814 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e496:	480c      	ldr	r0, [pc, #48]	; (800e4c8 <prvInitialiseTaskLists+0x70>)
 800e498:	f7fe f9bc 	bl	800c814 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e49c:	480b      	ldr	r0, [pc, #44]	; (800e4cc <prvInitialiseTaskLists+0x74>)
 800e49e:	f7fe f9b9 	bl	800c814 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e4a2:	4b0b      	ldr	r3, [pc, #44]	; (800e4d0 <prvInitialiseTaskLists+0x78>)
 800e4a4:	4a05      	ldr	r2, [pc, #20]	; (800e4bc <prvInitialiseTaskLists+0x64>)
 800e4a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e4a8:	4b0a      	ldr	r3, [pc, #40]	; (800e4d4 <prvInitialiseTaskLists+0x7c>)
 800e4aa:	4a05      	ldr	r2, [pc, #20]	; (800e4c0 <prvInitialiseTaskLists+0x68>)
 800e4ac:	601a      	str	r2, [r3, #0]
}
 800e4ae:	bf00      	nop
 800e4b0:	3708      	adds	r7, #8
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	2404aa6c 	.word	0x2404aa6c
 800e4bc:	2404aecc 	.word	0x2404aecc
 800e4c0:	2404aee0 	.word	0x2404aee0
 800e4c4:	2404aefc 	.word	0x2404aefc
 800e4c8:	2404af10 	.word	0x2404af10
 800e4cc:	2404af28 	.word	0x2404af28
 800e4d0:	2404aef4 	.word	0x2404aef4
 800e4d4:	2404aef8 	.word	0x2404aef8

0800e4d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e4de:	e019      	b.n	800e514 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e4e0:	f000 fed0 	bl	800f284 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4e4:	4b10      	ldr	r3, [pc, #64]	; (800e528 <prvCheckTasksWaitingTermination+0x50>)
 800e4e6:	68db      	ldr	r3, [r3, #12]
 800e4e8:	68db      	ldr	r3, [r3, #12]
 800e4ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	3304      	adds	r3, #4
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7fe fa19 	bl	800c928 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e4f6:	4b0d      	ldr	r3, [pc, #52]	; (800e52c <prvCheckTasksWaitingTermination+0x54>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	3b01      	subs	r3, #1
 800e4fc:	4a0b      	ldr	r2, [pc, #44]	; (800e52c <prvCheckTasksWaitingTermination+0x54>)
 800e4fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e500:	4b0b      	ldr	r3, [pc, #44]	; (800e530 <prvCheckTasksWaitingTermination+0x58>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	3b01      	subs	r3, #1
 800e506:	4a0a      	ldr	r2, [pc, #40]	; (800e530 <prvCheckTasksWaitingTermination+0x58>)
 800e508:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e50a:	f000 feeb 	bl	800f2e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f000 f810 	bl	800e534 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e514:	4b06      	ldr	r3, [pc, #24]	; (800e530 <prvCheckTasksWaitingTermination+0x58>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d1e1      	bne.n	800e4e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e51c:	bf00      	nop
 800e51e:	bf00      	nop
 800e520:	3708      	adds	r7, #8
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	2404af10 	.word	0x2404af10
 800e52c:	2404af3c 	.word	0x2404af3c
 800e530:	2404af24 	.word	0x2404af24

0800e534 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e542:	2b00      	cmp	r3, #0
 800e544:	d108      	bne.n	800e558 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e54a:	4618      	mov	r0, r3
 800e54c:	f001 f888 	bl	800f660 <vPortFree>
				vPortFree( pxTCB );
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f001 f885 	bl	800f660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e556:	e018      	b.n	800e58a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e55e:	2b01      	cmp	r3, #1
 800e560:	d103      	bne.n	800e56a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f001 f87c 	bl	800f660 <vPortFree>
	}
 800e568:	e00f      	b.n	800e58a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e570:	2b02      	cmp	r3, #2
 800e572:	d00a      	beq.n	800e58a <prvDeleteTCB+0x56>
	__asm volatile
 800e574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e578:	f383 8811 	msr	BASEPRI, r3
 800e57c:	f3bf 8f6f 	isb	sy
 800e580:	f3bf 8f4f 	dsb	sy
 800e584:	60fb      	str	r3, [r7, #12]
}
 800e586:	bf00      	nop
 800e588:	e7fe      	b.n	800e588 <prvDeleteTCB+0x54>
	}
 800e58a:	bf00      	nop
 800e58c:	3710      	adds	r7, #16
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
	...

0800e594 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e594:	b480      	push	{r7}
 800e596:	b083      	sub	sp, #12
 800e598:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e59a:	4b0c      	ldr	r3, [pc, #48]	; (800e5cc <prvResetNextTaskUnblockTime+0x38>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d104      	bne.n	800e5ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e5a4:	4b0a      	ldr	r3, [pc, #40]	; (800e5d0 <prvResetNextTaskUnblockTime+0x3c>)
 800e5a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e5aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e5ac:	e008      	b.n	800e5c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5ae:	4b07      	ldr	r3, [pc, #28]	; (800e5cc <prvResetNextTaskUnblockTime+0x38>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	68db      	ldr	r3, [r3, #12]
 800e5b4:	68db      	ldr	r3, [r3, #12]
 800e5b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	4a04      	ldr	r2, [pc, #16]	; (800e5d0 <prvResetNextTaskUnblockTime+0x3c>)
 800e5be:	6013      	str	r3, [r2, #0]
}
 800e5c0:	bf00      	nop
 800e5c2:	370c      	adds	r7, #12
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr
 800e5cc:	2404aef4 	.word	0x2404aef4
 800e5d0:	2404af5c 	.word	0x2404af5c

0800e5d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b083      	sub	sp, #12
 800e5d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e5da:	4b0b      	ldr	r3, [pc, #44]	; (800e608 <xTaskGetSchedulerState+0x34>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d102      	bne.n	800e5e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	607b      	str	r3, [r7, #4]
 800e5e6:	e008      	b.n	800e5fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5e8:	4b08      	ldr	r3, [pc, #32]	; (800e60c <xTaskGetSchedulerState+0x38>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d102      	bne.n	800e5f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e5f0:	2302      	movs	r3, #2
 800e5f2:	607b      	str	r3, [r7, #4]
 800e5f4:	e001      	b.n	800e5fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e5fa:	687b      	ldr	r3, [r7, #4]
	}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	370c      	adds	r7, #12
 800e600:	46bd      	mov	sp, r7
 800e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e606:	4770      	bx	lr
 800e608:	2404af48 	.word	0x2404af48
 800e60c:	2404af64 	.word	0x2404af64

0800e610 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e610:	b580      	push	{r7, lr}
 800e612:	b084      	sub	sp, #16
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e61c:	2300      	movs	r3, #0
 800e61e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d051      	beq.n	800e6ca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e62a:	4b2a      	ldr	r3, [pc, #168]	; (800e6d4 <xTaskPriorityInherit+0xc4>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e630:	429a      	cmp	r2, r3
 800e632:	d241      	bcs.n	800e6b8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	699b      	ldr	r3, [r3, #24]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	db06      	blt.n	800e64a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e63c:	4b25      	ldr	r3, [pc, #148]	; (800e6d4 <xTaskPriorityInherit+0xc4>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e642:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	6959      	ldr	r1, [r3, #20]
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e652:	4613      	mov	r3, r2
 800e654:	009b      	lsls	r3, r3, #2
 800e656:	4413      	add	r3, r2
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	4a1f      	ldr	r2, [pc, #124]	; (800e6d8 <xTaskPriorityInherit+0xc8>)
 800e65c:	4413      	add	r3, r2
 800e65e:	4299      	cmp	r1, r3
 800e660:	d122      	bne.n	800e6a8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	3304      	adds	r3, #4
 800e666:	4618      	mov	r0, r3
 800e668:	f7fe f95e 	bl	800c928 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e66c:	4b19      	ldr	r3, [pc, #100]	; (800e6d4 <xTaskPriorityInherit+0xc4>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e67a:	4b18      	ldr	r3, [pc, #96]	; (800e6dc <xTaskPriorityInherit+0xcc>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	429a      	cmp	r2, r3
 800e680:	d903      	bls.n	800e68a <xTaskPriorityInherit+0x7a>
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e686:	4a15      	ldr	r2, [pc, #84]	; (800e6dc <xTaskPriorityInherit+0xcc>)
 800e688:	6013      	str	r3, [r2, #0]
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e68e:	4613      	mov	r3, r2
 800e690:	009b      	lsls	r3, r3, #2
 800e692:	4413      	add	r3, r2
 800e694:	009b      	lsls	r3, r3, #2
 800e696:	4a10      	ldr	r2, [pc, #64]	; (800e6d8 <xTaskPriorityInherit+0xc8>)
 800e698:	441a      	add	r2, r3
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	3304      	adds	r3, #4
 800e69e:	4619      	mov	r1, r3
 800e6a0:	4610      	mov	r0, r2
 800e6a2:	f7fe f8e4 	bl	800c86e <vListInsertEnd>
 800e6a6:	e004      	b.n	800e6b2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e6a8:	4b0a      	ldr	r3, [pc, #40]	; (800e6d4 <xTaskPriorityInherit+0xc4>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	60fb      	str	r3, [r7, #12]
 800e6b6:	e008      	b.n	800e6ca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e6bc:	4b05      	ldr	r3, [pc, #20]	; (800e6d4 <xTaskPriorityInherit+0xc4>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c2:	429a      	cmp	r2, r3
 800e6c4:	d201      	bcs.n	800e6ca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
	}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3710      	adds	r7, #16
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}
 800e6d4:	2404aa68 	.word	0x2404aa68
 800e6d8:	2404aa6c 	.word	0x2404aa6c
 800e6dc:	2404af44 	.word	0x2404af44

0800e6e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b086      	sub	sp, #24
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d056      	beq.n	800e7a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e6f6:	4b2e      	ldr	r3, [pc, #184]	; (800e7b0 <xTaskPriorityDisinherit+0xd0>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	693a      	ldr	r2, [r7, #16]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d00a      	beq.n	800e716 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e704:	f383 8811 	msr	BASEPRI, r3
 800e708:	f3bf 8f6f 	isb	sy
 800e70c:	f3bf 8f4f 	dsb	sy
 800e710:	60fb      	str	r3, [r7, #12]
}
 800e712:	bf00      	nop
 800e714:	e7fe      	b.n	800e714 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d10a      	bne.n	800e734 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e722:	f383 8811 	msr	BASEPRI, r3
 800e726:	f3bf 8f6f 	isb	sy
 800e72a:	f3bf 8f4f 	dsb	sy
 800e72e:	60bb      	str	r3, [r7, #8]
}
 800e730:	bf00      	nop
 800e732:	e7fe      	b.n	800e732 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e738:	1e5a      	subs	r2, r3, #1
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e746:	429a      	cmp	r2, r3
 800e748:	d02c      	beq.n	800e7a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d128      	bne.n	800e7a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	3304      	adds	r3, #4
 800e756:	4618      	mov	r0, r3
 800e758:	f7fe f8e6 	bl	800c928 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e768:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e774:	4b0f      	ldr	r3, [pc, #60]	; (800e7b4 <xTaskPriorityDisinherit+0xd4>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d903      	bls.n	800e784 <xTaskPriorityDisinherit+0xa4>
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e780:	4a0c      	ldr	r2, [pc, #48]	; (800e7b4 <xTaskPriorityDisinherit+0xd4>)
 800e782:	6013      	str	r3, [r2, #0]
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e788:	4613      	mov	r3, r2
 800e78a:	009b      	lsls	r3, r3, #2
 800e78c:	4413      	add	r3, r2
 800e78e:	009b      	lsls	r3, r3, #2
 800e790:	4a09      	ldr	r2, [pc, #36]	; (800e7b8 <xTaskPriorityDisinherit+0xd8>)
 800e792:	441a      	add	r2, r3
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	3304      	adds	r3, #4
 800e798:	4619      	mov	r1, r3
 800e79a:	4610      	mov	r0, r2
 800e79c:	f7fe f867 	bl	800c86e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e7a4:	697b      	ldr	r3, [r7, #20]
	}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3718      	adds	r7, #24
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
 800e7ae:	bf00      	nop
 800e7b0:	2404aa68 	.word	0x2404aa68
 800e7b4:	2404af44 	.word	0x2404af44
 800e7b8:	2404aa6c 	.word	0x2404aa6c

0800e7bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b088      	sub	sp, #32
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
 800e7c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d06a      	beq.n	800e8aa <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d10a      	bne.n	800e7f2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e0:	f383 8811 	msr	BASEPRI, r3
 800e7e4:	f3bf 8f6f 	isb	sy
 800e7e8:	f3bf 8f4f 	dsb	sy
 800e7ec:	60fb      	str	r3, [r7, #12]
}
 800e7ee:	bf00      	nop
 800e7f0:	e7fe      	b.n	800e7f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e7f2:	69bb      	ldr	r3, [r7, #24]
 800e7f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7f6:	683a      	ldr	r2, [r7, #0]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d902      	bls.n	800e802 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	61fb      	str	r3, [r7, #28]
 800e800:	e002      	b.n	800e808 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e802:	69bb      	ldr	r3, [r7, #24]
 800e804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e806:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e808:	69bb      	ldr	r3, [r7, #24]
 800e80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e80c:	69fa      	ldr	r2, [r7, #28]
 800e80e:	429a      	cmp	r2, r3
 800e810:	d04b      	beq.n	800e8aa <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e812:	69bb      	ldr	r3, [r7, #24]
 800e814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e816:	697a      	ldr	r2, [r7, #20]
 800e818:	429a      	cmp	r2, r3
 800e81a:	d146      	bne.n	800e8aa <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e81c:	4b25      	ldr	r3, [pc, #148]	; (800e8b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	69ba      	ldr	r2, [r7, #24]
 800e822:	429a      	cmp	r2, r3
 800e824:	d10a      	bne.n	800e83c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e82a:	f383 8811 	msr	BASEPRI, r3
 800e82e:	f3bf 8f6f 	isb	sy
 800e832:	f3bf 8f4f 	dsb	sy
 800e836:	60bb      	str	r3, [r7, #8]
}
 800e838:	bf00      	nop
 800e83a:	e7fe      	b.n	800e83a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e83c:	69bb      	ldr	r3, [r7, #24]
 800e83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e840:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e842:	69bb      	ldr	r3, [r7, #24]
 800e844:	69fa      	ldr	r2, [r7, #28]
 800e846:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e848:	69bb      	ldr	r3, [r7, #24]
 800e84a:	699b      	ldr	r3, [r3, #24]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	db04      	blt.n	800e85a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e850:	69fb      	ldr	r3, [r7, #28]
 800e852:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e856:	69bb      	ldr	r3, [r7, #24]
 800e858:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e85a:	69bb      	ldr	r3, [r7, #24]
 800e85c:	6959      	ldr	r1, [r3, #20]
 800e85e:	693a      	ldr	r2, [r7, #16]
 800e860:	4613      	mov	r3, r2
 800e862:	009b      	lsls	r3, r3, #2
 800e864:	4413      	add	r3, r2
 800e866:	009b      	lsls	r3, r3, #2
 800e868:	4a13      	ldr	r2, [pc, #76]	; (800e8b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e86a:	4413      	add	r3, r2
 800e86c:	4299      	cmp	r1, r3
 800e86e:	d11c      	bne.n	800e8aa <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e870:	69bb      	ldr	r3, [r7, #24]
 800e872:	3304      	adds	r3, #4
 800e874:	4618      	mov	r0, r3
 800e876:	f7fe f857 	bl	800c928 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e87a:	69bb      	ldr	r3, [r7, #24]
 800e87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e87e:	4b0f      	ldr	r3, [pc, #60]	; (800e8bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	429a      	cmp	r2, r3
 800e884:	d903      	bls.n	800e88e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e886:	69bb      	ldr	r3, [r7, #24]
 800e888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e88a:	4a0c      	ldr	r2, [pc, #48]	; (800e8bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e88c:	6013      	str	r3, [r2, #0]
 800e88e:	69bb      	ldr	r3, [r7, #24]
 800e890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e892:	4613      	mov	r3, r2
 800e894:	009b      	lsls	r3, r3, #2
 800e896:	4413      	add	r3, r2
 800e898:	009b      	lsls	r3, r3, #2
 800e89a:	4a07      	ldr	r2, [pc, #28]	; (800e8b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e89c:	441a      	add	r2, r3
 800e89e:	69bb      	ldr	r3, [r7, #24]
 800e8a0:	3304      	adds	r3, #4
 800e8a2:	4619      	mov	r1, r3
 800e8a4:	4610      	mov	r0, r2
 800e8a6:	f7fd ffe2 	bl	800c86e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e8aa:	bf00      	nop
 800e8ac:	3720      	adds	r7, #32
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
 800e8b2:	bf00      	nop
 800e8b4:	2404aa68 	.word	0x2404aa68
 800e8b8:	2404aa6c 	.word	0x2404aa6c
 800e8bc:	2404af44 	.word	0x2404af44

0800e8c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e8c0:	b480      	push	{r7}
 800e8c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e8c4:	4b07      	ldr	r3, [pc, #28]	; (800e8e4 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d004      	beq.n	800e8d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e8cc:	4b05      	ldr	r3, [pc, #20]	; (800e8e4 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e8d2:	3201      	adds	r2, #1
 800e8d4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e8d6:	4b03      	ldr	r3, [pc, #12]	; (800e8e4 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
	}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr
 800e8e4:	2404aa68 	.word	0x2404aa68

0800e8e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b084      	sub	sp, #16
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e8f2:	4b21      	ldr	r3, [pc, #132]	; (800e978 <prvAddCurrentTaskToDelayedList+0x90>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8f8:	4b20      	ldr	r3, [pc, #128]	; (800e97c <prvAddCurrentTaskToDelayedList+0x94>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	3304      	adds	r3, #4
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7fe f812 	bl	800c928 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e90a:	d10a      	bne.n	800e922 <prvAddCurrentTaskToDelayedList+0x3a>
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d007      	beq.n	800e922 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e912:	4b1a      	ldr	r3, [pc, #104]	; (800e97c <prvAddCurrentTaskToDelayedList+0x94>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	3304      	adds	r3, #4
 800e918:	4619      	mov	r1, r3
 800e91a:	4819      	ldr	r0, [pc, #100]	; (800e980 <prvAddCurrentTaskToDelayedList+0x98>)
 800e91c:	f7fd ffa7 	bl	800c86e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e920:	e026      	b.n	800e970 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e922:	68fa      	ldr	r2, [r7, #12]
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	4413      	add	r3, r2
 800e928:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e92a:	4b14      	ldr	r3, [pc, #80]	; (800e97c <prvAddCurrentTaskToDelayedList+0x94>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	68ba      	ldr	r2, [r7, #8]
 800e930:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e932:	68ba      	ldr	r2, [r7, #8]
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	429a      	cmp	r2, r3
 800e938:	d209      	bcs.n	800e94e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e93a:	4b12      	ldr	r3, [pc, #72]	; (800e984 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e93c:	681a      	ldr	r2, [r3, #0]
 800e93e:	4b0f      	ldr	r3, [pc, #60]	; (800e97c <prvAddCurrentTaskToDelayedList+0x94>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	3304      	adds	r3, #4
 800e944:	4619      	mov	r1, r3
 800e946:	4610      	mov	r0, r2
 800e948:	f7fd ffb5 	bl	800c8b6 <vListInsert>
}
 800e94c:	e010      	b.n	800e970 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e94e:	4b0e      	ldr	r3, [pc, #56]	; (800e988 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e950:	681a      	ldr	r2, [r3, #0]
 800e952:	4b0a      	ldr	r3, [pc, #40]	; (800e97c <prvAddCurrentTaskToDelayedList+0x94>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	3304      	adds	r3, #4
 800e958:	4619      	mov	r1, r3
 800e95a:	4610      	mov	r0, r2
 800e95c:	f7fd ffab 	bl	800c8b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e960:	4b0a      	ldr	r3, [pc, #40]	; (800e98c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	68ba      	ldr	r2, [r7, #8]
 800e966:	429a      	cmp	r2, r3
 800e968:	d202      	bcs.n	800e970 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e96a:	4a08      	ldr	r2, [pc, #32]	; (800e98c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	6013      	str	r3, [r2, #0]
}
 800e970:	bf00      	nop
 800e972:	3710      	adds	r7, #16
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}
 800e978:	2404af40 	.word	0x2404af40
 800e97c:	2404aa68 	.word	0x2404aa68
 800e980:	2404af28 	.word	0x2404af28
 800e984:	2404aef8 	.word	0x2404aef8
 800e988:	2404aef4 	.word	0x2404aef4
 800e98c:	2404af5c 	.word	0x2404af5c

0800e990 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b08a      	sub	sp, #40	; 0x28
 800e994:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e996:	2300      	movs	r3, #0
 800e998:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e99a:	f000 fb07 	bl	800efac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e99e:	4b1c      	ldr	r3, [pc, #112]	; (800ea10 <xTimerCreateTimerTask+0x80>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d021      	beq.n	800e9ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e9ae:	1d3a      	adds	r2, r7, #4
 800e9b0:	f107 0108 	add.w	r1, r7, #8
 800e9b4:	f107 030c 	add.w	r3, r7, #12
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f7fd ff11 	bl	800c7e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e9be:	6879      	ldr	r1, [r7, #4]
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	68fa      	ldr	r2, [r7, #12]
 800e9c4:	9202      	str	r2, [sp, #8]
 800e9c6:	9301      	str	r3, [sp, #4]
 800e9c8:	2302      	movs	r3, #2
 800e9ca:	9300      	str	r3, [sp, #0]
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	460a      	mov	r2, r1
 800e9d0:	4910      	ldr	r1, [pc, #64]	; (800ea14 <xTimerCreateTimerTask+0x84>)
 800e9d2:	4811      	ldr	r0, [pc, #68]	; (800ea18 <xTimerCreateTimerTask+0x88>)
 800e9d4:	f7fe ffe0 	bl	800d998 <xTaskCreateStatic>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	4a10      	ldr	r2, [pc, #64]	; (800ea1c <xTimerCreateTimerTask+0x8c>)
 800e9dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e9de:	4b0f      	ldr	r3, [pc, #60]	; (800ea1c <xTimerCreateTimerTask+0x8c>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d001      	beq.n	800e9ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d10a      	bne.n	800ea06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f4:	f383 8811 	msr	BASEPRI, r3
 800e9f8:	f3bf 8f6f 	isb	sy
 800e9fc:	f3bf 8f4f 	dsb	sy
 800ea00:	613b      	str	r3, [r7, #16]
}
 800ea02:	bf00      	nop
 800ea04:	e7fe      	b.n	800ea04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ea06:	697b      	ldr	r3, [r7, #20]
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3718      	adds	r7, #24
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}
 800ea10:	2404af98 	.word	0x2404af98
 800ea14:	08010c88 	.word	0x08010c88
 800ea18:	0800eb55 	.word	0x0800eb55
 800ea1c:	2404af9c 	.word	0x2404af9c

0800ea20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b08a      	sub	sp, #40	; 0x28
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	60b9      	str	r1, [r7, #8]
 800ea2a:	607a      	str	r2, [r7, #4]
 800ea2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d10a      	bne.n	800ea4e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ea38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea3c:	f383 8811 	msr	BASEPRI, r3
 800ea40:	f3bf 8f6f 	isb	sy
 800ea44:	f3bf 8f4f 	dsb	sy
 800ea48:	623b      	str	r3, [r7, #32]
}
 800ea4a:	bf00      	nop
 800ea4c:	e7fe      	b.n	800ea4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ea4e:	4b1a      	ldr	r3, [pc, #104]	; (800eab8 <xTimerGenericCommand+0x98>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d02a      	beq.n	800eaac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	2b05      	cmp	r3, #5
 800ea66:	dc18      	bgt.n	800ea9a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ea68:	f7ff fdb4 	bl	800e5d4 <xTaskGetSchedulerState>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	2b02      	cmp	r3, #2
 800ea70:	d109      	bne.n	800ea86 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ea72:	4b11      	ldr	r3, [pc, #68]	; (800eab8 <xTimerGenericCommand+0x98>)
 800ea74:	6818      	ldr	r0, [r3, #0]
 800ea76:	f107 0110 	add.w	r1, r7, #16
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea7e:	f7fe f925 	bl	800cccc <xQueueGenericSend>
 800ea82:	6278      	str	r0, [r7, #36]	; 0x24
 800ea84:	e012      	b.n	800eaac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ea86:	4b0c      	ldr	r3, [pc, #48]	; (800eab8 <xTimerGenericCommand+0x98>)
 800ea88:	6818      	ldr	r0, [r3, #0]
 800ea8a:	f107 0110 	add.w	r1, r7, #16
 800ea8e:	2300      	movs	r3, #0
 800ea90:	2200      	movs	r2, #0
 800ea92:	f7fe f91b 	bl	800cccc <xQueueGenericSend>
 800ea96:	6278      	str	r0, [r7, #36]	; 0x24
 800ea98:	e008      	b.n	800eaac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ea9a:	4b07      	ldr	r3, [pc, #28]	; (800eab8 <xTimerGenericCommand+0x98>)
 800ea9c:	6818      	ldr	r0, [r3, #0]
 800ea9e:	f107 0110 	add.w	r1, r7, #16
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	683a      	ldr	r2, [r7, #0]
 800eaa6:	f7fe fa0f 	bl	800cec8 <xQueueGenericSendFromISR>
 800eaaa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	3728      	adds	r7, #40	; 0x28
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
 800eab6:	bf00      	nop
 800eab8:	2404af98 	.word	0x2404af98

0800eabc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b088      	sub	sp, #32
 800eac0:	af02      	add	r7, sp, #8
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eac6:	4b22      	ldr	r3, [pc, #136]	; (800eb50 <prvProcessExpiredTimer+0x94>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	68db      	ldr	r3, [r3, #12]
 800eacc:	68db      	ldr	r3, [r3, #12]
 800eace:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	3304      	adds	r3, #4
 800ead4:	4618      	mov	r0, r3
 800ead6:	f7fd ff27 	bl	800c928 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eae0:	f003 0304 	and.w	r3, r3, #4
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d022      	beq.n	800eb2e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	699a      	ldr	r2, [r3, #24]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	18d1      	adds	r1, r2, r3
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	683a      	ldr	r2, [r7, #0]
 800eaf4:	6978      	ldr	r0, [r7, #20]
 800eaf6:	f000 f8d1 	bl	800ec9c <prvInsertTimerInActiveList>
 800eafa:	4603      	mov	r3, r0
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d01f      	beq.n	800eb40 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eb00:	2300      	movs	r3, #0
 800eb02:	9300      	str	r3, [sp, #0]
 800eb04:	2300      	movs	r3, #0
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	2100      	movs	r1, #0
 800eb0a:	6978      	ldr	r0, [r7, #20]
 800eb0c:	f7ff ff88 	bl	800ea20 <xTimerGenericCommand>
 800eb10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d113      	bne.n	800eb40 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800eb18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb1c:	f383 8811 	msr	BASEPRI, r3
 800eb20:	f3bf 8f6f 	isb	sy
 800eb24:	f3bf 8f4f 	dsb	sy
 800eb28:	60fb      	str	r3, [r7, #12]
}
 800eb2a:	bf00      	nop
 800eb2c:	e7fe      	b.n	800eb2c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb34:	f023 0301 	bic.w	r3, r3, #1
 800eb38:	b2da      	uxtb	r2, r3
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	6a1b      	ldr	r3, [r3, #32]
 800eb44:	6978      	ldr	r0, [r7, #20]
 800eb46:	4798      	blx	r3
}
 800eb48:	bf00      	nop
 800eb4a:	3718      	adds	r7, #24
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}
 800eb50:	2404af90 	.word	0x2404af90

0800eb54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eb5c:	f107 0308 	add.w	r3, r7, #8
 800eb60:	4618      	mov	r0, r3
 800eb62:	f000 f857 	bl	800ec14 <prvGetNextExpireTime>
 800eb66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	4619      	mov	r1, r3
 800eb6c:	68f8      	ldr	r0, [r7, #12]
 800eb6e:	f000 f803 	bl	800eb78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800eb72:	f000 f8d5 	bl	800ed20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eb76:	e7f1      	b.n	800eb5c <prvTimerTask+0x8>

0800eb78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800eb82:	f7ff f945 	bl	800de10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eb86:	f107 0308 	add.w	r3, r7, #8
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f000 f866 	bl	800ec5c <prvSampleTimeNow>
 800eb90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d130      	bne.n	800ebfa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d10a      	bne.n	800ebb4 <prvProcessTimerOrBlockTask+0x3c>
 800eb9e:	687a      	ldr	r2, [r7, #4]
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d806      	bhi.n	800ebb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800eba6:	f7ff f941 	bl	800de2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ebaa:	68f9      	ldr	r1, [r7, #12]
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f7ff ff85 	bl	800eabc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ebb2:	e024      	b.n	800ebfe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d008      	beq.n	800ebcc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ebba:	4b13      	ldr	r3, [pc, #76]	; (800ec08 <prvProcessTimerOrBlockTask+0x90>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d101      	bne.n	800ebc8 <prvProcessTimerOrBlockTask+0x50>
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	e000      	b.n	800ebca <prvProcessTimerOrBlockTask+0x52>
 800ebc8:	2300      	movs	r3, #0
 800ebca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ebcc:	4b0f      	ldr	r3, [pc, #60]	; (800ec0c <prvProcessTimerOrBlockTask+0x94>)
 800ebce:	6818      	ldr	r0, [r3, #0]
 800ebd0:	687a      	ldr	r2, [r7, #4]
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	1ad3      	subs	r3, r2, r3
 800ebd6:	683a      	ldr	r2, [r7, #0]
 800ebd8:	4619      	mov	r1, r3
 800ebda:	f7fe fea9 	bl	800d930 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ebde:	f7ff f925 	bl	800de2c <xTaskResumeAll>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d10a      	bne.n	800ebfe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ebe8:	4b09      	ldr	r3, [pc, #36]	; (800ec10 <prvProcessTimerOrBlockTask+0x98>)
 800ebea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebee:	601a      	str	r2, [r3, #0]
 800ebf0:	f3bf 8f4f 	dsb	sy
 800ebf4:	f3bf 8f6f 	isb	sy
}
 800ebf8:	e001      	b.n	800ebfe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ebfa:	f7ff f917 	bl	800de2c <xTaskResumeAll>
}
 800ebfe:	bf00      	nop
 800ec00:	3710      	adds	r7, #16
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}
 800ec06:	bf00      	nop
 800ec08:	2404af94 	.word	0x2404af94
 800ec0c:	2404af98 	.word	0x2404af98
 800ec10:	e000ed04 	.word	0xe000ed04

0800ec14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ec14:	b480      	push	{r7}
 800ec16:	b085      	sub	sp, #20
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ec1c:	4b0e      	ldr	r3, [pc, #56]	; (800ec58 <prvGetNextExpireTime+0x44>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d101      	bne.n	800ec2a <prvGetNextExpireTime+0x16>
 800ec26:	2201      	movs	r2, #1
 800ec28:	e000      	b.n	800ec2c <prvGetNextExpireTime+0x18>
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d105      	bne.n	800ec44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ec38:	4b07      	ldr	r3, [pc, #28]	; (800ec58 <prvGetNextExpireTime+0x44>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	68db      	ldr	r3, [r3, #12]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	60fb      	str	r3, [r7, #12]
 800ec42:	e001      	b.n	800ec48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ec44:	2300      	movs	r3, #0
 800ec46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ec48:	68fb      	ldr	r3, [r7, #12]
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3714      	adds	r7, #20
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec54:	4770      	bx	lr
 800ec56:	bf00      	nop
 800ec58:	2404af90 	.word	0x2404af90

0800ec5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b084      	sub	sp, #16
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ec64:	f7ff f980 	bl	800df68 <xTaskGetTickCount>
 800ec68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ec6a:	4b0b      	ldr	r3, [pc, #44]	; (800ec98 <prvSampleTimeNow+0x3c>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	68fa      	ldr	r2, [r7, #12]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d205      	bcs.n	800ec80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ec74:	f000 f936 	bl	800eee4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	601a      	str	r2, [r3, #0]
 800ec7e:	e002      	b.n	800ec86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2200      	movs	r2, #0
 800ec84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ec86:	4a04      	ldr	r2, [pc, #16]	; (800ec98 <prvSampleTimeNow+0x3c>)
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3710      	adds	r7, #16
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop
 800ec98:	2404afa0 	.word	0x2404afa0

0800ec9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b086      	sub	sp, #24
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60f8      	str	r0, [r7, #12]
 800eca4:	60b9      	str	r1, [r7, #8]
 800eca6:	607a      	str	r2, [r7, #4]
 800eca8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	68ba      	ldr	r2, [r7, #8]
 800ecb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	68fa      	ldr	r2, [r7, #12]
 800ecb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ecba:	68ba      	ldr	r2, [r7, #8]
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d812      	bhi.n	800ece8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecc2:	687a      	ldr	r2, [r7, #4]
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	1ad2      	subs	r2, r2, r3
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	699b      	ldr	r3, [r3, #24]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d302      	bcc.n	800ecd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	617b      	str	r3, [r7, #20]
 800ecd4:	e01b      	b.n	800ed0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ecd6:	4b10      	ldr	r3, [pc, #64]	; (800ed18 <prvInsertTimerInActiveList+0x7c>)
 800ecd8:	681a      	ldr	r2, [r3, #0]
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	3304      	adds	r3, #4
 800ecde:	4619      	mov	r1, r3
 800ece0:	4610      	mov	r0, r2
 800ece2:	f7fd fde8 	bl	800c8b6 <vListInsert>
 800ece6:	e012      	b.n	800ed0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ece8:	687a      	ldr	r2, [r7, #4]
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	429a      	cmp	r2, r3
 800ecee:	d206      	bcs.n	800ecfe <prvInsertTimerInActiveList+0x62>
 800ecf0:	68ba      	ldr	r2, [r7, #8]
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d302      	bcc.n	800ecfe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	617b      	str	r3, [r7, #20]
 800ecfc:	e007      	b.n	800ed0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ecfe:	4b07      	ldr	r3, [pc, #28]	; (800ed1c <prvInsertTimerInActiveList+0x80>)
 800ed00:	681a      	ldr	r2, [r3, #0]
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	3304      	adds	r3, #4
 800ed06:	4619      	mov	r1, r3
 800ed08:	4610      	mov	r0, r2
 800ed0a:	f7fd fdd4 	bl	800c8b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ed0e:	697b      	ldr	r3, [r7, #20]
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3718      	adds	r7, #24
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}
 800ed18:	2404af94 	.word	0x2404af94
 800ed1c:	2404af90 	.word	0x2404af90

0800ed20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b08e      	sub	sp, #56	; 0x38
 800ed24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ed26:	e0ca      	b.n	800eebe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	da18      	bge.n	800ed60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ed2e:	1d3b      	adds	r3, r7, #4
 800ed30:	3304      	adds	r3, #4
 800ed32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ed34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d10a      	bne.n	800ed50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ed3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed3e:	f383 8811 	msr	BASEPRI, r3
 800ed42:	f3bf 8f6f 	isb	sy
 800ed46:	f3bf 8f4f 	dsb	sy
 800ed4a:	61fb      	str	r3, [r7, #28]
}
 800ed4c:	bf00      	nop
 800ed4e:	e7fe      	b.n	800ed4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ed50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed56:	6850      	ldr	r0, [r2, #4]
 800ed58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed5a:	6892      	ldr	r2, [r2, #8]
 800ed5c:	4611      	mov	r1, r2
 800ed5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	f2c0 80aa 	blt.w	800eebc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ed6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed6e:	695b      	ldr	r3, [r3, #20]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d004      	beq.n	800ed7e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed76:	3304      	adds	r3, #4
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f7fd fdd5 	bl	800c928 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ed7e:	463b      	mov	r3, r7
 800ed80:	4618      	mov	r0, r3
 800ed82:	f7ff ff6b 	bl	800ec5c <prvSampleTimeNow>
 800ed86:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2b09      	cmp	r3, #9
 800ed8c:	f200 8097 	bhi.w	800eebe <prvProcessReceivedCommands+0x19e>
 800ed90:	a201      	add	r2, pc, #4	; (adr r2, 800ed98 <prvProcessReceivedCommands+0x78>)
 800ed92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed96:	bf00      	nop
 800ed98:	0800edc1 	.word	0x0800edc1
 800ed9c:	0800edc1 	.word	0x0800edc1
 800eda0:	0800edc1 	.word	0x0800edc1
 800eda4:	0800ee35 	.word	0x0800ee35
 800eda8:	0800ee49 	.word	0x0800ee49
 800edac:	0800ee93 	.word	0x0800ee93
 800edb0:	0800edc1 	.word	0x0800edc1
 800edb4:	0800edc1 	.word	0x0800edc1
 800edb8:	0800ee35 	.word	0x0800ee35
 800edbc:	0800ee49 	.word	0x0800ee49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800edc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edc6:	f043 0301 	orr.w	r3, r3, #1
 800edca:	b2da      	uxtb	r2, r3
 800edcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800edd2:	68ba      	ldr	r2, [r7, #8]
 800edd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd6:	699b      	ldr	r3, [r3, #24]
 800edd8:	18d1      	adds	r1, r2, r3
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ede0:	f7ff ff5c 	bl	800ec9c <prvInsertTimerInActiveList>
 800ede4:	4603      	mov	r3, r0
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d069      	beq.n	800eebe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800edea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edec:	6a1b      	ldr	r3, [r3, #32]
 800edee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edf0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800edf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edf8:	f003 0304 	and.w	r3, r3, #4
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d05e      	beq.n	800eebe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ee00:	68ba      	ldr	r2, [r7, #8]
 800ee02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee04:	699b      	ldr	r3, [r3, #24]
 800ee06:	441a      	add	r2, r3
 800ee08:	2300      	movs	r3, #0
 800ee0a:	9300      	str	r3, [sp, #0]
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	2100      	movs	r1, #0
 800ee10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee12:	f7ff fe05 	bl	800ea20 <xTimerGenericCommand>
 800ee16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ee18:	6a3b      	ldr	r3, [r7, #32]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d14f      	bne.n	800eebe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ee1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee22:	f383 8811 	msr	BASEPRI, r3
 800ee26:	f3bf 8f6f 	isb	sy
 800ee2a:	f3bf 8f4f 	dsb	sy
 800ee2e:	61bb      	str	r3, [r7, #24]
}
 800ee30:	bf00      	nop
 800ee32:	e7fe      	b.n	800ee32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee3a:	f023 0301 	bic.w	r3, r3, #1
 800ee3e:	b2da      	uxtb	r2, r3
 800ee40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ee46:	e03a      	b.n	800eebe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee4e:	f043 0301 	orr.w	r3, r3, #1
 800ee52:	b2da      	uxtb	r2, r3
 800ee54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ee5a:	68ba      	ldr	r2, [r7, #8]
 800ee5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ee60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee62:	699b      	ldr	r3, [r3, #24]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d10a      	bne.n	800ee7e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ee68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee6c:	f383 8811 	msr	BASEPRI, r3
 800ee70:	f3bf 8f6f 	isb	sy
 800ee74:	f3bf 8f4f 	dsb	sy
 800ee78:	617b      	str	r3, [r7, #20]
}
 800ee7a:	bf00      	nop
 800ee7c:	e7fe      	b.n	800ee7c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ee7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee80:	699a      	ldr	r2, [r3, #24]
 800ee82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee84:	18d1      	adds	r1, r2, r3
 800ee86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee8c:	f7ff ff06 	bl	800ec9c <prvInsertTimerInActiveList>
					break;
 800ee90:	e015      	b.n	800eebe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ee92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee98:	f003 0302 	and.w	r3, r3, #2
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d103      	bne.n	800eea8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800eea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eea2:	f000 fbdd 	bl	800f660 <vPortFree>
 800eea6:	e00a      	b.n	800eebe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eeae:	f023 0301 	bic.w	r3, r3, #1
 800eeb2:	b2da      	uxtb	r2, r3
 800eeb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800eeba:	e000      	b.n	800eebe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800eebc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eebe:	4b08      	ldr	r3, [pc, #32]	; (800eee0 <prvProcessReceivedCommands+0x1c0>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	1d39      	adds	r1, r7, #4
 800eec4:	2200      	movs	r2, #0
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7fe f926 	bl	800d118 <xQueueReceive>
 800eecc:	4603      	mov	r3, r0
 800eece:	2b00      	cmp	r3, #0
 800eed0:	f47f af2a 	bne.w	800ed28 <prvProcessReceivedCommands+0x8>
	}
}
 800eed4:	bf00      	nop
 800eed6:	bf00      	nop
 800eed8:	3730      	adds	r7, #48	; 0x30
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}
 800eede:	bf00      	nop
 800eee0:	2404af98 	.word	0x2404af98

0800eee4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b088      	sub	sp, #32
 800eee8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eeea:	e048      	b.n	800ef7e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eeec:	4b2d      	ldr	r3, [pc, #180]	; (800efa4 <prvSwitchTimerLists+0xc0>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	68db      	ldr	r3, [r3, #12]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eef6:	4b2b      	ldr	r3, [pc, #172]	; (800efa4 <prvSwitchTimerLists+0xc0>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	68db      	ldr	r3, [r3, #12]
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	3304      	adds	r3, #4
 800ef04:	4618      	mov	r0, r3
 800ef06:	f7fd fd0f 	bl	800c928 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	6a1b      	ldr	r3, [r3, #32]
 800ef0e:	68f8      	ldr	r0, [r7, #12]
 800ef10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef18:	f003 0304 	and.w	r3, r3, #4
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d02e      	beq.n	800ef7e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	699b      	ldr	r3, [r3, #24]
 800ef24:	693a      	ldr	r2, [r7, #16]
 800ef26:	4413      	add	r3, r2
 800ef28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ef2a:	68ba      	ldr	r2, [r7, #8]
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d90e      	bls.n	800ef50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	68ba      	ldr	r2, [r7, #8]
 800ef36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	68fa      	ldr	r2, [r7, #12]
 800ef3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef3e:	4b19      	ldr	r3, [pc, #100]	; (800efa4 <prvSwitchTimerLists+0xc0>)
 800ef40:	681a      	ldr	r2, [r3, #0]
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	3304      	adds	r3, #4
 800ef46:	4619      	mov	r1, r3
 800ef48:	4610      	mov	r0, r2
 800ef4a:	f7fd fcb4 	bl	800c8b6 <vListInsert>
 800ef4e:	e016      	b.n	800ef7e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef50:	2300      	movs	r3, #0
 800ef52:	9300      	str	r3, [sp, #0]
 800ef54:	2300      	movs	r3, #0
 800ef56:	693a      	ldr	r2, [r7, #16]
 800ef58:	2100      	movs	r1, #0
 800ef5a:	68f8      	ldr	r0, [r7, #12]
 800ef5c:	f7ff fd60 	bl	800ea20 <xTimerGenericCommand>
 800ef60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d10a      	bne.n	800ef7e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ef68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef6c:	f383 8811 	msr	BASEPRI, r3
 800ef70:	f3bf 8f6f 	isb	sy
 800ef74:	f3bf 8f4f 	dsb	sy
 800ef78:	603b      	str	r3, [r7, #0]
}
 800ef7a:	bf00      	nop
 800ef7c:	e7fe      	b.n	800ef7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef7e:	4b09      	ldr	r3, [pc, #36]	; (800efa4 <prvSwitchTimerLists+0xc0>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d1b1      	bne.n	800eeec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ef88:	4b06      	ldr	r3, [pc, #24]	; (800efa4 <prvSwitchTimerLists+0xc0>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ef8e:	4b06      	ldr	r3, [pc, #24]	; (800efa8 <prvSwitchTimerLists+0xc4>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	4a04      	ldr	r2, [pc, #16]	; (800efa4 <prvSwitchTimerLists+0xc0>)
 800ef94:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ef96:	4a04      	ldr	r2, [pc, #16]	; (800efa8 <prvSwitchTimerLists+0xc4>)
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	6013      	str	r3, [r2, #0]
}
 800ef9c:	bf00      	nop
 800ef9e:	3718      	adds	r7, #24
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}
 800efa4:	2404af90 	.word	0x2404af90
 800efa8:	2404af94 	.word	0x2404af94

0800efac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800efb2:	f000 f967 	bl	800f284 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800efb6:	4b15      	ldr	r3, [pc, #84]	; (800f00c <prvCheckForValidListAndQueue+0x60>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d120      	bne.n	800f000 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800efbe:	4814      	ldr	r0, [pc, #80]	; (800f010 <prvCheckForValidListAndQueue+0x64>)
 800efc0:	f7fd fc28 	bl	800c814 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800efc4:	4813      	ldr	r0, [pc, #76]	; (800f014 <prvCheckForValidListAndQueue+0x68>)
 800efc6:	f7fd fc25 	bl	800c814 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800efca:	4b13      	ldr	r3, [pc, #76]	; (800f018 <prvCheckForValidListAndQueue+0x6c>)
 800efcc:	4a10      	ldr	r2, [pc, #64]	; (800f010 <prvCheckForValidListAndQueue+0x64>)
 800efce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800efd0:	4b12      	ldr	r3, [pc, #72]	; (800f01c <prvCheckForValidListAndQueue+0x70>)
 800efd2:	4a10      	ldr	r2, [pc, #64]	; (800f014 <prvCheckForValidListAndQueue+0x68>)
 800efd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800efd6:	2300      	movs	r3, #0
 800efd8:	9300      	str	r3, [sp, #0]
 800efda:	4b11      	ldr	r3, [pc, #68]	; (800f020 <prvCheckForValidListAndQueue+0x74>)
 800efdc:	4a11      	ldr	r2, [pc, #68]	; (800f024 <prvCheckForValidListAndQueue+0x78>)
 800efde:	2110      	movs	r1, #16
 800efe0:	200a      	movs	r0, #10
 800efe2:	f7fd fd33 	bl	800ca4c <xQueueGenericCreateStatic>
 800efe6:	4603      	mov	r3, r0
 800efe8:	4a08      	ldr	r2, [pc, #32]	; (800f00c <prvCheckForValidListAndQueue+0x60>)
 800efea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800efec:	4b07      	ldr	r3, [pc, #28]	; (800f00c <prvCheckForValidListAndQueue+0x60>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d005      	beq.n	800f000 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800eff4:	4b05      	ldr	r3, [pc, #20]	; (800f00c <prvCheckForValidListAndQueue+0x60>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	490b      	ldr	r1, [pc, #44]	; (800f028 <prvCheckForValidListAndQueue+0x7c>)
 800effa:	4618      	mov	r0, r3
 800effc:	f7fe fc44 	bl	800d888 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f000:	f000 f970 	bl	800f2e4 <vPortExitCritical>
}
 800f004:	bf00      	nop
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}
 800f00a:	bf00      	nop
 800f00c:	2404af98 	.word	0x2404af98
 800f010:	2404af68 	.word	0x2404af68
 800f014:	2404af7c 	.word	0x2404af7c
 800f018:	2404af90 	.word	0x2404af90
 800f01c:	2404af94 	.word	0x2404af94
 800f020:	2404b044 	.word	0x2404b044
 800f024:	2404afa4 	.word	0x2404afa4
 800f028:	08010c90 	.word	0x08010c90

0800f02c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f02c:	b480      	push	{r7}
 800f02e:	b085      	sub	sp, #20
 800f030:	af00      	add	r7, sp, #0
 800f032:	60f8      	str	r0, [r7, #12]
 800f034:	60b9      	str	r1, [r7, #8]
 800f036:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	3b04      	subs	r3, #4
 800f03c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f044:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	3b04      	subs	r3, #4
 800f04a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	f023 0201 	bic.w	r2, r3, #1
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	3b04      	subs	r3, #4
 800f05a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f05c:	4a0c      	ldr	r2, [pc, #48]	; (800f090 <pxPortInitialiseStack+0x64>)
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	3b14      	subs	r3, #20
 800f066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f068:	687a      	ldr	r2, [r7, #4]
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	3b04      	subs	r3, #4
 800f072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f06f 0202 	mvn.w	r2, #2
 800f07a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	3b20      	subs	r3, #32
 800f080:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f082:	68fb      	ldr	r3, [r7, #12]
}
 800f084:	4618      	mov	r0, r3
 800f086:	3714      	adds	r7, #20
 800f088:	46bd      	mov	sp, r7
 800f08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08e:	4770      	bx	lr
 800f090:	0800f095 	.word	0x0800f095

0800f094 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f094:	b480      	push	{r7}
 800f096:	b085      	sub	sp, #20
 800f098:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f09a:	2300      	movs	r3, #0
 800f09c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f09e:	4b12      	ldr	r3, [pc, #72]	; (800f0e8 <prvTaskExitError+0x54>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0a6:	d00a      	beq.n	800f0be <prvTaskExitError+0x2a>
	__asm volatile
 800f0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ac:	f383 8811 	msr	BASEPRI, r3
 800f0b0:	f3bf 8f6f 	isb	sy
 800f0b4:	f3bf 8f4f 	dsb	sy
 800f0b8:	60fb      	str	r3, [r7, #12]
}
 800f0ba:	bf00      	nop
 800f0bc:	e7fe      	b.n	800f0bc <prvTaskExitError+0x28>
	__asm volatile
 800f0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0c2:	f383 8811 	msr	BASEPRI, r3
 800f0c6:	f3bf 8f6f 	isb	sy
 800f0ca:	f3bf 8f4f 	dsb	sy
 800f0ce:	60bb      	str	r3, [r7, #8]
}
 800f0d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f0d2:	bf00      	nop
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d0fc      	beq.n	800f0d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f0da:	bf00      	nop
 800f0dc:	bf00      	nop
 800f0de:	3714      	adds	r7, #20
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e6:	4770      	bx	lr
 800f0e8:	24000014 	.word	0x24000014
 800f0ec:	00000000 	.word	0x00000000

0800f0f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f0f0:	4b07      	ldr	r3, [pc, #28]	; (800f110 <pxCurrentTCBConst2>)
 800f0f2:	6819      	ldr	r1, [r3, #0]
 800f0f4:	6808      	ldr	r0, [r1, #0]
 800f0f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0fa:	f380 8809 	msr	PSP, r0
 800f0fe:	f3bf 8f6f 	isb	sy
 800f102:	f04f 0000 	mov.w	r0, #0
 800f106:	f380 8811 	msr	BASEPRI, r0
 800f10a:	4770      	bx	lr
 800f10c:	f3af 8000 	nop.w

0800f110 <pxCurrentTCBConst2>:
 800f110:	2404aa68 	.word	0x2404aa68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f114:	bf00      	nop
 800f116:	bf00      	nop

0800f118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f118:	4808      	ldr	r0, [pc, #32]	; (800f13c <prvPortStartFirstTask+0x24>)
 800f11a:	6800      	ldr	r0, [r0, #0]
 800f11c:	6800      	ldr	r0, [r0, #0]
 800f11e:	f380 8808 	msr	MSP, r0
 800f122:	f04f 0000 	mov.w	r0, #0
 800f126:	f380 8814 	msr	CONTROL, r0
 800f12a:	b662      	cpsie	i
 800f12c:	b661      	cpsie	f
 800f12e:	f3bf 8f4f 	dsb	sy
 800f132:	f3bf 8f6f 	isb	sy
 800f136:	df00      	svc	0
 800f138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f13a:	bf00      	nop
 800f13c:	e000ed08 	.word	0xe000ed08

0800f140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b086      	sub	sp, #24
 800f144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f146:	4b46      	ldr	r3, [pc, #280]	; (800f260 <xPortStartScheduler+0x120>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	4a46      	ldr	r2, [pc, #280]	; (800f264 <xPortStartScheduler+0x124>)
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d10a      	bne.n	800f166 <xPortStartScheduler+0x26>
	__asm volatile
 800f150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f154:	f383 8811 	msr	BASEPRI, r3
 800f158:	f3bf 8f6f 	isb	sy
 800f15c:	f3bf 8f4f 	dsb	sy
 800f160:	613b      	str	r3, [r7, #16]
}
 800f162:	bf00      	nop
 800f164:	e7fe      	b.n	800f164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f166:	4b3e      	ldr	r3, [pc, #248]	; (800f260 <xPortStartScheduler+0x120>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	4a3f      	ldr	r2, [pc, #252]	; (800f268 <xPortStartScheduler+0x128>)
 800f16c:	4293      	cmp	r3, r2
 800f16e:	d10a      	bne.n	800f186 <xPortStartScheduler+0x46>
	__asm volatile
 800f170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f174:	f383 8811 	msr	BASEPRI, r3
 800f178:	f3bf 8f6f 	isb	sy
 800f17c:	f3bf 8f4f 	dsb	sy
 800f180:	60fb      	str	r3, [r7, #12]
}
 800f182:	bf00      	nop
 800f184:	e7fe      	b.n	800f184 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f186:	4b39      	ldr	r3, [pc, #228]	; (800f26c <xPortStartScheduler+0x12c>)
 800f188:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f18a:	697b      	ldr	r3, [r7, #20]
 800f18c:	781b      	ldrb	r3, [r3, #0]
 800f18e:	b2db      	uxtb	r3, r3
 800f190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	22ff      	movs	r2, #255	; 0xff
 800f196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	781b      	ldrb	r3, [r3, #0]
 800f19c:	b2db      	uxtb	r3, r3
 800f19e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f1a0:	78fb      	ldrb	r3, [r7, #3]
 800f1a2:	b2db      	uxtb	r3, r3
 800f1a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f1a8:	b2da      	uxtb	r2, r3
 800f1aa:	4b31      	ldr	r3, [pc, #196]	; (800f270 <xPortStartScheduler+0x130>)
 800f1ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f1ae:	4b31      	ldr	r3, [pc, #196]	; (800f274 <xPortStartScheduler+0x134>)
 800f1b0:	2207      	movs	r2, #7
 800f1b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f1b4:	e009      	b.n	800f1ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f1b6:	4b2f      	ldr	r3, [pc, #188]	; (800f274 <xPortStartScheduler+0x134>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	3b01      	subs	r3, #1
 800f1bc:	4a2d      	ldr	r2, [pc, #180]	; (800f274 <xPortStartScheduler+0x134>)
 800f1be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f1c0:	78fb      	ldrb	r3, [r7, #3]
 800f1c2:	b2db      	uxtb	r3, r3
 800f1c4:	005b      	lsls	r3, r3, #1
 800f1c6:	b2db      	uxtb	r3, r3
 800f1c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f1ca:	78fb      	ldrb	r3, [r7, #3]
 800f1cc:	b2db      	uxtb	r3, r3
 800f1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1d2:	2b80      	cmp	r3, #128	; 0x80
 800f1d4:	d0ef      	beq.n	800f1b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f1d6:	4b27      	ldr	r3, [pc, #156]	; (800f274 <xPortStartScheduler+0x134>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	f1c3 0307 	rsb	r3, r3, #7
 800f1de:	2b04      	cmp	r3, #4
 800f1e0:	d00a      	beq.n	800f1f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1e6:	f383 8811 	msr	BASEPRI, r3
 800f1ea:	f3bf 8f6f 	isb	sy
 800f1ee:	f3bf 8f4f 	dsb	sy
 800f1f2:	60bb      	str	r3, [r7, #8]
}
 800f1f4:	bf00      	nop
 800f1f6:	e7fe      	b.n	800f1f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f1f8:	4b1e      	ldr	r3, [pc, #120]	; (800f274 <xPortStartScheduler+0x134>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	021b      	lsls	r3, r3, #8
 800f1fe:	4a1d      	ldr	r2, [pc, #116]	; (800f274 <xPortStartScheduler+0x134>)
 800f200:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f202:	4b1c      	ldr	r3, [pc, #112]	; (800f274 <xPortStartScheduler+0x134>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f20a:	4a1a      	ldr	r2, [pc, #104]	; (800f274 <xPortStartScheduler+0x134>)
 800f20c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	b2da      	uxtb	r2, r3
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f216:	4b18      	ldr	r3, [pc, #96]	; (800f278 <xPortStartScheduler+0x138>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	4a17      	ldr	r2, [pc, #92]	; (800f278 <xPortStartScheduler+0x138>)
 800f21c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f220:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f222:	4b15      	ldr	r3, [pc, #84]	; (800f278 <xPortStartScheduler+0x138>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	4a14      	ldr	r2, [pc, #80]	; (800f278 <xPortStartScheduler+0x138>)
 800f228:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f22c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f22e:	f000 f8dd 	bl	800f3ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f232:	4b12      	ldr	r3, [pc, #72]	; (800f27c <xPortStartScheduler+0x13c>)
 800f234:	2200      	movs	r2, #0
 800f236:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f238:	f000 f8fc 	bl	800f434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f23c:	4b10      	ldr	r3, [pc, #64]	; (800f280 <xPortStartScheduler+0x140>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	4a0f      	ldr	r2, [pc, #60]	; (800f280 <xPortStartScheduler+0x140>)
 800f242:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f246:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f248:	f7ff ff66 	bl	800f118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f24c:	f7fe ff56 	bl	800e0fc <vTaskSwitchContext>
	prvTaskExitError();
 800f250:	f7ff ff20 	bl	800f094 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f254:	2300      	movs	r3, #0
}
 800f256:	4618      	mov	r0, r3
 800f258:	3718      	adds	r7, #24
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
 800f25e:	bf00      	nop
 800f260:	e000ed00 	.word	0xe000ed00
 800f264:	410fc271 	.word	0x410fc271
 800f268:	410fc270 	.word	0x410fc270
 800f26c:	e000e400 	.word	0xe000e400
 800f270:	2404b094 	.word	0x2404b094
 800f274:	2404b098 	.word	0x2404b098
 800f278:	e000ed20 	.word	0xe000ed20
 800f27c:	24000014 	.word	0x24000014
 800f280:	e000ef34 	.word	0xe000ef34

0800f284 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f284:	b480      	push	{r7}
 800f286:	b083      	sub	sp, #12
 800f288:	af00      	add	r7, sp, #0
	__asm volatile
 800f28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f28e:	f383 8811 	msr	BASEPRI, r3
 800f292:	f3bf 8f6f 	isb	sy
 800f296:	f3bf 8f4f 	dsb	sy
 800f29a:	607b      	str	r3, [r7, #4]
}
 800f29c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f29e:	4b0f      	ldr	r3, [pc, #60]	; (800f2dc <vPortEnterCritical+0x58>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	3301      	adds	r3, #1
 800f2a4:	4a0d      	ldr	r2, [pc, #52]	; (800f2dc <vPortEnterCritical+0x58>)
 800f2a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f2a8:	4b0c      	ldr	r3, [pc, #48]	; (800f2dc <vPortEnterCritical+0x58>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	d10f      	bne.n	800f2d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f2b0:	4b0b      	ldr	r3, [pc, #44]	; (800f2e0 <vPortEnterCritical+0x5c>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	b2db      	uxtb	r3, r3
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d00a      	beq.n	800f2d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2be:	f383 8811 	msr	BASEPRI, r3
 800f2c2:	f3bf 8f6f 	isb	sy
 800f2c6:	f3bf 8f4f 	dsb	sy
 800f2ca:	603b      	str	r3, [r7, #0]
}
 800f2cc:	bf00      	nop
 800f2ce:	e7fe      	b.n	800f2ce <vPortEnterCritical+0x4a>
	}
}
 800f2d0:	bf00      	nop
 800f2d2:	370c      	adds	r7, #12
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2da:	4770      	bx	lr
 800f2dc:	24000014 	.word	0x24000014
 800f2e0:	e000ed04 	.word	0xe000ed04

0800f2e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b083      	sub	sp, #12
 800f2e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f2ea:	4b12      	ldr	r3, [pc, #72]	; (800f334 <vPortExitCritical+0x50>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d10a      	bne.n	800f308 <vPortExitCritical+0x24>
	__asm volatile
 800f2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f6:	f383 8811 	msr	BASEPRI, r3
 800f2fa:	f3bf 8f6f 	isb	sy
 800f2fe:	f3bf 8f4f 	dsb	sy
 800f302:	607b      	str	r3, [r7, #4]
}
 800f304:	bf00      	nop
 800f306:	e7fe      	b.n	800f306 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f308:	4b0a      	ldr	r3, [pc, #40]	; (800f334 <vPortExitCritical+0x50>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	3b01      	subs	r3, #1
 800f30e:	4a09      	ldr	r2, [pc, #36]	; (800f334 <vPortExitCritical+0x50>)
 800f310:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f312:	4b08      	ldr	r3, [pc, #32]	; (800f334 <vPortExitCritical+0x50>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d105      	bne.n	800f326 <vPortExitCritical+0x42>
 800f31a:	2300      	movs	r3, #0
 800f31c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	f383 8811 	msr	BASEPRI, r3
}
 800f324:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f326:	bf00      	nop
 800f328:	370c      	adds	r7, #12
 800f32a:	46bd      	mov	sp, r7
 800f32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f330:	4770      	bx	lr
 800f332:	bf00      	nop
 800f334:	24000014 	.word	0x24000014
	...

0800f340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f340:	f3ef 8009 	mrs	r0, PSP
 800f344:	f3bf 8f6f 	isb	sy
 800f348:	4b15      	ldr	r3, [pc, #84]	; (800f3a0 <pxCurrentTCBConst>)
 800f34a:	681a      	ldr	r2, [r3, #0]
 800f34c:	f01e 0f10 	tst.w	lr, #16
 800f350:	bf08      	it	eq
 800f352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f35a:	6010      	str	r0, [r2, #0]
 800f35c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f360:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f364:	f380 8811 	msr	BASEPRI, r0
 800f368:	f3bf 8f4f 	dsb	sy
 800f36c:	f3bf 8f6f 	isb	sy
 800f370:	f7fe fec4 	bl	800e0fc <vTaskSwitchContext>
 800f374:	f04f 0000 	mov.w	r0, #0
 800f378:	f380 8811 	msr	BASEPRI, r0
 800f37c:	bc09      	pop	{r0, r3}
 800f37e:	6819      	ldr	r1, [r3, #0]
 800f380:	6808      	ldr	r0, [r1, #0]
 800f382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f386:	f01e 0f10 	tst.w	lr, #16
 800f38a:	bf08      	it	eq
 800f38c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f390:	f380 8809 	msr	PSP, r0
 800f394:	f3bf 8f6f 	isb	sy
 800f398:	4770      	bx	lr
 800f39a:	bf00      	nop
 800f39c:	f3af 8000 	nop.w

0800f3a0 <pxCurrentTCBConst>:
 800f3a0:	2404aa68 	.word	0x2404aa68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f3a4:	bf00      	nop
 800f3a6:	bf00      	nop

0800f3a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b082      	sub	sp, #8
 800f3ac:	af00      	add	r7, sp, #0
	__asm volatile
 800f3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3b2:	f383 8811 	msr	BASEPRI, r3
 800f3b6:	f3bf 8f6f 	isb	sy
 800f3ba:	f3bf 8f4f 	dsb	sy
 800f3be:	607b      	str	r3, [r7, #4]
}
 800f3c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f3c2:	f7fe fde1 	bl	800df88 <xTaskIncrementTick>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d003      	beq.n	800f3d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f3cc:	4b06      	ldr	r3, [pc, #24]	; (800f3e8 <xPortSysTickHandler+0x40>)
 800f3ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3d2:	601a      	str	r2, [r3, #0]
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	f383 8811 	msr	BASEPRI, r3
}
 800f3de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f3e0:	bf00      	nop
 800f3e2:	3708      	adds	r7, #8
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}
 800f3e8:	e000ed04 	.word	0xe000ed04

0800f3ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f3ec:	b480      	push	{r7}
 800f3ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f3f0:	4b0b      	ldr	r3, [pc, #44]	; (800f420 <vPortSetupTimerInterrupt+0x34>)
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f3f6:	4b0b      	ldr	r3, [pc, #44]	; (800f424 <vPortSetupTimerInterrupt+0x38>)
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f3fc:	4b0a      	ldr	r3, [pc, #40]	; (800f428 <vPortSetupTimerInterrupt+0x3c>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	4a0a      	ldr	r2, [pc, #40]	; (800f42c <vPortSetupTimerInterrupt+0x40>)
 800f402:	fba2 2303 	umull	r2, r3, r2, r3
 800f406:	099b      	lsrs	r3, r3, #6
 800f408:	4a09      	ldr	r2, [pc, #36]	; (800f430 <vPortSetupTimerInterrupt+0x44>)
 800f40a:	3b01      	subs	r3, #1
 800f40c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f40e:	4b04      	ldr	r3, [pc, #16]	; (800f420 <vPortSetupTimerInterrupt+0x34>)
 800f410:	2207      	movs	r2, #7
 800f412:	601a      	str	r2, [r3, #0]
}
 800f414:	bf00      	nop
 800f416:	46bd      	mov	sp, r7
 800f418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41c:	4770      	bx	lr
 800f41e:	bf00      	nop
 800f420:	e000e010 	.word	0xe000e010
 800f424:	e000e018 	.word	0xe000e018
 800f428:	24000004 	.word	0x24000004
 800f42c:	10624dd3 	.word	0x10624dd3
 800f430:	e000e014 	.word	0xe000e014

0800f434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f444 <vPortEnableVFP+0x10>
 800f438:	6801      	ldr	r1, [r0, #0]
 800f43a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f43e:	6001      	str	r1, [r0, #0]
 800f440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f442:	bf00      	nop
 800f444:	e000ed88 	.word	0xe000ed88

0800f448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f448:	b480      	push	{r7}
 800f44a:	b085      	sub	sp, #20
 800f44c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f44e:	f3ef 8305 	mrs	r3, IPSR
 800f452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	2b0f      	cmp	r3, #15
 800f458:	d914      	bls.n	800f484 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f45a:	4a17      	ldr	r2, [pc, #92]	; (800f4b8 <vPortValidateInterruptPriority+0x70>)
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	4413      	add	r3, r2
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f464:	4b15      	ldr	r3, [pc, #84]	; (800f4bc <vPortValidateInterruptPriority+0x74>)
 800f466:	781b      	ldrb	r3, [r3, #0]
 800f468:	7afa      	ldrb	r2, [r7, #11]
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d20a      	bcs.n	800f484 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f472:	f383 8811 	msr	BASEPRI, r3
 800f476:	f3bf 8f6f 	isb	sy
 800f47a:	f3bf 8f4f 	dsb	sy
 800f47e:	607b      	str	r3, [r7, #4]
}
 800f480:	bf00      	nop
 800f482:	e7fe      	b.n	800f482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f484:	4b0e      	ldr	r3, [pc, #56]	; (800f4c0 <vPortValidateInterruptPriority+0x78>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f48c:	4b0d      	ldr	r3, [pc, #52]	; (800f4c4 <vPortValidateInterruptPriority+0x7c>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	429a      	cmp	r2, r3
 800f492:	d90a      	bls.n	800f4aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f498:	f383 8811 	msr	BASEPRI, r3
 800f49c:	f3bf 8f6f 	isb	sy
 800f4a0:	f3bf 8f4f 	dsb	sy
 800f4a4:	603b      	str	r3, [r7, #0]
}
 800f4a6:	bf00      	nop
 800f4a8:	e7fe      	b.n	800f4a8 <vPortValidateInterruptPriority+0x60>
	}
 800f4aa:	bf00      	nop
 800f4ac:	3714      	adds	r7, #20
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b4:	4770      	bx	lr
 800f4b6:	bf00      	nop
 800f4b8:	e000e3f0 	.word	0xe000e3f0
 800f4bc:	2404b094 	.word	0x2404b094
 800f4c0:	e000ed0c 	.word	0xe000ed0c
 800f4c4:	2404b098 	.word	0x2404b098

0800f4c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b08a      	sub	sp, #40	; 0x28
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f4d4:	f7fe fc9c 	bl	800de10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f4d8:	4b5b      	ldr	r3, [pc, #364]	; (800f648 <pvPortMalloc+0x180>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d101      	bne.n	800f4e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f4e0:	f000 f920 	bl	800f724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f4e4:	4b59      	ldr	r3, [pc, #356]	; (800f64c <pvPortMalloc+0x184>)
 800f4e6:	681a      	ldr	r2, [r3, #0]
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	4013      	ands	r3, r2
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	f040 8093 	bne.w	800f618 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d01d      	beq.n	800f534 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f4f8:	2208      	movs	r2, #8
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4413      	add	r3, r2
 800f4fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f003 0307 	and.w	r3, r3, #7
 800f506:	2b00      	cmp	r3, #0
 800f508:	d014      	beq.n	800f534 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f023 0307 	bic.w	r3, r3, #7
 800f510:	3308      	adds	r3, #8
 800f512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f003 0307 	and.w	r3, r3, #7
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d00a      	beq.n	800f534 <pvPortMalloc+0x6c>
	__asm volatile
 800f51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f522:	f383 8811 	msr	BASEPRI, r3
 800f526:	f3bf 8f6f 	isb	sy
 800f52a:	f3bf 8f4f 	dsb	sy
 800f52e:	617b      	str	r3, [r7, #20]
}
 800f530:	bf00      	nop
 800f532:	e7fe      	b.n	800f532 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d06e      	beq.n	800f618 <pvPortMalloc+0x150>
 800f53a:	4b45      	ldr	r3, [pc, #276]	; (800f650 <pvPortMalloc+0x188>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	687a      	ldr	r2, [r7, #4]
 800f540:	429a      	cmp	r2, r3
 800f542:	d869      	bhi.n	800f618 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f544:	4b43      	ldr	r3, [pc, #268]	; (800f654 <pvPortMalloc+0x18c>)
 800f546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f548:	4b42      	ldr	r3, [pc, #264]	; (800f654 <pvPortMalloc+0x18c>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f54e:	e004      	b.n	800f55a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55c:	685b      	ldr	r3, [r3, #4]
 800f55e:	687a      	ldr	r2, [r7, #4]
 800f560:	429a      	cmp	r2, r3
 800f562:	d903      	bls.n	800f56c <pvPortMalloc+0xa4>
 800f564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d1f1      	bne.n	800f550 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f56c:	4b36      	ldr	r3, [pc, #216]	; (800f648 <pvPortMalloc+0x180>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f572:	429a      	cmp	r2, r3
 800f574:	d050      	beq.n	800f618 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f576:	6a3b      	ldr	r3, [r7, #32]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	2208      	movs	r2, #8
 800f57c:	4413      	add	r3, r2
 800f57e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	6a3b      	ldr	r3, [r7, #32]
 800f586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f58a:	685a      	ldr	r2, [r3, #4]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	1ad2      	subs	r2, r2, r3
 800f590:	2308      	movs	r3, #8
 800f592:	005b      	lsls	r3, r3, #1
 800f594:	429a      	cmp	r2, r3
 800f596:	d91f      	bls.n	800f5d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	4413      	add	r3, r2
 800f59e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5a0:	69bb      	ldr	r3, [r7, #24]
 800f5a2:	f003 0307 	and.w	r3, r3, #7
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d00a      	beq.n	800f5c0 <pvPortMalloc+0xf8>
	__asm volatile
 800f5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ae:	f383 8811 	msr	BASEPRI, r3
 800f5b2:	f3bf 8f6f 	isb	sy
 800f5b6:	f3bf 8f4f 	dsb	sy
 800f5ba:	613b      	str	r3, [r7, #16]
}
 800f5bc:	bf00      	nop
 800f5be:	e7fe      	b.n	800f5be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c2:	685a      	ldr	r2, [r3, #4]
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	1ad2      	subs	r2, r2, r3
 800f5c8:	69bb      	ldr	r3, [r7, #24]
 800f5ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ce:	687a      	ldr	r2, [r7, #4]
 800f5d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f5d2:	69b8      	ldr	r0, [r7, #24]
 800f5d4:	f000 f908 	bl	800f7e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f5d8:	4b1d      	ldr	r3, [pc, #116]	; (800f650 <pvPortMalloc+0x188>)
 800f5da:	681a      	ldr	r2, [r3, #0]
 800f5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5de:	685b      	ldr	r3, [r3, #4]
 800f5e0:	1ad3      	subs	r3, r2, r3
 800f5e2:	4a1b      	ldr	r2, [pc, #108]	; (800f650 <pvPortMalloc+0x188>)
 800f5e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f5e6:	4b1a      	ldr	r3, [pc, #104]	; (800f650 <pvPortMalloc+0x188>)
 800f5e8:	681a      	ldr	r2, [r3, #0]
 800f5ea:	4b1b      	ldr	r3, [pc, #108]	; (800f658 <pvPortMalloc+0x190>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d203      	bcs.n	800f5fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f5f2:	4b17      	ldr	r3, [pc, #92]	; (800f650 <pvPortMalloc+0x188>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	4a18      	ldr	r2, [pc, #96]	; (800f658 <pvPortMalloc+0x190>)
 800f5f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fc:	685a      	ldr	r2, [r3, #4]
 800f5fe:	4b13      	ldr	r3, [pc, #76]	; (800f64c <pvPortMalloc+0x184>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	431a      	orrs	r2, r3
 800f604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f606:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60a:	2200      	movs	r2, #0
 800f60c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f60e:	4b13      	ldr	r3, [pc, #76]	; (800f65c <pvPortMalloc+0x194>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	3301      	adds	r3, #1
 800f614:	4a11      	ldr	r2, [pc, #68]	; (800f65c <pvPortMalloc+0x194>)
 800f616:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f618:	f7fe fc08 	bl	800de2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f61c:	69fb      	ldr	r3, [r7, #28]
 800f61e:	f003 0307 	and.w	r3, r3, #7
 800f622:	2b00      	cmp	r3, #0
 800f624:	d00a      	beq.n	800f63c <pvPortMalloc+0x174>
	__asm volatile
 800f626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f62a:	f383 8811 	msr	BASEPRI, r3
 800f62e:	f3bf 8f6f 	isb	sy
 800f632:	f3bf 8f4f 	dsb	sy
 800f636:	60fb      	str	r3, [r7, #12]
}
 800f638:	bf00      	nop
 800f63a:	e7fe      	b.n	800f63a <pvPortMalloc+0x172>
	return pvReturn;
 800f63c:	69fb      	ldr	r3, [r7, #28]
}
 800f63e:	4618      	mov	r0, r3
 800f640:	3728      	adds	r7, #40	; 0x28
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}
 800f646:	bf00      	nop
 800f648:	2404eca4 	.word	0x2404eca4
 800f64c:	2404ecb8 	.word	0x2404ecb8
 800f650:	2404eca8 	.word	0x2404eca8
 800f654:	2404ec9c 	.word	0x2404ec9c
 800f658:	2404ecac 	.word	0x2404ecac
 800f65c:	2404ecb0 	.word	0x2404ecb0

0800f660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b086      	sub	sp, #24
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d04d      	beq.n	800f70e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f672:	2308      	movs	r3, #8
 800f674:	425b      	negs	r3, r3
 800f676:	697a      	ldr	r2, [r7, #20]
 800f678:	4413      	add	r3, r2
 800f67a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f680:	693b      	ldr	r3, [r7, #16]
 800f682:	685a      	ldr	r2, [r3, #4]
 800f684:	4b24      	ldr	r3, [pc, #144]	; (800f718 <vPortFree+0xb8>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	4013      	ands	r3, r2
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d10a      	bne.n	800f6a4 <vPortFree+0x44>
	__asm volatile
 800f68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f692:	f383 8811 	msr	BASEPRI, r3
 800f696:	f3bf 8f6f 	isb	sy
 800f69a:	f3bf 8f4f 	dsb	sy
 800f69e:	60fb      	str	r3, [r7, #12]
}
 800f6a0:	bf00      	nop
 800f6a2:	e7fe      	b.n	800f6a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d00a      	beq.n	800f6c2 <vPortFree+0x62>
	__asm volatile
 800f6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b0:	f383 8811 	msr	BASEPRI, r3
 800f6b4:	f3bf 8f6f 	isb	sy
 800f6b8:	f3bf 8f4f 	dsb	sy
 800f6bc:	60bb      	str	r3, [r7, #8]
}
 800f6be:	bf00      	nop
 800f6c0:	e7fe      	b.n	800f6c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f6c2:	693b      	ldr	r3, [r7, #16]
 800f6c4:	685a      	ldr	r2, [r3, #4]
 800f6c6:	4b14      	ldr	r3, [pc, #80]	; (800f718 <vPortFree+0xb8>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	4013      	ands	r3, r2
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d01e      	beq.n	800f70e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f6d0:	693b      	ldr	r3, [r7, #16]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d11a      	bne.n	800f70e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	685a      	ldr	r2, [r3, #4]
 800f6dc:	4b0e      	ldr	r3, [pc, #56]	; (800f718 <vPortFree+0xb8>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	43db      	mvns	r3, r3
 800f6e2:	401a      	ands	r2, r3
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f6e8:	f7fe fb92 	bl	800de10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	685a      	ldr	r2, [r3, #4]
 800f6f0:	4b0a      	ldr	r3, [pc, #40]	; (800f71c <vPortFree+0xbc>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	4413      	add	r3, r2
 800f6f6:	4a09      	ldr	r2, [pc, #36]	; (800f71c <vPortFree+0xbc>)
 800f6f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f6fa:	6938      	ldr	r0, [r7, #16]
 800f6fc:	f000 f874 	bl	800f7e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f700:	4b07      	ldr	r3, [pc, #28]	; (800f720 <vPortFree+0xc0>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	3301      	adds	r3, #1
 800f706:	4a06      	ldr	r2, [pc, #24]	; (800f720 <vPortFree+0xc0>)
 800f708:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f70a:	f7fe fb8f 	bl	800de2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f70e:	bf00      	nop
 800f710:	3718      	adds	r7, #24
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}
 800f716:	bf00      	nop
 800f718:	2404ecb8 	.word	0x2404ecb8
 800f71c:	2404eca8 	.word	0x2404eca8
 800f720:	2404ecb4 	.word	0x2404ecb4

0800f724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f724:	b480      	push	{r7}
 800f726:	b085      	sub	sp, #20
 800f728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f72a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f72e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f730:	4b27      	ldr	r3, [pc, #156]	; (800f7d0 <prvHeapInit+0xac>)
 800f732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f003 0307 	and.w	r3, r3, #7
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d00c      	beq.n	800f758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	3307      	adds	r3, #7
 800f742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f023 0307 	bic.w	r3, r3, #7
 800f74a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f74c:	68ba      	ldr	r2, [r7, #8]
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	1ad3      	subs	r3, r2, r3
 800f752:	4a1f      	ldr	r2, [pc, #124]	; (800f7d0 <prvHeapInit+0xac>)
 800f754:	4413      	add	r3, r2
 800f756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f75c:	4a1d      	ldr	r2, [pc, #116]	; (800f7d4 <prvHeapInit+0xb0>)
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f762:	4b1c      	ldr	r3, [pc, #112]	; (800f7d4 <prvHeapInit+0xb0>)
 800f764:	2200      	movs	r2, #0
 800f766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	68ba      	ldr	r2, [r7, #8]
 800f76c:	4413      	add	r3, r2
 800f76e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f770:	2208      	movs	r2, #8
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	1a9b      	subs	r3, r3, r2
 800f776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f023 0307 	bic.w	r3, r3, #7
 800f77e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	4a15      	ldr	r2, [pc, #84]	; (800f7d8 <prvHeapInit+0xb4>)
 800f784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f786:	4b14      	ldr	r3, [pc, #80]	; (800f7d8 <prvHeapInit+0xb4>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	2200      	movs	r2, #0
 800f78c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f78e:	4b12      	ldr	r3, [pc, #72]	; (800f7d8 <prvHeapInit+0xb4>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	2200      	movs	r2, #0
 800f794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	68fa      	ldr	r2, [r7, #12]
 800f79e:	1ad2      	subs	r2, r2, r3
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f7a4:	4b0c      	ldr	r3, [pc, #48]	; (800f7d8 <prvHeapInit+0xb4>)
 800f7a6:	681a      	ldr	r2, [r3, #0]
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	4a0a      	ldr	r2, [pc, #40]	; (800f7dc <prvHeapInit+0xb8>)
 800f7b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	4a09      	ldr	r2, [pc, #36]	; (800f7e0 <prvHeapInit+0xbc>)
 800f7ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f7bc:	4b09      	ldr	r3, [pc, #36]	; (800f7e4 <prvHeapInit+0xc0>)
 800f7be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f7c2:	601a      	str	r2, [r3, #0]
}
 800f7c4:	bf00      	nop
 800f7c6:	3714      	adds	r7, #20
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr
 800f7d0:	2404b09c 	.word	0x2404b09c
 800f7d4:	2404ec9c 	.word	0x2404ec9c
 800f7d8:	2404eca4 	.word	0x2404eca4
 800f7dc:	2404ecac 	.word	0x2404ecac
 800f7e0:	2404eca8 	.word	0x2404eca8
 800f7e4:	2404ecb8 	.word	0x2404ecb8

0800f7e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b085      	sub	sp, #20
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f7f0:	4b28      	ldr	r3, [pc, #160]	; (800f894 <prvInsertBlockIntoFreeList+0xac>)
 800f7f2:	60fb      	str	r3, [r7, #12]
 800f7f4:	e002      	b.n	800f7fc <prvInsertBlockIntoFreeList+0x14>
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	60fb      	str	r3, [r7, #12]
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	687a      	ldr	r2, [r7, #4]
 800f802:	429a      	cmp	r2, r3
 800f804:	d8f7      	bhi.n	800f7f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	685b      	ldr	r3, [r3, #4]
 800f80e:	68ba      	ldr	r2, [r7, #8]
 800f810:	4413      	add	r3, r2
 800f812:	687a      	ldr	r2, [r7, #4]
 800f814:	429a      	cmp	r2, r3
 800f816:	d108      	bne.n	800f82a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	685a      	ldr	r2, [r3, #4]
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	685b      	ldr	r3, [r3, #4]
 800f820:	441a      	add	r2, r3
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	68ba      	ldr	r2, [r7, #8]
 800f834:	441a      	add	r2, r3
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	429a      	cmp	r2, r3
 800f83c:	d118      	bne.n	800f870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	681a      	ldr	r2, [r3, #0]
 800f842:	4b15      	ldr	r3, [pc, #84]	; (800f898 <prvInsertBlockIntoFreeList+0xb0>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	429a      	cmp	r2, r3
 800f848:	d00d      	beq.n	800f866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	685a      	ldr	r2, [r3, #4]
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	685b      	ldr	r3, [r3, #4]
 800f854:	441a      	add	r2, r3
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	681a      	ldr	r2, [r3, #0]
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	601a      	str	r2, [r3, #0]
 800f864:	e008      	b.n	800f878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f866:	4b0c      	ldr	r3, [pc, #48]	; (800f898 <prvInsertBlockIntoFreeList+0xb0>)
 800f868:	681a      	ldr	r2, [r3, #0]
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	601a      	str	r2, [r3, #0]
 800f86e:	e003      	b.n	800f878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	681a      	ldr	r2, [r3, #0]
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f878:	68fa      	ldr	r2, [r7, #12]
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d002      	beq.n	800f886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	687a      	ldr	r2, [r7, #4]
 800f884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f886:	bf00      	nop
 800f888:	3714      	adds	r7, #20
 800f88a:	46bd      	mov	sp, r7
 800f88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f890:	4770      	bx	lr
 800f892:	bf00      	nop
 800f894:	2404ec9c 	.word	0x2404ec9c
 800f898:	2404eca4 	.word	0x2404eca4

0800f89c <arm_max_f32>:
 800f89c:	f101 3cff 	add.w	ip, r1, #4294967295
 800f8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8a2:	4607      	mov	r7, r0
 800f8a4:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800f8a8:	ecf7 7a01 	vldmia	r7!, {s15}
 800f8ac:	d05c      	beq.n	800f968 <arm_max_f32+0xcc>
 800f8ae:	2400      	movs	r4, #0
 800f8b0:	3014      	adds	r0, #20
 800f8b2:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800f8b6:	4625      	mov	r5, r4
 800f8b8:	ed10 7a04 	vldr	s14, [r0, #-16]
 800f8bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8c4:	d502      	bpl.n	800f8cc <arm_max_f32+0x30>
 800f8c6:	eef0 7a47 	vmov.f32	s15, s14
 800f8ca:	1c65      	adds	r5, r4, #1
 800f8cc:	ed10 7a03 	vldr	s14, [r0, #-12]
 800f8d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f8d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8d8:	d502      	bpl.n	800f8e0 <arm_max_f32+0x44>
 800f8da:	eef0 7a47 	vmov.f32	s15, s14
 800f8de:	1ca5      	adds	r5, r4, #2
 800f8e0:	ed10 7a02 	vldr	s14, [r0, #-8]
 800f8e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ec:	d502      	bpl.n	800f8f4 <arm_max_f32+0x58>
 800f8ee:	eef0 7a47 	vmov.f32	s15, s14
 800f8f2:	1ce5      	adds	r5, r4, #3
 800f8f4:	ed10 7a01 	vldr	s14, [r0, #-4]
 800f8f8:	3404      	adds	r4, #4
 800f8fa:	3010      	adds	r0, #16
 800f8fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f904:	d502      	bpl.n	800f90c <arm_max_f32+0x70>
 800f906:	eef0 7a47 	vmov.f32	s15, s14
 800f90a:	4625      	mov	r5, r4
 800f90c:	42a6      	cmp	r6, r4
 800f90e:	d1d3      	bne.n	800f8b8 <arm_max_f32+0x1c>
 800f910:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800f914:	f01c 0003 	ands.w	r0, ip, #3
 800f918:	d01e      	beq.n	800f958 <arm_max_f32+0xbc>
 800f91a:	ed97 7a00 	vldr	s14, [r7]
 800f91e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f926:	dc1b      	bgt.n	800f960 <arm_max_f32+0xc4>
 800f928:	3801      	subs	r0, #1
 800f92a:	d015      	beq.n	800f958 <arm_max_f32+0xbc>
 800f92c:	ed97 7a01 	vldr	s14, [r7, #4]
 800f930:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f938:	d502      	bpl.n	800f940 <arm_max_f32+0xa4>
 800f93a:	eef0 7a47 	vmov.f32	s15, s14
 800f93e:	1a0d      	subs	r5, r1, r0
 800f940:	2801      	cmp	r0, #1
 800f942:	d009      	beq.n	800f958 <arm_max_f32+0xbc>
 800f944:	ed97 7a02 	vldr	s14, [r7, #8]
 800f948:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f950:	dd02      	ble.n	800f958 <arm_max_f32+0xbc>
 800f952:	eef0 7a47 	vmov.f32	s15, s14
 800f956:	4665      	mov	r5, ip
 800f958:	edc2 7a00 	vstr	s15, [r2]
 800f95c:	601d      	str	r5, [r3, #0]
 800f95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f960:	eef0 7a47 	vmov.f32	s15, s14
 800f964:	1a0d      	subs	r5, r1, r0
 800f966:	e7df      	b.n	800f928 <arm_max_f32+0x8c>
 800f968:	4675      	mov	r5, lr
 800f96a:	e7d3      	b.n	800f914 <arm_max_f32+0x78>

0800f96c <arm_rfft_32_fast_init_f32>:
 800f96c:	b180      	cbz	r0, 800f990 <arm_rfft_32_fast_init_f32+0x24>
 800f96e:	4603      	mov	r3, r0
 800f970:	2220      	movs	r2, #32
 800f972:	2010      	movs	r0, #16
 800f974:	4908      	ldr	r1, [pc, #32]	; (800f998 <arm_rfft_32_fast_init_f32+0x2c>)
 800f976:	b430      	push	{r4, r5}
 800f978:	2514      	movs	r5, #20
 800f97a:	4c08      	ldr	r4, [pc, #32]	; (800f99c <arm_rfft_32_fast_init_f32+0x30>)
 800f97c:	821a      	strh	r2, [r3, #16]
 800f97e:	4a08      	ldr	r2, [pc, #32]	; (800f9a0 <arm_rfft_32_fast_init_f32+0x34>)
 800f980:	8018      	strh	r0, [r3, #0]
 800f982:	2000      	movs	r0, #0
 800f984:	819d      	strh	r5, [r3, #12]
 800f986:	615a      	str	r2, [r3, #20]
 800f988:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800f98c:	bc30      	pop	{r4, r5}
 800f98e:	4770      	bx	lr
 800f990:	f04f 30ff 	mov.w	r0, #4294967295
 800f994:	4770      	bx	lr
 800f996:	bf00      	nop
 800f998:	08016680 	.word	0x08016680
 800f99c:	08011d48 	.word	0x08011d48
 800f9a0:	0801f400 	.word	0x0801f400

0800f9a4 <arm_rfft_64_fast_init_f32>:
 800f9a4:	b180      	cbz	r0, 800f9c8 <arm_rfft_64_fast_init_f32+0x24>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	2240      	movs	r2, #64	; 0x40
 800f9aa:	2020      	movs	r0, #32
 800f9ac:	4908      	ldr	r1, [pc, #32]	; (800f9d0 <arm_rfft_64_fast_init_f32+0x2c>)
 800f9ae:	b430      	push	{r4, r5}
 800f9b0:	2530      	movs	r5, #48	; 0x30
 800f9b2:	4c08      	ldr	r4, [pc, #32]	; (800f9d4 <arm_rfft_64_fast_init_f32+0x30>)
 800f9b4:	821a      	strh	r2, [r3, #16]
 800f9b6:	4a08      	ldr	r2, [pc, #32]	; (800f9d8 <arm_rfft_64_fast_init_f32+0x34>)
 800f9b8:	8018      	strh	r0, [r3, #0]
 800f9ba:	2000      	movs	r0, #0
 800f9bc:	819d      	strh	r5, [r3, #12]
 800f9be:	615a      	str	r2, [r3, #20]
 800f9c0:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800f9c4:	bc30      	pop	{r4, r5}
 800f9c6:	4770      	bx	lr
 800f9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f9cc:	4770      	bx	lr
 800f9ce:	bf00      	nop
 800f9d0:	0801af00 	.word	0x0801af00
 800f9d4:	08013ea0 	.word	0x08013ea0
 800f9d8:	08023c80 	.word	0x08023c80

0800f9dc <arm_rfft_256_fast_init_f32>:
 800f9dc:	b188      	cbz	r0, 800fa02 <arm_rfft_256_fast_init_f32+0x26>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f9e4:	2080      	movs	r0, #128	; 0x80
 800f9e6:	4908      	ldr	r1, [pc, #32]	; (800fa08 <arm_rfft_256_fast_init_f32+0x2c>)
 800f9e8:	b430      	push	{r4, r5}
 800f9ea:	25d0      	movs	r5, #208	; 0xd0
 800f9ec:	4c07      	ldr	r4, [pc, #28]	; (800fa0c <arm_rfft_256_fast_init_f32+0x30>)
 800f9ee:	821a      	strh	r2, [r3, #16]
 800f9f0:	4a07      	ldr	r2, [pc, #28]	; (800fa10 <arm_rfft_256_fast_init_f32+0x34>)
 800f9f2:	8018      	strh	r0, [r3, #0]
 800f9f4:	2000      	movs	r0, #0
 800f9f6:	819d      	strh	r5, [r3, #12]
 800f9f8:	615a      	str	r2, [r3, #20]
 800f9fa:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800f9fe:	bc30      	pop	{r4, r5}
 800fa00:	4770      	bx	lr
 800fa02:	f04f 30ff 	mov.w	r0, #4294967295
 800fa06:	4770      	bx	lr
 800fa08:	08016280 	.word	0x08016280
 800fa0c:	08011ba8 	.word	0x08011ba8
 800fa10:	0801f000 	.word	0x0801f000

0800fa14 <arm_rfft_512_fast_init_f32>:
 800fa14:	b198      	cbz	r0, 800fa3e <arm_rfft_512_fast_init_f32+0x2a>
 800fa16:	4603      	mov	r3, r0
 800fa18:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa1c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800fa20:	4908      	ldr	r1, [pc, #32]	; (800fa44 <arm_rfft_512_fast_init_f32+0x30>)
 800fa22:	b430      	push	{r4, r5}
 800fa24:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 800fa28:	4c07      	ldr	r4, [pc, #28]	; (800fa48 <arm_rfft_512_fast_init_f32+0x34>)
 800fa2a:	821a      	strh	r2, [r3, #16]
 800fa2c:	4a07      	ldr	r2, [pc, #28]	; (800fa4c <arm_rfft_512_fast_init_f32+0x38>)
 800fa2e:	8018      	strh	r0, [r3, #0]
 800fa30:	2000      	movs	r0, #0
 800fa32:	819d      	strh	r5, [r3, #12]
 800fa34:	615a      	str	r2, [r3, #20]
 800fa36:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800fa3a:	bc30      	pop	{r4, r5}
 800fa3c:	4770      	bx	lr
 800fa3e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa42:	4770      	bx	lr
 800fa44:	0801a700 	.word	0x0801a700
 800fa48:	08013b30 	.word	0x08013b30
 800fa4c:	08023480 	.word	0x08023480

0800fa50 <arm_rfft_1024_fast_init_f32>:
 800fa50:	b198      	cbz	r0, 800fa7a <arm_rfft_1024_fast_init_f32+0x2a>
 800fa52:	4603      	mov	r3, r0
 800fa54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fa58:	f44f 7000 	mov.w	r0, #512	; 0x200
 800fa5c:	4908      	ldr	r1, [pc, #32]	; (800fa80 <arm_rfft_1024_fast_init_f32+0x30>)
 800fa5e:	b430      	push	{r4, r5}
 800fa60:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 800fa64:	4c07      	ldr	r4, [pc, #28]	; (800fa84 <arm_rfft_1024_fast_init_f32+0x34>)
 800fa66:	821a      	strh	r2, [r3, #16]
 800fa68:	4a07      	ldr	r2, [pc, #28]	; (800fa88 <arm_rfft_1024_fast_init_f32+0x38>)
 800fa6a:	8018      	strh	r0, [r3, #0]
 800fa6c:	2000      	movs	r0, #0
 800fa6e:	819d      	strh	r5, [r3, #12]
 800fa70:	615a      	str	r2, [r3, #20]
 800fa72:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800fa76:	bc30      	pop	{r4, r5}
 800fa78:	4770      	bx	lr
 800fa7a:	f04f 30ff 	mov.w	r0, #4294967295
 800fa7e:	4770      	bx	lr
 800fa80:	0801b000 	.word	0x0801b000
 800fa84:	08013f00 	.word	0x08013f00
 800fa88:	0801c000 	.word	0x0801c000

0800fa8c <arm_rfft_2048_fast_init_f32>:
 800fa8c:	b198      	cbz	r0, 800fab6 <arm_rfft_2048_fast_init_f32+0x2a>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fa94:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800fa98:	4908      	ldr	r1, [pc, #32]	; (800fabc <arm_rfft_2048_fast_init_f32+0x30>)
 800fa9a:	b430      	push	{r4, r5}
 800fa9c:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 800faa0:	4c07      	ldr	r4, [pc, #28]	; (800fac0 <arm_rfft_2048_fast_init_f32+0x34>)
 800faa2:	821a      	strh	r2, [r3, #16]
 800faa4:	4a07      	ldr	r2, [pc, #28]	; (800fac4 <arm_rfft_2048_fast_init_f32+0x38>)
 800faa6:	8018      	strh	r0, [r3, #0]
 800faa8:	2000      	movs	r0, #0
 800faaa:	819d      	strh	r5, [r3, #12]
 800faac:	615a      	str	r2, [r3, #20]
 800faae:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800fab2:	bc30      	pop	{r4, r5}
 800fab4:	4770      	bx	lr
 800fab6:	f04f 30ff 	mov.w	r0, #4294967295
 800faba:	4770      	bx	lr
 800fabc:	08014280 	.word	0x08014280
 800fac0:	08010d98 	.word	0x08010d98
 800fac4:	0801d000 	.word	0x0801d000

0800fac8 <arm_rfft_4096_fast_init_f32>:
 800fac8:	b198      	cbz	r0, 800faf2 <arm_rfft_4096_fast_init_f32+0x2a>
 800faca:	4603      	mov	r3, r0
 800facc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fad0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800fad4:	4908      	ldr	r1, [pc, #32]	; (800faf8 <arm_rfft_4096_fast_init_f32+0x30>)
 800fad6:	b430      	push	{r4, r5}
 800fad8:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 800fadc:	4c07      	ldr	r4, [pc, #28]	; (800fafc <arm_rfft_4096_fast_init_f32+0x34>)
 800fade:	821a      	strh	r2, [r3, #16]
 800fae0:	4a07      	ldr	r2, [pc, #28]	; (800fb00 <arm_rfft_4096_fast_init_f32+0x38>)
 800fae2:	8018      	strh	r0, [r3, #0]
 800fae4:	2000      	movs	r0, #0
 800fae6:	819d      	strh	r5, [r3, #12]
 800fae8:	615a      	str	r2, [r3, #20]
 800faea:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800faee:	bc30      	pop	{r4, r5}
 800faf0:	4770      	bx	lr
 800faf2:	f04f 30ff 	mov.w	r0, #4294967295
 800faf6:	4770      	bx	lr
 800faf8:	08016700 	.word	0x08016700
 800fafc:	08011d70 	.word	0x08011d70
 800fb00:	0801f480 	.word	0x0801f480

0800fb04 <arm_rfft_fast_init_f32>:
 800fb04:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800fb08:	d01f      	beq.n	800fb4a <arm_rfft_fast_init_f32+0x46>
 800fb0a:	d90b      	bls.n	800fb24 <arm_rfft_fast_init_f32+0x20>
 800fb0c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800fb10:	d019      	beq.n	800fb46 <arm_rfft_fast_init_f32+0x42>
 800fb12:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800fb16:	d012      	beq.n	800fb3e <arm_rfft_fast_init_f32+0x3a>
 800fb18:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fb1c:	d00d      	beq.n	800fb3a <arm_rfft_fast_init_f32+0x36>
 800fb1e:	f04f 30ff 	mov.w	r0, #4294967295
 800fb22:	4770      	bx	lr
 800fb24:	2940      	cmp	r1, #64	; 0x40
 800fb26:	d00c      	beq.n	800fb42 <arm_rfft_fast_init_f32+0x3e>
 800fb28:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800fb2c:	d003      	beq.n	800fb36 <arm_rfft_fast_init_f32+0x32>
 800fb2e:	2920      	cmp	r1, #32
 800fb30:	d1f5      	bne.n	800fb1e <arm_rfft_fast_init_f32+0x1a>
 800fb32:	4b07      	ldr	r3, [pc, #28]	; (800fb50 <arm_rfft_fast_init_f32+0x4c>)
 800fb34:	4718      	bx	r3
 800fb36:	4b07      	ldr	r3, [pc, #28]	; (800fb54 <arm_rfft_fast_init_f32+0x50>)
 800fb38:	4718      	bx	r3
 800fb3a:	4b07      	ldr	r3, [pc, #28]	; (800fb58 <arm_rfft_fast_init_f32+0x54>)
 800fb3c:	4718      	bx	r3
 800fb3e:	4b07      	ldr	r3, [pc, #28]	; (800fb5c <arm_rfft_fast_init_f32+0x58>)
 800fb40:	4718      	bx	r3
 800fb42:	4b07      	ldr	r3, [pc, #28]	; (800fb60 <arm_rfft_fast_init_f32+0x5c>)
 800fb44:	e7f6      	b.n	800fb34 <arm_rfft_fast_init_f32+0x30>
 800fb46:	4b07      	ldr	r3, [pc, #28]	; (800fb64 <arm_rfft_fast_init_f32+0x60>)
 800fb48:	e7f4      	b.n	800fb34 <arm_rfft_fast_init_f32+0x30>
 800fb4a:	4b07      	ldr	r3, [pc, #28]	; (800fb68 <arm_rfft_fast_init_f32+0x64>)
 800fb4c:	e7f2      	b.n	800fb34 <arm_rfft_fast_init_f32+0x30>
 800fb4e:	bf00      	nop
 800fb50:	0800f96d 	.word	0x0800f96d
 800fb54:	0800f9dd 	.word	0x0800f9dd
 800fb58:	0800fa51 	.word	0x0800fa51
 800fb5c:	0800fac9 	.word	0x0800fac9
 800fb60:	0800f9a5 	.word	0x0800f9a5
 800fb64:	0800fa8d 	.word	0x0800fa8d
 800fb68:	0800fa15 	.word	0x0800fa15

0800fb6c <stage_rfft_f32>:
 800fb6c:	b470      	push	{r4, r5, r6}
 800fb6e:	edd1 7a00 	vldr	s15, [r1]
 800fb72:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800fb76:	ed91 7a01 	vldr	s14, [r1, #4]
 800fb7a:	f101 0510 	add.w	r5, r1, #16
 800fb7e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fb82:	8806      	ldrh	r6, [r0, #0]
 800fb84:	ee37 7a07 	vadd.f32	s14, s14, s14
 800fb88:	6943      	ldr	r3, [r0, #20]
 800fb8a:	1e70      	subs	r0, r6, #1
 800fb8c:	eeb0 4a46 	vmov.f32	s8, s12
 800fb90:	f102 0410 	add.w	r4, r2, #16
 800fb94:	3310      	adds	r3, #16
 800fb96:	ee77 6a87 	vadd.f32	s13, s15, s14
 800fb9a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800fb9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fba2:	3908      	subs	r1, #8
 800fba4:	ee26 7a86 	vmul.f32	s14, s13, s12
 800fba8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800fbac:	ed82 7a00 	vstr	s14, [r2]
 800fbb0:	edc2 7a01 	vstr	s15, [r2, #4]
 800fbb4:	ed15 6a02 	vldr	s12, [r5, #-8]
 800fbb8:	3801      	subs	r0, #1
 800fbba:	ed91 7a02 	vldr	s14, [r1, #8]
 800fbbe:	f105 0508 	add.w	r5, r5, #8
 800fbc2:	ed53 6a02 	vldr	s13, [r3, #-8]
 800fbc6:	f1a1 0108 	sub.w	r1, r1, #8
 800fbca:	ee77 5a46 	vsub.f32	s11, s14, s12
 800fbce:	edd1 4a05 	vldr	s9, [r1, #20]
 800fbd2:	ed55 7a03 	vldr	s15, [r5, #-12]
 800fbd6:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fbda:	ed13 6a01 	vldr	s12, [r3, #-4]
 800fbde:	f104 0408 	add.w	r4, r4, #8
 800fbe2:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800fbe6:	f103 0308 	add.w	r3, r3, #8
 800fbea:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800fbee:	ee66 5a25 	vmul.f32	s11, s12, s11
 800fbf2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800fbf6:	ee37 7a23 	vadd.f32	s14, s14, s7
 800fbfa:	ee66 6a85 	vmul.f32	s13, s13, s10
 800fbfe:	ee26 6a05 	vmul.f32	s12, s12, s10
 800fc02:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800fc06:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fc0a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fc0e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fc12:	ee67 7a84 	vmul.f32	s15, s15, s8
 800fc16:	ed04 7a04 	vstr	s14, [r4, #-16]
 800fc1a:	ed44 7a03 	vstr	s15, [r4, #-12]
 800fc1e:	d1c9      	bne.n	800fbb4 <stage_rfft_f32+0x48>
 800fc20:	bc70      	pop	{r4, r5, r6}
 800fc22:	4770      	bx	lr

0800fc24 <merge_rfft_f32>:
 800fc24:	b410      	push	{r4}
 800fc26:	edd1 7a00 	vldr	s15, [r1]
 800fc2a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800fc2e:	edd1 6a01 	vldr	s13, [r1, #4]
 800fc32:	8804      	ldrh	r4, [r0, #0]
 800fc34:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fc38:	6940      	ldr	r0, [r0, #20]
 800fc3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fc3e:	3c01      	subs	r4, #1
 800fc40:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fc44:	ee67 7a84 	vmul.f32	s15, s15, s8
 800fc48:	ed82 7a00 	vstr	s14, [r2]
 800fc4c:	edc2 7a01 	vstr	s15, [r2, #4]
 800fc50:	b3dc      	cbz	r4, 800fcca <merge_rfft_f32+0xa6>
 800fc52:	00e3      	lsls	r3, r4, #3
 800fc54:	3010      	adds	r0, #16
 800fc56:	3210      	adds	r2, #16
 800fc58:	3b08      	subs	r3, #8
 800fc5a:	440b      	add	r3, r1
 800fc5c:	3110      	adds	r1, #16
 800fc5e:	ed11 6a02 	vldr	s12, [r1, #-8]
 800fc62:	3c01      	subs	r4, #1
 800fc64:	ed93 7a02 	vldr	s14, [r3, #8]
 800fc68:	f101 0108 	add.w	r1, r1, #8
 800fc6c:	ed50 6a02 	vldr	s13, [r0, #-8]
 800fc70:	f1a3 0308 	sub.w	r3, r3, #8
 800fc74:	ee76 5a47 	vsub.f32	s11, s12, s14
 800fc78:	edd3 4a05 	vldr	s9, [r3, #20]
 800fc7c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800fc80:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fc84:	ed10 6a01 	vldr	s12, [r0, #-4]
 800fc88:	f102 0208 	add.w	r2, r2, #8
 800fc8c:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800fc90:	f100 0008 	add.w	r0, r0, #8
 800fc94:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800fc98:	ee66 5a25 	vmul.f32	s11, s12, s11
 800fc9c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800fca0:	ee37 7a63 	vsub.f32	s14, s14, s7
 800fca4:	ee66 6a85 	vmul.f32	s13, s13, s10
 800fca8:	ee26 6a05 	vmul.f32	s12, s12, s10
 800fcac:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800fcb0:	ee37 7a46 	vsub.f32	s14, s14, s12
 800fcb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fcb8:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fcbc:	ee67 7a84 	vmul.f32	s15, s15, s8
 800fcc0:	ed02 7a04 	vstr	s14, [r2, #-16]
 800fcc4:	ed42 7a03 	vstr	s15, [r2, #-12]
 800fcc8:	d1c9      	bne.n	800fc5e <merge_rfft_f32+0x3a>
 800fcca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcce:	4770      	bx	lr

0800fcd0 <arm_rfft_fast_f32>:
 800fcd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcd4:	8a05      	ldrh	r5, [r0, #16]
 800fcd6:	4604      	mov	r4, r0
 800fcd8:	4617      	mov	r7, r2
 800fcda:	461e      	mov	r6, r3
 800fcdc:	086d      	lsrs	r5, r5, #1
 800fcde:	8005      	strh	r5, [r0, #0]
 800fce0:	b14b      	cbz	r3, 800fcf6 <arm_rfft_fast_f32+0x26>
 800fce2:	f7ff ff9f 	bl	800fc24 <merge_rfft_f32>
 800fce6:	4632      	mov	r2, r6
 800fce8:	4639      	mov	r1, r7
 800fcea:	4620      	mov	r0, r4
 800fcec:	2301      	movs	r3, #1
 800fcee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcf2:	f000 bb35 	b.w	8010360 <arm_cfft_f32>
 800fcf6:	4688      	mov	r8, r1
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	f000 fb30 	bl	8010360 <arm_cfft_f32>
 800fd00:	463a      	mov	r2, r7
 800fd02:	4641      	mov	r1, r8
 800fd04:	4620      	mov	r0, r4
 800fd06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd0a:	f7ff bf2f 	b.w	800fb6c <stage_rfft_f32>
 800fd0e:	bf00      	nop

0800fd10 <arm_cfft_radix8by2_f32>:
 800fd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd14:	4607      	mov	r7, r0
 800fd16:	4608      	mov	r0, r1
 800fd18:	ed2d 8b06 	vpush	{d8-d10}
 800fd1c:	f8b7 c000 	ldrh.w	ip, [r7]
 800fd20:	687a      	ldr	r2, [r7, #4]
 800fd22:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800fd26:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800fd2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800fd2e:	f000 80ac 	beq.w	800fe8a <arm_cfft_radix8by2_f32+0x17a>
 800fd32:	008c      	lsls	r4, r1, #2
 800fd34:	f100 0310 	add.w	r3, r0, #16
 800fd38:	3210      	adds	r2, #16
 800fd3a:	f108 0610 	add.w	r6, r8, #16
 800fd3e:	3410      	adds	r4, #16
 800fd40:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800fd44:	1905      	adds	r5, r0, r4
 800fd46:	4444      	add	r4, r8
 800fd48:	ed16 7a04 	vldr	s14, [r6, #-16]
 800fd4c:	3310      	adds	r3, #16
 800fd4e:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 800fd52:	3510      	adds	r5, #16
 800fd54:	ed56 0a03 	vldr	s1, [r6, #-12]
 800fd58:	3210      	adds	r2, #16
 800fd5a:	ee74 9a87 	vadd.f32	s19, s9, s14
 800fd5e:	ed56 7a02 	vldr	s15, [r6, #-8]
 800fd62:	ed56 2a01 	vldr	s5, [r6, #-4]
 800fd66:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800fd6a:	ed54 5a04 	vldr	s11, [r4, #-16]
 800fd6e:	3610      	adds	r6, #16
 800fd70:	ed14 5a03 	vldr	s10, [r4, #-12]
 800fd74:	3410      	adds	r4, #16
 800fd76:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 800fd7a:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 800fd7e:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800fd82:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800fd86:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 800fd8a:	ee36 9aa5 	vadd.f32	s18, s13, s11
 800fd8e:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 800fd92:	ee33 8a83 	vadd.f32	s16, s7, s6
 800fd96:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800fd9a:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800fd9e:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800fda2:	ee34 0a06 	vadd.f32	s0, s8, s12
 800fda6:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 800fdaa:	ee77 aa20 	vadd.f32	s21, s14, s1
 800fdae:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 800fdb2:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800fdb6:	ee72 9a22 	vadd.f32	s19, s4, s5
 800fdba:	ee71 8a05 	vadd.f32	s17, s2, s10
 800fdbe:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 800fdc2:	ee37 7a60 	vsub.f32	s14, s14, s1
 800fdc6:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 800fdca:	ee35 5a41 	vsub.f32	s10, s10, s2
 800fdce:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 800fdd2:	ee36 6a44 	vsub.f32	s12, s12, s8
 800fdd6:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 800fdda:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 800fdde:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800fde2:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 800fde6:	ee72 7a62 	vsub.f32	s15, s4, s5
 800fdea:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 800fdee:	ee73 2a63 	vsub.f32	s5, s6, s7
 800fdf2:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800fdf6:	4563      	cmp	r3, ip
 800fdf8:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800fdfc:	ee24 3a84 	vmul.f32	s6, s9, s8
 800fe00:	ee27 2a26 	vmul.f32	s4, s14, s13
 800fe04:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800fe08:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800fe0c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fe10:	ee65 5a84 	vmul.f32	s11, s11, s8
 800fe14:	ee65 6a26 	vmul.f32	s13, s10, s13
 800fe18:	ee25 5a04 	vmul.f32	s10, s10, s8
 800fe1c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800fe20:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800fe24:	ee33 4a02 	vadd.f32	s8, s6, s4
 800fe28:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800fe2c:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 800fe30:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 800fe34:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 800fe38:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 800fe3c:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800fe40:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800fe44:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800fe48:	ee27 4a87 	vmul.f32	s8, s15, s14
 800fe4c:	ee61 5a87 	vmul.f32	s11, s3, s14
 800fe50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fe54:	ee22 5a87 	vmul.f32	s10, s5, s14
 800fe58:	ee26 7a07 	vmul.f32	s14, s12, s14
 800fe5c:	ee26 6a26 	vmul.f32	s12, s12, s13
 800fe60:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800fe64:	ee74 4a84 	vadd.f32	s9, s9, s8
 800fe68:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800fe6c:	ee35 6a46 	vsub.f32	s12, s10, s12
 800fe70:	ee37 7a26 	vadd.f32	s14, s14, s13
 800fe74:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 800fe78:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 800fe7c:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 800fe80:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 800fe84:	f47f af60 	bne.w	800fd48 <arm_cfft_radix8by2_f32+0x38>
 800fe88:	687a      	ldr	r2, [r7, #4]
 800fe8a:	b28c      	uxth	r4, r1
 800fe8c:	2302      	movs	r3, #2
 800fe8e:	4621      	mov	r1, r4
 800fe90:	f000 fb04 	bl	801049c <arm_radix8_butterfly_f32>
 800fe94:	4621      	mov	r1, r4
 800fe96:	687a      	ldr	r2, [r7, #4]
 800fe98:	4640      	mov	r0, r8
 800fe9a:	2302      	movs	r3, #2
 800fe9c:	ecbd 8b06 	vpop	{d8-d10}
 800fea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fea4:	f000 bafa 	b.w	801049c <arm_radix8_butterfly_f32>

0800fea8 <arm_cfft_radix8by4_f32>:
 800fea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feac:	ed2d 8b04 	vpush	{d8-d9}
 800feb0:	8804      	ldrh	r4, [r0, #0]
 800feb2:	b08d      	sub	sp, #52	; 0x34
 800feb4:	6842      	ldr	r2, [r0, #4]
 800feb6:	460d      	mov	r5, r1
 800feb8:	0864      	lsrs	r4, r4, #1
 800feba:	edd1 7a00 	vldr	s15, [r1]
 800febe:	edd1 5a01 	vldr	s11, [r1, #4]
 800fec2:	00a3      	lsls	r3, r4, #2
 800fec4:	18ce      	adds	r6, r1, r3
 800fec6:	18f7      	adds	r7, r6, r3
 800fec8:	ed96 7a00 	vldr	s14, [r6]
 800fecc:	ed96 4a01 	vldr	s8, [r6, #4]
 800fed0:	ed97 6a00 	vldr	s12, [r7]
 800fed4:	edd7 4a01 	vldr	s9, [r7, #4]
 800fed8:	ee77 6a86 	vadd.f32	s13, s15, s12
 800fedc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800fee0:	ee35 6aa4 	vadd.f32	s12, s11, s9
 800fee4:	ee77 2a26 	vadd.f32	s5, s14, s13
 800fee8:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800feec:	ee74 3a27 	vadd.f32	s7, s8, s15
 800fef0:	ee76 4a44 	vsub.f32	s9, s12, s8
 800fef4:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800fef8:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800fefc:	ee35 4ac7 	vsub.f32	s8, s11, s14
 800ff00:	ee37 7a25 	vadd.f32	s14, s14, s11
 800ff04:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ff08:	0860      	lsrs	r0, r4, #1
 800ff0a:	f102 0408 	add.w	r4, r2, #8
 800ff0e:	9405      	str	r4, [sp, #20]
 800ff10:	f102 0410 	add.w	r4, r2, #16
 800ff14:	9009      	str	r0, [sp, #36]	; 0x24
 800ff16:	f1a0 0902 	sub.w	r9, r0, #2
 800ff1a:	9403      	str	r4, [sp, #12]
 800ff1c:	18fc      	adds	r4, r7, r3
 800ff1e:	f102 0018 	add.w	r0, r2, #24
 800ff22:	ed94 5a00 	vldr	s10, [r4]
 800ff26:	ed94 3a01 	vldr	s6, [r4, #4]
 800ff2a:	ee72 2a85 	vadd.f32	s5, s5, s10
 800ff2e:	9004      	str	r0, [sp, #16]
 800ff30:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800ff34:	4620      	mov	r0, r4
 800ff36:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800ff3a:	9408      	str	r4, [sp, #32]
 800ff3c:	ee12 ca90 	vmov	ip, s5
 800ff40:	ee74 5ac3 	vsub.f32	s11, s9, s6
 800ff44:	ee77 7a83 	vadd.f32	s15, s15, s6
 800ff48:	f845 cb08 	str.w	ip, [r5], #8
 800ff4c:	ee13 ca90 	vmov	ip, s7
 800ff50:	ed96 2a01 	vldr	s4, [r6, #4]
 800ff54:	ee74 4a05 	vadd.f32	s9, s8, s10
 800ff58:	edd4 2a01 	vldr	s5, [r4, #4]
 800ff5c:	ee37 7a45 	vsub.f32	s14, s14, s10
 800ff60:	ee36 6a02 	vadd.f32	s12, s12, s4
 800ff64:	9500      	str	r5, [sp, #0]
 800ff66:	460d      	mov	r5, r1
 800ff68:	ee36 6a22 	vadd.f32	s12, s12, s5
 800ff6c:	ed81 6a01 	vstr	s12, [r1, #4]
 800ff70:	4631      	mov	r1, r6
 800ff72:	f841 cb08 	str.w	ip, [r1], #8
 800ff76:	ee16 ca90 	vmov	ip, s13
 800ff7a:	9106      	str	r1, [sp, #24]
 800ff7c:	4639      	mov	r1, r7
 800ff7e:	edc6 4a01 	vstr	s9, [r6, #4]
 800ff82:	f841 cb08 	str.w	ip, [r1], #8
 800ff86:	9102      	str	r1, [sp, #8]
 800ff88:	ee17 1a90 	vmov	r1, s15
 800ff8c:	edc7 5a01 	vstr	s11, [r7, #4]
 800ff90:	f840 1b08 	str.w	r1, [r0], #8
 800ff94:	ea5f 0159 	movs.w	r1, r9, lsr #1
 800ff98:	9001      	str	r0, [sp, #4]
 800ff9a:	ed84 7a01 	vstr	s14, [r4, #4]
 800ff9e:	9107      	str	r1, [sp, #28]
 800ffa0:	f000 8135 	beq.w	801020e <arm_cfft_radix8by4_f32+0x366>
 800ffa4:	3b0c      	subs	r3, #12
 800ffa6:	f102 0920 	add.w	r9, r2, #32
 800ffaa:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800ffae:	4622      	mov	r2, r4
 800ffb0:	468b      	mov	fp, r1
 800ffb2:	f105 0e10 	add.w	lr, r5, #16
 800ffb6:	4423      	add	r3, r4
 800ffb8:	f1a6 0c0c 	sub.w	ip, r6, #12
 800ffbc:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800ffc0:	f106 0010 	add.w	r0, r6, #16
 800ffc4:	f1a7 010c 	sub.w	r1, r7, #12
 800ffc8:	f107 0510 	add.w	r5, r7, #16
 800ffcc:	3c0c      	subs	r4, #12
 800ffce:	3210      	adds	r2, #16
 800ffd0:	ed15 7a02 	vldr	s14, [r5, #-8]
 800ffd4:	f1bb 0b01 	subs.w	fp, fp, #1
 800ffd8:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800ffdc:	f1ac 0c08 	sub.w	ip, ip, #8
 800ffe0:	ed50 6a02 	vldr	s13, [r0, #-8]
 800ffe4:	f10e 0e08 	add.w	lr, lr, #8
 800ffe8:	ee77 1a87 	vadd.f32	s3, s15, s14
 800ffec:	ed52 4a02 	vldr	s9, [r2, #-8]
 800fff0:	ed55 5a01 	vldr	s11, [r5, #-4]
 800fff4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fff8:	ed1e 7a03 	vldr	s14, [lr, #-12]
 800fffc:	f10a 0a08 	add.w	sl, sl, #8
 8010000:	ee36 6aa1 	vadd.f32	s12, s13, s3
 8010004:	ed10 3a01 	vldr	s6, [r0, #-4]
 8010008:	ee37 4a25 	vadd.f32	s8, s14, s11
 801000c:	ed52 3a01 	vldr	s7, [r2, #-4]
 8010010:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010014:	f100 0008 	add.w	r0, r0, #8
 8010018:	ee36 6a24 	vadd.f32	s12, s12, s9
 801001c:	f1a1 0108 	sub.w	r1, r1, #8
 8010020:	ee73 2a27 	vadd.f32	s5, s6, s15
 8010024:	f109 0910 	add.w	r9, r9, #16
 8010028:	ee77 7ac3 	vsub.f32	s15, s15, s6
 801002c:	f105 0508 	add.w	r5, r5, #8
 8010030:	ed0e 6a04 	vstr	s12, [lr, #-16]
 8010034:	ee37 5a66 	vsub.f32	s10, s14, s13
 8010038:	ed50 5a03 	vldr	s11, [r0, #-12]
 801003c:	ee71 1ae6 	vsub.f32	s3, s3, s13
 8010040:	ed12 6a01 	vldr	s12, [r2, #-4]
 8010044:	ee36 7a87 	vadd.f32	s14, s13, s14
 8010048:	ee74 5a25 	vadd.f32	s11, s8, s11
 801004c:	f1a4 0408 	sub.w	r4, r4, #8
 8010050:	ee34 4a43 	vsub.f32	s8, s8, s6
 8010054:	f108 0818 	add.w	r8, r8, #24
 8010058:	ee32 0ae3 	vsub.f32	s0, s5, s7
 801005c:	f102 0208 	add.w	r2, r2, #8
 8010060:	ee75 5a86 	vadd.f32	s11, s11, s12
 8010064:	f1a3 0308 	sub.w	r3, r3, #8
 8010068:	ee34 6a63 	vsub.f32	s12, s8, s7
 801006c:	ee77 3aa3 	vadd.f32	s7, s15, s7
 8010070:	ed4e 5a03 	vstr	s11, [lr, #-12]
 8010074:	ee35 5a24 	vadd.f32	s10, s10, s9
 8010078:	ed94 4a04 	vldr	s8, [r4, #16]
 801007c:	ee71 1ae4 	vsub.f32	s3, s3, s9
 8010080:	ed9c 3a04 	vldr	s6, [ip, #16]
 8010084:	ee37 7a64 	vsub.f32	s14, s14, s9
 8010088:	edd1 7a04 	vldr	s15, [r1, #16]
 801008c:	ee73 6a04 	vadd.f32	s13, s6, s8
 8010090:	ed93 8a04 	vldr	s16, [r3, #16]
 8010094:	edd4 5a03 	vldr	s11, [r4, #12]
 8010098:	ee33 3a44 	vsub.f32	s6, s6, s8
 801009c:	ed9c 2a03 	vldr	s4, [ip, #12]
 80100a0:	ee77 8ac8 	vsub.f32	s17, s15, s16
 80100a4:	ee77 0aa6 	vadd.f32	s1, s15, s13
 80100a8:	ed91 1a03 	vldr	s2, [r1, #12]
 80100ac:	ee32 4a25 	vadd.f32	s8, s4, s11
 80100b0:	edd3 2a03 	vldr	s5, [r3, #12]
 80100b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80100b8:	ee70 0a88 	vadd.f32	s1, s1, s16
 80100bc:	ee73 4a41 	vsub.f32	s9, s6, s2
 80100c0:	ee32 2a65 	vsub.f32	s4, s4, s11
 80100c4:	edcc 0a04 	vstr	s1, [ip, #16]
 80100c8:	ee74 0a41 	vsub.f32	s1, s8, s2
 80100cc:	edd1 6a03 	vldr	s13, [r1, #12]
 80100d0:	ee74 4aa2 	vadd.f32	s9, s9, s5
 80100d4:	ed93 9a03 	vldr	s18, [r3, #12]
 80100d8:	ee78 5a82 	vadd.f32	s11, s17, s4
 80100dc:	ee34 4a26 	vadd.f32	s8, s8, s13
 80100e0:	ee70 0ae2 	vsub.f32	s1, s1, s5
 80100e4:	ee72 2ac1 	vsub.f32	s5, s5, s2
 80100e8:	ee34 4a09 	vadd.f32	s8, s8, s18
 80100ec:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80100f0:	ee32 3ac3 	vsub.f32	s6, s5, s6
 80100f4:	ed8c 4a03 	vstr	s8, [ip, #12]
 80100f8:	ee38 2ac2 	vsub.f32	s4, s17, s4
 80100fc:	ed1a 1a03 	vldr	s2, [sl, #-12]
 8010100:	ed1a 4a04 	vldr	s8, [sl, #-16]
 8010104:	ee60 2a01 	vmul.f32	s5, s0, s2
 8010108:	ee64 6a81 	vmul.f32	s13, s9, s2
 801010c:	ee20 8a04 	vmul.f32	s16, s0, s8
 8010110:	ee64 4a84 	vmul.f32	s9, s9, s8
 8010114:	ee25 0a01 	vmul.f32	s0, s10, s2
 8010118:	ee25 5a04 	vmul.f32	s10, s10, s8
 801011c:	ee25 4a84 	vmul.f32	s8, s11, s8
 8010120:	ee65 5a81 	vmul.f32	s11, s11, s2
 8010124:	ee35 5a62 	vsub.f32	s10, s10, s5
 8010128:	ee36 4ac4 	vsub.f32	s8, s13, s8
 801012c:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8010130:	ee38 1a00 	vadd.f32	s2, s16, s0
 8010134:	ed00 5a03 	vstr	s10, [r0, #-12]
 8010138:	ed00 1a04 	vstr	s2, [r0, #-16]
 801013c:	ed81 4a04 	vstr	s8, [r1, #16]
 8010140:	edc1 5a03 	vstr	s11, [r1, #12]
 8010144:	ed19 5a08 	vldr	s10, [r9, #-32]	; 0xffffffe0
 8010148:	ed59 5a07 	vldr	s11, [r9, #-28]	; 0xffffffe4
 801014c:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 8010150:	ee66 2a25 	vmul.f32	s5, s12, s11
 8010154:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8010158:	ee21 4a85 	vmul.f32	s8, s3, s10
 801015c:	ee60 7a85 	vmul.f32	s15, s1, s10
 8010160:	ee61 1aa5 	vmul.f32	s3, s3, s11
 8010164:	ee26 6a05 	vmul.f32	s12, s12, s10
 8010168:	ee60 5aa5 	vmul.f32	s11, s1, s11
 801016c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010170:	ee34 5a22 	vadd.f32	s10, s8, s5
 8010174:	ee36 6a61 	vsub.f32	s12, s12, s3
 8010178:	ee74 5ae5 	vsub.f32	s11, s9, s11
 801017c:	ed05 5a04 	vstr	s10, [r5, #-16]
 8010180:	ed05 6a03 	vstr	s12, [r5, #-12]
 8010184:	edc4 5a04 	vstr	s11, [r4, #16]
 8010188:	edc4 6a03 	vstr	s13, [r4, #12]
 801018c:	ed58 2a0c 	vldr	s5, [r8, #-48]	; 0xffffffd0
 8010190:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
 8010194:	ee23 6aa2 	vmul.f32	s12, s7, s5
 8010198:	ee67 5a27 	vmul.f32	s11, s14, s15
 801019c:	ee63 6a27 	vmul.f32	s13, s6, s15
 80101a0:	ee63 3aa7 	vmul.f32	s7, s7, s15
 80101a4:	ee27 7a22 	vmul.f32	s14, s14, s5
 80101a8:	ee62 7a27 	vmul.f32	s15, s4, s15
 80101ac:	ee23 3a22 	vmul.f32	s6, s6, s5
 80101b0:	ee22 2a22 	vmul.f32	s4, s4, s5
 80101b4:	ee36 6a25 	vadd.f32	s12, s12, s11
 80101b8:	ee37 7a63 	vsub.f32	s14, s14, s7
 80101bc:	ee36 2ac2 	vsub.f32	s4, s13, s4
 80101c0:	ee77 7a83 	vadd.f32	s15, s15, s6
 80101c4:	ed02 6a04 	vstr	s12, [r2, #-16]
 80101c8:	ed02 7a03 	vstr	s14, [r2, #-12]
 80101cc:	ed83 2a04 	vstr	s4, [r3, #16]
 80101d0:	edc3 7a03 	vstr	s15, [r3, #12]
 80101d4:	f47f aefc 	bne.w	800ffd0 <arm_cfft_radix8by4_f32+0x128>
 80101d8:	9907      	ldr	r1, [sp, #28]
 80101da:	9803      	ldr	r0, [sp, #12]
 80101dc:	00cb      	lsls	r3, r1, #3
 80101de:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80101e2:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80101e6:	9103      	str	r1, [sp, #12]
 80101e8:	9900      	ldr	r1, [sp, #0]
 80101ea:	4419      	add	r1, r3
 80101ec:	9100      	str	r1, [sp, #0]
 80101ee:	9905      	ldr	r1, [sp, #20]
 80101f0:	4419      	add	r1, r3
 80101f2:	9105      	str	r1, [sp, #20]
 80101f4:	9906      	ldr	r1, [sp, #24]
 80101f6:	4419      	add	r1, r3
 80101f8:	9106      	str	r1, [sp, #24]
 80101fa:	9902      	ldr	r1, [sp, #8]
 80101fc:	4419      	add	r1, r3
 80101fe:	9102      	str	r1, [sp, #8]
 8010200:	9901      	ldr	r1, [sp, #4]
 8010202:	4419      	add	r1, r3
 8010204:	9b04      	ldr	r3, [sp, #16]
 8010206:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801020a:	9101      	str	r1, [sp, #4]
 801020c:	9304      	str	r3, [sp, #16]
 801020e:	9b00      	ldr	r3, [sp, #0]
 8010210:	9902      	ldr	r1, [sp, #8]
 8010212:	ed93 7a00 	vldr	s14, [r3]
 8010216:	edd1 7a00 	vldr	s15, [r1]
 801021a:	9a06      	ldr	r2, [sp, #24]
 801021c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8010220:	9d01      	ldr	r5, [sp, #4]
 8010222:	edd2 6a00 	vldr	s13, [r2]
 8010226:	ee37 7a67 	vsub.f32	s14, s14, s15
 801022a:	9b02      	ldr	r3, [sp, #8]
 801022c:	ee76 3a86 	vadd.f32	s7, s13, s12
 8010230:	ed95 3a00 	vldr	s6, [r5]
 8010234:	ed93 5a01 	vldr	s10, [r3, #4]
 8010238:	ee36 6a66 	vsub.f32	s12, s12, s13
 801023c:	9b00      	ldr	r3, [sp, #0]
 801023e:	ee73 3a83 	vadd.f32	s7, s7, s6
 8010242:	edd5 2a01 	vldr	s5, [r5, #4]
 8010246:	ed93 4a01 	vldr	s8, [r3, #4]
 801024a:	ee36 6a43 	vsub.f32	s12, s12, s6
 801024e:	9b00      	ldr	r3, [sp, #0]
 8010250:	ee74 5a05 	vadd.f32	s11, s8, s10
 8010254:	edd2 7a01 	vldr	s15, [r2, #4]
 8010258:	edc3 3a00 	vstr	s7, [r3]
 801025c:	ee34 4a45 	vsub.f32	s8, s8, s10
 8010260:	edd2 3a01 	vldr	s7, [r2, #4]
 8010264:	ee77 4a87 	vadd.f32	s9, s15, s14
 8010268:	ed95 2a01 	vldr	s4, [r5, #4]
 801026c:	ee75 3aa3 	vadd.f32	s7, s11, s7
 8010270:	9d05      	ldr	r5, [sp, #20]
 8010272:	ee34 5a66 	vsub.f32	s10, s8, s13
 8010276:	9b00      	ldr	r3, [sp, #0]
 8010278:	ee74 4ae2 	vsub.f32	s9, s9, s5
 801027c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8010280:	ee73 3a82 	vadd.f32	s7, s7, s4
 8010284:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010286:	ee35 5a03 	vadd.f32	s10, s10, s6
 801028a:	4621      	mov	r1, r4
 801028c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8010290:	edc3 3a01 	vstr	s7, [r3, #4]
 8010294:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010298:	edd5 3a00 	vldr	s7, [r5]
 801029c:	ee76 6a84 	vadd.f32	s13, s13, s8
 80102a0:	ed95 7a01 	vldr	s14, [r5, #4]
 80102a4:	ee75 5ae2 	vsub.f32	s11, s11, s5
 80102a8:	ee24 4aa3 	vmul.f32	s8, s9, s7
 80102ac:	2304      	movs	r3, #4
 80102ae:	ee64 4a87 	vmul.f32	s9, s9, s14
 80102b2:	ee25 7a07 	vmul.f32	s14, s10, s14
 80102b6:	ee25 5a23 	vmul.f32	s10, s10, s7
 80102ba:	ee77 7aa2 	vadd.f32	s15, s15, s5
 80102be:	ee34 7a07 	vadd.f32	s14, s8, s14
 80102c2:	ee35 5a64 	vsub.f32	s10, s10, s9
 80102c6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80102ca:	ed82 7a00 	vstr	s14, [r2]
 80102ce:	ed82 5a01 	vstr	s10, [r2, #4]
 80102d2:	9a03      	ldr	r2, [sp, #12]
 80102d4:	edd2 4a01 	vldr	s9, [r2, #4]
 80102d8:	ed92 7a00 	vldr	s14, [r2]
 80102dc:	9a02      	ldr	r2, [sp, #8]
 80102de:	ee26 5a07 	vmul.f32	s10, s12, s14
 80102e2:	ee26 6a24 	vmul.f32	s12, s12, s9
 80102e6:	ee25 7a87 	vmul.f32	s14, s11, s14
 80102ea:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80102ee:	ee37 6a46 	vsub.f32	s12, s14, s12
 80102f2:	ee75 5a25 	vadd.f32	s11, s10, s11
 80102f6:	edc2 5a00 	vstr	s11, [r2]
 80102fa:	ed82 6a01 	vstr	s12, [r2, #4]
 80102fe:	9a04      	ldr	r2, [sp, #16]
 8010300:	9d01      	ldr	r5, [sp, #4]
 8010302:	edd2 5a01 	vldr	s11, [r2, #4]
 8010306:	ed92 7a00 	vldr	s14, [r2]
 801030a:	ee27 6a87 	vmul.f32	s12, s15, s14
 801030e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8010312:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010316:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801031a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801031e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010322:	edc5 7a01 	vstr	s15, [r5, #4]
 8010326:	edc5 6a00 	vstr	s13, [r5]
 801032a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801032c:	686a      	ldr	r2, [r5, #4]
 801032e:	f000 f8b5 	bl	801049c <arm_radix8_butterfly_f32>
 8010332:	4630      	mov	r0, r6
 8010334:	4621      	mov	r1, r4
 8010336:	686a      	ldr	r2, [r5, #4]
 8010338:	2304      	movs	r3, #4
 801033a:	f000 f8af 	bl	801049c <arm_radix8_butterfly_f32>
 801033e:	4638      	mov	r0, r7
 8010340:	4621      	mov	r1, r4
 8010342:	686a      	ldr	r2, [r5, #4]
 8010344:	2304      	movs	r3, #4
 8010346:	f000 f8a9 	bl	801049c <arm_radix8_butterfly_f32>
 801034a:	4621      	mov	r1, r4
 801034c:	686a      	ldr	r2, [r5, #4]
 801034e:	2304      	movs	r3, #4
 8010350:	9808      	ldr	r0, [sp, #32]
 8010352:	b00d      	add	sp, #52	; 0x34
 8010354:	ecbd 8b04 	vpop	{d8-d9}
 8010358:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801035c:	f000 b89e 	b.w	801049c <arm_radix8_butterfly_f32>

08010360 <arm_cfft_f32>:
 8010360:	2a01      	cmp	r2, #1
 8010362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010366:	4606      	mov	r6, r0
 8010368:	4617      	mov	r7, r2
 801036a:	460c      	mov	r4, r1
 801036c:	4698      	mov	r8, r3
 801036e:	8805      	ldrh	r5, [r0, #0]
 8010370:	d055      	beq.n	801041e <arm_cfft_f32+0xbe>
 8010372:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8010376:	d061      	beq.n	801043c <arm_cfft_f32+0xdc>
 8010378:	d916      	bls.n	80103a8 <arm_cfft_f32+0x48>
 801037a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801037e:	d01a      	beq.n	80103b6 <arm_cfft_f32+0x56>
 8010380:	d946      	bls.n	8010410 <arm_cfft_f32+0xb0>
 8010382:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8010386:	d059      	beq.n	801043c <arm_cfft_f32+0xdc>
 8010388:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 801038c:	d105      	bne.n	801039a <arm_cfft_f32+0x3a>
 801038e:	2301      	movs	r3, #1
 8010390:	6872      	ldr	r2, [r6, #4]
 8010392:	4629      	mov	r1, r5
 8010394:	4620      	mov	r0, r4
 8010396:	f000 f881 	bl	801049c <arm_radix8_butterfly_f32>
 801039a:	f1b8 0f00 	cmp.w	r8, #0
 801039e:	d111      	bne.n	80103c4 <arm_cfft_f32+0x64>
 80103a0:	2f01      	cmp	r7, #1
 80103a2:	d016      	beq.n	80103d2 <arm_cfft_f32+0x72>
 80103a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103a8:	2d20      	cmp	r5, #32
 80103aa:	d047      	beq.n	801043c <arm_cfft_f32+0xdc>
 80103ac:	d934      	bls.n	8010418 <arm_cfft_f32+0xb8>
 80103ae:	2d40      	cmp	r5, #64	; 0x40
 80103b0:	d0ed      	beq.n	801038e <arm_cfft_f32+0x2e>
 80103b2:	2d80      	cmp	r5, #128	; 0x80
 80103b4:	d1f1      	bne.n	801039a <arm_cfft_f32+0x3a>
 80103b6:	4621      	mov	r1, r4
 80103b8:	4630      	mov	r0, r6
 80103ba:	f7ff fca9 	bl	800fd10 <arm_cfft_radix8by2_f32>
 80103be:	f1b8 0f00 	cmp.w	r8, #0
 80103c2:	d0ed      	beq.n	80103a0 <arm_cfft_f32+0x40>
 80103c4:	68b2      	ldr	r2, [r6, #8]
 80103c6:	4620      	mov	r0, r4
 80103c8:	89b1      	ldrh	r1, [r6, #12]
 80103ca:	f000 f83f 	bl	801044c <arm_bitreversal_32>
 80103ce:	2f01      	cmp	r7, #1
 80103d0:	d1e8      	bne.n	80103a4 <arm_cfft_f32+0x44>
 80103d2:	ee07 5a90 	vmov	s15, r5
 80103d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80103da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80103e2:	2d00      	cmp	r5, #0
 80103e4:	d0de      	beq.n	80103a4 <arm_cfft_f32+0x44>
 80103e6:	f104 0108 	add.w	r1, r4, #8
 80103ea:	2300      	movs	r3, #0
 80103ec:	ed11 7a02 	vldr	s14, [r1, #-8]
 80103f0:	3301      	adds	r3, #1
 80103f2:	ed51 7a01 	vldr	s15, [r1, #-4]
 80103f6:	3108      	adds	r1, #8
 80103f8:	429d      	cmp	r5, r3
 80103fa:	ee27 7a26 	vmul.f32	s14, s14, s13
 80103fe:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010402:	ed01 7a04 	vstr	s14, [r1, #-16]
 8010406:	ed41 7a03 	vstr	s15, [r1, #-12]
 801040a:	d1ef      	bne.n	80103ec <arm_cfft_f32+0x8c>
 801040c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010410:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8010414:	d0bb      	beq.n	801038e <arm_cfft_f32+0x2e>
 8010416:	e7c0      	b.n	801039a <arm_cfft_f32+0x3a>
 8010418:	2d10      	cmp	r5, #16
 801041a:	d0cc      	beq.n	80103b6 <arm_cfft_f32+0x56>
 801041c:	e7bd      	b.n	801039a <arm_cfft_f32+0x3a>
 801041e:	b195      	cbz	r5, 8010446 <arm_cfft_f32+0xe6>
 8010420:	f101 030c 	add.w	r3, r1, #12
 8010424:	2200      	movs	r2, #0
 8010426:	ed53 7a02 	vldr	s15, [r3, #-8]
 801042a:	3201      	adds	r2, #1
 801042c:	3308      	adds	r3, #8
 801042e:	eef1 7a67 	vneg.f32	s15, s15
 8010432:	4295      	cmp	r5, r2
 8010434:	ed43 7a04 	vstr	s15, [r3, #-16]
 8010438:	d1f5      	bne.n	8010426 <arm_cfft_f32+0xc6>
 801043a:	e79a      	b.n	8010372 <arm_cfft_f32+0x12>
 801043c:	4621      	mov	r1, r4
 801043e:	4630      	mov	r0, r6
 8010440:	f7ff fd32 	bl	800fea8 <arm_cfft_radix8by4_f32>
 8010444:	e7a9      	b.n	801039a <arm_cfft_f32+0x3a>
 8010446:	2b00      	cmp	r3, #0
 8010448:	d0ac      	beq.n	80103a4 <arm_cfft_f32+0x44>
 801044a:	e7bb      	b.n	80103c4 <arm_cfft_f32+0x64>

0801044c <arm_bitreversal_32>:
 801044c:	b321      	cbz	r1, 8010498 <arm_bitreversal_32+0x4c>
 801044e:	f102 0c02 	add.w	ip, r2, #2
 8010452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010456:	4690      	mov	r8, r2
 8010458:	2500      	movs	r5, #0
 801045a:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 801045e:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 8010462:	3502      	adds	r5, #2
 8010464:	08a4      	lsrs	r4, r4, #2
 8010466:	089b      	lsrs	r3, r3, #2
 8010468:	428d      	cmp	r5, r1
 801046a:	ea4f 0784 	mov.w	r7, r4, lsl #2
 801046e:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 8010472:	ea4f 0683 	mov.w	r6, r3, lsl #2
 8010476:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801047a:	f107 0704 	add.w	r7, r7, #4
 801047e:	f106 0604 	add.w	r6, r6, #4
 8010482:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8010486:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 801048a:	59c4      	ldr	r4, [r0, r7]
 801048c:	5983      	ldr	r3, [r0, r6]
 801048e:	51c3      	str	r3, [r0, r7]
 8010490:	5184      	str	r4, [r0, r6]
 8010492:	d3e2      	bcc.n	801045a <arm_bitreversal_32+0xe>
 8010494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010498:	4770      	bx	lr
 801049a:	bf00      	nop

0801049c <arm_radix8_butterfly_f32>:
 801049c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104a0:	ed2d 8b10 	vpush	{d8-d15}
 80104a4:	b095      	sub	sp, #84	; 0x54
 80104a6:	468a      	mov	sl, r1
 80104a8:	468b      	mov	fp, r1
 80104aa:	eddf 8abb 	vldr	s17, [pc, #748]	; 8010798 <arm_radix8_butterfly_f32+0x2fc>
 80104ae:	9012      	str	r0, [sp, #72]	; 0x48
 80104b0:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80104b4:	4603      	mov	r3, r0
 80104b6:	3304      	adds	r3, #4
 80104b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80104ba:	ea4f 02db 	mov.w	r2, fp, lsr #3
 80104be:	9912      	ldr	r1, [sp, #72]	; 0x48
 80104c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80104c4:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 80104c8:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 80104cc:	920f      	str	r2, [sp, #60]	; 0x3c
 80104ce:	9303      	str	r3, [sp, #12]
 80104d0:	0153      	lsls	r3, r2, #5
 80104d2:	0114      	lsls	r4, r2, #4
 80104d4:	eba9 0002 	sub.w	r0, r9, r2
 80104d8:	18ce      	adds	r6, r1, r3
 80104da:	9302      	str	r3, [sp, #8]
 80104dc:	0097      	lsls	r7, r2, #2
 80104de:	4613      	mov	r3, r2
 80104e0:	eb06 0509 	add.w	r5, r6, r9
 80104e4:	9004      	str	r0, [sp, #16]
 80104e6:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 80104ea:	1bd2      	subs	r2, r2, r7
 80104ec:	eb05 0109 	add.w	r1, r5, r9
 80104f0:	441f      	add	r7, r3
 80104f2:	9405      	str	r4, [sp, #20]
 80104f4:	f109 0004 	add.w	r0, r9, #4
 80104f8:	9101      	str	r1, [sp, #4]
 80104fa:	1d21      	adds	r1, r4, #4
 80104fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80104fe:	f04f 0e00 	mov.w	lr, #0
 8010502:	9c01      	ldr	r4, [sp, #4]
 8010504:	4418      	add	r0, r3
 8010506:	4419      	add	r1, r3
 8010508:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801050c:	9b02      	ldr	r3, [sp, #8]
 801050e:	00fc      	lsls	r4, r7, #3
 8010510:	18d7      	adds	r7, r2, r3
 8010512:	9b04      	ldr	r3, [sp, #16]
 8010514:	9406      	str	r4, [sp, #24]
 8010516:	00db      	lsls	r3, r3, #3
 8010518:	9c01      	ldr	r4, [sp, #4]
 801051a:	9307      	str	r3, [sp, #28]
 801051c:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8010520:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8010524:	9304      	str	r3, [sp, #16]
 8010526:	9b03      	ldr	r3, [sp, #12]
 8010528:	edd6 6a00 	vldr	s13, [r6]
 801052c:	44de      	add	lr, fp
 801052e:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8010532:	ed94 7a00 	vldr	s14, [r4]
 8010536:	45f2      	cmp	sl, lr
 8010538:	ed10 6a01 	vldr	s12, [r0, #-4]
 801053c:	ee37 2aa6 	vadd.f32	s4, s15, s13
 8010540:	edd5 2a00 	vldr	s5, [r5]
 8010544:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010548:	edd7 3a00 	vldr	s7, [r7]
 801054c:	ed11 5a01 	vldr	s10, [r1, #-4]
 8010550:	ee36 3a22 	vadd.f32	s6, s12, s5
 8010554:	edd2 6a00 	vldr	s13, [r2]
 8010558:	ee75 5a07 	vadd.f32	s11, s10, s14
 801055c:	ee36 4aa3 	vadd.f32	s8, s13, s7
 8010560:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8010564:	ee72 4a25 	vadd.f32	s9, s4, s11
 8010568:	ee73 3a04 	vadd.f32	s7, s6, s8
 801056c:	ee35 5a47 	vsub.f32	s10, s10, s14
 8010570:	ee36 7a62 	vsub.f32	s14, s12, s5
 8010574:	ee32 2a65 	vsub.f32	s4, s4, s11
 8010578:	ee74 5aa3 	vadd.f32	s11, s9, s7
 801057c:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8010580:	ee37 6a66 	vsub.f32	s12, s14, s13
 8010584:	ed4c 5a01 	vstr	s11, [ip, #-4]
 8010588:	ee33 3a44 	vsub.f32	s6, s6, s8
 801058c:	edc6 4a00 	vstr	s9, [r6]
 8010590:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010594:	ed97 4a01 	vldr	s8, [r7, #4]
 8010598:	ee66 6a28 	vmul.f32	s13, s12, s17
 801059c:	edd0 5a00 	vldr	s11, [r0]
 80105a0:	ed95 6a01 	vldr	s12, [r5, #4]
 80105a4:	ee27 7a28 	vmul.f32	s14, s14, s17
 80105a8:	edd2 3a01 	vldr	s7, [r2, #4]
 80105ac:	ee77 2aa6 	vadd.f32	s5, s15, s13
 80105b0:	ee75 4ac6 	vsub.f32	s9, s11, s12
 80105b4:	ed96 1a01 	vldr	s2, [r6, #4]
 80105b8:	ee33 0ac4 	vsub.f32	s0, s7, s8
 80105bc:	edd4 0a01 	vldr	s1, [r4, #4]
 80105c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80105c4:	eddc 6a00 	vldr	s13, [ip]
 80105c8:	ee75 5a86 	vadd.f32	s11, s11, s12
 80105cc:	ed91 6a00 	vldr	s12, [r1]
 80105d0:	ee73 3a84 	vadd.f32	s7, s7, s8
 80105d4:	ee74 1a80 	vadd.f32	s3, s9, s0
 80105d8:	ee36 4a81 	vadd.f32	s8, s13, s2
 80105dc:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80105e0:	ee76 6ac1 	vsub.f32	s13, s13, s2
 80105e4:	ee36 1a20 	vadd.f32	s2, s12, s1
 80105e8:	ee61 1aa8 	vmul.f32	s3, s3, s17
 80105ec:	ee36 6a60 	vsub.f32	s12, s12, s1
 80105f0:	ee64 4aa8 	vmul.f32	s9, s9, s17
 80105f4:	ee75 0aa3 	vadd.f32	s1, s11, s7
 80105f8:	ee75 5ae3 	vsub.f32	s11, s11, s7
 80105fc:	ee74 3a01 	vadd.f32	s7, s8, s2
 8010600:	ee34 4a41 	vsub.f32	s8, s8, s2
 8010604:	ee36 1a21 	vadd.f32	s2, s12, s3
 8010608:	ee33 0aa0 	vadd.f32	s0, s7, s1
 801060c:	ee36 6a61 	vsub.f32	s12, s12, s3
 8010610:	ee73 3ae0 	vsub.f32	s7, s7, s1
 8010614:	ee76 1aa4 	vadd.f32	s3, s13, s9
 8010618:	ed8c 0a00 	vstr	s0, [ip]
 801061c:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8010620:	449c      	add	ip, r3
 8010622:	ee75 4a07 	vadd.f32	s9, s10, s14
 8010626:	edc6 3a01 	vstr	s7, [r6, #4]
 801062a:	ee35 7a47 	vsub.f32	s14, s10, s14
 801062e:	441e      	add	r6, r3
 8010630:	ee32 5a25 	vadd.f32	s10, s4, s11
 8010634:	ee72 5a65 	vsub.f32	s11, s4, s11
 8010638:	ee72 3a81 	vadd.f32	s7, s5, s2
 801063c:	ed01 5a01 	vstr	s10, [r1, #-4]
 8010640:	ee34 2a43 	vsub.f32	s4, s8, s6
 8010644:	edc4 5a00 	vstr	s11, [r4]
 8010648:	ee37 5a86 	vadd.f32	s10, s15, s12
 801064c:	ee71 5ae4 	vsub.f32	s11, s3, s9
 8010650:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010654:	ed81 2a00 	vstr	s4, [r1]
 8010658:	ee36 6ac7 	vsub.f32	s12, s13, s14
 801065c:	4419      	add	r1, r3
 801065e:	ee33 4a04 	vadd.f32	s8, s6, s8
 8010662:	ee72 2ac1 	vsub.f32	s5, s5, s2
 8010666:	ee74 4aa1 	vadd.f32	s9, s9, s3
 801066a:	ee37 7a26 	vadd.f32	s14, s14, s13
 801066e:	ed84 4a01 	vstr	s8, [r4, #4]
 8010672:	ed40 3a01 	vstr	s7, [r0, #-4]
 8010676:	441c      	add	r4, r3
 8010678:	edc7 2a00 	vstr	s5, [r7]
 801067c:	ed85 5a00 	vstr	s10, [r5]
 8010680:	edc2 7a00 	vstr	s15, [r2]
 8010684:	edc0 5a00 	vstr	s11, [r0]
 8010688:	4418      	add	r0, r3
 801068a:	edc7 4a01 	vstr	s9, [r7, #4]
 801068e:	441f      	add	r7, r3
 8010690:	ed85 6a01 	vstr	s12, [r5, #4]
 8010694:	441d      	add	r5, r3
 8010696:	ed82 7a01 	vstr	s14, [r2, #4]
 801069a:	441a      	add	r2, r3
 801069c:	f63f af44 	bhi.w	8010528 <arm_radix8_butterfly_f32+0x8c>
 80106a0:	469c      	mov	ip, r3
 80106a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80106a4:	2b07      	cmp	r3, #7
 80106a6:	f240 81b6 	bls.w	8010a16 <arm_radix8_butterfly_f32+0x57a>
 80106aa:	9a02      	ldr	r2, [sp, #8]
 80106ac:	f109 0608 	add.w	r6, r9, #8
 80106b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80106b2:	f108 0408 	add.w	r4, r8, #8
 80106b6:	3208      	adds	r2, #8
 80106b8:	9f06      	ldr	r7, [sp, #24]
 80106ba:	9d04      	ldr	r5, [sp, #16]
 80106bc:	189a      	adds	r2, r3, r2
 80106be:	3708      	adds	r7, #8
 80106c0:	3508      	adds	r5, #8
 80106c2:	9807      	ldr	r0, [sp, #28]
 80106c4:	920c      	str	r2, [sp, #48]	; 0x30
 80106c6:	199a      	adds	r2, r3, r6
 80106c8:	9905      	ldr	r1, [sp, #20]
 80106ca:	3008      	adds	r0, #8
 80106cc:	920b      	str	r2, [sp, #44]	; 0x2c
 80106ce:	19da      	adds	r2, r3, r7
 80106d0:	310c      	adds	r1, #12
 80106d2:	920a      	str	r2, [sp, #40]	; 0x28
 80106d4:	195a      	adds	r2, r3, r5
 80106d6:	9209      	str	r2, [sp, #36]	; 0x24
 80106d8:	191a      	adds	r2, r3, r4
 80106da:	9208      	str	r2, [sp, #32]
 80106dc:	181a      	adds	r2, r3, r0
 80106de:	9207      	str	r2, [sp, #28]
 80106e0:	185a      	adds	r2, r3, r1
 80106e2:	330c      	adds	r3, #12
 80106e4:	9205      	str	r2, [sp, #20]
 80106e6:	9306      	str	r3, [sp, #24]
 80106e8:	2301      	movs	r3, #1
 80106ea:	9304      	str	r3, [sp, #16]
 80106ec:	2300      	movs	r3, #0
 80106ee:	930d      	str	r3, [sp, #52]	; 0x34
 80106f0:	4663      	mov	r3, ip
 80106f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80106f4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80106f6:	f8dd c014 	ldr.w	ip, [sp, #20]
 80106fa:	440a      	add	r2, r1
 80106fc:	9f06      	ldr	r7, [sp, #24]
 80106fe:	9e07      	ldr	r6, [sp, #28]
 8010700:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8010704:	920d      	str	r2, [sp, #52]	; 0x34
 8010706:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 801070a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801070c:	9d08      	ldr	r5, [sp, #32]
 801070e:	4442      	add	r2, r8
 8010710:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010712:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010714:	eb02 0108 	add.w	r1, r2, r8
 8010718:	ed92 ea00 	vldr	s28, [r2]
 801071c:	eb01 0208 	add.w	r2, r1, r8
 8010720:	edd1 da00 	vldr	s27, [r1]
 8010724:	eb02 0108 	add.w	r1, r2, r8
 8010728:	ed92 da00 	vldr	s26, [r2]
 801072c:	eb01 0208 	add.w	r2, r1, r8
 8010730:	edd1 ca00 	vldr	s25, [r1]
 8010734:	eb02 0108 	add.w	r1, r2, r8
 8010738:	ed92 ca00 	vldr	s24, [r2]
 801073c:	eb01 0208 	add.w	r2, r1, r8
 8010740:	edd1 ba00 	vldr	s23, [r1]
 8010744:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010746:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 801074a:	ed92 ba00 	vldr	s22, [r2]
 801074e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010750:	eb0e 0908 	add.w	r9, lr, r8
 8010754:	910e      	str	r1, [sp, #56]	; 0x38
 8010756:	9201      	str	r2, [sp, #4]
 8010758:	eb09 0208 	add.w	r2, r9, r8
 801075c:	ed99 aa01 	vldr	s20, [r9, #4]
 8010760:	edde aa01 	vldr	s21, [lr, #4]
 8010764:	eb02 0908 	add.w	r9, r2, r8
 8010768:	edd2 9a01 	vldr	s19, [r2, #4]
 801076c:	f8dd e010 	ldr.w	lr, [sp, #16]
 8010770:	eb09 0208 	add.w	r2, r9, r8
 8010774:	ed99 9a01 	vldr	s18, [r9, #4]
 8010778:	eb02 0908 	add.w	r9, r2, r8
 801077c:	ed92 8a01 	vldr	s16, [r2, #4]
 8010780:	9a01      	ldr	r2, [sp, #4]
 8010782:	edd9 7a01 	vldr	s15, [r9, #4]
 8010786:	44c8      	add	r8, r9
 8010788:	edcd 7a02 	vstr	s15, [sp, #8]
 801078c:	edd8 7a01 	vldr	s15, [r8, #4]
 8010790:	edcd 7a03 	vstr	s15, [sp, #12]
 8010794:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010796:	e001      	b.n	801079c <arm_radix8_butterfly_f32+0x300>
 8010798:	3f3504f3 	.word	0x3f3504f3
 801079c:	ed92 7a00 	vldr	s14, [r2]
 80107a0:	44de      	add	lr, fp
 80107a2:	ed17 1a01 	vldr	s2, [r7, #-4]
 80107a6:	ed90 5a00 	vldr	s10, [r0]
 80107aa:	45f2      	cmp	sl, lr
 80107ac:	ed1c fa01 	vldr	s30, [ip, #-4]
 80107b0:	ee31 3a07 	vadd.f32	s6, s2, s14
 80107b4:	edd6 5a00 	vldr	s11, [r6]
 80107b8:	ee31 1a47 	vsub.f32	s2, s2, s14
 80107bc:	edd4 7a00 	vldr	s15, [r4]
 80107c0:	ed95 7a00 	vldr	s14, [r5]
 80107c4:	ed91 4a00 	vldr	s8, [r1]
 80107c8:	ee3f 6a27 	vadd.f32	s12, s30, s15
 80107cc:	ee77 6a25 	vadd.f32	s13, s14, s11
 80107d0:	edd7 ea00 	vldr	s29, [r7]
 80107d4:	ee74 fa05 	vadd.f32	s31, s8, s10
 80107d8:	ee73 1a06 	vadd.f32	s3, s6, s12
 80107dc:	ee34 4a45 	vsub.f32	s8, s8, s10
 80107e0:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 80107e4:	ee37 7a65 	vsub.f32	s14, s14, s11
 80107e8:	ee33 3a46 	vsub.f32	s6, s6, s12
 80107ec:	ee31 6a85 	vadd.f32	s12, s3, s10
 80107f0:	ee7f 7a67 	vsub.f32	s15, s30, s15
 80107f4:	ee34 fa07 	vadd.f32	s30, s8, s14
 80107f8:	ed07 6a01 	vstr	s12, [r7, #-4]
 80107fc:	ee34 4a47 	vsub.f32	s8, s8, s14
 8010800:	edd5 3a01 	vldr	s7, [r5, #4]
 8010804:	ee7f fae6 	vsub.f32	s31, s31, s13
 8010808:	ed90 7a01 	vldr	s14, [r0, #4]
 801080c:	ee2f fa28 	vmul.f32	s30, s30, s17
 8010810:	edd1 5a01 	vldr	s11, [r1, #4]
 8010814:	ee24 4a28 	vmul.f32	s8, s8, s17
 8010818:	ed96 6a01 	vldr	s12, [r6, #4]
 801081c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8010820:	ee75 0ac7 	vsub.f32	s1, s11, s14
 8010824:	edd2 6a01 	vldr	s13, [r2, #4]
 8010828:	ee73 2ac6 	vsub.f32	s5, s7, s12
 801082c:	edd4 4a01 	vldr	s9, [r4, #4]
 8010830:	ee75 5a87 	vadd.f32	s11, s11, s14
 8010834:	ed9c 7a00 	vldr	s14, [ip]
 8010838:	ee37 2a8f 	vadd.f32	s4, s15, s30
 801083c:	ee33 6a86 	vadd.f32	s12, s7, s12
 8010840:	ee37 facf 	vsub.f32	s30, s15, s30
 8010844:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 8010848:	ee70 7ae2 	vsub.f32	s15, s1, s5
 801084c:	ee7e eae6 	vsub.f32	s29, s29, s13
 8010850:	ee70 2aa2 	vadd.f32	s5, s1, s5
 8010854:	ee77 6a24 	vadd.f32	s13, s14, s9
 8010858:	ee75 0a86 	vadd.f32	s1, s11, s12
 801085c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8010860:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8010864:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8010868:	ee62 2aa8 	vmul.f32	s5, s5, s17
 801086c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8010870:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8010874:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 8010878:	ee77 4a22 	vadd.f32	s9, s14, s5
 801087c:	ee7e eae7 	vsub.f32	s29, s29, s15
 8010880:	ee77 7a62 	vsub.f32	s15, s14, s5
 8010884:	ee71 2a04 	vadd.f32	s5, s2, s8
 8010888:	ee31 7a44 	vsub.f32	s14, s2, s8
 801088c:	ee30 1a60 	vsub.f32	s2, s0, s1
 8010890:	ee73 1a06 	vadd.f32	s3, s6, s12
 8010894:	ee33 6a46 	vsub.f32	s12, s6, s12
 8010898:	ee33 3aef 	vsub.f32	s6, s7, s31
 801089c:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 80108a0:	ee3e 4acf 	vsub.f32	s8, s29, s30
 80108a4:	ee75 3ac2 	vsub.f32	s7, s11, s4
 80108a8:	ee72 5a25 	vadd.f32	s11, s4, s11
 80108ac:	ee32 2aa4 	vadd.f32	s4, s5, s9
 80108b0:	ee72 4ae4 	vsub.f32	s9, s5, s9
 80108b4:	ee77 2a27 	vadd.f32	s5, s14, s15
 80108b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80108bc:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 80108c0:	ee2c fa85 	vmul.f32	s30, s25, s10
 80108c4:	ee69 ea01 	vmul.f32	s29, s18, s2
 80108c8:	ee29 5a05 	vmul.f32	s10, s18, s10
 80108cc:	ee2c 1a81 	vmul.f32	s2, s25, s2
 80108d0:	ee6d faa1 	vmul.f32	s31, s27, s3
 80108d4:	ee70 0a20 	vadd.f32	s1, s0, s1
 80108d8:	ee6a 1a21 	vmul.f32	s3, s20, s3
 80108dc:	ee2a 0a03 	vmul.f32	s0, s20, s6
 80108e0:	ee2d 3a83 	vmul.f32	s6, s27, s6
 80108e4:	edc7 0a00 	vstr	s1, [r7]
 80108e8:	ee7f ea2e 	vadd.f32	s29, s30, s29
 80108ec:	441f      	add	r7, r3
 80108ee:	ee2a faa3 	vmul.f32	s30, s21, s7
 80108f2:	ee31 5a45 	vsub.f32	s10, s2, s10
 80108f6:	ee6e 3a23 	vmul.f32	s7, s28, s7
 80108fa:	edc2 ea00 	vstr	s29, [r2]
 80108fe:	ee3f 0a80 	vadd.f32	s0, s31, s0
 8010902:	ee33 3a61 	vsub.f32	s6, s6, s3
 8010906:	ed82 5a01 	vstr	s10, [r2, #4]
 801090a:	ee6e 0a02 	vmul.f32	s1, s28, s4
 801090e:	edcd 3a01 	vstr	s7, [sp, #4]
 8010912:	ed9d 5a03 	vldr	s10, [sp, #12]
 8010916:	ee6b ea86 	vmul.f32	s29, s23, s12
 801091a:	eddd 3a02 	vldr	s7, [sp, #8]
 801091e:	ee6b fa24 	vmul.f32	s31, s22, s9
 8010922:	ed0c 0a01 	vstr	s0, [ip, #-4]
 8010926:	ee65 4a24 	vmul.f32	s9, s10, s9
 801092a:	ed8c 3a00 	vstr	s6, [ip]
 801092e:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8010932:	ee23 6a86 	vmul.f32	s12, s7, s12
 8010936:	eddd 3a01 	vldr	s7, [sp, #4]
 801093a:	ee25 5a25 	vmul.f32	s10, s10, s11
 801093e:	441a      	add	r2, r3
 8010940:	ee2c 0a22 	vmul.f32	s0, s24, s5
 8010944:	449c      	add	ip, r3
 8010946:	ee68 1a04 	vmul.f32	s3, s16, s8
 801094a:	ee70 0a8f 	vadd.f32	s1, s1, s30
 801094e:	ee2d 3a07 	vmul.f32	s6, s26, s14
 8010952:	ee29 faa7 	vmul.f32	s30, s19, s15
 8010956:	ee2a 2a82 	vmul.f32	s4, s21, s4
 801095a:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 801095e:	ee6b 5a25 	vmul.f32	s11, s22, s11
 8010962:	ee68 2a22 	vmul.f32	s5, s16, s5
 8010966:	ee2c 4a04 	vmul.f32	s8, s24, s8
 801096a:	ee29 7a87 	vmul.f32	s14, s19, s14
 801096e:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8010972:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8010976:	ee7e ea81 	vadd.f32	s29, s29, s2
 801097a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801097e:	ee3f 5a85 	vadd.f32	s10, s31, s10
 8010982:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8010986:	edc4 ea00 	vstr	s29, [r4]
 801098a:	ee30 0a21 	vadd.f32	s0, s0, s3
 801098e:	ed84 6a01 	vstr	s12, [r4, #4]
 8010992:	ee74 2a62 	vsub.f32	s5, s8, s5
 8010996:	edc1 0a00 	vstr	s1, [r1]
 801099a:	ee33 3a0f 	vadd.f32	s6, s6, s30
 801099e:	edc1 3a01 	vstr	s7, [r1, #4]
 80109a2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80109a6:	ed86 5a00 	vstr	s10, [r6]
 80109aa:	edc6 4a01 	vstr	s9, [r6, #4]
 80109ae:	4419      	add	r1, r3
 80109b0:	ed80 0a00 	vstr	s0, [r0]
 80109b4:	441c      	add	r4, r3
 80109b6:	edc0 2a01 	vstr	s5, [r0, #4]
 80109ba:	441e      	add	r6, r3
 80109bc:	ed85 3a00 	vstr	s6, [r5]
 80109c0:	4418      	add	r0, r3
 80109c2:	ed85 7a01 	vstr	s14, [r5, #4]
 80109c6:	441d      	add	r5, r3
 80109c8:	f63f aee8 	bhi.w	801079c <arm_radix8_butterfly_f32+0x300>
 80109cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80109ce:	9a04      	ldr	r2, [sp, #16]
 80109d0:	3108      	adds	r1, #8
 80109d2:	3201      	adds	r2, #1
 80109d4:	910c      	str	r1, [sp, #48]	; 0x30
 80109d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80109d8:	9204      	str	r2, [sp, #16]
 80109da:	3108      	adds	r1, #8
 80109dc:	910b      	str	r1, [sp, #44]	; 0x2c
 80109de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80109e0:	3108      	adds	r1, #8
 80109e2:	910a      	str	r1, [sp, #40]	; 0x28
 80109e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80109e6:	3108      	adds	r1, #8
 80109e8:	9109      	str	r1, [sp, #36]	; 0x24
 80109ea:	9908      	ldr	r1, [sp, #32]
 80109ec:	3108      	adds	r1, #8
 80109ee:	9108      	str	r1, [sp, #32]
 80109f0:	9907      	ldr	r1, [sp, #28]
 80109f2:	3108      	adds	r1, #8
 80109f4:	9107      	str	r1, [sp, #28]
 80109f6:	9906      	ldr	r1, [sp, #24]
 80109f8:	3108      	adds	r1, #8
 80109fa:	9106      	str	r1, [sp, #24]
 80109fc:	9905      	ldr	r1, [sp, #20]
 80109fe:	3108      	adds	r1, #8
 8010a00:	9105      	str	r1, [sp, #20]
 8010a02:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010a04:	4291      	cmp	r1, r2
 8010a06:	f47f ae74 	bne.w	80106f2 <arm_radix8_butterfly_f32+0x256>
 8010a0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010a0c:	468b      	mov	fp, r1
 8010a0e:	00db      	lsls	r3, r3, #3
 8010a10:	b29b      	uxth	r3, r3
 8010a12:	9310      	str	r3, [sp, #64]	; 0x40
 8010a14:	e551      	b.n	80104ba <arm_radix8_butterfly_f32+0x1e>
 8010a16:	b015      	add	sp, #84	; 0x54
 8010a18:	ecbd 8b10 	vpop	{d8-d15}
 8010a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010a20 <__errno>:
 8010a20:	4b01      	ldr	r3, [pc, #4]	; (8010a28 <__errno+0x8>)
 8010a22:	6818      	ldr	r0, [r3, #0]
 8010a24:	4770      	bx	lr
 8010a26:	bf00      	nop
 8010a28:	24000018 	.word	0x24000018

08010a2c <__libc_init_array>:
 8010a2c:	b570      	push	{r4, r5, r6, lr}
 8010a2e:	4d0d      	ldr	r5, [pc, #52]	; (8010a64 <__libc_init_array+0x38>)
 8010a30:	4c0d      	ldr	r4, [pc, #52]	; (8010a68 <__libc_init_array+0x3c>)
 8010a32:	1b64      	subs	r4, r4, r5
 8010a34:	10a4      	asrs	r4, r4, #2
 8010a36:	2600      	movs	r6, #0
 8010a38:	42a6      	cmp	r6, r4
 8010a3a:	d109      	bne.n	8010a50 <__libc_init_array+0x24>
 8010a3c:	4d0b      	ldr	r5, [pc, #44]	; (8010a6c <__libc_init_array+0x40>)
 8010a3e:	4c0c      	ldr	r4, [pc, #48]	; (8010a70 <__libc_init_array+0x44>)
 8010a40:	f000 f8e0 	bl	8010c04 <_init>
 8010a44:	1b64      	subs	r4, r4, r5
 8010a46:	10a4      	asrs	r4, r4, #2
 8010a48:	2600      	movs	r6, #0
 8010a4a:	42a6      	cmp	r6, r4
 8010a4c:	d105      	bne.n	8010a5a <__libc_init_array+0x2e>
 8010a4e:	bd70      	pop	{r4, r5, r6, pc}
 8010a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a54:	4798      	blx	r3
 8010a56:	3601      	adds	r6, #1
 8010a58:	e7ee      	b.n	8010a38 <__libc_init_array+0xc>
 8010a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a5e:	4798      	blx	r3
 8010a60:	3601      	adds	r6, #1
 8010a62:	e7f2      	b.n	8010a4a <__libc_init_array+0x1e>
 8010a64:	08023ea8 	.word	0x08023ea8
 8010a68:	08023ea8 	.word	0x08023ea8
 8010a6c:	08023ea8 	.word	0x08023ea8
 8010a70:	08023eac 	.word	0x08023eac

08010a74 <memcpy>:
 8010a74:	440a      	add	r2, r1
 8010a76:	4291      	cmp	r1, r2
 8010a78:	f100 33ff 	add.w	r3, r0, #4294967295
 8010a7c:	d100      	bne.n	8010a80 <memcpy+0xc>
 8010a7e:	4770      	bx	lr
 8010a80:	b510      	push	{r4, lr}
 8010a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a8a:	4291      	cmp	r1, r2
 8010a8c:	d1f9      	bne.n	8010a82 <memcpy+0xe>
 8010a8e:	bd10      	pop	{r4, pc}

08010a90 <memset>:
 8010a90:	4402      	add	r2, r0
 8010a92:	4603      	mov	r3, r0
 8010a94:	4293      	cmp	r3, r2
 8010a96:	d100      	bne.n	8010a9a <memset+0xa>
 8010a98:	4770      	bx	lr
 8010a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8010a9e:	e7f9      	b.n	8010a94 <memset+0x4>

08010aa0 <logf>:
 8010aa0:	ee10 3a10 	vmov	r3, s0
 8010aa4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8010aa8:	b410      	push	{r4}
 8010aaa:	d055      	beq.n	8010b58 <logf+0xb8>
 8010aac:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8010ab0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8010ab4:	d31a      	bcc.n	8010aec <logf+0x4c>
 8010ab6:	005a      	lsls	r2, r3, #1
 8010ab8:	d104      	bne.n	8010ac4 <logf+0x24>
 8010aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010abe:	2001      	movs	r0, #1
 8010ac0:	f000 b880 	b.w	8010bc4 <__math_divzerof>
 8010ac4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010ac8:	d043      	beq.n	8010b52 <logf+0xb2>
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	db02      	blt.n	8010ad4 <logf+0x34>
 8010ace:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8010ad2:	d303      	bcc.n	8010adc <logf+0x3c>
 8010ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ad8:	f000 b884 	b.w	8010be4 <__math_invalidf>
 8010adc:	eddf 7a20 	vldr	s15, [pc, #128]	; 8010b60 <logf+0xc0>
 8010ae0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010ae4:	ee10 3a10 	vmov	r3, s0
 8010ae8:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 8010aec:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8010af0:	491c      	ldr	r1, [pc, #112]	; (8010b64 <logf+0xc4>)
 8010af2:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8010af6:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8010afa:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8010afe:	0dd4      	lsrs	r4, r2, #23
 8010b00:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8010b04:	05e4      	lsls	r4, r4, #23
 8010b06:	ed90 6b00 	vldr	d6, [r0]
 8010b0a:	1b1b      	subs	r3, r3, r4
 8010b0c:	ee07 3a90 	vmov	s15, r3
 8010b10:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8010b14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010b18:	15d2      	asrs	r2, r2, #23
 8010b1a:	eea6 0b07 	vfma.f64	d0, d6, d7
 8010b1e:	ed90 6b02 	vldr	d6, [r0, #8]
 8010b22:	ee20 4b00 	vmul.f64	d4, d0, d0
 8010b26:	ee07 2a90 	vmov	s15, r2
 8010b2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010b2e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010b32:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8010b36:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8010b3a:	eea5 7b00 	vfma.f64	d7, d5, d0
 8010b3e:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8010b42:	ee30 0b06 	vadd.f64	d0, d0, d6
 8010b46:	eea5 7b04 	vfma.f64	d7, d5, d4
 8010b4a:	eea4 0b07 	vfma.f64	d0, d4, d7
 8010b4e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b56:	4770      	bx	lr
 8010b58:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8010b68 <logf+0xc8>
 8010b5c:	e7f9      	b.n	8010b52 <logf+0xb2>
 8010b5e:	bf00      	nop
 8010b60:	4b000000 	.word	0x4b000000
 8010b64:	08023d80 	.word	0x08023d80
 8010b68:	00000000 	.word	0x00000000

08010b6c <sqrtf>:
 8010b6c:	b508      	push	{r3, lr}
 8010b6e:	ed2d 8b02 	vpush	{d8}
 8010b72:	eeb0 8a40 	vmov.f32	s16, s0
 8010b76:	f000 f817 	bl	8010ba8 <__ieee754_sqrtf>
 8010b7a:	eeb4 8a48 	vcmp.f32	s16, s16
 8010b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b82:	d60c      	bvs.n	8010b9e <sqrtf+0x32>
 8010b84:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010ba4 <sqrtf+0x38>
 8010b88:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b90:	d505      	bpl.n	8010b9e <sqrtf+0x32>
 8010b92:	f7ff ff45 	bl	8010a20 <__errno>
 8010b96:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010b9a:	2321      	movs	r3, #33	; 0x21
 8010b9c:	6003      	str	r3, [r0, #0]
 8010b9e:	ecbd 8b02 	vpop	{d8}
 8010ba2:	bd08      	pop	{r3, pc}
 8010ba4:	00000000 	.word	0x00000000

08010ba8 <__ieee754_sqrtf>:
 8010ba8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010bac:	4770      	bx	lr

08010bae <with_errnof>:
 8010bae:	b513      	push	{r0, r1, r4, lr}
 8010bb0:	4604      	mov	r4, r0
 8010bb2:	ed8d 0a01 	vstr	s0, [sp, #4]
 8010bb6:	f7ff ff33 	bl	8010a20 <__errno>
 8010bba:	ed9d 0a01 	vldr	s0, [sp, #4]
 8010bbe:	6004      	str	r4, [r0, #0]
 8010bc0:	b002      	add	sp, #8
 8010bc2:	bd10      	pop	{r4, pc}

08010bc4 <__math_divzerof>:
 8010bc4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010bc8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8010bcc:	2800      	cmp	r0, #0
 8010bce:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8010bd2:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8010be0 <__math_divzerof+0x1c>
 8010bd6:	2022      	movs	r0, #34	; 0x22
 8010bd8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8010bdc:	f7ff bfe7 	b.w	8010bae <with_errnof>
 8010be0:	00000000 	.word	0x00000000

08010be4 <__math_invalidf>:
 8010be4:	eef0 7a40 	vmov.f32	s15, s0
 8010be8:	ee30 7a40 	vsub.f32	s14, s0, s0
 8010bec:	eef4 7a67 	vcmp.f32	s15, s15
 8010bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bf4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8010bf8:	d602      	bvs.n	8010c00 <__math_invalidf+0x1c>
 8010bfa:	2021      	movs	r0, #33	; 0x21
 8010bfc:	f7ff bfd7 	b.w	8010bae <with_errnof>
 8010c00:	4770      	bx	lr
	...

08010c04 <_init>:
 8010c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c06:	bf00      	nop
 8010c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c0a:	bc08      	pop	{r3}
 8010c0c:	469e      	mov	lr, r3
 8010c0e:	4770      	bx	lr

08010c10 <_fini>:
 8010c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c12:	bf00      	nop
 8010c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c16:	bc08      	pop	{r3}
 8010c18:	469e      	mov	lr, r3
 8010c1a:	4770      	bx	lr

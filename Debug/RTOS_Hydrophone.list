
RTOS_Hydrophone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9e8  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800ac98  0800ac98  0001ac98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ad18  0800ad18  0001ad18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ad20  0800ad20  0001ad20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ad24  0800ad24  0001ad24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800ad28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004ab8  24000014  0800ad3c  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004acc  0800ad3c  00024acc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023878  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c36  00000000  00000000  000438ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001be8  00000000  00000000  000474f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001aa0  00000000  00000000  000490d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000045d8  00000000  00000000  0004ab78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001fd2a  00000000  00000000  0004f150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ce0e  00000000  00000000  0006ee7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001cbc88  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000078f0  00000000  00000000  001cbcd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000014 	.word	0x24000014
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800ac80 	.word	0x0800ac80

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000018 	.word	0x24000018
 80002ec:	0800ac80 	.word	0x0800ac80

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fd6a 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f81e 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 fa16 	bl	8000a30 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000604:	f000 f9c0 	bl	8000988 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000608:	f000 fa0a 	bl	8000a20 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 800060c:	f000 f896 	bl	800073c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000610:	f000 f90e 	bl	8000830 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000614:	f007 fda8 	bl	8008168 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000618:	4a05      	ldr	r2, [pc, #20]	; (8000630 <main+0x3c>)
 800061a:	2100      	movs	r1, #0
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <main+0x40>)
 800061e:	f007 fded 	bl	80081fc <osThreadNew>
 8000622:	4603      	mov	r3, r0
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <main+0x44>)
 8000626:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000628:	f007 fdc2 	bl	80081b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062c:	e7fe      	b.n	800062c <main+0x38>
 800062e:	bf00      	nop
 8000630:	0800acbc 	.word	0x0800acbc
 8000634:	08000c65 	.word	0x08000c65
 8000638:	24000174 	.word	0x24000174

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b09c      	sub	sp, #112	; 0x70
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000646:	224c      	movs	r2, #76	; 0x4c
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f00a fb10 	bl	800ac70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2220      	movs	r2, #32
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f00a fb0a 	bl	800ac70 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800065c:	4b35      	ldr	r3, [pc, #212]	; (8000734 <SystemClock_Config+0xf8>)
 800065e:	f04f 32ff 	mov.w	r2, #4294967295
 8000662:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000666:	2004      	movs	r0, #4
 8000668:	f001 ffe8 	bl	800263c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800066c:	2300      	movs	r3, #0
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	4b31      	ldr	r3, [pc, #196]	; (8000738 <SystemClock_Config+0xfc>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a30      	ldr	r2, [pc, #192]	; (8000738 <SystemClock_Config+0xfc>)
 8000676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <SystemClock_Config+0xfc>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000688:	bf00      	nop
 800068a:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <SystemClock_Config+0xfc>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000696:	d1f8      	bne.n	800068a <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <SystemClock_Config+0xf8>)
 800069a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800069c:	f023 0303 	bic.w	r3, r3, #3
 80006a0:	4a24      	ldr	r2, [pc, #144]	; (8000734 <SystemClock_Config+0xf8>)
 80006a2:	f043 0302 	orr.w	r3, r3, #2
 80006a6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006a8:	2321      	movs	r3, #33	; 0x21
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006b2:	2301      	movs	r3, #1
 80006b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 80006c2:	2314      	movs	r3, #20
 80006c4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ca:	2304      	movs	r3, #4
 80006cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006d2:	230c      	movs	r3, #12
 80006d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 f804 	bl	80026f0 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006ee:	f000 fac9 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	233f      	movs	r3, #63	; 0x3f
 80006f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2303      	movs	r3, #3
 80006f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 80006fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000704:	2340      	movs	r3, #64	; 0x40
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000708:	2340      	movs	r3, #64	; 0x40
 800070a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800070c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000710:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000712:	2340      	movs	r3, #64	; 0x40
 8000714:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f002 fc1a 	bl	8002f54 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000726:	f000 faad 	bl	8000c84 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3770      	adds	r7, #112	; 0x70
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	58024400 	.word	0x58024400
 8000738:	58024800 	.word	0x58024800

0800073c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800074e:	463b      	mov	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
 800075c:	615a      	str	r2, [r3, #20]
 800075e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000760:	4b30      	ldr	r3, [pc, #192]	; (8000824 <MX_ADC1_Init+0xe8>)
 8000762:	4a31      	ldr	r2, [pc, #196]	; (8000828 <MX_ADC1_Init+0xec>)
 8000764:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000766:	4b2f      	ldr	r3, [pc, #188]	; (8000824 <MX_ADC1_Init+0xe8>)
 8000768:	2200      	movs	r2, #0
 800076a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076c:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <MX_ADC1_Init+0xe8>)
 800076e:	2208      	movs	r2, #8
 8000770:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000772:	4b2c      	ldr	r3, [pc, #176]	; (8000824 <MX_ADC1_Init+0xe8>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000778:	4b2a      	ldr	r3, [pc, #168]	; (8000824 <MX_ADC1_Init+0xe8>)
 800077a:	2204      	movs	r2, #4
 800077c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800077e:	4b29      	ldr	r3, [pc, #164]	; (8000824 <MX_ADC1_Init+0xe8>)
 8000780:	2200      	movs	r2, #0
 8000782:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000784:	4b27      	ldr	r3, [pc, #156]	; (8000824 <MX_ADC1_Init+0xe8>)
 8000786:	2200      	movs	r2, #0
 8000788:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800078a:	4b26      	ldr	r3, [pc, #152]	; (8000824 <MX_ADC1_Init+0xe8>)
 800078c:	2201      	movs	r2, #1
 800078e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000790:	4b24      	ldr	r3, [pc, #144]	; (8000824 <MX_ADC1_Init+0xe8>)
 8000792:	2200      	movs	r2, #0
 8000794:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000796:	4b23      	ldr	r3, [pc, #140]	; (8000824 <MX_ADC1_Init+0xe8>)
 8000798:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800079c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <MX_ADC1_Init+0xe8>)
 80007a0:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80007a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <MX_ADC1_Init+0xe8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <MX_ADC1_Init+0xe8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <MX_ADC1_Init+0xe8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007b8:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_ADC1_Init+0xe8>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c0:	4818      	ldr	r0, [pc, #96]	; (8000824 <MX_ADC1_Init+0xe8>)
 80007c2:	f000 fea3 	bl	800150c <HAL_ADC_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80007cc:	f000 fa5a 	bl	8000c84 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	4812      	ldr	r0, [pc, #72]	; (8000824 <MX_ADC1_Init+0xe8>)
 80007dc:	f001 fbca 	bl	8001f74 <HAL_ADCEx_MultiModeConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80007e6:	f000 fa4d 	bl	8000c84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_ADC1_Init+0xf0>)
 80007ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ee:	2306      	movs	r3, #6
 80007f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80007fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fc:	2304      	movs	r3, #4
 80007fe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000808:	463b      	mov	r3, r7
 800080a:	4619      	mov	r1, r3
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_ADC1_Init+0xe8>)
 800080e:	f000 ffd7 	bl	80017c0 <HAL_ADC_ConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000818:	f000 fa34 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	; 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	24000030 	.word	0x24000030
 8000828:	40022000 	.word	0x40022000
 800082c:	08600004 	.word	0x08600004

08000830 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b09c      	sub	sp, #112	; 0x70
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000844:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000850:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
 8000860:	615a      	str	r2, [r3, #20]
 8000862:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2234      	movs	r2, #52	; 0x34
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f00a fa00 	bl	800ac70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000870:	4b43      	ldr	r3, [pc, #268]	; (8000980 <MX_TIM1_Init+0x150>)
 8000872:	4a44      	ldr	r2, [pc, #272]	; (8000984 <MX_TIM1_Init+0x154>)
 8000874:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000876:	4b42      	ldr	r3, [pc, #264]	; (8000980 <MX_TIM1_Init+0x150>)
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087c:	4b40      	ldr	r3, [pc, #256]	; (8000980 <MX_TIM1_Init+0x150>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000882:	4b3f      	ldr	r3, [pc, #252]	; (8000980 <MX_TIM1_Init+0x150>)
 8000884:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000888:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088a:	4b3d      	ldr	r3, [pc, #244]	; (8000980 <MX_TIM1_Init+0x150>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000890:	4b3b      	ldr	r3, [pc, #236]	; (8000980 <MX_TIM1_Init+0x150>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000896:	4b3a      	ldr	r3, [pc, #232]	; (8000980 <MX_TIM1_Init+0x150>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800089c:	4838      	ldr	r0, [pc, #224]	; (8000980 <MX_TIM1_Init+0x150>)
 800089e:	f005 faef 	bl	8005e80 <HAL_TIM_Base_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80008a8:	f000 f9ec 	bl	8000c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008b6:	4619      	mov	r1, r3
 80008b8:	4831      	ldr	r0, [pc, #196]	; (8000980 <MX_TIM1_Init+0x150>)
 80008ba:	f005 fc13 	bl	80060e4 <HAL_TIM_ConfigClockSource>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80008c4:	f000 f9de 	bl	8000c84 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80008c8:	482d      	ldr	r0, [pc, #180]	; (8000980 <MX_TIM1_Init+0x150>)
 80008ca:	f005 fb30 	bl	8005f2e <HAL_TIM_OC_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80008d4:	f000 f9d6 	bl	8000c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008d8:	2320      	movs	r3, #32
 80008da:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008dc:	2300      	movs	r3, #0
 80008de:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008e8:	4619      	mov	r1, r3
 80008ea:	4825      	ldr	r0, [pc, #148]	; (8000980 <MX_TIM1_Init+0x150>)
 80008ec:	f006 f900 	bl	8006af0 <HAL_TIMEx_MasterConfigSynchronization>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80008f6:	f000 f9c5 	bl	8000c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80008fa:	2330      	movs	r3, #48	; 0x30
 80008fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000902:	2300      	movs	r3, #0
 8000904:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000906:	2300      	movs	r3, #0
 8000908:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800090e:	2300      	movs	r3, #0
 8000910:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000912:	2300      	movs	r3, #0
 8000914:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000916:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800091a:	2200      	movs	r2, #0
 800091c:	4619      	mov	r1, r3
 800091e:	4818      	ldr	r0, [pc, #96]	; (8000980 <MX_TIM1_Init+0x150>)
 8000920:	f005 fb66 	bl	8005ff0 <HAL_TIM_OC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800092a:	f000 f9ab 	bl	8000c84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000946:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000950:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4619      	mov	r1, r3
 8000962:	4807      	ldr	r0, [pc, #28]	; (8000980 <MX_TIM1_Init+0x150>)
 8000964:	f006 f952 	bl	8006c0c <HAL_TIMEx_ConfigBreakDeadTime>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800096e:	f000 f989 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000972:	4803      	ldr	r0, [pc, #12]	; (8000980 <MX_TIM1_Init+0x150>)
 8000974:	f000 fa40 	bl	8000df8 <HAL_TIM_MspPostInit>

}
 8000978:	bf00      	nop
 800097a:	3770      	adds	r7, #112	; 0x70
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	24000094 	.word	0x24000094
 8000984:	40010000 	.word	0x40010000

08000988 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800098c:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 800098e:	4a23      	ldr	r2, [pc, #140]	; (8000a1c <MX_USART3_UART_Init+0x94>)
 8000990:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000992:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009be:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009d0:	4811      	ldr	r0, [pc, #68]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 80009d2:	f006 f9bb 	bl	8006d4c <HAL_UART_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009dc:	f000 f952 	bl	8000c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e0:	2100      	movs	r1, #0
 80009e2:	480d      	ldr	r0, [pc, #52]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 80009e4:	f007 fac1 	bl	8007f6a <HAL_UARTEx_SetTxFifoThreshold>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009ee:	f000 f949 	bl	8000c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f2:	2100      	movs	r1, #0
 80009f4:	4808      	ldr	r0, [pc, #32]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 80009f6:	f007 faf6 	bl	8007fe6 <HAL_UARTEx_SetRxFifoThreshold>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a00:	f000 f940 	bl	8000c84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a04:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_USART3_UART_Init+0x90>)
 8000a06:	f007 fa77 	bl	8007ef8 <HAL_UARTEx_DisableFifoMode>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a10:	f000 f938 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	240000e0 	.word	0x240000e0
 8000a1c:	40004800 	.word	0x40004800

08000a20 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
	...

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08e      	sub	sp, #56	; 0x38
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a46:	4b80      	ldr	r3, [pc, #512]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000a48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a4c:	4a7e      	ldr	r2, [pc, #504]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000a4e:	f043 0304 	orr.w	r3, r3, #4
 8000a52:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a56:	4b7c      	ldr	r3, [pc, #496]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000a58:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a5c:	f003 0304 	and.w	r3, r3, #4
 8000a60:	623b      	str	r3, [r7, #32]
 8000a62:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a64:	4b78      	ldr	r3, [pc, #480]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000a66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a6a:	4a77      	ldr	r2, [pc, #476]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000a6c:	f043 0320 	orr.w	r3, r3, #32
 8000a70:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a74:	4b74      	ldr	r3, [pc, #464]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000a76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a7a:	f003 0320 	and.w	r3, r3, #32
 8000a7e:	61fb      	str	r3, [r7, #28]
 8000a80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	4b71      	ldr	r3, [pc, #452]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000a84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a88:	4a6f      	ldr	r2, [pc, #444]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a92:	4b6d      	ldr	r3, [pc, #436]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000a94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aa0:	4b69      	ldr	r3, [pc, #420]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000aa2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aa6:	4a68      	ldr	r2, [pc, #416]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000aa8:	f043 0310 	orr.w	r3, r3, #16
 8000aac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ab0:	4b65      	ldr	r3, [pc, #404]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000ab2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ab6:	f003 0310 	and.w	r3, r3, #16
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b62      	ldr	r3, [pc, #392]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000ac0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac4:	4a60      	ldr	r2, [pc, #384]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ace:	4b5e      	ldr	r3, [pc, #376]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000ad0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000adc:	4b5a      	ldr	r3, [pc, #360]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000ade:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ae2:	4a59      	ldr	r2, [pc, #356]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aec:	4b56      	ldr	r3, [pc, #344]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000aee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000afa:	4b53      	ldr	r3, [pc, #332]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000afc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b00:	4a51      	ldr	r2, [pc, #324]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b06:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b0a:	4b4f      	ldr	r3, [pc, #316]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000b0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b4b      	ldr	r3, [pc, #300]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000b1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b1e:	4a4a      	ldr	r2, [pc, #296]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b28:	4b47      	ldr	r3, [pc, #284]	; (8000c48 <MX_GPIO_Init+0x218>)
 8000b2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3c:	4843      	ldr	r0, [pc, #268]	; (8000c4c <MX_GPIO_Init+0x21c>)
 8000b3e:	f001 fd49 	bl	80025d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b48:	4841      	ldr	r0, [pc, #260]	; (8000c50 <MX_GPIO_Init+0x220>)
 8000b4a:	f001 fd43 	bl	80025d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2102      	movs	r1, #2
 8000b52:	4840      	ldr	r0, [pc, #256]	; (8000c54 <MX_GPIO_Init+0x224>)
 8000b54:	f001 fd3e 	bl	80025d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	483a      	ldr	r0, [pc, #232]	; (8000c58 <MX_GPIO_Init+0x228>)
 8000b6e:	f001 fb81 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4830      	ldr	r0, [pc, #192]	; (8000c4c <MX_GPIO_Init+0x21c>)
 8000b8c:	f001 fb72 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000b90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4829      	ldr	r0, [pc, #164]	; (8000c50 <MX_GPIO_Init+0x220>)
 8000baa:	f001 fb63 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4826      	ldr	r0, [pc, #152]	; (8000c5c <MX_GPIO_Init+0x22c>)
 8000bc4:	f001 fb56 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4820      	ldr	r0, [pc, #128]	; (8000c60 <MX_GPIO_Init+0x230>)
 8000bde:	f001 fb49 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000bf4:	230a      	movs	r3, #10
 8000bf6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4818      	ldr	r0, [pc, #96]	; (8000c60 <MX_GPIO_Init+0x230>)
 8000c00:	f001 fb38 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000c04:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4810      	ldr	r0, [pc, #64]	; (8000c60 <MX_GPIO_Init+0x230>)
 8000c1e:	f001 fb29 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c22:	2302      	movs	r3, #2
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	4806      	ldr	r0, [pc, #24]	; (8000c54 <MX_GPIO_Init+0x224>)
 8000c3a:	f001 fb1b 	bl	8002274 <HAL_GPIO_Init>

}
 8000c3e:	bf00      	nop
 8000c40:	3738      	adds	r7, #56	; 0x38
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	58024400 	.word	0x58024400
 8000c4c:	58021400 	.word	0x58021400
 8000c50:	58020400 	.word	0x58020400
 8000c54:	58021000 	.word	0x58021000
 8000c58:	58020800 	.word	0x58020800
 8000c5c:	58021800 	.word	0x58021800
 8000c60:	58020000 	.word	0x58020000

08000c64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	// Toggling LD3 (red) to see if it ever enters this default state
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000c6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c70:	4803      	ldr	r0, [pc, #12]	; (8000c80 <StartDefaultTask+0x1c>)
 8000c72:	f001 fcc8 	bl	8002606 <HAL_GPIO_TogglePin>
    osDelay(50); /* Insert delay of 1ms */
 8000c76:	2032      	movs	r0, #50	; 0x32
 8000c78:	f007 fb52 	bl	8008320 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000c7c:	e7f6      	b.n	8000c6c <StartDefaultTask+0x8>
 8000c7e:	bf00      	nop
 8000c80:	58020400 	.word	0x58020400

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <Error_Handler+0x8>
	...

08000c90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <HAL_MspInit+0x38>)
 8000c98:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_MspInit+0x38>)
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_MspInit+0x38>)
 8000ca8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	210f      	movs	r1, #15
 8000cb8:	f06f 0001 	mvn.w	r0, #1
 8000cbc:	f001 fab3 	bl	8002226 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	58024400 	.word	0x58024400

08000ccc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b0ba      	sub	sp, #232	; 0xe8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	22c0      	movs	r2, #192	; 0xc0
 8000cea:	2100      	movs	r1, #0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f009 ffbf 	bl	800ac70 <memset>
  if(hadc->Instance==ADC1)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a2c      	ldr	r2, [pc, #176]	; (8000da8 <HAL_ADC_MspInit+0xdc>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d150      	bne.n	8000d9e <HAL_ADC_MspInit+0xd2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cfc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 20;
 8000d0c:	2314      	movs	r3, #20
 8000d0e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000d10:	2304      	movs	r3, #4
 8000d12:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d1c:	23c0      	movs	r3, #192	; 0xc0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	4618      	mov	r0, r3
 8000d34:	f002 fc9a 	bl	800366c <HAL_RCCEx_PeriphCLKConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000d3e:	f7ff ffa1 	bl	8000c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <HAL_ADC_MspInit+0xe0>)
 8000d44:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d48:	4a18      	ldr	r2, [pc, #96]	; (8000dac <HAL_ADC_MspInit+0xe0>)
 8000d4a:	f043 0320 	orr.w	r3, r3, #32
 8000d4e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <HAL_ADC_MspInit+0xe0>)
 8000d54:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d58:	f003 0320 	and.w	r3, r3, #32
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_ADC_MspInit+0xe0>)
 8000d62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d66:	4a11      	ldr	r2, [pc, #68]	; (8000dac <HAL_ADC_MspInit+0xe0>)
 8000d68:	f043 0320 	orr.w	r3, r3, #32
 8000d6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_ADC_MspInit+0xe0>)
 8000d72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d76:	f003 0320 	and.w	r3, r3, #32
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d86:	2303      	movs	r3, #3
 8000d88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d92:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <HAL_ADC_MspInit+0xe4>)
 8000d9a:	f001 fa6b 	bl	8002274 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	37e8      	adds	r7, #232	; 0xe8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40022000 	.word	0x40022000
 8000dac:	58024400 	.word	0x58024400
 8000db0:	58021400 	.word	0x58021400

08000db4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <HAL_TIM_Base_MspInit+0x3c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d10e      	bne.n	8000de4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_TIM_Base_MspInit+0x40>)
 8000dc8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000dcc:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <HAL_TIM_Base_MspInit+0x40>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <HAL_TIM_Base_MspInit+0x40>)
 8000dd8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	40010000 	.word	0x40010000
 8000df4:	58024400 	.word	0x58024400

08000df8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a13      	ldr	r2, [pc, #76]	; (8000e64 <HAL_TIM_MspPostInit+0x6c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d11f      	bne.n	8000e5a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <HAL_TIM_MspPostInit+0x70>)
 8000e1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e20:	4a11      	ldr	r2, [pc, #68]	; (8000e68 <HAL_TIM_MspPostInit+0x70>)
 8000e22:	f043 0310 	orr.w	r3, r3, #16
 8000e26:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <HAL_TIM_MspPostInit+0x70>)
 8000e2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e30:	f003 0310 	and.w	r3, r3, #16
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e4e:	f107 030c 	add.w	r3, r7, #12
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <HAL_TIM_MspPostInit+0x74>)
 8000e56:	f001 fa0d 	bl	8002274 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3720      	adds	r7, #32
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40010000 	.word	0x40010000
 8000e68:	58024400 	.word	0x58024400
 8000e6c:	58021000 	.word	0x58021000

08000e70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b0ba      	sub	sp, #232	; 0xe8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	22c0      	movs	r2, #192	; 0xc0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f009 feed 	bl	800ac70 <memset>
  if(huart->Instance==USART3)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a27      	ldr	r2, [pc, #156]	; (8000f38 <HAL_UART_MspInit+0xc8>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d146      	bne.n	8000f2e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ea0:	f04f 0202 	mov.w	r2, #2
 8000ea4:	f04f 0300 	mov.w	r3, #0
 8000ea8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f002 fbd8 	bl	800366c <HAL_RCCEx_PeriphCLKConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ec2:	f7ff fedf 	bl	8000c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <HAL_UART_MspInit+0xcc>)
 8000ec8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ecc:	4a1b      	ldr	r2, [pc, #108]	; (8000f3c <HAL_UART_MspInit+0xcc>)
 8000ece:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000ed6:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <HAL_UART_MspInit+0xcc>)
 8000ed8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_UART_MspInit+0xcc>)
 8000ee6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eea:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <HAL_UART_MspInit+0xcc>)
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_UART_MspInit+0xcc>)
 8000ef6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f1c:	2307      	movs	r3, #7
 8000f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f22:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f26:	4619      	mov	r1, r3
 8000f28:	4805      	ldr	r0, [pc, #20]	; (8000f40 <HAL_UART_MspInit+0xd0>)
 8000f2a:	f001 f9a3 	bl	8002274 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f2e:	bf00      	nop
 8000f30:	37e8      	adds	r7, #232	; 0xe8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40004800 	.word	0x40004800
 8000f3c:	58024400 	.word	0x58024400
 8000f40:	58020c00 	.word	0x58020c00

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <NMI_Handler+0x4>

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f74:	f000 f91e 	bl	80011b4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f78:	f008 fde0 	bl	8009b3c <xTaskGetSchedulerState>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d001      	beq.n	8000f86 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f82:	f009 fbc9 	bl	800a718 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f90:	4b32      	ldr	r3, [pc, #200]	; (800105c <SystemInit+0xd0>)
 8000f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f96:	4a31      	ldr	r2, [pc, #196]	; (800105c <SystemInit+0xd0>)
 8000f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fa0:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <SystemInit+0xd4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 030f 	and.w	r3, r3, #15
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d807      	bhi.n	8000fbc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fac:	4b2c      	ldr	r3, [pc, #176]	; (8001060 <SystemInit+0xd4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f023 030f 	bic.w	r3, r3, #15
 8000fb4:	4a2a      	ldr	r2, [pc, #168]	; (8001060 <SystemInit+0xd4>)
 8000fb6:	f043 0303 	orr.w	r3, r3, #3
 8000fba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fbc:	4b29      	ldr	r3, [pc, #164]	; (8001064 <SystemInit+0xd8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a28      	ldr	r2, [pc, #160]	; (8001064 <SystemInit+0xd8>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fc8:	4b26      	ldr	r3, [pc, #152]	; (8001064 <SystemInit+0xd8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fce:	4b25      	ldr	r3, [pc, #148]	; (8001064 <SystemInit+0xd8>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4924      	ldr	r1, [pc, #144]	; (8001064 <SystemInit+0xd8>)
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <SystemInit+0xdc>)
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <SystemInit+0xd4>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 030c 	and.w	r3, r3, #12
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d007      	beq.n	8000ff6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <SystemInit+0xd4>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f023 030f 	bic.w	r3, r3, #15
 8000fee:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <SystemInit+0xd4>)
 8000ff0:	f043 0303 	orr.w	r3, r3, #3
 8000ff4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <SystemInit+0xd8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <SystemInit+0xd8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <SystemInit+0xd8>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <SystemInit+0xd8>)
 800100a:	4a18      	ldr	r2, [pc, #96]	; (800106c <SystemInit+0xe0>)
 800100c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <SystemInit+0xd8>)
 8001010:	4a17      	ldr	r2, [pc, #92]	; (8001070 <SystemInit+0xe4>)
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <SystemInit+0xd8>)
 8001016:	4a17      	ldr	r2, [pc, #92]	; (8001074 <SystemInit+0xe8>)
 8001018:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <SystemInit+0xd8>)
 800101c:	2200      	movs	r2, #0
 800101e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <SystemInit+0xd8>)
 8001022:	4a14      	ldr	r2, [pc, #80]	; (8001074 <SystemInit+0xe8>)
 8001024:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <SystemInit+0xd8>)
 8001028:	2200      	movs	r2, #0
 800102a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <SystemInit+0xd8>)
 800102e:	4a11      	ldr	r2, [pc, #68]	; (8001074 <SystemInit+0xe8>)
 8001030:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <SystemInit+0xd8>)
 8001034:	2200      	movs	r2, #0
 8001036:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <SystemInit+0xd8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a09      	ldr	r2, [pc, #36]	; (8001064 <SystemInit+0xd8>)
 800103e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001042:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <SystemInit+0xd8>)
 8001046:	2200      	movs	r2, #0
 8001048:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <SystemInit+0xec>)
 800104c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001050:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00
 8001060:	52002000 	.word	0x52002000
 8001064:	58024400 	.word	0x58024400
 8001068:	eaf6ed7f 	.word	0xeaf6ed7f
 800106c:	02020200 	.word	0x02020200
 8001070:	01ff0000 	.word	0x01ff0000
 8001074:	01010280 	.word	0x01010280
 8001078:	52004000 	.word	0x52004000

0800107c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001080:	f7ff ff84 	bl	8000f8c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	; (80010bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	; (80010c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010aa:	f009 fdaf 	bl	800ac0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ae:	f7ff faa1 	bl	80005f4 <main>
  bx  lr
 80010b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80010b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010bc:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80010c0:	0800ad28 	.word	0x0800ad28
  ldr r2, =_sbss
 80010c4:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80010c8:	24004acc 	.word	0x24004acc

080010cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC_IRQHandler>
	...

080010d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d6:	2003      	movs	r0, #3
 80010d8:	f001 f89a 	bl	8002210 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80010dc:	f002 f8f0 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 80010e0:	4602      	mov	r2, r0
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_Init+0x68>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	0a1b      	lsrs	r3, r3, #8
 80010e8:	f003 030f 	and.w	r3, r3, #15
 80010ec:	4913      	ldr	r1, [pc, #76]	; (800113c <HAL_Init+0x6c>)
 80010ee:	5ccb      	ldrb	r3, [r1, r3]
 80010f0:	f003 031f 	and.w	r3, r3, #31
 80010f4:	fa22 f303 	lsr.w	r3, r2, r3
 80010f8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <HAL_Init+0x68>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	4a0e      	ldr	r2, [pc, #56]	; (800113c <HAL_Init+0x6c>)
 8001104:	5cd3      	ldrb	r3, [r2, r3]
 8001106:	f003 031f 	and.w	r3, r3, #31
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	fa22 f303 	lsr.w	r3, r2, r3
 8001110:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <HAL_Init+0x70>)
 8001112:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001114:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <HAL_Init+0x74>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800111a:	200f      	movs	r0, #15
 800111c:	f000 f814 	bl	8001148 <HAL_InitTick>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e002      	b.n	8001130 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800112a:	f7ff fdb1 	bl	8000c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	58024400 	.word	0x58024400
 800113c:	0800ace0 	.word	0x0800ace0
 8001140:	24000004 	.word	0x24000004
 8001144:	24000000 	.word	0x24000000

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_InitTick+0x60>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e021      	b.n	80011a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <HAL_InitTick+0x64>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_InitTick+0x60>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	fbb3 f3f1 	udiv	r3, r3, r1
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f001 f871 	bl	800225a <HAL_SYSTICK_Config>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e00e      	b.n	80011a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b0f      	cmp	r3, #15
 8001186:	d80a      	bhi.n	800119e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001188:	2200      	movs	r2, #0
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f001 f849 	bl	8002226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001194:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <HAL_InitTick+0x68>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	e000      	b.n	80011a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	2400000c 	.word	0x2400000c
 80011ac:	24000000 	.word	0x24000000
 80011b0:	24000008 	.word	0x24000008

080011b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_IncTick+0x20>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_IncTick+0x24>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <HAL_IncTick+0x24>)
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	2400000c 	.word	0x2400000c
 80011d8:	24000178 	.word	0x24000178

080011dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return uwTick;
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <HAL_GetTick+0x14>)
 80011e2:	681b      	ldr	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	24000178 	.word	0x24000178

080011f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	609a      	str	r2, [r3, #8]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	609a      	str	r2, [r3, #8]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	3360      	adds	r3, #96	; 0x60
 800126e:	461a      	mov	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	430b      	orrs	r3, r1
 800128a:	431a      	orrs	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001290:	bf00      	nop
 8001292:	371c      	adds	r7, #28
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	f003 031f 	and.w	r3, r3, #31
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	431a      	orrs	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	611a      	str	r2, [r3, #16]
}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b087      	sub	sp, #28
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3360      	adds	r3, #96	; 0x60
 80012de:	461a      	mov	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	431a      	orrs	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	601a      	str	r2, [r3, #0]
  }
}
 80012f8:	bf00      	nop
 80012fa:	371c      	adds	r7, #28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	3330      	adds	r3, #48	; 0x30
 8001314:	461a      	mov	r2, r3
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	f003 030c 	and.w	r3, r3, #12
 8001320:	4413      	add	r3, r2
 8001322:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	f003 031f 	and.w	r3, r3, #31
 800132e:	211f      	movs	r1, #31
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	401a      	ands	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	0e9b      	lsrs	r3, r3, #26
 800133c:	f003 011f 	and.w	r1, r3, #31
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	f003 031f 	and.w	r3, r3, #31
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	431a      	orrs	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001350:	bf00      	nop
 8001352:	371c      	adds	r7, #28
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	3314      	adds	r3, #20
 800136c:	461a      	mov	r2, r3
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	0e5b      	lsrs	r3, r3, #25
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	4413      	add	r3, r2
 800137a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	0d1b      	lsrs	r3, r3, #20
 8001384:	f003 031f 	and.w	r3, r3, #31
 8001388:	2107      	movs	r1, #7
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	401a      	ands	r2, r3
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	0d1b      	lsrs	r3, r3, #20
 8001396:	f003 031f 	and.w	r3, r3, #31
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	431a      	orrs	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013a6:	bf00      	nop
 80013a8:	371c      	adds	r7, #28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80013cc:	43db      	mvns	r3, r3
 80013ce:	401a      	ands	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0318 	and.w	r3, r3, #24
 80013d6:	4908      	ldr	r1, [pc, #32]	; (80013f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013d8:	40d9      	lsrs	r1, r3
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	400b      	ands	r3, r1
 80013de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80013e2:	431a      	orrs	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	000fffff 	.word	0x000fffff

080013fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <LL_ADC_DisableDeepPowerDown+0x20>)
 800140a:	4013      	ands	r3, r2
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6093      	str	r3, [r2, #8]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	5fffffc0 	.word	0x5fffffc0

08001420 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001434:	d101      	bne.n	800143a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <LL_ADC_EnableInternalRegulator+0x24>)
 8001456:	4013      	ands	r3, r2
 8001458:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	6fffffc0 	.word	0x6fffffc0

08001470 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001480:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001484:	d101      	bne.n	800148a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <LL_ADC_IsEnabled+0x18>
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <LL_ADC_IsEnabled+0x1a>
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d101      	bne.n	80014d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b08      	cmp	r3, #8
 80014f6:	d101      	bne.n	80014fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014f8:	2301      	movs	r3, #1
 80014fa:	e000      	b.n	80014fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e138      	b.n	8001798 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001530:	2b00      	cmp	r3, #0
 8001532:	d109      	bne.n	8001548 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fbc9 	bl	8000ccc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff67 	bl	8001420 <LL_ADC_IsDeepPowerDownEnabled>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d004      	beq.n	8001562 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff4d 	bl	80013fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff82 	bl	8001470 <LL_ADC_IsInternalRegulatorEnabled>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d114      	bne.n	800159c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ff66 	bl	8001448 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800157c:	4b88      	ldr	r3, [pc, #544]	; (80017a0 <HAL_ADC_Init+0x294>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	099b      	lsrs	r3, r3, #6
 8001582:	4a88      	ldr	r2, [pc, #544]	; (80017a4 <HAL_ADC_Init+0x298>)
 8001584:	fba2 2303 	umull	r2, r3, r2, r3
 8001588:	099b      	lsrs	r3, r3, #6
 800158a:	3301      	adds	r3, #1
 800158c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800158e:	e002      	b.n	8001596 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	3b01      	subs	r3, #1
 8001594:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f9      	bne.n	8001590 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff65 	bl	8001470 <LL_ADC_IsInternalRegulatorEnabled>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10d      	bne.n	80015c8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b0:	f043 0210 	orr.w	r2, r3, #16
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015bc:	f043 0201 	orr.w	r2, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff76 	bl	80014be <LL_ADC_REG_IsConversionOngoing>
 80015d2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f040 80d2 	bne.w	8001786 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f040 80ce 	bne.w	8001786 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ee:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015f2:	f043 0202 	orr.w	r2, r3, #2
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ff4a 	bl	8001498 <LL_ADC_IsEnabled>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d110      	bne.n	800162c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800160a:	4867      	ldr	r0, [pc, #412]	; (80017a8 <HAL_ADC_Init+0x29c>)
 800160c:	f7ff ff44 	bl	8001498 <LL_ADC_IsEnabled>
 8001610:	4604      	mov	r4, r0
 8001612:	4866      	ldr	r0, [pc, #408]	; (80017ac <HAL_ADC_Init+0x2a0>)
 8001614:	f7ff ff40 	bl	8001498 <LL_ADC_IsEnabled>
 8001618:	4603      	mov	r3, r0
 800161a:	4323      	orrs	r3, r4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d105      	bne.n	800162c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	4619      	mov	r1, r3
 8001626:	4862      	ldr	r0, [pc, #392]	; (80017b0 <HAL_ADC_Init+0x2a4>)
 8001628:	f7ff fde4 	bl	80011f4 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7d5b      	ldrb	r3, [r3, #21]
 8001630:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001636:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 800163c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	7f1b      	ldrb	r3, [r3, #28]
 8001642:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7f1b      	ldrb	r3, [r3, #28]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d106      	bne.n	800165e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	3b01      	subs	r3, #1
 8001656:	045b      	lsls	r3, r3, #17
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	2b00      	cmp	r3, #0
 8001664:	d009      	beq.n	800167a <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	4b4c      	ldr	r3, [pc, #304]	; (80017b4 <HAL_ADC_Init+0x2a8>)
 8001682:	4013      	ands	r3, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	69b9      	ldr	r1, [r7, #24]
 800168a:	430b      	orrs	r3, r1
 800168c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ff13 	bl	80014be <LL_ADC_REG_IsConversionOngoing>
 8001698:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff ff20 	bl	80014e4 <LL_ADC_INJ_IsConversionOngoing>
 80016a4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d14a      	bne.n	8001742 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d147      	bne.n	8001742 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	7d1b      	ldrb	r3, [r3, #20]
 80016b6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	4b3c      	ldr	r3, [pc, #240]	; (80017b8 <HAL_ADC_Init+0x2ac>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6812      	ldr	r2, [r2, #0]
 80016ce:	69b9      	ldr	r1, [r7, #24]
 80016d0:	430b      	orrs	r3, r1
 80016d2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d11b      	bne.n	8001716 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	691a      	ldr	r2, [r3, #16]
 80016ea:	4b34      	ldr	r3, [pc, #208]	; (80017bc <HAL_ADC_Init+0x2b0>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016f2:	3a01      	subs	r2, #1
 80016f4:	0411      	lsls	r1, r2, #16
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016fa:	4311      	orrs	r1, r2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001700:	4311      	orrs	r1, r2
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001706:	430a      	orrs	r2, r1
 8001708:	431a      	orrs	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0201 	orr.w	r2, r2, #1
 8001712:	611a      	str	r2, [r3, #16]
 8001714:	e007      	b.n	8001726 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	691a      	ldr	r2, [r3, #16]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0201 	bic.w	r2, r2, #1
 8001724:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 fb25 	bl	8001d8c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d10c      	bne.n	8001764 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	f023 010f 	bic.w	r1, r3, #15
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	1e5a      	subs	r2, r3, #1
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	631a      	str	r2, [r3, #48]	; 0x30
 8001762:	e007      	b.n	8001774 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 020f 	bic.w	r2, r2, #15
 8001772:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001778:	f023 0303 	bic.w	r3, r3, #3
 800177c:	f043 0201 	orr.w	r2, r3, #1
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	655a      	str	r2, [r3, #84]	; 0x54
 8001784:	e007      	b.n	8001796 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178a:	f043 0210 	orr.w	r2, r3, #16
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001796:	7ffb      	ldrb	r3, [r7, #31]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3724      	adds	r7, #36	; 0x24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd90      	pop	{r4, r7, pc}
 80017a0:	24000000 	.word	0x24000000
 80017a4:	053e2d63 	.word	0x053e2d63
 80017a8:	40022000 	.word	0x40022000
 80017ac:	40022100 	.word	0x40022100
 80017b0:	40022300 	.word	0x40022300
 80017b4:	fff0c003 	.word	0xfff0c003
 80017b8:	ffffbffc 	.word	0xffffbffc
 80017bc:	fc00f81e 	.word	0xfc00f81e

080017c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b0a1      	sub	sp, #132	; 0x84
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	4a9a      	ldr	r2, [pc, #616]	; (8001a44 <HAL_ADC_ConfigChannel+0x284>)
 80017da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d101      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x2a>
 80017e6:	2302      	movs	r3, #2
 80017e8:	e2bc      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x5a4>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fe61 	bl	80014be <LL_ADC_REG_IsConversionOngoing>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 82a1 	bne.w	8001d46 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800180c:	2b00      	cmp	r3, #0
 800180e:	d108      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x62>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	0e9b      	lsrs	r3, r3, #26
 8001816:	f003 031f 	and.w	r3, r3, #31
 800181a:	2201      	movs	r2, #1
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	e016      	b.n	8001850 <HAL_ADC_ConfigChannel+0x90>
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001828:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800182a:	fa93 f3a3 	rbit	r3, r3
 800182e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001830:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001832:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001834:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800183a:	2320      	movs	r3, #32
 800183c:	e003      	b.n	8001846 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800183e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001840:	fab3 f383 	clz	r3, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	f003 031f 	and.w	r3, r3, #31
 800184a:	2201      	movs	r2, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	69d1      	ldr	r1, [r2, #28]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6812      	ldr	r2, [r2, #0]
 800185a:	430b      	orrs	r3, r1
 800185c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6818      	ldr	r0, [r3, #0]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	6859      	ldr	r1, [r3, #4]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	f7ff fd4a 	bl	8001304 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fe22 	bl	80014be <LL_ADC_REG_IsConversionOngoing>
 800187a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fe2f 	bl	80014e4 <LL_ADC_INJ_IsConversionOngoing>
 8001886:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800188a:	2b00      	cmp	r3, #0
 800188c:	f040 80a0 	bne.w	80019d0 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001892:	2b00      	cmp	r3, #0
 8001894:	f040 809c 	bne.w	80019d0 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	6819      	ldr	r1, [r3, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	461a      	mov	r2, r3
 80018a6:	f7ff fd59 	bl	800135c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	f003 0310 	and.w	r3, r3, #16
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10b      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x110>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	695a      	ldr	r2, [r3, #20]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	e00a      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x126>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	695a      	ldr	r2, [r3, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	089b      	lsrs	r3, r3, #2
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d027      	beq.n	8001940 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6818      	ldr	r0, [r3, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	6919      	ldr	r1, [r3, #16]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018fe:	f7ff fcad 	bl	800125c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	6919      	ldr	r1, [r3, #16]
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	7e5b      	ldrb	r3, [r3, #25]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d102      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x158>
 8001912:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001916:	e000      	b.n	800191a <HAL_ADC_ConfigChannel+0x15a>
 8001918:	2300      	movs	r3, #0
 800191a:	461a      	mov	r2, r3
 800191c:	f7ff fcd7 	bl	80012ce <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	6919      	ldr	r1, [r3, #16]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	7e1b      	ldrb	r3, [r3, #24]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d102      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x176>
 8001930:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001934:	e000      	b.n	8001938 <HAL_ADC_ConfigChannel+0x178>
 8001936:	2300      	movs	r3, #0
 8001938:	461a      	mov	r2, r3
 800193a:	f7ff fcaf 	bl	800129c <LL_ADC_SetDataRightShift>
 800193e:	e047      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001946:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	069b      	lsls	r3, r3, #26
 8001950:	429a      	cmp	r2, r3
 8001952:	d107      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001962:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800196a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	069b      	lsls	r3, r3, #26
 8001974:	429a      	cmp	r2, r3
 8001976:	d107      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001986:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800198e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	069b      	lsls	r3, r3, #26
 8001998:	429a      	cmp	r2, r3
 800199a:	d107      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019aa:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	069b      	lsls	r3, r3, #26
 80019bc:	429a      	cmp	r2, r3
 80019be:	d107      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019ce:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fd5f 	bl	8001498 <LL_ADC_IsEnabled>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f040 81bb 	bne.w	8001d58 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	6819      	ldr	r1, [r3, #0]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	461a      	mov	r2, r3
 80019f0:	f7ff fce0 	bl	80013b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <HAL_ADC_ConfigChannel+0x284>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	f040 8130 	bne.w	8001c60 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10b      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x268>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	0e9b      	lsrs	r3, r3, #26
 8001a16:	3301      	adds	r3, #1
 8001a18:	f003 031f 	and.w	r3, r3, #31
 8001a1c:	2b09      	cmp	r3, #9
 8001a1e:	bf94      	ite	ls
 8001a20:	2301      	movls	r3, #1
 8001a22:	2300      	movhi	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	e01b      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x2a0>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a30:	fa93 f3a3 	rbit	r3, r3
 8001a34:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a38:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d103      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8001a40:	2320      	movs	r3, #32
 8001a42:	e005      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x290>
 8001a44:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8001a48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a4a:	fab3 f383 	clz	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	3301      	adds	r3, #1
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	2b09      	cmp	r3, #9
 8001a58:	bf94      	ite	ls
 8001a5a:	2301      	movls	r3, #1
 8001a5c:	2300      	movhi	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d079      	beq.n	8001b58 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d107      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x2c0>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	0e9b      	lsrs	r3, r3, #26
 8001a76:	3301      	adds	r3, #1
 8001a78:	069b      	lsls	r3, r3, #26
 8001a7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a7e:	e015      	b.n	8001aac <HAL_ADC_ConfigChannel+0x2ec>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a88:	fa93 f3a3 	rbit	r3, r3
 8001a8c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a90:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8001a98:	2320      	movs	r3, #32
 8001a9a:	e003      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8001a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a9e:	fab3 f383 	clz	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	069b      	lsls	r3, r3, #26
 8001aa8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d109      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x30c>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	0e9b      	lsrs	r3, r3, #26
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f003 031f 	and.w	r3, r3, #31
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	e017      	b.n	8001afc <HAL_ADC_ConfigChannel+0x33c>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ad4:	fa93 f3a3 	rbit	r3, r3
 8001ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001adc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8001ae4:	2320      	movs	r3, #32
 8001ae6:	e003      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8001ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	3301      	adds	r3, #1
 8001af2:	f003 031f 	and.w	r3, r3, #31
 8001af6:	2101      	movs	r1, #1
 8001af8:	fa01 f303 	lsl.w	r3, r1, r3
 8001afc:	ea42 0103 	orr.w	r1, r2, r3
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10a      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x362>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	0e9b      	lsrs	r3, r3, #26
 8001b12:	3301      	adds	r3, #1
 8001b14:	f003 021f 	and.w	r2, r3, #31
 8001b18:	4613      	mov	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	051b      	lsls	r3, r3, #20
 8001b20:	e018      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x394>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2a:	fa93 f3a3 	rbit	r3, r3
 8001b2e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b32:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	e003      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8001b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	3301      	adds	r3, #1
 8001b48:	f003 021f 	and.w	r2, r3, #31
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4413      	add	r3, r2
 8001b52:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b54:	430b      	orrs	r3, r1
 8001b56:	e07e      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d107      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x3b4>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	0e9b      	lsrs	r3, r3, #26
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	069b      	lsls	r3, r3, #26
 8001b6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b72:	e015      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x3e0>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001b8c:	2320      	movs	r3, #32
 8001b8e:	e003      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	3301      	adds	r3, #1
 8001b9a:	069b      	lsls	r3, r3, #26
 8001b9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d109      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x400>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	0e9b      	lsrs	r3, r3, #26
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f003 031f 	and.w	r3, r3, #31
 8001bb8:	2101      	movs	r1, #1
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	e017      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x430>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	61bb      	str	r3, [r7, #24]
  return result;
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8001bd8:	2320      	movs	r3, #32
 8001bda:	e003      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	3301      	adds	r3, #1
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	2101      	movs	r1, #1
 8001bec:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf0:	ea42 0103 	orr.w	r1, r2, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10d      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x45c>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	0e9b      	lsrs	r3, r3, #26
 8001c06:	3301      	adds	r3, #1
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	3b1e      	subs	r3, #30
 8001c14:	051b      	lsls	r3, r3, #20
 8001c16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c1a:	e01b      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x494>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	fa93 f3a3 	rbit	r3, r3
 8001c28:	60fb      	str	r3, [r7, #12]
  return result;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8001c34:	2320      	movs	r3, #32
 8001c36:	e003      	b.n	8001c40 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fab3 f383 	clz	r3, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	3301      	adds	r3, #1
 8001c42:	f003 021f 	and.w	r2, r3, #31
 8001c46:	4613      	mov	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3b1e      	subs	r3, #30
 8001c4e:	051b      	lsls	r3, r3, #20
 8001c50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c54:	430b      	orrs	r3, r1
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	6892      	ldr	r2, [r2, #8]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7ff fb7e 	bl	800135c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	da77      	bge.n	8001d58 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c68:	4840      	ldr	r0, [pc, #256]	; (8001d6c <HAL_ADC_ConfigChannel+0x5ac>)
 8001c6a:	f7ff fae9 	bl	8001240 <LL_ADC_GetCommonPathInternalCh>
 8001c6e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c70:	483f      	ldr	r0, [pc, #252]	; (8001d70 <HAL_ADC_ConfigChannel+0x5b0>)
 8001c72:	f7ff fc11 	bl	8001498 <LL_ADC_IsEnabled>
 8001c76:	4604      	mov	r4, r0
 8001c78:	483e      	ldr	r0, [pc, #248]	; (8001d74 <HAL_ADC_ConfigChannel+0x5b4>)
 8001c7a:	f7ff fc0d 	bl	8001498 <LL_ADC_IsEnabled>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4323      	orrs	r3, r4
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d155      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a3b      	ldr	r2, [pc, #236]	; (8001d78 <HAL_ADC_ConfigChannel+0x5b8>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d122      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x516>
 8001c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d11d      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a35      	ldr	r2, [pc, #212]	; (8001d74 <HAL_ADC_ConfigChannel+0x5b4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d159      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ca6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001caa:	4619      	mov	r1, r3
 8001cac:	482f      	ldr	r0, [pc, #188]	; (8001d6c <HAL_ADC_ConfigChannel+0x5ac>)
 8001cae:	f7ff fab4 	bl	800121a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cb2:	4b32      	ldr	r3, [pc, #200]	; (8001d7c <HAL_ADC_ConfigChannel+0x5bc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	099b      	lsrs	r3, r3, #6
 8001cb8:	4a31      	ldr	r2, [pc, #196]	; (8001d80 <HAL_ADC_ConfigChannel+0x5c0>)
 8001cba:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbe:	099b      	lsrs	r3, r3, #6
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001cc6:	e002      	b.n	8001cce <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1f9      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cd4:	e040      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a2a      	ldr	r2, [pc, #168]	; (8001d84 <HAL_ADC_ConfigChannel+0x5c4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d111      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x544>
 8001ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10c      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a21      	ldr	r2, [pc, #132]	; (8001d74 <HAL_ADC_ConfigChannel+0x5b4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d131      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	481b      	ldr	r0, [pc, #108]	; (8001d6c <HAL_ADC_ConfigChannel+0x5ac>)
 8001cfe:	f7ff fa8c 	bl	800121a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d02:	e029      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <HAL_ADC_ConfigChannel+0x5c8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d124      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x598>
 8001d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d11f      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a15      	ldr	r2, [pc, #84]	; (8001d74 <HAL_ADC_ConfigChannel+0x5b4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d11a      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4810      	ldr	r0, [pc, #64]	; (8001d6c <HAL_ADC_ConfigChannel+0x5ac>)
 8001d2c:	f7ff fa75 	bl	800121a <LL_ADC_SetCommonPathInternalCh>
 8001d30:	e012      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d36:	f043 0220 	orr.w	r2, r3, #32
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001d44:	e008      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4a:	f043 0220 	orr.w	r2, r3, #32
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d60:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3784      	adds	r7, #132	; 0x84
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd90      	pop	{r4, r7, pc}
 8001d6c:	40022300 	.word	0x40022300
 8001d70:	40022000 	.word	0x40022000
 8001d74:	40022100 	.word	0x40022100
 8001d78:	cb840000 	.word	0xcb840000
 8001d7c:	24000000 	.word	0x24000000
 8001d80:	053e2d63 	.word	0x053e2d63
 8001d84:	bac04000 	.word	0xbac04000
 8001d88:	cfb80000 	.word	0xcfb80000

08001d8c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001d94:	4b60      	ldr	r3, [pc, #384]	; (8001f18 <ADC_ConfigureBoostMode+0x18c>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d01c      	beq.n	8001dda <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001da0:	f001 fc08 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 8001da4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001dae:	d010      	beq.n	8001dd2 <ADC_ConfigureBoostMode+0x46>
 8001db0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001db4:	d873      	bhi.n	8001e9e <ADC_ConfigureBoostMode+0x112>
 8001db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dba:	d002      	beq.n	8001dc2 <ADC_ConfigureBoostMode+0x36>
 8001dbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001dc0:	d16d      	bne.n	8001e9e <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	0c1b      	lsrs	r3, r3, #16
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	60fb      	str	r3, [r7, #12]
        break;
 8001dd0:	e068      	b.n	8001ea4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	60fb      	str	r3, [r7, #12]
        break;
 8001dd8:	e064      	b.n	8001ea4 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001dda:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001dde:	f04f 0100 	mov.w	r1, #0
 8001de2:	f002 fe01 	bl	80049e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001de6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001df0:	d051      	beq.n	8001e96 <ADC_ConfigureBoostMode+0x10a>
 8001df2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001df6:	d854      	bhi.n	8001ea2 <ADC_ConfigureBoostMode+0x116>
 8001df8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001dfc:	d047      	beq.n	8001e8e <ADC_ConfigureBoostMode+0x102>
 8001dfe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001e02:	d84e      	bhi.n	8001ea2 <ADC_ConfigureBoostMode+0x116>
 8001e04:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001e08:	d03d      	beq.n	8001e86 <ADC_ConfigureBoostMode+0xfa>
 8001e0a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001e0e:	d848      	bhi.n	8001ea2 <ADC_ConfigureBoostMode+0x116>
 8001e10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e14:	d033      	beq.n	8001e7e <ADC_ConfigureBoostMode+0xf2>
 8001e16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e1a:	d842      	bhi.n	8001ea2 <ADC_ConfigureBoostMode+0x116>
 8001e1c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001e20:	d029      	beq.n	8001e76 <ADC_ConfigureBoostMode+0xea>
 8001e22:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001e26:	d83c      	bhi.n	8001ea2 <ADC_ConfigureBoostMode+0x116>
 8001e28:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001e2c:	d01a      	beq.n	8001e64 <ADC_ConfigureBoostMode+0xd8>
 8001e2e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001e32:	d836      	bhi.n	8001ea2 <ADC_ConfigureBoostMode+0x116>
 8001e34:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001e38:	d014      	beq.n	8001e64 <ADC_ConfigureBoostMode+0xd8>
 8001e3a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001e3e:	d830      	bhi.n	8001ea2 <ADC_ConfigureBoostMode+0x116>
 8001e40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e44:	d00e      	beq.n	8001e64 <ADC_ConfigureBoostMode+0xd8>
 8001e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e4a:	d82a      	bhi.n	8001ea2 <ADC_ConfigureBoostMode+0x116>
 8001e4c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001e50:	d008      	beq.n	8001e64 <ADC_ConfigureBoostMode+0xd8>
 8001e52:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001e56:	d824      	bhi.n	8001ea2 <ADC_ConfigureBoostMode+0x116>
 8001e58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e5c:	d002      	beq.n	8001e64 <ADC_ConfigureBoostMode+0xd8>
 8001e5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e62:	d11e      	bne.n	8001ea2 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	0c9b      	lsrs	r3, r3, #18
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e72:	60fb      	str	r3, [r7, #12]
        break;
 8001e74:	e016      	b.n	8001ea4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	091b      	lsrs	r3, r3, #4
 8001e7a:	60fb      	str	r3, [r7, #12]
        break;
 8001e7c:	e012      	b.n	8001ea4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	095b      	lsrs	r3, r3, #5
 8001e82:	60fb      	str	r3, [r7, #12]
        break;
 8001e84:	e00e      	b.n	8001ea4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	099b      	lsrs	r3, r3, #6
 8001e8a:	60fb      	str	r3, [r7, #12]
        break;
 8001e8c:	e00a      	b.n	8001ea4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	09db      	lsrs	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]
        break;
 8001e94:	e006      	b.n	8001ea4 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	60fb      	str	r3, [r7, #12]
        break;
 8001e9c:	e002      	b.n	8001ea4 <ADC_ConfigureBoostMode+0x118>
        break;
 8001e9e:	bf00      	nop
 8001ea0:	e000      	b.n	8001ea4 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8001ea2:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	085b      	lsrs	r3, r3, #1
 8001ea8:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4a1b      	ldr	r2, [pc, #108]	; (8001f1c <ADC_ConfigureBoostMode+0x190>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d808      	bhi.n	8001ec4 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001ec0:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001ec2:	e025      	b.n	8001f10 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a16      	ldr	r2, [pc, #88]	; (8001f20 <ADC_ConfigureBoostMode+0x194>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d80a      	bhi.n	8001ee2 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ede:	609a      	str	r2, [r3, #8]
}
 8001ee0:	e016      	b.n	8001f10 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4a0f      	ldr	r2, [pc, #60]	; (8001f24 <ADC_ConfigureBoostMode+0x198>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d80a      	bhi.n	8001f00 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001efc:	609a      	str	r2, [r3, #8]
}
 8001efe:	e007      	b.n	8001f10 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001f0e:	609a      	str	r2, [r3, #8]
}
 8001f10:	bf00      	nop
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40022300 	.word	0x40022300
 8001f1c:	005f5e10 	.word	0x005f5e10
 8001f20:	00bebc20 	.word	0x00bebc20
 8001f24:	017d7840 	.word	0x017d7840

08001f28 <LL_ADC_IsEnabled>:
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <LL_ADC_IsEnabled+0x18>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <LL_ADC_IsEnabled+0x1a>
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <LL_ADC_REG_IsConversionOngoing>:
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d101      	bne.n	8001f66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001f74:	b590      	push	{r4, r7, lr}
 8001f76:	b09f      	sub	sp, #124	; 0x7c
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e080      	b.n	8002094 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a3d      	ldr	r2, [pc, #244]	; (800209c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d102      	bne.n	8001fb2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001fac:	4b3c      	ldr	r3, [pc, #240]	; (80020a0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	e001      	b.n	8001fb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10b      	bne.n	8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc0:	f043 0220 	orr.w	r2, r3, #32
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e05f      	b.n	8002094 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ffb9 	bl	8001f4e <LL_ADC_REG_IsConversionOngoing>
 8001fdc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ffb3 	bl	8001f4e <LL_ADC_REG_IsConversionOngoing>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d141      	bne.n	8002072 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001fee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d13e      	bne.n	8002072 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8001ff6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d020      	beq.n	8002042 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	431a      	orrs	r2, r3
 800200e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002010:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002012:	4822      	ldr	r0, [pc, #136]	; (800209c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002014:	f7ff ff88 	bl	8001f28 <LL_ADC_IsEnabled>
 8002018:	4604      	mov	r4, r0
 800201a:	4821      	ldr	r0, [pc, #132]	; (80020a0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800201c:	f7ff ff84 	bl	8001f28 <LL_ADC_IsEnabled>
 8002020:	4603      	mov	r3, r0
 8002022:	4323      	orrs	r3, r4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d12e      	bne.n	8002086 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800202e:	4013      	ands	r3, r2
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	6811      	ldr	r1, [r2, #0]
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	6892      	ldr	r2, [r2, #8]
 8002038:	430a      	orrs	r2, r1
 800203a:	431a      	orrs	r2, r3
 800203c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800203e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002040:	e021      	b.n	8002086 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800204a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800204c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800204e:	4813      	ldr	r0, [pc, #76]	; (800209c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002050:	f7ff ff6a 	bl	8001f28 <LL_ADC_IsEnabled>
 8002054:	4604      	mov	r4, r0
 8002056:	4812      	ldr	r0, [pc, #72]	; (80020a0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002058:	f7ff ff66 	bl	8001f28 <LL_ADC_IsEnabled>
 800205c:	4603      	mov	r3, r0
 800205e:	4323      	orrs	r3, r4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d110      	bne.n	8002086 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800206a:	4013      	ands	r3, r2
 800206c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800206e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002070:	e009      	b.n	8002086 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002076:	f043 0220 	orr.w	r2, r3, #32
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002084:	e000      	b.n	8002088 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002086:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002090:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002094:	4618      	mov	r0, r3
 8002096:	377c      	adds	r7, #124	; 0x7c
 8002098:	46bd      	mov	sp, r7
 800209a:	bd90      	pop	{r4, r7, pc}
 800209c:	40022000 	.word	0x40022000
 80020a0:	40022100 	.word	0x40022100
 80020a4:	40022300 	.word	0x40022300
 80020a8:	fffff0e0 	.word	0xfffff0e0

080020ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <__NVIC_SetPriorityGrouping+0x40>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c8:	4013      	ands	r3, r2
 80020ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <__NVIC_SetPriorityGrouping+0x44>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020da:	4a04      	ldr	r2, [pc, #16]	; (80020ec <__NVIC_SetPriorityGrouping+0x40>)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	60d3      	str	r3, [r2, #12]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00
 80020f0:	05fa0000 	.word	0x05fa0000

080020f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f8:	4b04      	ldr	r3, [pc, #16]	; (800210c <__NVIC_GetPriorityGrouping+0x18>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	0a1b      	lsrs	r3, r3, #8
 80020fe:	f003 0307 	and.w	r3, r3, #7
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	6039      	str	r1, [r7, #0]
 800211a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800211c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002120:	2b00      	cmp	r3, #0
 8002122:	db0a      	blt.n	800213a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	490c      	ldr	r1, [pc, #48]	; (800215c <__NVIC_SetPriority+0x4c>)
 800212a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800212e:	0112      	lsls	r2, r2, #4
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	440b      	add	r3, r1
 8002134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002138:	e00a      	b.n	8002150 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4908      	ldr	r1, [pc, #32]	; (8002160 <__NVIC_SetPriority+0x50>)
 8002140:	88fb      	ldrh	r3, [r7, #6]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	3b04      	subs	r3, #4
 8002148:	0112      	lsls	r2, r2, #4
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	440b      	add	r3, r1
 800214e:	761a      	strb	r2, [r3, #24]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000e100 	.word	0xe000e100
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	; 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f1c3 0307 	rsb	r3, r3, #7
 800217e:	2b04      	cmp	r3, #4
 8002180:	bf28      	it	cs
 8002182:	2304      	movcs	r3, #4
 8002184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3304      	adds	r3, #4
 800218a:	2b06      	cmp	r3, #6
 800218c:	d902      	bls.n	8002194 <NVIC_EncodePriority+0x30>
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3b03      	subs	r3, #3
 8002192:	e000      	b.n	8002196 <NVIC_EncodePriority+0x32>
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002198:	f04f 32ff 	mov.w	r2, #4294967295
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	401a      	ands	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ac:	f04f 31ff 	mov.w	r1, #4294967295
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	43d9      	mvns	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	4313      	orrs	r3, r2
         );
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3724      	adds	r7, #36	; 0x24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021dc:	d301      	bcc.n	80021e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021de:	2301      	movs	r3, #1
 80021e0:	e00f      	b.n	8002202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021e2:	4a0a      	ldr	r2, [pc, #40]	; (800220c <SysTick_Config+0x40>)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ea:	210f      	movs	r1, #15
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	f7ff ff8e 	bl	8002110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <SysTick_Config+0x40>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <SysTick_Config+0x40>)
 80021fc:	2207      	movs	r2, #7
 80021fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	e000e010 	.word	0xe000e010

08002210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff ff47 	bl	80020ac <__NVIC_SetPriorityGrouping>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af00      	add	r7, sp, #0
 800222c:	4603      	mov	r3, r0
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002234:	f7ff ff5e 	bl	80020f4 <__NVIC_GetPriorityGrouping>
 8002238:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7ff ff90 	bl	8002164 <NVIC_EncodePriority>
 8002244:	4602      	mov	r2, r0
 8002246:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff5f 	bl	8002110 <__NVIC_SetPriority>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff ffb2 	bl	80021cc <SysTick_Config>
 8002268:	4603      	mov	r3, r0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	; 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002282:	4b89      	ldr	r3, [pc, #548]	; (80024a8 <HAL_GPIO_Init+0x234>)
 8002284:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002286:	e194      	b.n	80025b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	2101      	movs	r1, #1
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	fa01 f303 	lsl.w	r3, r1, r3
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 8186 	beq.w	80025ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d005      	beq.n	80022b8 <HAL_GPIO_Init+0x44>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d130      	bne.n	800231a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ee:	2201      	movs	r2, #1
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	091b      	lsrs	r3, r3, #4
 8002304:	f003 0201 	and.w	r2, r3, #1
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b03      	cmp	r3, #3
 8002324:	d017      	beq.n	8002356 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	2203      	movs	r2, #3
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d123      	bne.n	80023aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	08da      	lsrs	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3208      	adds	r2, #8
 800236a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	220f      	movs	r2, #15
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	691a      	ldr	r2, [r3, #16]
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	08da      	lsrs	r2, r3, #3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3208      	adds	r2, #8
 80023a4:	69b9      	ldr	r1, [r7, #24]
 80023a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	2203      	movs	r2, #3
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 0203 	and.w	r2, r3, #3
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 80e0 	beq.w	80025ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ec:	4b2f      	ldr	r3, [pc, #188]	; (80024ac <HAL_GPIO_Init+0x238>)
 80023ee:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80023f2:	4a2e      	ldr	r2, [pc, #184]	; (80024ac <HAL_GPIO_Init+0x238>)
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80023fc:	4b2b      	ldr	r3, [pc, #172]	; (80024ac <HAL_GPIO_Init+0x238>)
 80023fe:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800240a:	4a29      	ldr	r2, [pc, #164]	; (80024b0 <HAL_GPIO_Init+0x23c>)
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	089b      	lsrs	r3, r3, #2
 8002410:	3302      	adds	r3, #2
 8002412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	220f      	movs	r2, #15
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a20      	ldr	r2, [pc, #128]	; (80024b4 <HAL_GPIO_Init+0x240>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d052      	beq.n	80024dc <HAL_GPIO_Init+0x268>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a1f      	ldr	r2, [pc, #124]	; (80024b8 <HAL_GPIO_Init+0x244>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d031      	beq.n	80024a2 <HAL_GPIO_Init+0x22e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a1e      	ldr	r2, [pc, #120]	; (80024bc <HAL_GPIO_Init+0x248>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d02b      	beq.n	800249e <HAL_GPIO_Init+0x22a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a1d      	ldr	r2, [pc, #116]	; (80024c0 <HAL_GPIO_Init+0x24c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d025      	beq.n	800249a <HAL_GPIO_Init+0x226>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a1c      	ldr	r2, [pc, #112]	; (80024c4 <HAL_GPIO_Init+0x250>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d01f      	beq.n	8002496 <HAL_GPIO_Init+0x222>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a1b      	ldr	r2, [pc, #108]	; (80024c8 <HAL_GPIO_Init+0x254>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d019      	beq.n	8002492 <HAL_GPIO_Init+0x21e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a1a      	ldr	r2, [pc, #104]	; (80024cc <HAL_GPIO_Init+0x258>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d013      	beq.n	800248e <HAL_GPIO_Init+0x21a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a19      	ldr	r2, [pc, #100]	; (80024d0 <HAL_GPIO_Init+0x25c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00d      	beq.n	800248a <HAL_GPIO_Init+0x216>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a18      	ldr	r2, [pc, #96]	; (80024d4 <HAL_GPIO_Init+0x260>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d007      	beq.n	8002486 <HAL_GPIO_Init+0x212>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a17      	ldr	r2, [pc, #92]	; (80024d8 <HAL_GPIO_Init+0x264>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d101      	bne.n	8002482 <HAL_GPIO_Init+0x20e>
 800247e:	2309      	movs	r3, #9
 8002480:	e02d      	b.n	80024de <HAL_GPIO_Init+0x26a>
 8002482:	230a      	movs	r3, #10
 8002484:	e02b      	b.n	80024de <HAL_GPIO_Init+0x26a>
 8002486:	2308      	movs	r3, #8
 8002488:	e029      	b.n	80024de <HAL_GPIO_Init+0x26a>
 800248a:	2307      	movs	r3, #7
 800248c:	e027      	b.n	80024de <HAL_GPIO_Init+0x26a>
 800248e:	2306      	movs	r3, #6
 8002490:	e025      	b.n	80024de <HAL_GPIO_Init+0x26a>
 8002492:	2305      	movs	r3, #5
 8002494:	e023      	b.n	80024de <HAL_GPIO_Init+0x26a>
 8002496:	2304      	movs	r3, #4
 8002498:	e021      	b.n	80024de <HAL_GPIO_Init+0x26a>
 800249a:	2303      	movs	r3, #3
 800249c:	e01f      	b.n	80024de <HAL_GPIO_Init+0x26a>
 800249e:	2302      	movs	r3, #2
 80024a0:	e01d      	b.n	80024de <HAL_GPIO_Init+0x26a>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e01b      	b.n	80024de <HAL_GPIO_Init+0x26a>
 80024a6:	bf00      	nop
 80024a8:	58000080 	.word	0x58000080
 80024ac:	58024400 	.word	0x58024400
 80024b0:	58000400 	.word	0x58000400
 80024b4:	58020000 	.word	0x58020000
 80024b8:	58020400 	.word	0x58020400
 80024bc:	58020800 	.word	0x58020800
 80024c0:	58020c00 	.word	0x58020c00
 80024c4:	58021000 	.word	0x58021000
 80024c8:	58021400 	.word	0x58021400
 80024cc:	58021800 	.word	0x58021800
 80024d0:	58021c00 	.word	0x58021c00
 80024d4:	58022000 	.word	0x58022000
 80024d8:	58022400 	.word	0x58022400
 80024dc:	2300      	movs	r3, #0
 80024de:	69fa      	ldr	r2, [r7, #28]
 80024e0:	f002 0203 	and.w	r2, r2, #3
 80024e4:	0092      	lsls	r2, r2, #2
 80024e6:	4093      	lsls	r3, r2
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024ee:	4938      	ldr	r1, [pc, #224]	; (80025d0 <HAL_GPIO_Init+0x35c>)
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	3302      	adds	r3, #2
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800252a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002550:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	3301      	adds	r3, #1
 80025b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f47f ae63 	bne.w	8002288 <HAL_GPIO_Init+0x14>
  }
}
 80025c2:	bf00      	nop
 80025c4:	bf00      	nop
 80025c6:	3724      	adds	r7, #36	; 0x24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	58000400 	.word	0x58000400

080025d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	807b      	strh	r3, [r7, #2]
 80025e0:	4613      	mov	r3, r2
 80025e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025e4:	787b      	ldrb	r3, [r7, #1]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ea:	887a      	ldrh	r2, [r7, #2]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80025f0:	e003      	b.n	80025fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025f2:	887b      	ldrh	r3, [r7, #2]
 80025f4:	041a      	lsls	r2, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	619a      	str	r2, [r3, #24]
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002606:	b480      	push	{r7}
 8002608:	b085      	sub	sp, #20
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	460b      	mov	r3, r1
 8002610:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002618:	887a      	ldrh	r2, [r7, #2]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4013      	ands	r3, r2
 800261e:	041a      	lsls	r2, r3, #16
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	43d9      	mvns	r1, r3
 8002624:	887b      	ldrh	r3, [r7, #2]
 8002626:	400b      	ands	r3, r1
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	619a      	str	r2, [r3, #24]
}
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002644:	4b29      	ldr	r3, [pc, #164]	; (80026ec <HAL_PWREx_ConfigSupply+0xb0>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	2b06      	cmp	r3, #6
 800264e:	d00a      	beq.n	8002666 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002650:	4b26      	ldr	r3, [pc, #152]	; (80026ec <HAL_PWREx_ConfigSupply+0xb0>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	429a      	cmp	r2, r3
 800265c:	d001      	beq.n	8002662 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e040      	b.n	80026e4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e03e      	b.n	80026e4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002666:	4b21      	ldr	r3, [pc, #132]	; (80026ec <HAL_PWREx_ConfigSupply+0xb0>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800266e:	491f      	ldr	r1, [pc, #124]	; (80026ec <HAL_PWREx_ConfigSupply+0xb0>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4313      	orrs	r3, r2
 8002674:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002676:	f7fe fdb1 	bl	80011dc <HAL_GetTick>
 800267a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800267c:	e009      	b.n	8002692 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800267e:	f7fe fdad 	bl	80011dc <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800268c:	d901      	bls.n	8002692 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e028      	b.n	80026e4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002692:	4b16      	ldr	r3, [pc, #88]	; (80026ec <HAL_PWREx_ConfigSupply+0xb0>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800269a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800269e:	d1ee      	bne.n	800267e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b1e      	cmp	r3, #30
 80026a4:	d008      	beq.n	80026b8 <HAL_PWREx_ConfigSupply+0x7c>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b2e      	cmp	r3, #46	; 0x2e
 80026aa:	d005      	beq.n	80026b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b1d      	cmp	r3, #29
 80026b0:	d002      	beq.n	80026b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b2d      	cmp	r3, #45	; 0x2d
 80026b6:	d114      	bne.n	80026e2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80026b8:	f7fe fd90 	bl	80011dc <HAL_GetTick>
 80026bc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80026be:	e009      	b.n	80026d4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80026c0:	f7fe fd8c 	bl	80011dc <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026ce:	d901      	bls.n	80026d4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e007      	b.n	80026e4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_PWREx_ConfigSupply+0xb0>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e0:	d1ee      	bne.n	80026c0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	58024800 	.word	0x58024800

080026f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08c      	sub	sp, #48	; 0x30
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d102      	bne.n	8002704 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	f000 bc1f 	b.w	8002f42 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80b3 	beq.w	8002878 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002712:	4b95      	ldr	r3, [pc, #596]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800271c:	4b92      	ldr	r3, [pc, #584]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002724:	2b10      	cmp	r3, #16
 8002726:	d007      	beq.n	8002738 <HAL_RCC_OscConfig+0x48>
 8002728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272a:	2b18      	cmp	r3, #24
 800272c:	d112      	bne.n	8002754 <HAL_RCC_OscConfig+0x64>
 800272e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d10d      	bne.n	8002754 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002738:	4b8b      	ldr	r3, [pc, #556]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 8098 	beq.w	8002876 <HAL_RCC_OscConfig+0x186>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	f040 8093 	bne.w	8002876 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e3f6      	b.n	8002f42 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800275c:	d106      	bne.n	800276c <HAL_RCC_OscConfig+0x7c>
 800275e:	4b82      	ldr	r3, [pc, #520]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a81      	ldr	r2, [pc, #516]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 8002764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	e058      	b.n	800281e <HAL_RCC_OscConfig+0x12e>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d112      	bne.n	800279a <HAL_RCC_OscConfig+0xaa>
 8002774:	4b7c      	ldr	r3, [pc, #496]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a7b      	ldr	r2, [pc, #492]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 800277a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b79      	ldr	r3, [pc, #484]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a78      	ldr	r2, [pc, #480]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 8002786:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b76      	ldr	r3, [pc, #472]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a75      	ldr	r2, [pc, #468]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 8002792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	e041      	b.n	800281e <HAL_RCC_OscConfig+0x12e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a2:	d112      	bne.n	80027ca <HAL_RCC_OscConfig+0xda>
 80027a4:	4b70      	ldr	r3, [pc, #448]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a6f      	ldr	r2, [pc, #444]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 80027aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4b6d      	ldr	r3, [pc, #436]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a6c      	ldr	r2, [pc, #432]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 80027b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	4b6a      	ldr	r3, [pc, #424]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a69      	ldr	r2, [pc, #420]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 80027c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c6:	6013      	str	r3, [r2, #0]
 80027c8:	e029      	b.n	800281e <HAL_RCC_OscConfig+0x12e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80027d2:	d112      	bne.n	80027fa <HAL_RCC_OscConfig+0x10a>
 80027d4:	4b64      	ldr	r3, [pc, #400]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a63      	ldr	r2, [pc, #396]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 80027da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	4b61      	ldr	r3, [pc, #388]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a60      	ldr	r2, [pc, #384]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 80027e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	4b5e      	ldr	r3, [pc, #376]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a5d      	ldr	r2, [pc, #372]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 80027f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	e011      	b.n	800281e <HAL_RCC_OscConfig+0x12e>
 80027fa:	4b5b      	ldr	r3, [pc, #364]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a5a      	ldr	r2, [pc, #360]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 8002800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	4b58      	ldr	r3, [pc, #352]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a57      	ldr	r2, [pc, #348]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 800280c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	4b55      	ldr	r3, [pc, #340]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a54      	ldr	r2, [pc, #336]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 8002818:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800281c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d013      	beq.n	800284e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7fe fcd9 	bl	80011dc <HAL_GetTick>
 800282a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800282e:	f7fe fcd5 	bl	80011dc <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b64      	cmp	r3, #100	; 0x64
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e380      	b.n	8002f42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002840:	4b49      	ldr	r3, [pc, #292]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x13e>
 800284c:	e014      	b.n	8002878 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284e:	f7fe fcc5 	bl	80011dc <HAL_GetTick>
 8002852:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002856:	f7fe fcc1 	bl	80011dc <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b64      	cmp	r3, #100	; 0x64
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e36c      	b.n	8002f42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002868:	4b3f      	ldr	r3, [pc, #252]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f0      	bne.n	8002856 <HAL_RCC_OscConfig+0x166>
 8002874:	e000      	b.n	8002878 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002876:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 808c 	beq.w	800299e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002886:	4b38      	ldr	r3, [pc, #224]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800288e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002890:	4b35      	ldr	r3, [pc, #212]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d007      	beq.n	80028ac <HAL_RCC_OscConfig+0x1bc>
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	2b18      	cmp	r3, #24
 80028a0:	d137      	bne.n	8002912 <HAL_RCC_OscConfig+0x222>
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d132      	bne.n	8002912 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ac:	4b2e      	ldr	r3, [pc, #184]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_OscConfig+0x1d4>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e33e      	b.n	8002f42 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028c4:	4b28      	ldr	r3, [pc, #160]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f023 0219 	bic.w	r2, r3, #25
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4925      	ldr	r1, [pc, #148]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d6:	f7fe fc81 	bl	80011dc <HAL_GetTick>
 80028da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028de:	f7fe fc7d 	bl	80011dc <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e328      	b.n	8002f42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028f0:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fc:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	061b      	lsls	r3, r3, #24
 800290a:	4917      	ldr	r1, [pc, #92]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002910:	e045      	b.n	800299e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d028      	beq.n	800296c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 0219 	bic.w	r2, r3, #25
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	4910      	ldr	r1, [pc, #64]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 8002928:	4313      	orrs	r3, r2
 800292a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe fc56 	bl	80011dc <HAL_GetTick>
 8002930:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002934:	f7fe fc52 	bl	80011dc <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e2fd      	b.n	8002f42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	061b      	lsls	r3, r3, #24
 8002960:	4901      	ldr	r1, [pc, #4]	; (8002968 <HAL_RCC_OscConfig+0x278>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
 8002966:	e01a      	b.n	800299e <HAL_RCC_OscConfig+0x2ae>
 8002968:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296c:	4b97      	ldr	r3, [pc, #604]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a96      	ldr	r2, [pc, #600]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002972:	f023 0301 	bic.w	r3, r3, #1
 8002976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7fe fc30 	bl	80011dc <HAL_GetTick>
 800297c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002980:	f7fe fc2c 	bl	80011dc <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e2d7      	b.n	8002f42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002992:	4b8e      	ldr	r3, [pc, #568]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d06a      	beq.n	8002a80 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029aa:	4b88      	ldr	r3, [pc, #544]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029b4:	4b85      	ldr	r3, [pc, #532]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d007      	beq.n	80029d0 <HAL_RCC_OscConfig+0x2e0>
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b18      	cmp	r3, #24
 80029c4:	d11b      	bne.n	80029fe <HAL_RCC_OscConfig+0x30e>
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d116      	bne.n	80029fe <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029d0:	4b7e      	ldr	r3, [pc, #504]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_OscConfig+0x2f8>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	2b80      	cmp	r3, #128	; 0x80
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e2ac      	b.n	8002f42 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029e8:	4b78      	ldr	r3, [pc, #480]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	061b      	lsls	r3, r3, #24
 80029f6:	4975      	ldr	r1, [pc, #468]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029fc:	e040      	b.n	8002a80 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d023      	beq.n	8002a4e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a06:	4b71      	ldr	r3, [pc, #452]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a70      	ldr	r2, [pc, #448]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a12:	f7fe fbe3 	bl	80011dc <HAL_GetTick>
 8002a16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a1a:	f7fe fbdf 	bl	80011dc <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e28a      	b.n	8002f42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a2c:	4b67      	ldr	r3, [pc, #412]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a38:	4b64      	ldr	r3, [pc, #400]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	061b      	lsls	r3, r3, #24
 8002a46:	4961      	ldr	r1, [pc, #388]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60cb      	str	r3, [r1, #12]
 8002a4c:	e018      	b.n	8002a80 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a4e:	4b5f      	ldr	r3, [pc, #380]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a5e      	ldr	r2, [pc, #376]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5a:	f7fe fbbf 	bl	80011dc <HAL_GetTick>
 8002a5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a62:	f7fe fbbb 	bl	80011dc <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e266      	b.n	8002f42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a74:	4b55      	ldr	r3, [pc, #340]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d036      	beq.n	8002afa <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d019      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a94:	4b4d      	ldr	r3, [pc, #308]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a98:	4a4c      	ldr	r2, [pc, #304]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7fe fb9c 	bl	80011dc <HAL_GetTick>
 8002aa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa8:	f7fe fb98 	bl	80011dc <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e243      	b.n	8002f42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aba:	4b44      	ldr	r3, [pc, #272]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x3b8>
 8002ac6:	e018      	b.n	8002afa <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac8:	4b40      	ldr	r3, [pc, #256]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002acc:	4a3f      	ldr	r2, [pc, #252]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad4:	f7fe fb82 	bl	80011dc <HAL_GetTick>
 8002ad8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002adc:	f7fe fb7e 	bl	80011dc <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e229      	b.n	8002f42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002aee:	4b37      	ldr	r3, [pc, #220]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d036      	beq.n	8002b74 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d019      	beq.n	8002b42 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b0e:	4b2f      	ldr	r3, [pc, #188]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a2e      	ldr	r2, [pc, #184]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002b14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b1a:	f7fe fb5f 	bl	80011dc <HAL_GetTick>
 8002b1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b22:	f7fe fb5b 	bl	80011dc <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e206      	b.n	8002f42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b34:	4b25      	ldr	r3, [pc, #148]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x432>
 8002b40:	e018      	b.n	8002b74 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b42:	4b22      	ldr	r3, [pc, #136]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a21      	ldr	r2, [pc, #132]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002b48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b4e:	f7fe fb45 	bl	80011dc <HAL_GetTick>
 8002b52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b56:	f7fe fb41 	bl	80011dc <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e1ec      	b.n	8002f42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b68:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f0      	bne.n	8002b56 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80af 	beq.w	8002ce0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b82:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <HAL_RCC_OscConfig+0x4e0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a12      	ldr	r2, [pc, #72]	; (8002bd0 <HAL_RCC_OscConfig+0x4e0>)
 8002b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b8e:	f7fe fb25 	bl	80011dc <HAL_GetTick>
 8002b92:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b96:	f7fe fb21 	bl	80011dc <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b64      	cmp	r3, #100	; 0x64
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e1cc      	b.n	8002f42 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ba8:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <HAL_RCC_OscConfig+0x4e0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d10b      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x4e4>
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	4a02      	ldr	r2, [pc, #8]	; (8002bcc <HAL_RCC_OscConfig+0x4dc>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc8:	e05b      	b.n	8002c82 <HAL_RCC_OscConfig+0x592>
 8002bca:	bf00      	nop
 8002bcc:	58024400 	.word	0x58024400
 8002bd0:	58024800 	.word	0x58024800
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d112      	bne.n	8002c02 <HAL_RCC_OscConfig+0x512>
 8002bdc:	4b9d      	ldr	r3, [pc, #628]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be0:	4a9c      	ldr	r2, [pc, #624]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002be2:	f023 0301 	bic.w	r3, r3, #1
 8002be6:	6713      	str	r3, [r2, #112]	; 0x70
 8002be8:	4b9a      	ldr	r3, [pc, #616]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bec:	4a99      	ldr	r2, [pc, #612]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf4:	4b97      	ldr	r3, [pc, #604]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf8:	4a96      	ldr	r2, [pc, #600]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002bfa:	f023 0304 	bic.w	r3, r3, #4
 8002bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002c00:	e03f      	b.n	8002c82 <HAL_RCC_OscConfig+0x592>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b05      	cmp	r3, #5
 8002c08:	d112      	bne.n	8002c30 <HAL_RCC_OscConfig+0x540>
 8002c0a:	4b92      	ldr	r3, [pc, #584]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0e:	4a91      	ldr	r2, [pc, #580]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002c10:	f043 0304 	orr.w	r3, r3, #4
 8002c14:	6713      	str	r3, [r2, #112]	; 0x70
 8002c16:	4b8f      	ldr	r3, [pc, #572]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	4a8e      	ldr	r2, [pc, #568]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002c1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c20:	6713      	str	r3, [r2, #112]	; 0x70
 8002c22:	4b8c      	ldr	r3, [pc, #560]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	4a8b      	ldr	r2, [pc, #556]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2e:	e028      	b.n	8002c82 <HAL_RCC_OscConfig+0x592>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b85      	cmp	r3, #133	; 0x85
 8002c36:	d112      	bne.n	8002c5e <HAL_RCC_OscConfig+0x56e>
 8002c38:	4b86      	ldr	r3, [pc, #536]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	4a85      	ldr	r2, [pc, #532]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002c3e:	f043 0304 	orr.w	r3, r3, #4
 8002c42:	6713      	str	r3, [r2, #112]	; 0x70
 8002c44:	4b83      	ldr	r3, [pc, #524]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	4a82      	ldr	r2, [pc, #520]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c50:	4b80      	ldr	r3, [pc, #512]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c54:	4a7f      	ldr	r2, [pc, #508]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5c:	e011      	b.n	8002c82 <HAL_RCC_OscConfig+0x592>
 8002c5e:	4b7d      	ldr	r3, [pc, #500]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	4a7c      	ldr	r2, [pc, #496]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6a:	4b7a      	ldr	r3, [pc, #488]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	4a79      	ldr	r2, [pc, #484]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002c70:	f023 0304 	bic.w	r3, r3, #4
 8002c74:	6713      	str	r3, [r2, #112]	; 0x70
 8002c76:	4b77      	ldr	r3, [pc, #476]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7a:	4a76      	ldr	r2, [pc, #472]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d015      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8a:	f7fe faa7 	bl	80011dc <HAL_GetTick>
 8002c8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c92:	f7fe faa3 	bl	80011dc <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e14c      	b.n	8002f42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ca8:	4b6a      	ldr	r3, [pc, #424]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0ee      	beq.n	8002c92 <HAL_RCC_OscConfig+0x5a2>
 8002cb4:	e014      	b.n	8002ce0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7fe fa91 	bl	80011dc <HAL_GetTick>
 8002cba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cbc:	e00a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbe:	f7fe fa8d 	bl	80011dc <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e136      	b.n	8002f42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cd4:	4b5f      	ldr	r3, [pc, #380]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1ee      	bne.n	8002cbe <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 812b 	beq.w	8002f40 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002cea:	4b5a      	ldr	r3, [pc, #360]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cf2:	2b18      	cmp	r3, #24
 8002cf4:	f000 80bb 	beq.w	8002e6e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	f040 8095 	bne.w	8002e2c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d02:	4b54      	ldr	r3, [pc, #336]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a53      	ldr	r2, [pc, #332]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002d08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0e:	f7fe fa65 	bl	80011dc <HAL_GetTick>
 8002d12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d16:	f7fe fa61 	bl	80011dc <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e10c      	b.n	8002f42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d28:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f0      	bne.n	8002d16 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d34:	4b47      	ldr	r3, [pc, #284]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002d36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d38:	4b47      	ldr	r3, [pc, #284]	; (8002e58 <HAL_RCC_OscConfig+0x768>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d44:	0112      	lsls	r2, r2, #4
 8002d46:	430a      	orrs	r2, r1
 8002d48:	4942      	ldr	r1, [pc, #264]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	628b      	str	r3, [r1, #40]	; 0x28
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	3b01      	subs	r3, #1
 8002d54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	025b      	lsls	r3, r3, #9
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	041b      	lsls	r3, r3, #16
 8002d6c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d76:	3b01      	subs	r3, #1
 8002d78:	061b      	lsls	r3, r3, #24
 8002d7a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d7e:	4935      	ldr	r1, [pc, #212]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d84:	4b33      	ldr	r3, [pc, #204]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	4a32      	ldr	r2, [pc, #200]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d90:	4b30      	ldr	r3, [pc, #192]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d94:	4b31      	ldr	r3, [pc, #196]	; (8002e5c <HAL_RCC_OscConfig+0x76c>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d9c:	00d2      	lsls	r2, r2, #3
 8002d9e:	492d      	ldr	r1, [pc, #180]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002da4:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	f023 020c 	bic.w	r2, r3, #12
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	4928      	ldr	r1, [pc, #160]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002db6:	4b27      	ldr	r3, [pc, #156]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	f023 0202 	bic.w	r2, r3, #2
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	4924      	ldr	r1, [pc, #144]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002dc8:	4b22      	ldr	r3, [pc, #136]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	4a21      	ldr	r2, [pc, #132]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dd4:	4b1f      	ldr	r3, [pc, #124]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	4a1e      	ldr	r2, [pc, #120]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002de0:	4b1c      	ldr	r3, [pc, #112]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	4a1b      	ldr	r2, [pc, #108]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002de6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002dec:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	4a18      	ldr	r2, [pc, #96]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df8:	4b16      	ldr	r3, [pc, #88]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a15      	ldr	r2, [pc, #84]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7fe f9ea 	bl	80011dc <HAL_GetTick>
 8002e08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7fe f9e6 	bl	80011dc <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e091      	b.n	8002f42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x71c>
 8002e2a:	e089      	b.n	8002f40 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2c:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a08      	ldr	r2, [pc, #32]	; (8002e54 <HAL_RCC_OscConfig+0x764>)
 8002e32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe f9d0 	bl	80011dc <HAL_GetTick>
 8002e3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e3e:	e00f      	b.n	8002e60 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e40:	f7fe f9cc 	bl	80011dc <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d908      	bls.n	8002e60 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e077      	b.n	8002f42 <HAL_RCC_OscConfig+0x852>
 8002e52:	bf00      	nop
 8002e54:	58024400 	.word	0x58024400
 8002e58:	fffffc0c 	.word	0xfffffc0c
 8002e5c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e60:	4b3a      	ldr	r3, [pc, #232]	; (8002f4c <HAL_RCC_OscConfig+0x85c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1e9      	bne.n	8002e40 <HAL_RCC_OscConfig+0x750>
 8002e6c:	e068      	b.n	8002f40 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e6e:	4b37      	ldr	r3, [pc, #220]	; (8002f4c <HAL_RCC_OscConfig+0x85c>)
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e74:	4b35      	ldr	r3, [pc, #212]	; (8002f4c <HAL_RCC_OscConfig+0x85c>)
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d031      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f003 0203 	and.w	r2, r3, #3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d12a      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d122      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d11a      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	0a5b      	lsrs	r3, r3, #9
 8002eb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d111      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	0c1b      	lsrs	r3, r3, #16
 8002ec6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ece:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d108      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	0e1b      	lsrs	r3, r3, #24
 8002ed8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d001      	beq.n	8002eea <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e02b      	b.n	8002f42 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002eea:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <HAL_RCC_OscConfig+0x85c>)
 8002eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eee:	08db      	lsrs	r3, r3, #3
 8002ef0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ef4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d01f      	beq.n	8002f40 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002f00:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <HAL_RCC_OscConfig+0x85c>)
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	4a11      	ldr	r2, [pc, #68]	; (8002f4c <HAL_RCC_OscConfig+0x85c>)
 8002f06:	f023 0301 	bic.w	r3, r3, #1
 8002f0a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f0c:	f7fe f966 	bl	80011dc <HAL_GetTick>
 8002f10:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002f12:	bf00      	nop
 8002f14:	f7fe f962 	bl	80011dc <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d0f9      	beq.n	8002f14 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f20:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <HAL_RCC_OscConfig+0x85c>)
 8002f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f24:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <HAL_RCC_OscConfig+0x860>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f2c:	00d2      	lsls	r2, r2, #3
 8002f2e:	4907      	ldr	r1, [pc, #28]	; (8002f4c <HAL_RCC_OscConfig+0x85c>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002f34:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <HAL_RCC_OscConfig+0x85c>)
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	4a04      	ldr	r2, [pc, #16]	; (8002f4c <HAL_RCC_OscConfig+0x85c>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3730      	adds	r7, #48	; 0x30
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	58024400 	.word	0x58024400
 8002f50:	ffff0007 	.word	0xffff0007

08002f54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e19c      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f68:	4b8a      	ldr	r3, [pc, #552]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d910      	bls.n	8002f98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b87      	ldr	r3, [pc, #540]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 020f 	bic.w	r2, r3, #15
 8002f7e:	4985      	ldr	r1, [pc, #532]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b83      	ldr	r3, [pc, #524]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e184      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d010      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	4b7b      	ldr	r3, [pc, #492]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d908      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fb4:	4b78      	ldr	r3, [pc, #480]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	4975      	ldr	r1, [pc, #468]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d010      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	4b70      	ldr	r3, [pc, #448]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d908      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fe2:	4b6d      	ldr	r3, [pc, #436]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	496a      	ldr	r1, [pc, #424]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d010      	beq.n	8003022 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699a      	ldr	r2, [r3, #24]
 8003004:	4b64      	ldr	r3, [pc, #400]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800300c:	429a      	cmp	r2, r3
 800300e:	d908      	bls.n	8003022 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003010:	4b61      	ldr	r3, [pc, #388]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	495e      	ldr	r1, [pc, #376]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 800301e:	4313      	orrs	r3, r2
 8003020:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	d010      	beq.n	8003050 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69da      	ldr	r2, [r3, #28]
 8003032:	4b59      	ldr	r3, [pc, #356]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800303a:	429a      	cmp	r2, r3
 800303c:	d908      	bls.n	8003050 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800303e:	4b56      	ldr	r3, [pc, #344]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	4953      	ldr	r1, [pc, #332]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 800304c:	4313      	orrs	r3, r2
 800304e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d010      	beq.n	800307e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	4b4d      	ldr	r3, [pc, #308]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	429a      	cmp	r2, r3
 800306a:	d908      	bls.n	800307e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306c:	4b4a      	ldr	r3, [pc, #296]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	f023 020f 	bic.w	r2, r3, #15
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4947      	ldr	r1, [pc, #284]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 800307a:	4313      	orrs	r3, r2
 800307c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d055      	beq.n	8003136 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800308a:	4b43      	ldr	r3, [pc, #268]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	4940      	ldr	r1, [pc, #256]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003098:	4313      	orrs	r3, r2
 800309a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d107      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030a4:	4b3c      	ldr	r3, [pc, #240]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d121      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0f6      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d107      	bne.n	80030cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030bc:	4b36      	ldr	r3, [pc, #216]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d115      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0ea      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d107      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030d4:	4b30      	ldr	r3, [pc, #192]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d109      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0de      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030e4:	4b2c      	ldr	r3, [pc, #176]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0d6      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030f4:	4b28      	ldr	r3, [pc, #160]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	f023 0207 	bic.w	r2, r3, #7
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4925      	ldr	r1, [pc, #148]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003102:	4313      	orrs	r3, r2
 8003104:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003106:	f7fe f869 	bl	80011dc <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310c:	e00a      	b.n	8003124 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310e:	f7fe f865 	bl	80011dc <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	f241 3288 	movw	r2, #5000	; 0x1388
 800311c:	4293      	cmp	r3, r2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e0be      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003124:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	429a      	cmp	r2, r3
 8003134:	d1eb      	bne.n	800310e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d010      	beq.n	8003164 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	4b14      	ldr	r3, [pc, #80]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	429a      	cmp	r2, r3
 8003150:	d208      	bcs.n	8003164 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003152:	4b11      	ldr	r3, [pc, #68]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f023 020f 	bic.w	r2, r3, #15
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	490e      	ldr	r1, [pc, #56]	; (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003160:	4313      	orrs	r3, r2
 8003162:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003164:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d214      	bcs.n	800319c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b08      	ldr	r3, [pc, #32]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 020f 	bic.w	r2, r3, #15
 800317a:	4906      	ldr	r1, [pc, #24]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b04      	ldr	r3, [pc, #16]	; (8003194 <HAL_RCC_ClockConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d005      	beq.n	800319c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e086      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
 8003194:	52002000 	.word	0x52002000
 8003198:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d010      	beq.n	80031ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	4b3f      	ldr	r3, [pc, #252]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d208      	bcs.n	80031ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031b8:	4b3c      	ldr	r3, [pc, #240]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	4939      	ldr	r1, [pc, #228]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d010      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	4b34      	ldr	r3, [pc, #208]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d208      	bcs.n	80031f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031e6:	4b31      	ldr	r3, [pc, #196]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	492e      	ldr	r1, [pc, #184]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b00      	cmp	r3, #0
 8003202:	d010      	beq.n	8003226 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699a      	ldr	r2, [r3, #24]
 8003208:	4b28      	ldr	r3, [pc, #160]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003210:	429a      	cmp	r2, r3
 8003212:	d208      	bcs.n	8003226 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003214:	4b25      	ldr	r3, [pc, #148]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	4922      	ldr	r1, [pc, #136]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003222:	4313      	orrs	r3, r2
 8003224:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	d010      	beq.n	8003254 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69da      	ldr	r2, [r3, #28]
 8003236:	4b1d      	ldr	r3, [pc, #116]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800323e:	429a      	cmp	r2, r3
 8003240:	d208      	bcs.n	8003254 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003242:	4b1a      	ldr	r3, [pc, #104]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	4917      	ldr	r1, [pc, #92]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003250:	4313      	orrs	r3, r2
 8003252:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003254:	f000 f834 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 8003258:	4602      	mov	r2, r0
 800325a:	4b14      	ldr	r3, [pc, #80]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	0a1b      	lsrs	r3, r3, #8
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	4912      	ldr	r1, [pc, #72]	; (80032b0 <HAL_RCC_ClockConfig+0x35c>)
 8003266:	5ccb      	ldrb	r3, [r1, r3]
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
 8003270:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003272:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	4a0d      	ldr	r2, [pc, #52]	; (80032b0 <HAL_RCC_ClockConfig+0x35c>)
 800327c:	5cd3      	ldrb	r3, [r2, r3]
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
 8003288:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <HAL_RCC_ClockConfig+0x360>)
 800328a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800328c:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <HAL_RCC_ClockConfig+0x364>)
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003292:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <HAL_RCC_ClockConfig+0x368>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd ff56 	bl	8001148 <HAL_InitTick>
 800329c:	4603      	mov	r3, r0
 800329e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	58024400 	.word	0x58024400
 80032b0:	0800ace0 	.word	0x0800ace0
 80032b4:	24000004 	.word	0x24000004
 80032b8:	24000000 	.word	0x24000000
 80032bc:	24000008 	.word	0x24000008

080032c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b089      	sub	sp, #36	; 0x24
 80032c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c6:	4bb3      	ldr	r3, [pc, #716]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032ce:	2b18      	cmp	r3, #24
 80032d0:	f200 8155 	bhi.w	800357e <HAL_RCC_GetSysClockFreq+0x2be>
 80032d4:	a201      	add	r2, pc, #4	; (adr r2, 80032dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80032d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032da:	bf00      	nop
 80032dc:	08003341 	.word	0x08003341
 80032e0:	0800357f 	.word	0x0800357f
 80032e4:	0800357f 	.word	0x0800357f
 80032e8:	0800357f 	.word	0x0800357f
 80032ec:	0800357f 	.word	0x0800357f
 80032f0:	0800357f 	.word	0x0800357f
 80032f4:	0800357f 	.word	0x0800357f
 80032f8:	0800357f 	.word	0x0800357f
 80032fc:	08003367 	.word	0x08003367
 8003300:	0800357f 	.word	0x0800357f
 8003304:	0800357f 	.word	0x0800357f
 8003308:	0800357f 	.word	0x0800357f
 800330c:	0800357f 	.word	0x0800357f
 8003310:	0800357f 	.word	0x0800357f
 8003314:	0800357f 	.word	0x0800357f
 8003318:	0800357f 	.word	0x0800357f
 800331c:	0800336d 	.word	0x0800336d
 8003320:	0800357f 	.word	0x0800357f
 8003324:	0800357f 	.word	0x0800357f
 8003328:	0800357f 	.word	0x0800357f
 800332c:	0800357f 	.word	0x0800357f
 8003330:	0800357f 	.word	0x0800357f
 8003334:	0800357f 	.word	0x0800357f
 8003338:	0800357f 	.word	0x0800357f
 800333c:	08003373 	.word	0x08003373
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003340:	4b94      	ldr	r3, [pc, #592]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	2b00      	cmp	r3, #0
 800334a:	d009      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800334c:	4b91      	ldr	r3, [pc, #580]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	08db      	lsrs	r3, r3, #3
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	4a90      	ldr	r2, [pc, #576]	; (8003598 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
 800335c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800335e:	e111      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003360:	4b8d      	ldr	r3, [pc, #564]	; (8003598 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003362:	61bb      	str	r3, [r7, #24]
      break;
 8003364:	e10e      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003366:	4b8d      	ldr	r3, [pc, #564]	; (800359c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003368:	61bb      	str	r3, [r7, #24]
      break;
 800336a:	e10b      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800336c:	4b8c      	ldr	r3, [pc, #560]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800336e:	61bb      	str	r3, [r7, #24]
      break;
 8003370:	e108      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003372:	4b88      	ldr	r3, [pc, #544]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800337c:	4b85      	ldr	r3, [pc, #532]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003386:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003388:	4b82      	ldr	r3, [pc, #520]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003392:	4b80      	ldr	r3, [pc, #512]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003396:	08db      	lsrs	r3, r3, #3
 8003398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80e1 	beq.w	8003578 <HAL_RCC_GetSysClockFreq+0x2b8>
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	f000 8083 	beq.w	80034c4 <HAL_RCC_GetSysClockFreq+0x204>
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	f200 80a1 	bhi.w	8003508 <HAL_RCC_GetSysClockFreq+0x248>
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0x114>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d056      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0x1c0>
 80033d2:	e099      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033d4:	4b6f      	ldr	r3, [pc, #444]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d02d      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033e0:	4b6c      	ldr	r3, [pc, #432]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	08db      	lsrs	r3, r3, #3
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	4a6b      	ldr	r2, [pc, #428]	; (8003598 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
 80033f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	ee07 3a90 	vmov	s15, r3
 80033f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800340a:	4b62      	ldr	r3, [pc, #392]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800341a:	ed97 6a02 	vldr	s12, [r7, #8]
 800341e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800342a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800342e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003436:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800343a:	e087      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003446:	eddf 6a58 	vldr	s13, [pc, #352]	; 80035a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800344a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800344e:	4b51      	ldr	r3, [pc, #324]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800345e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003462:	eddf 5a50 	vldr	s11, [pc, #320]	; 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800346a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800346e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800347e:	e065      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80035ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800348e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003492:	4b40      	ldr	r3, [pc, #256]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034c2:	e043      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80035b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80034d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034d6:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003502:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003506:	e021      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	ee07 3a90 	vmov	s15, r3
 800350e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003512:	eddf 6a26 	vldr	s13, [pc, #152]	; 80035ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8003516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800351a:	4b1e      	ldr	r3, [pc, #120]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003522:	ee07 3a90 	vmov	s15, r3
 8003526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800352a:	ed97 6a02 	vldr	s12, [r7, #8]
 800352e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800353a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800353e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003546:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800354a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800354c:	4b11      	ldr	r3, [pc, #68]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	0a5b      	lsrs	r3, r3, #9
 8003552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003556:	3301      	adds	r3, #1
 8003558:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	ee07 3a90 	vmov	s15, r3
 8003560:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003564:	edd7 6a07 	vldr	s13, [r7, #28]
 8003568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800356c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003570:	ee17 3a90 	vmov	r3, s15
 8003574:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003576:	e005      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	61bb      	str	r3, [r7, #24]
      break;
 800357c:	e002      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800357e:	4b07      	ldr	r3, [pc, #28]	; (800359c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003580:	61bb      	str	r3, [r7, #24]
      break;
 8003582:	bf00      	nop
  }

  return sysclockfreq;
 8003584:	69bb      	ldr	r3, [r7, #24]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3724      	adds	r7, #36	; 0x24
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	58024400 	.word	0x58024400
 8003598:	03d09000 	.word	0x03d09000
 800359c:	003d0900 	.word	0x003d0900
 80035a0:	007a1200 	.word	0x007a1200
 80035a4:	46000000 	.word	0x46000000
 80035a8:	4c742400 	.word	0x4c742400
 80035ac:	4a742400 	.word	0x4a742400
 80035b0:	4af42400 	.word	0x4af42400

080035b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80035ba:	f7ff fe81 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 80035be:	4602      	mov	r2, r0
 80035c0:	4b10      	ldr	r3, [pc, #64]	; (8003604 <HAL_RCC_GetHCLKFreq+0x50>)
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	490f      	ldr	r1, [pc, #60]	; (8003608 <HAL_RCC_GetHCLKFreq+0x54>)
 80035cc:	5ccb      	ldrb	r3, [r1, r3]
 80035ce:	f003 031f 	and.w	r3, r3, #31
 80035d2:	fa22 f303 	lsr.w	r3, r2, r3
 80035d6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80035d8:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <HAL_RCC_GetHCLKFreq+0x50>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f003 030f 	and.w	r3, r3, #15
 80035e0:	4a09      	ldr	r2, [pc, #36]	; (8003608 <HAL_RCC_GetHCLKFreq+0x54>)
 80035e2:	5cd3      	ldrb	r3, [r2, r3]
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	fa22 f303 	lsr.w	r3, r2, r3
 80035ee:	4a07      	ldr	r2, [pc, #28]	; (800360c <HAL_RCC_GetHCLKFreq+0x58>)
 80035f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035f2:	4a07      	ldr	r2, [pc, #28]	; (8003610 <HAL_RCC_GetHCLKFreq+0x5c>)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <HAL_RCC_GetHCLKFreq+0x58>)
 80035fa:	681b      	ldr	r3, [r3, #0]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	58024400 	.word	0x58024400
 8003608:	0800ace0 	.word	0x0800ace0
 800360c:	24000004 	.word	0x24000004
 8003610:	24000000 	.word	0x24000000

08003614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003618:	f7ff ffcc 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 800361c:	4602      	mov	r2, r0
 800361e:	4b06      	ldr	r3, [pc, #24]	; (8003638 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	4904      	ldr	r1, [pc, #16]	; (800363c <HAL_RCC_GetPCLK1Freq+0x28>)
 800362a:	5ccb      	ldrb	r3, [r1, r3]
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	58024400 	.word	0x58024400
 800363c:	0800ace0 	.word	0x0800ace0

08003640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003644:	f7ff ffb6 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b06      	ldr	r3, [pc, #24]	; (8003664 <HAL_RCC_GetPCLK2Freq+0x24>)
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	4904      	ldr	r1, [pc, #16]	; (8003668 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003660:	4618      	mov	r0, r3
 8003662:	bd80      	pop	{r7, pc}
 8003664:	58024400 	.word	0x58024400
 8003668:	0800ace0 	.word	0x0800ace0

0800366c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800366c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003670:	b0c8      	sub	sp, #288	; 0x120
 8003672:	af00      	add	r7, sp, #0
 8003674:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003678:	2300      	movs	r3, #0
 800367a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800367e:	2300      	movs	r3, #0
 8003680:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003690:	2500      	movs	r5, #0
 8003692:	ea54 0305 	orrs.w	r3, r4, r5
 8003696:	d049      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003698:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800369c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800369e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036a2:	d02f      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80036a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036a8:	d828      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80036aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036ae:	d01a      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80036b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036b4:	d822      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80036ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036be:	d007      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036c0:	e01c      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c2:	4ba7      	ldr	r3, [pc, #668]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	4aa6      	ldr	r2, [pc, #664]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036ce:	e01a      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d4:	3308      	adds	r3, #8
 80036d6:	2102      	movs	r1, #2
 80036d8:	4618      	mov	r0, r3
 80036da:	f002 fa6d 	bl	8005bb8 <RCCEx_PLL2_Config>
 80036de:	4603      	mov	r3, r0
 80036e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036e4:	e00f      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ea:	3328      	adds	r3, #40	; 0x28
 80036ec:	2102      	movs	r1, #2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f002 fb14 	bl	8005d1c <RCCEx_PLL3_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036fa:	e004      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003702:	e000      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003706:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10a      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800370e:	4b94      	ldr	r3, [pc, #592]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003712:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003716:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800371a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800371c:	4a90      	ldr	r2, [pc, #576]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800371e:	430b      	orrs	r3, r1
 8003720:	6513      	str	r3, [r2, #80]	; 0x50
 8003722:	e003      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003724:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003728:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800372c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003734:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003738:	f04f 0900 	mov.w	r9, #0
 800373c:	ea58 0309 	orrs.w	r3, r8, r9
 8003740:	d047      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003748:	2b04      	cmp	r3, #4
 800374a:	d82a      	bhi.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800374c:	a201      	add	r2, pc, #4	; (adr r2, 8003754 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800374e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003752:	bf00      	nop
 8003754:	08003769 	.word	0x08003769
 8003758:	08003777 	.word	0x08003777
 800375c:	0800378d 	.word	0x0800378d
 8003760:	080037ab 	.word	0x080037ab
 8003764:	080037ab 	.word	0x080037ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003768:	4b7d      	ldr	r3, [pc, #500]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	4a7c      	ldr	r2, [pc, #496]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800376e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003772:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003774:	e01a      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800377a:	3308      	adds	r3, #8
 800377c:	2100      	movs	r1, #0
 800377e:	4618      	mov	r0, r3
 8003780:	f002 fa1a 	bl	8005bb8 <RCCEx_PLL2_Config>
 8003784:	4603      	mov	r3, r0
 8003786:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800378a:	e00f      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800378c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003790:	3328      	adds	r3, #40	; 0x28
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f002 fac1 	bl	8005d1c <RCCEx_PLL3_Config>
 800379a:	4603      	mov	r3, r0
 800379c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037a0:	e004      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80037a8:	e000      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80037aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037b4:	4b6a      	ldr	r3, [pc, #424]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b8:	f023 0107 	bic.w	r1, r3, #7
 80037bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	4a67      	ldr	r2, [pc, #412]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037c4:	430b      	orrs	r3, r1
 80037c6:	6513      	str	r3, [r2, #80]	; 0x50
 80037c8:	e003      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80037d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037da:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80037de:	f04f 0b00 	mov.w	fp, #0
 80037e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80037e6:	d054      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80037e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80037f2:	d036      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80037f4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80037f8:	d82f      	bhi.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80037fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037fe:	d032      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003804:	d829      	bhi.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003806:	2bc0      	cmp	r3, #192	; 0xc0
 8003808:	d02f      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800380a:	2bc0      	cmp	r3, #192	; 0xc0
 800380c:	d825      	bhi.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800380e:	2b80      	cmp	r3, #128	; 0x80
 8003810:	d018      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003812:	2b80      	cmp	r3, #128	; 0x80
 8003814:	d821      	bhi.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800381a:	2b40      	cmp	r3, #64	; 0x40
 800381c:	d007      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800381e:	e01c      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003820:	4b4f      	ldr	r3, [pc, #316]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	4a4e      	ldr	r2, [pc, #312]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800382a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800382c:	e01e      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800382e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003832:	3308      	adds	r3, #8
 8003834:	2100      	movs	r1, #0
 8003836:	4618      	mov	r0, r3
 8003838:	f002 f9be 	bl	8005bb8 <RCCEx_PLL2_Config>
 800383c:	4603      	mov	r3, r0
 800383e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003842:	e013      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003848:	3328      	adds	r3, #40	; 0x28
 800384a:	2100      	movs	r1, #0
 800384c:	4618      	mov	r0, r3
 800384e:	f002 fa65 	bl	8005d1c <RCCEx_PLL3_Config>
 8003852:	4603      	mov	r3, r0
 8003854:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003858:	e008      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003860:	e004      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003862:	bf00      	nop
 8003864:	e002      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003866:	bf00      	nop
 8003868:	e000      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800386a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800386c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10a      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003874:	4b3a      	ldr	r3, [pc, #232]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003878:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800387c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003882:	4a37      	ldr	r2, [pc, #220]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003884:	430b      	orrs	r3, r1
 8003886:	6513      	str	r3, [r2, #80]	; 0x50
 8003888:	e003      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800388e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003892:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800389e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80038a2:	2300      	movs	r3, #0
 80038a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80038ac:	460b      	mov	r3, r1
 80038ae:	4313      	orrs	r3, r2
 80038b0:	d05c      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80038b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80038bc:	d03b      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80038be:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80038c2:	d834      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80038c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c8:	d037      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80038ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ce:	d82e      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80038d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80038d4:	d033      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80038d6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80038da:	d828      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80038dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e0:	d01a      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80038e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e6:	d822      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80038ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f0:	d007      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80038f2:	e01c      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038f4:	4b1a      	ldr	r3, [pc, #104]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f8:	4a19      	ldr	r2, [pc, #100]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003900:	e01e      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003906:	3308      	adds	r3, #8
 8003908:	2100      	movs	r1, #0
 800390a:	4618      	mov	r0, r3
 800390c:	f002 f954 	bl	8005bb8 <RCCEx_PLL2_Config>
 8003910:	4603      	mov	r3, r0
 8003912:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003916:	e013      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800391c:	3328      	adds	r3, #40	; 0x28
 800391e:	2100      	movs	r1, #0
 8003920:	4618      	mov	r0, r3
 8003922:	f002 f9fb 	bl	8005d1c <RCCEx_PLL3_Config>
 8003926:	4603      	mov	r3, r0
 8003928:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800392c:	e008      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003934:	e004      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003936:	bf00      	nop
 8003938:	e002      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800393a:	bf00      	nop
 800393c:	e000      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800393e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003940:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10d      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003948:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800394a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800394c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003956:	4a02      	ldr	r2, [pc, #8]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003958:	430b      	orrs	r3, r1
 800395a:	6513      	str	r3, [r2, #80]	; 0x50
 800395c:	e006      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800395e:	bf00      	nop
 8003960:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003964:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003968:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800396c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003974:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003978:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800397c:	2300      	movs	r3, #0
 800397e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003982:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003986:	460b      	mov	r3, r1
 8003988:	4313      	orrs	r3, r2
 800398a:	d03a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800398c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003992:	2b30      	cmp	r3, #48	; 0x30
 8003994:	d01f      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003996:	2b30      	cmp	r3, #48	; 0x30
 8003998:	d819      	bhi.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x362>
 800399a:	2b20      	cmp	r3, #32
 800399c:	d00c      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d815      	bhi.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x362>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d019      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80039a6:	2b10      	cmp	r3, #16
 80039a8:	d111      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039aa:	4bae      	ldr	r3, [pc, #696]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	4aad      	ldr	r2, [pc, #692]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80039b6:	e011      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039bc:	3308      	adds	r3, #8
 80039be:	2102      	movs	r1, #2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f002 f8f9 	bl	8005bb8 <RCCEx_PLL2_Config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80039cc:	e006      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80039d4:	e002      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80039d6:	bf00      	nop
 80039d8:	e000      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80039da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10a      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80039e4:	4b9f      	ldr	r3, [pc, #636]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80039ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f2:	4a9c      	ldr	r2, [pc, #624]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039f4:	430b      	orrs	r3, r1
 80039f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039f8:	e003      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003a0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003a12:	2300      	movs	r3, #0
 8003a14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003a18:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	d051      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a2c:	d035      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003a2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a32:	d82e      	bhi.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003a34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a38:	d031      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003a3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a3e:	d828      	bhi.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a44:	d01a      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a4a:	d822      	bhi.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a54:	d007      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003a56:	e01c      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a58:	4b82      	ldr	r3, [pc, #520]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	4a81      	ldr	r2, [pc, #516]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a64:	e01c      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f002 f8a2 	bl	8005bb8 <RCCEx_PLL2_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a7a:	e011      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a80:	3328      	adds	r3, #40	; 0x28
 8003a82:	2100      	movs	r1, #0
 8003a84:	4618      	mov	r0, r3
 8003a86:	f002 f949 	bl	8005d1c <RCCEx_PLL3_Config>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a90:	e006      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a98:	e002      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003a9a:	bf00      	nop
 8003a9c:	e000      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10a      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003aa8:	4b6e      	ldr	r3, [pc, #440]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aac:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ab6:	4a6b      	ldr	r2, [pc, #428]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	6513      	str	r3, [r2, #80]	; 0x50
 8003abc:	e003      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003abe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ac2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ace:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003ad2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003adc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	d053      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003af0:	d033      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003af2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003af6:	d82c      	bhi.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003af8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003afc:	d02f      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003afe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b02:	d826      	bhi.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003b04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b08:	d02b      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003b0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b0e:	d820      	bhi.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003b10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b14:	d012      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003b16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b1a:	d81a      	bhi.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d022      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b24:	d115      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f002 f842 	bl	8005bb8 <RCCEx_PLL2_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b3a:	e015      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b40:	3328      	adds	r3, #40	; 0x28
 8003b42:	2101      	movs	r1, #1
 8003b44:	4618      	mov	r0, r3
 8003b46:	f002 f8e9 	bl	8005d1c <RCCEx_PLL3_Config>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b50:	e00a      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b58:	e006      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003b5a:	bf00      	nop
 8003b5c:	e004      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003b5e:	bf00      	nop
 8003b60:	e002      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003b62:	bf00      	nop
 8003b64:	e000      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003b66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b70:	4b3c      	ldr	r3, [pc, #240]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b74:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003b78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b7e:	4a39      	ldr	r2, [pc, #228]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b80:	430b      	orrs	r3, r1
 8003b82:	6513      	str	r3, [r2, #80]	; 0x50
 8003b84:	e003      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b86:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b8a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b96:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003b9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ba4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4313      	orrs	r3, r2
 8003bac:	d060      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bb6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003bba:	d039      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003bbc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003bc0:	d832      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bc6:	d035      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bcc:	d82c      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd2:	d031      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd8:	d826      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003bda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bde:	d02d      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003be0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003be4:	d820      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bea:	d012      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bf0:	d81a      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d024      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003bf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bfa:	d115      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c00:	3308      	adds	r3, #8
 8003c02:	2101      	movs	r1, #1
 8003c04:	4618      	mov	r0, r3
 8003c06:	f001 ffd7 	bl	8005bb8 <RCCEx_PLL2_Config>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c10:	e017      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c16:	3328      	adds	r3, #40	; 0x28
 8003c18:	2101      	movs	r1, #1
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f002 f87e 	bl	8005d1c <RCCEx_PLL3_Config>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c26:	e00c      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c2e:	e008      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c30:	bf00      	nop
 8003c32:	e006      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c34:	bf00      	nop
 8003c36:	e004      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c38:	bf00      	nop
 8003c3a:	e002      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c3c:	bf00      	nop
 8003c3e:	e000      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10e      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c4a:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c5a:	4a02      	ldr	r2, [pc, #8]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c60:	e006      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003c62:	bf00      	nop
 8003c64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003c7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c80:	2300      	movs	r3, #0
 8003c82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003c86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	d037      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c9a:	d00e      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003c9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ca0:	d816      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d018      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003ca6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003caa:	d111      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cac:	4bc4      	ldr	r3, [pc, #784]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	4ac3      	ldr	r2, [pc, #780]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cb8:	e00f      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cbe:	3308      	adds	r3, #8
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f001 ff78 	bl	8005bb8 <RCCEx_PLL2_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cce:	e004      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003cd6:	e000      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10a      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ce2:	4bb7      	ldr	r3, [pc, #732]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cf0:	4ab3      	ldr	r2, [pc, #716]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cf2:	430b      	orrs	r3, r1
 8003cf4:	6513      	str	r3, [r2, #80]	; 0x50
 8003cf6:	e003      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cfc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d08:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d10:	2300      	movs	r3, #0
 8003d12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003d16:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	d039      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d81c      	bhi.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003d2a:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d30:	08003d6d 	.word	0x08003d6d
 8003d34:	08003d41 	.word	0x08003d41
 8003d38:	08003d4f 	.word	0x08003d4f
 8003d3c:	08003d6d 	.word	0x08003d6d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d40:	4b9f      	ldr	r3, [pc, #636]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	4a9e      	ldr	r2, [pc, #632]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d4c:	e00f      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d52:	3308      	adds	r3, #8
 8003d54:	2102      	movs	r1, #2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f001 ff2e 	bl	8005bb8 <RCCEx_PLL2_Config>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d62:	e004      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d6a:	e000      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d6e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10a      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d76:	4b92      	ldr	r3, [pc, #584]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7a:	f023 0103 	bic.w	r1, r3, #3
 8003d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d84:	4a8e      	ldr	r2, [pc, #568]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d86:	430b      	orrs	r3, r1
 8003d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d8a:	e003      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d90:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003da0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003da4:	2300      	movs	r3, #0
 8003da6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003daa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003dae:	460b      	mov	r3, r1
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f000 8099 	beq.w	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003db6:	4b83      	ldr	r3, [pc, #524]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a82      	ldr	r2, [pc, #520]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dc2:	f7fd fa0b 	bl	80011dc <HAL_GetTick>
 8003dc6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dca:	e00b      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dcc:	f7fd fa06 	bl	80011dc <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b64      	cmp	r3, #100	; 0x64
 8003dda:	d903      	bls.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003de2:	e005      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003de4:	4b77      	ldr	r3, [pc, #476]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0ed      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003df0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d173      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003df8:	4b71      	ldr	r3, [pc, #452]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e04:	4053      	eors	r3, r2
 8003e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d015      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e0e:	4b6c      	ldr	r3, [pc, #432]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e16:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e1a:	4b69      	ldr	r3, [pc, #420]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1e:	4a68      	ldr	r2, [pc, #416]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e24:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e26:	4b66      	ldr	r3, [pc, #408]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2a:	4a65      	ldr	r2, [pc, #404]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e30:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e32:	4a63      	ldr	r2, [pc, #396]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e38:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e46:	d118      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7fd f9c8 	bl	80011dc <HAL_GetTick>
 8003e4c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e50:	e00d      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e52:	f7fd f9c3 	bl	80011dc <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e5c:	1ad2      	subs	r2, r2, r3
 8003e5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d903      	bls.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003e6c:	e005      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e6e:	4b54      	ldr	r3, [pc, #336]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0eb      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003e7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d129      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e92:	d10e      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003e94:	4b4a      	ldr	r3, [pc, #296]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ea4:	091a      	lsrs	r2, r3, #4
 8003ea6:	4b48      	ldr	r3, [pc, #288]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	4a45      	ldr	r2, [pc, #276]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003eac:	430b      	orrs	r3, r1
 8003eae:	6113      	str	r3, [r2, #16]
 8003eb0:	e005      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003eb2:	4b43      	ldr	r3, [pc, #268]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	4a42      	ldr	r2, [pc, #264]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003eb8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ebc:	6113      	str	r3, [r2, #16]
 8003ebe:	4b40      	ldr	r3, [pc, #256]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ec0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ec6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ece:	4a3c      	ldr	r2, [pc, #240]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ed6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003eda:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003ede:	e003      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ee4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	f002 0301 	and.w	r3, r2, #1
 8003ef4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003efe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f000 8090 	beq.w	800402a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f12:	2b28      	cmp	r3, #40	; 0x28
 8003f14:	d870      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003f16:	a201      	add	r2, pc, #4	; (adr r2, 8003f1c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1c:	08004001 	.word	0x08004001
 8003f20:	08003ff9 	.word	0x08003ff9
 8003f24:	08003ff9 	.word	0x08003ff9
 8003f28:	08003ff9 	.word	0x08003ff9
 8003f2c:	08003ff9 	.word	0x08003ff9
 8003f30:	08003ff9 	.word	0x08003ff9
 8003f34:	08003ff9 	.word	0x08003ff9
 8003f38:	08003ff9 	.word	0x08003ff9
 8003f3c:	08003fcd 	.word	0x08003fcd
 8003f40:	08003ff9 	.word	0x08003ff9
 8003f44:	08003ff9 	.word	0x08003ff9
 8003f48:	08003ff9 	.word	0x08003ff9
 8003f4c:	08003ff9 	.word	0x08003ff9
 8003f50:	08003ff9 	.word	0x08003ff9
 8003f54:	08003ff9 	.word	0x08003ff9
 8003f58:	08003ff9 	.word	0x08003ff9
 8003f5c:	08003fe3 	.word	0x08003fe3
 8003f60:	08003ff9 	.word	0x08003ff9
 8003f64:	08003ff9 	.word	0x08003ff9
 8003f68:	08003ff9 	.word	0x08003ff9
 8003f6c:	08003ff9 	.word	0x08003ff9
 8003f70:	08003ff9 	.word	0x08003ff9
 8003f74:	08003ff9 	.word	0x08003ff9
 8003f78:	08003ff9 	.word	0x08003ff9
 8003f7c:	08004001 	.word	0x08004001
 8003f80:	08003ff9 	.word	0x08003ff9
 8003f84:	08003ff9 	.word	0x08003ff9
 8003f88:	08003ff9 	.word	0x08003ff9
 8003f8c:	08003ff9 	.word	0x08003ff9
 8003f90:	08003ff9 	.word	0x08003ff9
 8003f94:	08003ff9 	.word	0x08003ff9
 8003f98:	08003ff9 	.word	0x08003ff9
 8003f9c:	08004001 	.word	0x08004001
 8003fa0:	08003ff9 	.word	0x08003ff9
 8003fa4:	08003ff9 	.word	0x08003ff9
 8003fa8:	08003ff9 	.word	0x08003ff9
 8003fac:	08003ff9 	.word	0x08003ff9
 8003fb0:	08003ff9 	.word	0x08003ff9
 8003fb4:	08003ff9 	.word	0x08003ff9
 8003fb8:	08003ff9 	.word	0x08003ff9
 8003fbc:	08004001 	.word	0x08004001
 8003fc0:	58024400 	.word	0x58024400
 8003fc4:	58024800 	.word	0x58024800
 8003fc8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f001 fdef 	bl	8005bb8 <RCCEx_PLL2_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fe0:	e00f      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fe6:	3328      	adds	r3, #40	; 0x28
 8003fe8:	2101      	movs	r1, #1
 8003fea:	4618      	mov	r0, r3
 8003fec:	f001 fe96 	bl	8005d1c <RCCEx_PLL3_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ff6:	e004      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ffe:	e000      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004002:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10b      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800400a:	4bc0      	ldr	r3, [pc, #768]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800400c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800401a:	4abc      	ldr	r2, [pc, #752]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800401c:	430b      	orrs	r3, r1
 800401e:	6553      	str	r3, [r2, #84]	; 0x54
 8004020:	e003      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004022:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004026:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800402a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004032:	f002 0302 	and.w	r3, r2, #2
 8004036:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800403a:	2300      	movs	r3, #0
 800403c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004040:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004044:	460b      	mov	r3, r1
 8004046:	4313      	orrs	r3, r2
 8004048:	d043      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800404a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800404e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004052:	2b05      	cmp	r3, #5
 8004054:	d824      	bhi.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8004056:	a201      	add	r2, pc, #4	; (adr r2, 800405c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405c:	080040a9 	.word	0x080040a9
 8004060:	08004075 	.word	0x08004075
 8004064:	0800408b 	.word	0x0800408b
 8004068:	080040a9 	.word	0x080040a9
 800406c:	080040a9 	.word	0x080040a9
 8004070:	080040a9 	.word	0x080040a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004074:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004078:	3308      	adds	r3, #8
 800407a:	2101      	movs	r1, #1
 800407c:	4618      	mov	r0, r3
 800407e:	f001 fd9b 	bl	8005bb8 <RCCEx_PLL2_Config>
 8004082:	4603      	mov	r3, r0
 8004084:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004088:	e00f      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800408a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800408e:	3328      	adds	r3, #40	; 0x28
 8004090:	2101      	movs	r1, #1
 8004092:	4618      	mov	r0, r3
 8004094:	f001 fe42 	bl	8005d1c <RCCEx_PLL3_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800409e:	e004      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040a6:	e000      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80040a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10b      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040b2:	4b96      	ldr	r3, [pc, #600]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	f023 0107 	bic.w	r1, r3, #7
 80040ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040c2:	4a92      	ldr	r2, [pc, #584]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80040c4:	430b      	orrs	r3, r1
 80040c6:	6553      	str	r3, [r2, #84]	; 0x54
 80040c8:	e003      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040da:	f002 0304 	and.w	r3, r2, #4
 80040de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040e2:	2300      	movs	r3, #0
 80040e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040e8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4313      	orrs	r3, r2
 80040f0:	d043      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80040f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040fa:	2b05      	cmp	r3, #5
 80040fc:	d824      	bhi.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80040fe:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004104:	08004151 	.word	0x08004151
 8004108:	0800411d 	.word	0x0800411d
 800410c:	08004133 	.word	0x08004133
 8004110:	08004151 	.word	0x08004151
 8004114:	08004151 	.word	0x08004151
 8004118:	08004151 	.word	0x08004151
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800411c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004120:	3308      	adds	r3, #8
 8004122:	2101      	movs	r1, #1
 8004124:	4618      	mov	r0, r3
 8004126:	f001 fd47 	bl	8005bb8 <RCCEx_PLL2_Config>
 800412a:	4603      	mov	r3, r0
 800412c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004130:	e00f      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004132:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004136:	3328      	adds	r3, #40	; 0x28
 8004138:	2101      	movs	r1, #1
 800413a:	4618      	mov	r0, r3
 800413c:	f001 fdee 	bl	8005d1c <RCCEx_PLL3_Config>
 8004140:	4603      	mov	r3, r0
 8004142:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004146:	e004      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800414e:	e000      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004152:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10b      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800415a:	4b6c      	ldr	r3, [pc, #432]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800415c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415e:	f023 0107 	bic.w	r1, r3, #7
 8004162:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004166:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800416a:	4a68      	ldr	r2, [pc, #416]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800416c:	430b      	orrs	r3, r1
 800416e:	6593      	str	r3, [r2, #88]	; 0x58
 8004170:	e003      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004172:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004176:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800417a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004182:	f002 0320 	and.w	r3, r2, #32
 8004186:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800418a:	2300      	movs	r3, #0
 800418c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004190:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004194:	460b      	mov	r3, r1
 8004196:	4313      	orrs	r3, r2
 8004198:	d055      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800419a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800419e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041a6:	d033      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80041a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041ac:	d82c      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80041ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b2:	d02f      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80041b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b8:	d826      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80041ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041be:	d02b      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80041c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041c4:	d820      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80041c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ca:	d012      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80041cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041d0:	d81a      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d022      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80041d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041da:	d115      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e0:	3308      	adds	r3, #8
 80041e2:	2100      	movs	r1, #0
 80041e4:	4618      	mov	r0, r3
 80041e6:	f001 fce7 	bl	8005bb8 <RCCEx_PLL2_Config>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041f0:	e015      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f6:	3328      	adds	r3, #40	; 0x28
 80041f8:	2102      	movs	r1, #2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f001 fd8e 	bl	8005d1c <RCCEx_PLL3_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004206:	e00a      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800420e:	e006      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004210:	bf00      	nop
 8004212:	e004      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004214:	bf00      	nop
 8004216:	e002      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004218:	bf00      	nop
 800421a:	e000      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800421c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800421e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10b      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004226:	4b39      	ldr	r3, [pc, #228]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800422e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004232:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004236:	4a35      	ldr	r2, [pc, #212]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004238:	430b      	orrs	r3, r1
 800423a:	6553      	str	r3, [r2, #84]	; 0x54
 800423c:	e003      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004242:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004246:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004256:	2300      	movs	r3, #0
 8004258:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800425c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004260:	460b      	mov	r3, r1
 8004262:	4313      	orrs	r3, r2
 8004264:	d058      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004266:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800426a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800426e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004272:	d033      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004274:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004278:	d82c      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800427a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800427e:	d02f      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004284:	d826      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004286:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800428a:	d02b      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800428c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004290:	d820      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004296:	d012      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800429c:	d81a      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d022      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80042a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a6:	d115      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ac:	3308      	adds	r3, #8
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f001 fc81 	bl	8005bb8 <RCCEx_PLL2_Config>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042bc:	e015      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042c2:	3328      	adds	r3, #40	; 0x28
 80042c4:	2102      	movs	r1, #2
 80042c6:	4618      	mov	r0, r3
 80042c8:	f001 fd28 	bl	8005d1c <RCCEx_PLL3_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042d2:	e00a      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80042da:	e006      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80042dc:	bf00      	nop
 80042de:	e004      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80042e0:	bf00      	nop
 80042e2:	e002      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80042e4:	bf00      	nop
 80042e6:	e000      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80042e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10e      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042f2:	4b06      	ldr	r3, [pc, #24]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80042f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80042fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004302:	4a02      	ldr	r2, [pc, #8]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004304:	430b      	orrs	r3, r1
 8004306:	6593      	str	r3, [r2, #88]	; 0x58
 8004308:	e006      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800430a:	bf00      	nop
 800430c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004310:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004314:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004320:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004328:	2300      	movs	r3, #0
 800432a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800432e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004332:	460b      	mov	r3, r1
 8004334:	4313      	orrs	r3, r2
 8004336:	d055      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004338:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800433c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004340:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004344:	d033      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004346:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800434a:	d82c      	bhi.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800434c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004350:	d02f      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004356:	d826      	bhi.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004358:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800435c:	d02b      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800435e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004362:	d820      	bhi.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004368:	d012      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800436a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800436e:	d81a      	bhi.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004370:	2b00      	cmp	r3, #0
 8004372:	d022      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004378:	d115      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800437a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800437e:	3308      	adds	r3, #8
 8004380:	2100      	movs	r1, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f001 fc18 	bl	8005bb8 <RCCEx_PLL2_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800438e:	e015      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004390:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004394:	3328      	adds	r3, #40	; 0x28
 8004396:	2102      	movs	r1, #2
 8004398:	4618      	mov	r0, r3
 800439a:	f001 fcbf 	bl	8005d1c <RCCEx_PLL3_Config>
 800439e:	4603      	mov	r3, r0
 80043a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043a4:	e00a      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80043ac:	e006      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80043ae:	bf00      	nop
 80043b0:	e004      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80043b2:	bf00      	nop
 80043b4:	e002      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80043b6:	bf00      	nop
 80043b8:	e000      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80043ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10b      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043c4:	4ba1      	ldr	r3, [pc, #644]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80043cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043d4:	4a9d      	ldr	r2, [pc, #628]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043d6:	430b      	orrs	r3, r1
 80043d8:	6593      	str	r3, [r2, #88]	; 0x58
 80043da:	e003      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80043e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f002 0308 	and.w	r3, r2, #8
 80043f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043f4:	2300      	movs	r3, #0
 80043f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043fa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80043fe:	460b      	mov	r3, r1
 8004400:	4313      	orrs	r3, r2
 8004402:	d01e      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800440c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004410:	d10c      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004412:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004416:	3328      	adds	r3, #40	; 0x28
 8004418:	2102      	movs	r1, #2
 800441a:	4618      	mov	r0, r3
 800441c:	f001 fc7e 	bl	8005d1c <RCCEx_PLL3_Config>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800442c:	4b87      	ldr	r3, [pc, #540]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800442e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004430:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800443c:	4a83      	ldr	r2, [pc, #524]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800443e:	430b      	orrs	r3, r1
 8004440:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444a:	f002 0310 	and.w	r3, r2, #16
 800444e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004452:	2300      	movs	r3, #0
 8004454:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004458:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800445c:	460b      	mov	r3, r1
 800445e:	4313      	orrs	r3, r2
 8004460:	d01e      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004466:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800446a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800446e:	d10c      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004470:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004474:	3328      	adds	r3, #40	; 0x28
 8004476:	2102      	movs	r1, #2
 8004478:	4618      	mov	r0, r3
 800447a:	f001 fc4f 	bl	8005d1c <RCCEx_PLL3_Config>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800448a:	4b70      	ldr	r3, [pc, #448]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800448c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004496:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800449a:	4a6c      	ldr	r2, [pc, #432]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800449c:	430b      	orrs	r3, r1
 800449e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80044ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044b0:	2300      	movs	r3, #0
 80044b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044b6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80044ba:	460b      	mov	r3, r1
 80044bc:	4313      	orrs	r3, r2
 80044be:	d03e      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80044c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80044c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044cc:	d022      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80044ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044d2:	d81b      	bhi.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80044d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044dc:	d00b      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80044de:	e015      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044e4:	3308      	adds	r3, #8
 80044e6:	2100      	movs	r1, #0
 80044e8:	4618      	mov	r0, r3
 80044ea:	f001 fb65 	bl	8005bb8 <RCCEx_PLL2_Config>
 80044ee:	4603      	mov	r3, r0
 80044f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044f4:	e00f      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044fa:	3328      	adds	r3, #40	; 0x28
 80044fc:	2102      	movs	r1, #2
 80044fe:	4618      	mov	r0, r3
 8004500:	f001 fc0c 	bl	8005d1c <RCCEx_PLL3_Config>
 8004504:	4603      	mov	r3, r0
 8004506:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800450a:	e004      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004512:	e000      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004516:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10b      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800451e:	4b4b      	ldr	r3, [pc, #300]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004522:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800452a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800452e:	4a47      	ldr	r2, [pc, #284]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004530:	430b      	orrs	r3, r1
 8004532:	6593      	str	r3, [r2, #88]	; 0x58
 8004534:	e003      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004536:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800453a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800453e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004546:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800454a:	67bb      	str	r3, [r7, #120]	; 0x78
 800454c:	2300      	movs	r3, #0
 800454e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004550:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004554:	460b      	mov	r3, r1
 8004556:	4313      	orrs	r3, r2
 8004558:	d03b      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800455a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800455e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004562:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004566:	d01f      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004568:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800456c:	d818      	bhi.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800456e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004572:	d003      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004574:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004578:	d007      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800457a:	e011      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800457c:	4b33      	ldr	r3, [pc, #204]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	4a32      	ldr	r2, [pc, #200]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004586:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004588:	e00f      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800458a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800458e:	3328      	adds	r3, #40	; 0x28
 8004590:	2101      	movs	r1, #1
 8004592:	4618      	mov	r0, r3
 8004594:	f001 fbc2 	bl	8005d1c <RCCEx_PLL3_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800459e:	e004      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80045a6:	e000      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80045a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10b      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045b2:	4b26      	ldr	r3, [pc, #152]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80045ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c2:	4a22      	ldr	r2, [pc, #136]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045c4:	430b      	orrs	r3, r1
 80045c6:	6553      	str	r3, [r2, #84]	; 0x54
 80045c8:	e003      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045da:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80045de:	673b      	str	r3, [r7, #112]	; 0x70
 80045e0:	2300      	movs	r3, #0
 80045e2:	677b      	str	r3, [r7, #116]	; 0x74
 80045e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80045e8:	460b      	mov	r3, r1
 80045ea:	4313      	orrs	r3, r2
 80045ec:	d034      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80045ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80045f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045fc:	d007      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80045fe:	e011      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004600:	4b12      	ldr	r3, [pc, #72]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	4a11      	ldr	r2, [pc, #68]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800460a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800460c:	e00e      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800460e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004612:	3308      	adds	r3, #8
 8004614:	2102      	movs	r1, #2
 8004616:	4618      	mov	r0, r3
 8004618:	f001 face 	bl	8005bb8 <RCCEx_PLL2_Config>
 800461c:	4603      	mov	r3, r0
 800461e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004622:	e003      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800462a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800462c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10d      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004634:	4b05      	ldr	r3, [pc, #20]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004638:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800463c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004642:	4a02      	ldr	r2, [pc, #8]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004644:	430b      	orrs	r3, r1
 8004646:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004648:	e006      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800464a:	bf00      	nop
 800464c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004650:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004654:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004664:	66bb      	str	r3, [r7, #104]	; 0x68
 8004666:	2300      	movs	r3, #0
 8004668:	66fb      	str	r3, [r7, #108]	; 0x6c
 800466a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800466e:	460b      	mov	r3, r1
 8004670:	4313      	orrs	r3, r2
 8004672:	d00c      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004678:	3328      	adds	r3, #40	; 0x28
 800467a:	2102      	movs	r1, #2
 800467c:	4618      	mov	r0, r3
 800467e:	f001 fb4d 	bl	8005d1c <RCCEx_PLL3_Config>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800468e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800469a:	663b      	str	r3, [r7, #96]	; 0x60
 800469c:	2300      	movs	r3, #0
 800469e:	667b      	str	r3, [r7, #100]	; 0x64
 80046a0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80046a4:	460b      	mov	r3, r1
 80046a6:	4313      	orrs	r3, r2
 80046a8:	d038      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80046aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046b6:	d018      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80046b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046bc:	d811      	bhi.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80046be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046c2:	d014      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80046c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046c8:	d80b      	bhi.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d011      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80046ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d2:	d106      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046d4:	4bc3      	ldr	r3, [pc, #780]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	4ac2      	ldr	r2, [pc, #776]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80046e0:	e008      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80046e8:	e004      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80046ea:	bf00      	nop
 80046ec:	e002      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80046ee:	bf00      	nop
 80046f0:	e000      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80046f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10b      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046fc:	4bb9      	ldr	r3, [pc, #740]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004700:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470c:	4ab5      	ldr	r2, [pc, #724]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800470e:	430b      	orrs	r3, r1
 8004710:	6553      	str	r3, [r2, #84]	; 0x54
 8004712:	e003      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004714:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004718:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800471c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004724:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004728:	65bb      	str	r3, [r7, #88]	; 0x58
 800472a:	2300      	movs	r3, #0
 800472c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800472e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004732:	460b      	mov	r3, r1
 8004734:	4313      	orrs	r3, r2
 8004736:	d009      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004738:	4baa      	ldr	r3, [pc, #680]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800473a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004746:	4aa7      	ldr	r2, [pc, #668]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004748:	430b      	orrs	r3, r1
 800474a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800474c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004754:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004758:	653b      	str	r3, [r7, #80]	; 0x50
 800475a:	2300      	movs	r3, #0
 800475c:	657b      	str	r3, [r7, #84]	; 0x54
 800475e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004762:	460b      	mov	r3, r1
 8004764:	4313      	orrs	r3, r2
 8004766:	d009      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004768:	4b9e      	ldr	r3, [pc, #632]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800476a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004770:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004776:	4a9b      	ldr	r2, [pc, #620]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004778:	430b      	orrs	r3, r1
 800477a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800477c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004784:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004788:	64bb      	str	r3, [r7, #72]	; 0x48
 800478a:	2300      	movs	r3, #0
 800478c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800478e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004792:	460b      	mov	r3, r1
 8004794:	4313      	orrs	r3, r2
 8004796:	d009      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004798:	4b92      	ldr	r3, [pc, #584]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80047a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a6:	4a8f      	ldr	r2, [pc, #572]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047a8:	430b      	orrs	r3, r1
 80047aa:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80047ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80047b8:	643b      	str	r3, [r7, #64]	; 0x40
 80047ba:	2300      	movs	r3, #0
 80047bc:	647b      	str	r3, [r7, #68]	; 0x44
 80047be:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80047c2:	460b      	mov	r3, r1
 80047c4:	4313      	orrs	r3, r2
 80047c6:	d00e      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047c8:	4b86      	ldr	r3, [pc, #536]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	4a85      	ldr	r2, [pc, #532]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047d2:	6113      	str	r3, [r2, #16]
 80047d4:	4b83      	ldr	r3, [pc, #524]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047d6:	6919      	ldr	r1, [r3, #16]
 80047d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80047e0:	4a80      	ldr	r2, [pc, #512]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047e2:	430b      	orrs	r3, r1
 80047e4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80047e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80047f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80047f4:	2300      	movs	r3, #0
 80047f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047f8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80047fc:	460b      	mov	r3, r1
 80047fe:	4313      	orrs	r3, r2
 8004800:	d009      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004802:	4b78      	ldr	r3, [pc, #480]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004806:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800480a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800480e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004810:	4a74      	ldr	r2, [pc, #464]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004812:	430b      	orrs	r3, r1
 8004814:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004822:	633b      	str	r3, [r7, #48]	; 0x30
 8004824:	2300      	movs	r3, #0
 8004826:	637b      	str	r3, [r7, #52]	; 0x34
 8004828:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800482c:	460b      	mov	r3, r1
 800482e:	4313      	orrs	r3, r2
 8004830:	d00a      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004832:	4b6c      	ldr	r3, [pc, #432]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004836:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800483a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800483e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004842:	4a68      	ldr	r2, [pc, #416]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004844:	430b      	orrs	r3, r1
 8004846:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004850:	2100      	movs	r1, #0
 8004852:	62b9      	str	r1, [r7, #40]	; 0x28
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800485a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800485e:	460b      	mov	r3, r1
 8004860:	4313      	orrs	r3, r2
 8004862:	d011      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004864:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004868:	3308      	adds	r3, #8
 800486a:	2100      	movs	r1, #0
 800486c:	4618      	mov	r0, r3
 800486e:	f001 f9a3 	bl	8005bb8 <RCCEx_PLL2_Config>
 8004872:	4603      	mov	r3, r0
 8004874:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004878:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004880:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004884:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800488c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004890:	2100      	movs	r1, #0
 8004892:	6239      	str	r1, [r7, #32]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
 800489a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800489e:	460b      	mov	r3, r1
 80048a0:	4313      	orrs	r3, r2
 80048a2:	d011      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048a8:	3308      	adds	r3, #8
 80048aa:	2101      	movs	r1, #1
 80048ac:	4618      	mov	r0, r3
 80048ae:	f001 f983 	bl	8005bb8 <RCCEx_PLL2_Config>
 80048b2:	4603      	mov	r3, r0
 80048b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80048b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80048c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d0:	2100      	movs	r1, #0
 80048d2:	61b9      	str	r1, [r7, #24]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	61fb      	str	r3, [r7, #28]
 80048da:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80048de:	460b      	mov	r3, r1
 80048e0:	4313      	orrs	r3, r2
 80048e2:	d011      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e8:	3308      	adds	r3, #8
 80048ea:	2102      	movs	r1, #2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f001 f963 	bl	8005bb8 <RCCEx_PLL2_Config>
 80048f2:	4603      	mov	r3, r0
 80048f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80048f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004900:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004904:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004908:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	2100      	movs	r1, #0
 8004912:	6139      	str	r1, [r7, #16]
 8004914:	f003 0308 	and.w	r3, r3, #8
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800491e:	460b      	mov	r3, r1
 8004920:	4313      	orrs	r3, r2
 8004922:	d011      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004924:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004928:	3328      	adds	r3, #40	; 0x28
 800492a:	2100      	movs	r1, #0
 800492c:	4618      	mov	r0, r3
 800492e:	f001 f9f5 	bl	8005d1c <RCCEx_PLL3_Config>
 8004932:	4603      	mov	r3, r0
 8004934:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004938:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004940:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004944:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800494c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004950:	2100      	movs	r1, #0
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	60fb      	str	r3, [r7, #12]
 800495a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800495e:	460b      	mov	r3, r1
 8004960:	4313      	orrs	r3, r2
 8004962:	d011      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004964:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004968:	3328      	adds	r3, #40	; 0x28
 800496a:	2101      	movs	r1, #1
 800496c:	4618      	mov	r0, r3
 800496e:	f001 f9d5 	bl	8005d1c <RCCEx_PLL3_Config>
 8004972:	4603      	mov	r3, r0
 8004974:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004978:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004980:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004984:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004988:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	2100      	movs	r1, #0
 8004992:	6039      	str	r1, [r7, #0]
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	607b      	str	r3, [r7, #4]
 800499a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800499e:	460b      	mov	r3, r1
 80049a0:	4313      	orrs	r3, r2
 80049a2:	d011      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a8:	3328      	adds	r3, #40	; 0x28
 80049aa:	2102      	movs	r1, #2
 80049ac:	4618      	mov	r0, r3
 80049ae:	f001 f9b5 	bl	8005d1c <RCCEx_PLL3_Config>
 80049b2:	4603      	mov	r3, r0
 80049b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80049b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80049c8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	e000      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80049dc:	46bd      	mov	sp, r7
 80049de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e2:	bf00      	nop
 80049e4:	58024400 	.word	0x58024400

080049e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b090      	sub	sp, #64	; 0x40
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80049f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049f6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80049fa:	430b      	orrs	r3, r1
 80049fc:	f040 8094 	bne.w	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004a00:	4b97      	ldr	r3, [pc, #604]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	f200 8087 	bhi.w	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004a12:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a18:	08004a2d 	.word	0x08004a2d
 8004a1c:	08004a55 	.word	0x08004a55
 8004a20:	08004a7d 	.word	0x08004a7d
 8004a24:	08004b19 	.word	0x08004b19
 8004a28:	08004aa5 	.word	0x08004aa5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a2c:	4b8c      	ldr	r3, [pc, #560]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a38:	d108      	bne.n	8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 ff68 	bl	8005914 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a48:	f000 bc97 	b.w	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a50:	f000 bc93 	b.w	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a54:	4b82      	ldr	r3, [pc, #520]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a60:	d108      	bne.n	8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a62:	f107 0318 	add.w	r3, r7, #24
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fcac 	bl	80053c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a70:	f000 bc83 	b.w	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004a74:	2300      	movs	r3, #0
 8004a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a78:	f000 bc7f 	b.w	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a7c:	4b78      	ldr	r3, [pc, #480]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a88:	d108      	bne.n	8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a8a:	f107 030c 	add.w	r3, r7, #12
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fdec 	bl	800566c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a98:	f000 bc6f 	b.w	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004aa0:	f000 bc6b 	b.w	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004aa4:	4b6e      	ldr	r3, [pc, #440]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004aac:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004aae:	4b6c      	ldr	r3, [pc, #432]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d109      	bne.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ac0:	4b67      	ldr	r3, [pc, #412]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	08db      	lsrs	r3, r3, #3
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	4a66      	ldr	r2, [pc, #408]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004acc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ad2:	e01f      	b.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ad4:	4b62      	ldr	r3, [pc, #392]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae0:	d106      	bne.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ae8:	d102      	bne.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004aea:	4b5f      	ldr	r3, [pc, #380]	; (8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aee:	e011      	b.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004af0:	4b5b      	ldr	r3, [pc, #364]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004afc:	d106      	bne.n	8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b04:	d102      	bne.n	8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004b06:	4b59      	ldr	r3, [pc, #356]	; (8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004b08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b0a:	e003      	b.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004b10:	f000 bc33 	b.w	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004b14:	f000 bc31 	b.w	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004b18:	4b55      	ldr	r3, [pc, #340]	; (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b1c:	f000 bc2d 	b.w	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8004b20:	2300      	movs	r3, #0
 8004b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b24:	f000 bc29 	b.w	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8004b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b2c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8004b30:	430b      	orrs	r3, r1
 8004b32:	f040 809f 	bne.w	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8004b36:	4b4a      	ldr	r3, [pc, #296]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004b3e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b46:	d04d      	beq.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8004b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b4e:	f200 8084 	bhi.w	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	2bc0      	cmp	r3, #192	; 0xc0
 8004b56:	d07d      	beq.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8004b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5a:	2bc0      	cmp	r3, #192	; 0xc0
 8004b5c:	d87d      	bhi.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	2b80      	cmp	r3, #128	; 0x80
 8004b62:	d02d      	beq.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	2b80      	cmp	r3, #128	; 0x80
 8004b68:	d877      	bhi.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8004b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b72:	2b40      	cmp	r3, #64	; 0x40
 8004b74:	d012      	beq.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8004b76:	e070      	b.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b78:	4b39      	ldr	r3, [pc, #228]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b84:	d107      	bne.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 fec2 	bl	8005914 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b94:	e3f1      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004b96:	2300      	movs	r3, #0
 8004b98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b9a:	e3ee      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b9c:	4b30      	ldr	r3, [pc, #192]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ba8:	d107      	bne.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004baa:	f107 0318 	add.w	r3, r7, #24
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fc08 	bl	80053c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004bb8:	e3df      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bbe:	e3dc      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004bc0:	4b27      	ldr	r3, [pc, #156]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bcc:	d107      	bne.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bce:	f107 030c 	add.w	r3, r7, #12
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fd4a 	bl	800566c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004bdc:	e3cd      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004bde:	2300      	movs	r3, #0
 8004be0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004be2:	e3ca      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004be4:	4b1e      	ldr	r3, [pc, #120]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bec:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004bee:	4b1c      	ldr	r3, [pc, #112]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0304 	and.w	r3, r3, #4
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d10c      	bne.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8004bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d109      	bne.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c00:	4b17      	ldr	r3, [pc, #92]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	08db      	lsrs	r3, r3, #3
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	4a16      	ldr	r2, [pc, #88]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c12:	e01e      	b.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c14:	4b12      	ldr	r3, [pc, #72]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c20:	d106      	bne.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8004c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c28:	d102      	bne.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004c2a:	4b0f      	ldr	r3, [pc, #60]	; (8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c2e:	e010      	b.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c30:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c3c:	d106      	bne.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8004c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c44:	d102      	bne.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004c46:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c4a:	e002      	b.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004c50:	e393      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004c52:	e392      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004c54:	4b06      	ldr	r3, [pc, #24]	; (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c58:	e38f      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c5e:	e38c      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004c60:	58024400 	.word	0x58024400
 8004c64:	03d09000 	.word	0x03d09000
 8004c68:	003d0900 	.word	0x003d0900
 8004c6c:	007a1200 	.word	0x007a1200
 8004c70:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8004c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c78:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8004c7c:	430b      	orrs	r3, r1
 8004c7e:	f040 809c 	bne.w	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8004c82:	4b9e      	ldr	r3, [pc, #632]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c86:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8004c8a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c92:	d054      	beq.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c9a:	f200 808b 	bhi.w	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ca4:	f000 8083 	beq.w	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004cae:	f200 8081 	bhi.w	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb8:	d02f      	beq.n	8004d1a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc0:	d878      	bhi.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d004      	beq.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8004cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cce:	d012      	beq.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8004cd0:	e070      	b.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004cd2:	4b8a      	ldr	r3, [pc, #552]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cde:	d107      	bne.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fe15 	bl	8005914 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004cee:	e344      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cf4:	e341      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cf6:	4b81      	ldr	r3, [pc, #516]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d02:	d107      	bne.n	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d04:	f107 0318 	add.w	r3, r7, #24
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 fb5b 	bl	80053c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d12:	e332      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004d14:	2300      	movs	r3, #0
 8004d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d18:	e32f      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d1a:	4b78      	ldr	r3, [pc, #480]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d26:	d107      	bne.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d28:	f107 030c 	add.w	r3, r7, #12
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fc9d 	bl	800566c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d36:	e320      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d3c:	e31d      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004d3e:	4b6f      	ldr	r3, [pc, #444]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d46:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d48:	4b6c      	ldr	r3, [pc, #432]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d10c      	bne.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8004d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d109      	bne.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d5a:	4b68      	ldr	r3, [pc, #416]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	08db      	lsrs	r3, r3, #3
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	4a66      	ldr	r2, [pc, #408]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8004d66:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d6c:	e01e      	b.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d6e:	4b63      	ldr	r3, [pc, #396]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d7a:	d106      	bne.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8004d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d82:	d102      	bne.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004d84:	4b5f      	ldr	r3, [pc, #380]	; (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8004d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d88:	e010      	b.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d8a:	4b5c      	ldr	r3, [pc, #368]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d96:	d106      	bne.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8004d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d9e:	d102      	bne.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004da0:	4b59      	ldr	r3, [pc, #356]	; (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004da4:	e002      	b.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8004daa:	e2e6      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004dac:	e2e5      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004dae:	4b57      	ldr	r3, [pc, #348]	; (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004db0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004db2:	e2e2      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004db8:	e2df      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004dba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dbe:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8004dc2:	430b      	orrs	r3, r1
 8004dc4:	f040 80a7 	bne.w	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004dc8:	4b4c      	ldr	r3, [pc, #304]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dcc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004dd0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dd8:	d055      	beq.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8004dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004de0:	f200 8096 	bhi.w	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8004de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dea:	f000 8084 	beq.w	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8004dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004df4:	f200 808c 	bhi.w	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8004df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dfe:	d030      	beq.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8004e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e06:	f200 8083 	bhi.w	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d004      	beq.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8004e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e16:	d012      	beq.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8004e18:	e07a      	b.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e1a:	4b38      	ldr	r3, [pc, #224]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e26:	d107      	bne.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fd71 	bl	8005914 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e36:	e2a0      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e3c:	e29d      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e3e:	4b2f      	ldr	r3, [pc, #188]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e4a:	d107      	bne.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e4c:	f107 0318 	add.w	r3, r7, #24
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 fab7 	bl	80053c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e5a:	e28e      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e60:	e28b      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e62:	4b26      	ldr	r3, [pc, #152]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e6e:	d107      	bne.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e70:	f107 030c 	add.w	r3, r7, #12
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 fbf9 	bl	800566c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e7e:	e27c      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004e80:	2300      	movs	r3, #0
 8004e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e84:	e279      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e86:	4b1d      	ldr	r3, [pc, #116]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e8e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e90:	4b1a      	ldr	r3, [pc, #104]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	d10c      	bne.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8004e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d109      	bne.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ea2:	4b16      	ldr	r3, [pc, #88]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	08db      	lsrs	r3, r3, #3
 8004ea8:	f003 0303 	and.w	r3, r3, #3
 8004eac:	4a14      	ldr	r2, [pc, #80]	; (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8004eae:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eb4:	e01e      	b.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004eb6:	4b11      	ldr	r3, [pc, #68]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec2:	d106      	bne.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8004ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eca:	d102      	bne.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004ecc:	4b0d      	ldr	r3, [pc, #52]	; (8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8004ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ed0:	e010      	b.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ed2:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ede:	d106      	bne.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8004ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ee6:	d102      	bne.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004ee8:	4b07      	ldr	r3, [pc, #28]	; (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eec:	e002      	b.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004ef2:	e242      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004ef4:	e241      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004ef6:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004efa:	e23e      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004efc:	58024400 	.word	0x58024400
 8004f00:	03d09000 	.word	0x03d09000
 8004f04:	003d0900 	.word	0x003d0900
 8004f08:	007a1200 	.word	0x007a1200
 8004f0c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8004f10:	2300      	movs	r3, #0
 8004f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f14:	e231      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004f16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f1a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004f1e:	430b      	orrs	r3, r1
 8004f20:	f040 8085 	bne.w	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004f24:	4b9c      	ldr	r3, [pc, #624]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f28:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004f2c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8004f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f34:	d06b      	beq.n	800500e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f3c:	d874      	bhi.n	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f44:	d056      	beq.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8004f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f4c:	d86c      	bhi.n	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f54:	d03b      	beq.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8004f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f5c:	d864      	bhi.n	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f64:	d021      	beq.n	8004faa <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f6c:	d85c      	bhi.n	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d004      	beq.n	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8004f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f7a:	d004      	beq.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8004f7c:	e054      	b.n	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8004f7e:	f7fe fb49 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 8004f82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004f84:	e1f9      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f86:	4b84      	ldr	r3, [pc, #528]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f92:	d107      	bne.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f94:	f107 0318 	add.w	r3, r7, #24
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 fa13 	bl	80053c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fa2:	e1ea      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fa8:	e1e7      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004faa:	4b7b      	ldr	r3, [pc, #492]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fb6:	d107      	bne.n	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fb8:	f107 030c 	add.w	r3, r7, #12
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fb55 	bl	800566c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fc6:	e1d8      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fcc:	e1d5      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fce:	4b72      	ldr	r3, [pc, #456]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0304 	and.w	r3, r3, #4
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d109      	bne.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fda:	4b6f      	ldr	r3, [pc, #444]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	08db      	lsrs	r3, r3, #3
 8004fe0:	f003 0303 	and.w	r3, r3, #3
 8004fe4:	4a6d      	ldr	r2, [pc, #436]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fec:	e1c5      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ff2:	e1c2      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004ff4:	4b68      	ldr	r3, [pc, #416]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005000:	d102      	bne.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8005002:	4b67      	ldr	r3, [pc, #412]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005004:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005006:	e1b8      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005008:	2300      	movs	r3, #0
 800500a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800500c:	e1b5      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800500e:	4b62      	ldr	r3, [pc, #392]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005016:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800501a:	d102      	bne.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800501c:	4b61      	ldr	r3, [pc, #388]	; (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800501e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005020:	e1ab      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005022:	2300      	movs	r3, #0
 8005024:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005026:	e1a8      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005028:	2300      	movs	r3, #0
 800502a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800502c:	e1a5      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800502e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005032:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005036:	430b      	orrs	r3, r1
 8005038:	d173      	bne.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800503a:	4b57      	ldr	r3, [pc, #348]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800503c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005042:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005046:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800504a:	d02f      	beq.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005052:	d863      	bhi.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005056:	2b00      	cmp	r3, #0
 8005058:	d004      	beq.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005060:	d012      	beq.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8005062:	e05b      	b.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005064:	4b4c      	ldr	r3, [pc, #304]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800506c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005070:	d107      	bne.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005072:	f107 0318 	add.w	r3, r7, #24
 8005076:	4618      	mov	r0, r3
 8005078:	f000 f9a4 	bl	80053c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005080:	e17b      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005086:	e178      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005088:	4b43      	ldr	r3, [pc, #268]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005094:	d107      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005096:	f107 030c 	add.w	r3, r7, #12
 800509a:	4618      	mov	r0, r3
 800509c:	f000 fae6 	bl	800566c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050a4:	e169      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80050a6:	2300      	movs	r3, #0
 80050a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050aa:	e166      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80050ac:	4b3a      	ldr	r3, [pc, #232]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80050ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050b4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80050b6:	4b38      	ldr	r3, [pc, #224]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d10c      	bne.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80050c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d109      	bne.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050c8:	4b33      	ldr	r3, [pc, #204]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	08db      	lsrs	r3, r3, #3
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	4a32      	ldr	r2, [pc, #200]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
 80050d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050da:	e01e      	b.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050dc:	4b2e      	ldr	r3, [pc, #184]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e8:	d106      	bne.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80050ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050f0:	d102      	bne.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80050f2:	4b2b      	ldr	r3, [pc, #172]	; (80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80050f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050f6:	e010      	b.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050f8:	4b27      	ldr	r3, [pc, #156]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005100:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005104:	d106      	bne.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8005106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800510c:	d102      	bne.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800510e:	4b25      	ldr	r3, [pc, #148]	; (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8005110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005112:	e002      	b.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005114:	2300      	movs	r3, #0
 8005116:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005118:	e12f      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800511a:	e12e      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800511c:	2300      	movs	r3, #0
 800511e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005120:	e12b      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005126:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800512a:	430b      	orrs	r3, r1
 800512c:	d13c      	bne.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800512e:	4b1a      	ldr	r3, [pc, #104]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005136:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513a:	2b00      	cmp	r3, #0
 800513c:	d004      	beq.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800513e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005144:	d012      	beq.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8005146:	e023      	b.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005148:	4b13      	ldr	r3, [pc, #76]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005150:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005154:	d107      	bne.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fbda 	bl	8005914 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005164:	e109      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800516a:	e106      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800516c:	4b0a      	ldr	r3, [pc, #40]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005178:	d107      	bne.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800517a:	f107 0318 	add.w	r3, r7, #24
 800517e:	4618      	mov	r0, r3
 8005180:	f000 f920 	bl	80053c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005188:	e0f7      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800518a:	2300      	movs	r3, #0
 800518c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800518e:	e0f4      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005190:	2300      	movs	r3, #0
 8005192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005194:	e0f1      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005196:	bf00      	nop
 8005198:	58024400 	.word	0x58024400
 800519c:	03d09000 	.word	0x03d09000
 80051a0:	003d0900 	.word	0x003d0900
 80051a4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80051a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ac:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80051b0:	430b      	orrs	r3, r1
 80051b2:	f040 8091 	bne.w	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80051b6:	4b73      	ldr	r3, [pc, #460]	; (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80051b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ba:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80051be:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80051c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80051c6:	f000 8081 	beq.w	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80051ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051cc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80051d0:	d87f      	bhi.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80051d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051d8:	d06b      	beq.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80051da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051e0:	d877      	bhi.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80051e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e8:	d056      	beq.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80051ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f0:	d86f      	bhi.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80051f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051f8:	d03b      	beq.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80051fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005200:	d867      	bhi.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005208:	d021      	beq.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800520a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005210:	d85f      	bhi.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005214:	2b00      	cmp	r3, #0
 8005216:	d004      	beq.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800521e:	d004      	beq.n	800522a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8005220:	e057      	b.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005222:	f000 f8b9 	bl	8005398 <HAL_RCCEx_GetD3PCLK1Freq>
 8005226:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005228:	e0a7      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800522a:	4b56      	ldr	r3, [pc, #344]	; (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005232:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005236:	d107      	bne.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005238:	f107 0318 	add.w	r3, r7, #24
 800523c:	4618      	mov	r0, r3
 800523e:	f000 f8c1 	bl	80053c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005246:	e098      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005248:	2300      	movs	r3, #0
 800524a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800524c:	e095      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800524e:	4b4d      	ldr	r3, [pc, #308]	; (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005256:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800525a:	d107      	bne.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800525c:	f107 030c 	add.w	r3, r7, #12
 8005260:	4618      	mov	r0, r3
 8005262:	f000 fa03 	bl	800566c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800526a:	e086      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800526c:	2300      	movs	r3, #0
 800526e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005270:	e083      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005272:	4b44      	ldr	r3, [pc, #272]	; (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0304 	and.w	r3, r3, #4
 800527a:	2b04      	cmp	r3, #4
 800527c:	d109      	bne.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800527e:	4b41      	ldr	r3, [pc, #260]	; (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	08db      	lsrs	r3, r3, #3
 8005284:	f003 0303 	and.w	r3, r3, #3
 8005288:	4a3f      	ldr	r2, [pc, #252]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800528a:	fa22 f303 	lsr.w	r3, r2, r3
 800528e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005290:	e073      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005292:	2300      	movs	r3, #0
 8005294:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005296:	e070      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005298:	4b3a      	ldr	r3, [pc, #232]	; (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052a4:	d102      	bne.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 80052a6:	4b39      	ldr	r3, [pc, #228]	; (800538c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 80052a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052aa:	e066      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80052ac:	2300      	movs	r3, #0
 80052ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052b0:	e063      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80052b2:	4b34      	ldr	r3, [pc, #208]	; (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052be:	d102      	bne.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 80052c0:	4b33      	ldr	r3, [pc, #204]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80052c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052c4:	e059      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80052c6:	2300      	movs	r3, #0
 80052c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052ca:	e056      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80052cc:	4b31      	ldr	r3, [pc, #196]	; (8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 80052ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052d0:	e053      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052d6:	e050      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80052d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052dc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80052e0:	430b      	orrs	r3, r1
 80052e2:	d148      	bne.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80052e4:	4b27      	ldr	r3, [pc, #156]	; (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80052e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052ec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80052ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052f4:	d02a      	beq.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80052f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052fc:	d838      	bhi.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80052fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005300:	2b00      	cmp	r3, #0
 8005302:	d004      	beq.n	800530e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8005304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005306:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800530a:	d00d      	beq.n	8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800530c:	e030      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800530e:	4b1d      	ldr	r3, [pc, #116]	; (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005316:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800531a:	d102      	bne.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800531c:	4b1c      	ldr	r3, [pc, #112]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800531e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005320:	e02b      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005322:	2300      	movs	r3, #0
 8005324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005326:	e028      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005328:	4b16      	ldr	r3, [pc, #88]	; (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005330:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005334:	d107      	bne.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800533a:	4618      	mov	r0, r3
 800533c:	f000 faea 	bl	8005914 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005344:	e019      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800534a:	e016      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800534c:	4b0d      	ldr	r3, [pc, #52]	; (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005354:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005358:	d107      	bne.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800535a:	f107 0318 	add.w	r3, r7, #24
 800535e:	4618      	mov	r0, r3
 8005360:	f000 f830 	bl	80053c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005368:	e007      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800536a:	2300      	movs	r3, #0
 800536c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800536e:	e004      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005370:	2300      	movs	r3, #0
 8005372:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005374:	e001      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8005376:	2300      	movs	r3, #0
 8005378:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800537a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800537c:	4618      	mov	r0, r3
 800537e:	3740      	adds	r7, #64	; 0x40
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	58024400 	.word	0x58024400
 8005388:	03d09000 	.word	0x03d09000
 800538c:	003d0900 	.word	0x003d0900
 8005390:	007a1200 	.word	0x007a1200
 8005394:	00bb8000 	.word	0x00bb8000

08005398 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800539c:	f7fe f90a 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 80053a0:	4602      	mov	r2, r0
 80053a2:	4b06      	ldr	r3, [pc, #24]	; (80053bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	091b      	lsrs	r3, r3, #4
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	4904      	ldr	r1, [pc, #16]	; (80053c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80053ae:	5ccb      	ldrb	r3, [r1, r3]
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	58024400 	.word	0x58024400
 80053c0:	0800ace0 	.word	0x0800ace0

080053c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b089      	sub	sp, #36	; 0x24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053cc:	4ba1      	ldr	r3, [pc, #644]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d0:	f003 0303 	and.w	r3, r3, #3
 80053d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80053d6:	4b9f      	ldr	r3, [pc, #636]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053da:	0b1b      	lsrs	r3, r3, #12
 80053dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80053e2:	4b9c      	ldr	r3, [pc, #624]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e6:	091b      	lsrs	r3, r3, #4
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80053ee:	4b99      	ldr	r3, [pc, #612]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f2:	08db      	lsrs	r3, r3, #3
 80053f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	fb02 f303 	mul.w	r3, r2, r3
 80053fe:	ee07 3a90 	vmov	s15, r3
 8005402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005406:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 8111 	beq.w	8005634 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	2b02      	cmp	r3, #2
 8005416:	f000 8083 	beq.w	8005520 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	2b02      	cmp	r3, #2
 800541e:	f200 80a1 	bhi.w	8005564 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d056      	beq.n	80054dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800542e:	e099      	b.n	8005564 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005430:	4b88      	ldr	r3, [pc, #544]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0320 	and.w	r3, r3, #32
 8005438:	2b00      	cmp	r3, #0
 800543a:	d02d      	beq.n	8005498 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800543c:	4b85      	ldr	r3, [pc, #532]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	08db      	lsrs	r3, r3, #3
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	4a84      	ldr	r2, [pc, #528]	; (8005658 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005448:	fa22 f303 	lsr.w	r3, r2, r3
 800544c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	ee07 3a90 	vmov	s15, r3
 8005454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	ee07 3a90 	vmov	s15, r3
 800545e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005466:	4b7b      	ldr	r3, [pc, #492]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800546e:	ee07 3a90 	vmov	s15, r3
 8005472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005476:	ed97 6a03 	vldr	s12, [r7, #12]
 800547a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800565c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800547e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800548a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800548e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005492:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005496:	e087      	b.n	80055a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	ee07 3a90 	vmov	s15, r3
 800549e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005660 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80054a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054aa:	4b6a      	ldr	r3, [pc, #424]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b2:	ee07 3a90 	vmov	s15, r3
 80054b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80054be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800565c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054da:	e065      	b.n	80055a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	ee07 3a90 	vmov	s15, r3
 80054e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005664 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80054ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ee:	4b59      	ldr	r3, [pc, #356]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005502:	eddf 5a56 	vldr	s11, [pc, #344]	; 800565c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800550a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800550e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800551a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800551e:	e043      	b.n	80055a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	ee07 3a90 	vmov	s15, r3
 8005526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005668 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800552e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005532:	4b48      	ldr	r3, [pc, #288]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800553a:	ee07 3a90 	vmov	s15, r3
 800553e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005542:	ed97 6a03 	vldr	s12, [r7, #12]
 8005546:	eddf 5a45 	vldr	s11, [pc, #276]	; 800565c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800554a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800554e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800555a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800555e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005562:	e021      	b.n	80055a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005664 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005576:	4b37      	ldr	r3, [pc, #220]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557e:	ee07 3a90 	vmov	s15, r3
 8005582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005586:	ed97 6a03 	vldr	s12, [r7, #12]
 800558a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800565c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800558e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800559a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800559e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80055a8:	4b2a      	ldr	r3, [pc, #168]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ac:	0a5b      	lsrs	r3, r3, #9
 80055ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80055c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ce:	ee17 2a90 	vmov	r2, s15
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80055d6:	4b1f      	ldr	r3, [pc, #124]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055da:	0c1b      	lsrs	r3, r3, #16
 80055dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055e0:	ee07 3a90 	vmov	s15, r3
 80055e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80055f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055fc:	ee17 2a90 	vmov	r2, s15
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005604:	4b13      	ldr	r3, [pc, #76]	; (8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	0e1b      	lsrs	r3, r3, #24
 800560a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800560e:	ee07 3a90 	vmov	s15, r3
 8005612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005616:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800561a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800561e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800562a:	ee17 2a90 	vmov	r2, s15
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005632:	e008      	b.n	8005646 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	609a      	str	r2, [r3, #8]
}
 8005646:	bf00      	nop
 8005648:	3724      	adds	r7, #36	; 0x24
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	58024400 	.word	0x58024400
 8005658:	03d09000 	.word	0x03d09000
 800565c:	46000000 	.word	0x46000000
 8005660:	4c742400 	.word	0x4c742400
 8005664:	4a742400 	.word	0x4a742400
 8005668:	4af42400 	.word	0x4af42400

0800566c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800566c:	b480      	push	{r7}
 800566e:	b089      	sub	sp, #36	; 0x24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005674:	4ba1      	ldr	r3, [pc, #644]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800567e:	4b9f      	ldr	r3, [pc, #636]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005682:	0d1b      	lsrs	r3, r3, #20
 8005684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005688:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800568a:	4b9c      	ldr	r3, [pc, #624]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800568c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568e:	0a1b      	lsrs	r3, r3, #8
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005696:	4b99      	ldr	r3, [pc, #612]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569a:	08db      	lsrs	r3, r3, #3
 800569c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	fb02 f303 	mul.w	r3, r2, r3
 80056a6:	ee07 3a90 	vmov	s15, r3
 80056aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 8111 	beq.w	80058dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	f000 8083 	beq.w	80057c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	f200 80a1 	bhi.w	800580c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d056      	beq.n	8005784 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80056d6:	e099      	b.n	800580c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056d8:	4b88      	ldr	r3, [pc, #544]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0320 	and.w	r3, r3, #32
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d02d      	beq.n	8005740 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056e4:	4b85      	ldr	r3, [pc, #532]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	08db      	lsrs	r3, r3, #3
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	4a84      	ldr	r2, [pc, #528]	; (8005900 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80056f0:	fa22 f303 	lsr.w	r3, r2, r3
 80056f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	ee07 3a90 	vmov	s15, r3
 80056fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800570e:	4b7b      	ldr	r3, [pc, #492]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005716:	ee07 3a90 	vmov	s15, r3
 800571a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800571e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005722:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005904 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800572a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800572e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800573a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800573e:	e087      	b.n	8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005908 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800574e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005752:	4b6a      	ldr	r3, [pc, #424]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800575a:	ee07 3a90 	vmov	s15, r3
 800575e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005762:	ed97 6a03 	vldr	s12, [r7, #12]
 8005766:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005904 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800576a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800576e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800577a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005782:	e065      	b.n	8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800590c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005796:	4b59      	ldr	r3, [pc, #356]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80057aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005904 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057c6:	e043      	b.n	8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80057d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057da:	4b48      	ldr	r3, [pc, #288]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80057ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005904 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800580a:	e021      	b.n	8005850 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005816:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800590c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800581a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800581e:	4b37      	ldr	r3, [pc, #220]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800582e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005832:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005904 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800583a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800583e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800584e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005850:	4b2a      	ldr	r3, [pc, #168]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	0a5b      	lsrs	r3, r3, #9
 8005856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005862:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005866:	ee37 7a87 	vadd.f32	s14, s15, s14
 800586a:	edd7 6a07 	vldr	s13, [r7, #28]
 800586e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005876:	ee17 2a90 	vmov	r2, s15
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800587e:	4b1f      	ldr	r3, [pc, #124]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	0c1b      	lsrs	r3, r3, #16
 8005884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005888:	ee07 3a90 	vmov	s15, r3
 800588c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005890:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005894:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005898:	edd7 6a07 	vldr	s13, [r7, #28]
 800589c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058a4:	ee17 2a90 	vmov	r2, s15
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80058ac:	4b13      	ldr	r3, [pc, #76]	; (80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	0e1b      	lsrs	r3, r3, #24
 80058b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058b6:	ee07 3a90 	vmov	s15, r3
 80058ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80058ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058d2:	ee17 2a90 	vmov	r2, s15
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80058da:	e008      	b.n	80058ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	609a      	str	r2, [r3, #8]
}
 80058ee:	bf00      	nop
 80058f0:	3724      	adds	r7, #36	; 0x24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	58024400 	.word	0x58024400
 8005900:	03d09000 	.word	0x03d09000
 8005904:	46000000 	.word	0x46000000
 8005908:	4c742400 	.word	0x4c742400
 800590c:	4a742400 	.word	0x4a742400
 8005910:	4af42400 	.word	0x4af42400

08005914 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005914:	b480      	push	{r7}
 8005916:	b089      	sub	sp, #36	; 0x24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800591c:	4ba0      	ldr	r3, [pc, #640]	; (8005ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800591e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005920:	f003 0303 	and.w	r3, r3, #3
 8005924:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005926:	4b9e      	ldr	r3, [pc, #632]	; (8005ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592a:	091b      	lsrs	r3, r3, #4
 800592c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005930:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005932:	4b9b      	ldr	r3, [pc, #620]	; (8005ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800593c:	4b98      	ldr	r3, [pc, #608]	; (8005ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800593e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005940:	08db      	lsrs	r3, r3, #3
 8005942:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	fb02 f303 	mul.w	r3, r2, r3
 800594c:	ee07 3a90 	vmov	s15, r3
 8005950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005954:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 8111 	beq.w	8005b82 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	2b02      	cmp	r3, #2
 8005964:	f000 8083 	beq.w	8005a6e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	2b02      	cmp	r3, #2
 800596c:	f200 80a1 	bhi.w	8005ab2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d056      	beq.n	8005a2a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800597c:	e099      	b.n	8005ab2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800597e:	4b88      	ldr	r3, [pc, #544]	; (8005ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b00      	cmp	r3, #0
 8005988:	d02d      	beq.n	80059e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800598a:	4b85      	ldr	r3, [pc, #532]	; (8005ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	08db      	lsrs	r3, r3, #3
 8005990:	f003 0303 	and.w	r3, r3, #3
 8005994:	4a83      	ldr	r2, [pc, #524]	; (8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005996:	fa22 f303 	lsr.w	r3, r2, r3
 800599a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	ee07 3a90 	vmov	s15, r3
 80059ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059b4:	4b7a      	ldr	r3, [pc, #488]	; (8005ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059bc:	ee07 3a90 	vmov	s15, r3
 80059c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80059c8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80059cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059e0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80059e4:	e087      	b.n	8005af6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	ee07 3a90 	vmov	s15, r3
 80059ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005bac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80059f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059f8:	4b69      	ldr	r3, [pc, #420]	; (8005ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a00:	ee07 3a90 	vmov	s15, r3
 8005a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a08:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a0c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a28:	e065      	b.n	8005af6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	ee07 3a90 	vmov	s15, r3
 8005a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a34:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005a38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a3c:	4b58      	ldr	r3, [pc, #352]	; (8005ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a44:	ee07 3a90 	vmov	s15, r3
 8005a48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a50:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a6c:	e043      	b.n	8005af6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	ee07 3a90 	vmov	s15, r3
 8005a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a78:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005a7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a80:	4b47      	ldr	r3, [pc, #284]	; (8005ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a88:	ee07 3a90 	vmov	s15, r3
 8005a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a90:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a94:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ab0:	e021      	b.n	8005af6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	ee07 3a90 	vmov	s15, r3
 8005ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005abc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005bac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005ac0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ac4:	4b36      	ldr	r3, [pc, #216]	; (8005ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005acc:	ee07 3a90 	vmov	s15, r3
 8005ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ad4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ad8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005adc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ae0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ae4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005af4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005af6:	4b2a      	ldr	r3, [pc, #168]	; (8005ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	0a5b      	lsrs	r3, r3, #9
 8005afc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b00:	ee07 3a90 	vmov	s15, r3
 8005b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b10:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b1c:	ee17 2a90 	vmov	r2, s15
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005b24:	4b1e      	ldr	r3, [pc, #120]	; (8005ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b28:	0c1b      	lsrs	r3, r3, #16
 8005b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b2e:	ee07 3a90 	vmov	s15, r3
 8005b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b4a:	ee17 2a90 	vmov	r2, s15
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005b52:	4b13      	ldr	r3, [pc, #76]	; (8005ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b56:	0e1b      	lsrs	r3, r3, #24
 8005b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b5c:	ee07 3a90 	vmov	s15, r3
 8005b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b78:	ee17 2a90 	vmov	r2, s15
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005b80:	e008      	b.n	8005b94 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	609a      	str	r2, [r3, #8]
}
 8005b94:	bf00      	nop
 8005b96:	3724      	adds	r7, #36	; 0x24
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	58024400 	.word	0x58024400
 8005ba4:	03d09000 	.word	0x03d09000
 8005ba8:	46000000 	.word	0x46000000
 8005bac:	4c742400 	.word	0x4c742400
 8005bb0:	4a742400 	.word	0x4a742400
 8005bb4:	4af42400 	.word	0x4af42400

08005bb8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005bc6:	4b53      	ldr	r3, [pc, #332]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d101      	bne.n	8005bd6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e099      	b.n	8005d0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005bd6:	4b4f      	ldr	r3, [pc, #316]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a4e      	ldr	r2, [pc, #312]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005bdc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be2:	f7fb fafb 	bl	80011dc <HAL_GetTick>
 8005be6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005be8:	e008      	b.n	8005bfc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005bea:	f7fb faf7 	bl	80011dc <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e086      	b.n	8005d0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bfc:	4b45      	ldr	r3, [pc, #276]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1f0      	bne.n	8005bea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005c08:	4b42      	ldr	r3, [pc, #264]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	031b      	lsls	r3, r3, #12
 8005c16:	493f      	ldr	r1, [pc, #252]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	628b      	str	r3, [r1, #40]	; 0x28
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	3b01      	subs	r3, #1
 8005c22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	025b      	lsls	r3, r3, #9
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	431a      	orrs	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	041b      	lsls	r3, r3, #16
 8005c3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	3b01      	subs	r3, #1
 8005c46:	061b      	lsls	r3, r3, #24
 8005c48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c4c:	4931      	ldr	r1, [pc, #196]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005c52:	4b30      	ldr	r3, [pc, #192]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	492d      	ldr	r1, [pc, #180]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005c64:	4b2b      	ldr	r3, [pc, #172]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	f023 0220 	bic.w	r2, r3, #32
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	4928      	ldr	r1, [pc, #160]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005c76:	4b27      	ldr	r3, [pc, #156]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7a:	4a26      	ldr	r2, [pc, #152]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005c7c:	f023 0310 	bic.w	r3, r3, #16
 8005c80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005c82:	4b24      	ldr	r3, [pc, #144]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005c84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c86:	4b24      	ldr	r3, [pc, #144]	; (8005d18 <RCCEx_PLL2_Config+0x160>)
 8005c88:	4013      	ands	r3, r2
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	69d2      	ldr	r2, [r2, #28]
 8005c8e:	00d2      	lsls	r2, r2, #3
 8005c90:	4920      	ldr	r1, [pc, #128]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005c96:	4b1f      	ldr	r3, [pc, #124]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9a:	4a1e      	ldr	r2, [pc, #120]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005c9c:	f043 0310 	orr.w	r3, r3, #16
 8005ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d106      	bne.n	8005cb6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ca8:	4b1a      	ldr	r3, [pc, #104]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	4a19      	ldr	r2, [pc, #100]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005cae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cb4:	e00f      	b.n	8005cd6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d106      	bne.n	8005cca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005cbc:	4b15      	ldr	r3, [pc, #84]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	4a14      	ldr	r2, [pc, #80]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cc8:	e005      	b.n	8005cd6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005cca:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cce:	4a11      	ldr	r2, [pc, #68]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005cd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005cd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005cd6:	4b0f      	ldr	r3, [pc, #60]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a0e      	ldr	r2, [pc, #56]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005cdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ce0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ce2:	f7fb fa7b 	bl	80011dc <HAL_GetTick>
 8005ce6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ce8:	e008      	b.n	8005cfc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005cea:	f7fb fa77 	bl	80011dc <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d901      	bls.n	8005cfc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e006      	b.n	8005d0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005cfc:	4b05      	ldr	r3, [pc, #20]	; (8005d14 <RCCEx_PLL2_Config+0x15c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0f0      	beq.n	8005cea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	58024400 	.word	0x58024400
 8005d18:	ffff0007 	.word	0xffff0007

08005d1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d2a:	4b53      	ldr	r3, [pc, #332]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2e:	f003 0303 	and.w	r3, r3, #3
 8005d32:	2b03      	cmp	r3, #3
 8005d34:	d101      	bne.n	8005d3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e099      	b.n	8005e6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005d3a:	4b4f      	ldr	r3, [pc, #316]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a4e      	ldr	r2, [pc, #312]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d46:	f7fb fa49 	bl	80011dc <HAL_GetTick>
 8005d4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d4c:	e008      	b.n	8005d60 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005d4e:	f7fb fa45 	bl	80011dc <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d901      	bls.n	8005d60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e086      	b.n	8005e6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d60:	4b45      	ldr	r3, [pc, #276]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1f0      	bne.n	8005d4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005d6c:	4b42      	ldr	r3, [pc, #264]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d70:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	051b      	lsls	r3, r3, #20
 8005d7a:	493f      	ldr	r1, [pc, #252]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	628b      	str	r3, [r1, #40]	; 0x28
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	3b01      	subs	r3, #1
 8005d86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	025b      	lsls	r3, r3, #9
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	041b      	lsls	r3, r3, #16
 8005d9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005da2:	431a      	orrs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	3b01      	subs	r3, #1
 8005daa:	061b      	lsls	r3, r3, #24
 8005dac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005db0:	4931      	ldr	r1, [pc, #196]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005db6:	4b30      	ldr	r3, [pc, #192]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	492d      	ldr	r1, [pc, #180]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005dc8:	4b2b      	ldr	r3, [pc, #172]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dcc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	4928      	ldr	r1, [pc, #160]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005dda:	4b27      	ldr	r3, [pc, #156]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dde:	4a26      	ldr	r2, [pc, #152]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005de4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005de6:	4b24      	ldr	r3, [pc, #144]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005de8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dea:	4b24      	ldr	r3, [pc, #144]	; (8005e7c <RCCEx_PLL3_Config+0x160>)
 8005dec:	4013      	ands	r3, r2
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	69d2      	ldr	r2, [r2, #28]
 8005df2:	00d2      	lsls	r2, r2, #3
 8005df4:	4920      	ldr	r1, [pc, #128]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005dfa:	4b1f      	ldr	r3, [pc, #124]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfe:	4a1e      	ldr	r2, [pc, #120]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d106      	bne.n	8005e1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005e0c:	4b1a      	ldr	r3, [pc, #104]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e10:	4a19      	ldr	r2, [pc, #100]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005e12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e18:	e00f      	b.n	8005e3a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d106      	bne.n	8005e2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005e20:	4b15      	ldr	r3, [pc, #84]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e24:	4a14      	ldr	r2, [pc, #80]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005e26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e2c:	e005      	b.n	8005e3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005e2e:	4b12      	ldr	r3, [pc, #72]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e32:	4a11      	ldr	r2, [pc, #68]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005e34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005e3a:	4b0f      	ldr	r3, [pc, #60]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a0e      	ldr	r2, [pc, #56]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e46:	f7fb f9c9 	bl	80011dc <HAL_GetTick>
 8005e4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e4c:	e008      	b.n	8005e60 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005e4e:	f7fb f9c5 	bl	80011dc <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d901      	bls.n	8005e60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e006      	b.n	8005e6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e60:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <RCCEx_PLL3_Config+0x15c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d0f0      	beq.n	8005e4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	58024400 	.word	0x58024400
 8005e7c:	ffff0007 	.word	0xffff0007

08005e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e049      	b.n	8005f26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d106      	bne.n	8005eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fa ff84 	bl	8000db4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3304      	adds	r3, #4
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	f000 fa08 	bl	80062d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b082      	sub	sp, #8
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e049      	b.n	8005fd4 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d106      	bne.n	8005f5a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f841 	bl	8005fdc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	3304      	adds	r3, #4
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	f000 f9b1 	bl	80062d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3708      	adds	r7, #8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006006:	2b01      	cmp	r3, #1
 8006008:	d101      	bne.n	800600e <HAL_TIM_OC_ConfigChannel+0x1e>
 800600a:	2302      	movs	r3, #2
 800600c:	e066      	b.n	80060dc <HAL_TIM_OC_ConfigChannel+0xec>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b14      	cmp	r3, #20
 800601a:	d857      	bhi.n	80060cc <HAL_TIM_OC_ConfigChannel+0xdc>
 800601c:	a201      	add	r2, pc, #4	; (adr r2, 8006024 <HAL_TIM_OC_ConfigChannel+0x34>)
 800601e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006022:	bf00      	nop
 8006024:	08006079 	.word	0x08006079
 8006028:	080060cd 	.word	0x080060cd
 800602c:	080060cd 	.word	0x080060cd
 8006030:	080060cd 	.word	0x080060cd
 8006034:	08006087 	.word	0x08006087
 8006038:	080060cd 	.word	0x080060cd
 800603c:	080060cd 	.word	0x080060cd
 8006040:	080060cd 	.word	0x080060cd
 8006044:	08006095 	.word	0x08006095
 8006048:	080060cd 	.word	0x080060cd
 800604c:	080060cd 	.word	0x080060cd
 8006050:	080060cd 	.word	0x080060cd
 8006054:	080060a3 	.word	0x080060a3
 8006058:	080060cd 	.word	0x080060cd
 800605c:	080060cd 	.word	0x080060cd
 8006060:	080060cd 	.word	0x080060cd
 8006064:	080060b1 	.word	0x080060b1
 8006068:	080060cd 	.word	0x080060cd
 800606c:	080060cd 	.word	0x080060cd
 8006070:	080060cd 	.word	0x080060cd
 8006074:	080060bf 	.word	0x080060bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68b9      	ldr	r1, [r7, #8]
 800607e:	4618      	mov	r0, r3
 8006080:	f000 f9c2 	bl	8006408 <TIM_OC1_SetConfig>
      break;
 8006084:	e025      	b.n	80060d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	4618      	mov	r0, r3
 800608e:	f000 fa4b 	bl	8006528 <TIM_OC2_SetConfig>
      break;
 8006092:	e01e      	b.n	80060d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68b9      	ldr	r1, [r7, #8]
 800609a:	4618      	mov	r0, r3
 800609c:	f000 face 	bl	800663c <TIM_OC3_SetConfig>
      break;
 80060a0:	e017      	b.n	80060d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68b9      	ldr	r1, [r7, #8]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 fb4f 	bl	800674c <TIM_OC4_SetConfig>
      break;
 80060ae:	e010      	b.n	80060d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68b9      	ldr	r1, [r7, #8]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fbb2 	bl	8006820 <TIM_OC5_SetConfig>
      break;
 80060bc:	e009      	b.n	80060d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fc0f 	bl	80068e8 <TIM_OC6_SetConfig>
      break;
 80060ca:	e002      	b.n	80060d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	75fb      	strb	r3, [r7, #23]
      break;
 80060d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060da:	7dfb      	ldrb	r3, [r7, #23]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d101      	bne.n	8006100 <HAL_TIM_ConfigClockSource+0x1c>
 80060fc:	2302      	movs	r3, #2
 80060fe:	e0dc      	b.n	80062ba <HAL_TIM_ConfigClockSource+0x1d6>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	4b6a      	ldr	r3, [pc, #424]	; (80062c4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800611c:	4013      	ands	r3, r2
 800611e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006126:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a64      	ldr	r2, [pc, #400]	; (80062c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	f000 80a9 	beq.w	800628e <HAL_TIM_ConfigClockSource+0x1aa>
 800613c:	4a62      	ldr	r2, [pc, #392]	; (80062c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800613e:	4293      	cmp	r3, r2
 8006140:	f200 80ae 	bhi.w	80062a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006144:	4a61      	ldr	r2, [pc, #388]	; (80062cc <HAL_TIM_ConfigClockSource+0x1e8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	f000 80a1 	beq.w	800628e <HAL_TIM_ConfigClockSource+0x1aa>
 800614c:	4a5f      	ldr	r2, [pc, #380]	; (80062cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800614e:	4293      	cmp	r3, r2
 8006150:	f200 80a6 	bhi.w	80062a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006154:	4a5e      	ldr	r2, [pc, #376]	; (80062d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006156:	4293      	cmp	r3, r2
 8006158:	f000 8099 	beq.w	800628e <HAL_TIM_ConfigClockSource+0x1aa>
 800615c:	4a5c      	ldr	r2, [pc, #368]	; (80062d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800615e:	4293      	cmp	r3, r2
 8006160:	f200 809e 	bhi.w	80062a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006164:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006168:	f000 8091 	beq.w	800628e <HAL_TIM_ConfigClockSource+0x1aa>
 800616c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006170:	f200 8096 	bhi.w	80062a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006174:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006178:	f000 8089 	beq.w	800628e <HAL_TIM_ConfigClockSource+0x1aa>
 800617c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006180:	f200 808e 	bhi.w	80062a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006188:	d03e      	beq.n	8006208 <HAL_TIM_ConfigClockSource+0x124>
 800618a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800618e:	f200 8087 	bhi.w	80062a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006196:	f000 8086 	beq.w	80062a6 <HAL_TIM_ConfigClockSource+0x1c2>
 800619a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800619e:	d87f      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80061a0:	2b70      	cmp	r3, #112	; 0x70
 80061a2:	d01a      	beq.n	80061da <HAL_TIM_ConfigClockSource+0xf6>
 80061a4:	2b70      	cmp	r3, #112	; 0x70
 80061a6:	d87b      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80061a8:	2b60      	cmp	r3, #96	; 0x60
 80061aa:	d050      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x16a>
 80061ac:	2b60      	cmp	r3, #96	; 0x60
 80061ae:	d877      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80061b0:	2b50      	cmp	r3, #80	; 0x50
 80061b2:	d03c      	beq.n	800622e <HAL_TIM_ConfigClockSource+0x14a>
 80061b4:	2b50      	cmp	r3, #80	; 0x50
 80061b6:	d873      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80061b8:	2b40      	cmp	r3, #64	; 0x40
 80061ba:	d058      	beq.n	800626e <HAL_TIM_ConfigClockSource+0x18a>
 80061bc:	2b40      	cmp	r3, #64	; 0x40
 80061be:	d86f      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80061c0:	2b30      	cmp	r3, #48	; 0x30
 80061c2:	d064      	beq.n	800628e <HAL_TIM_ConfigClockSource+0x1aa>
 80061c4:	2b30      	cmp	r3, #48	; 0x30
 80061c6:	d86b      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80061c8:	2b20      	cmp	r3, #32
 80061ca:	d060      	beq.n	800628e <HAL_TIM_ConfigClockSource+0x1aa>
 80061cc:	2b20      	cmp	r3, #32
 80061ce:	d867      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d05c      	beq.n	800628e <HAL_TIM_ConfigClockSource+0x1aa>
 80061d4:	2b10      	cmp	r3, #16
 80061d6:	d05a      	beq.n	800628e <HAL_TIM_ConfigClockSource+0x1aa>
 80061d8:	e062      	b.n	80062a0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6818      	ldr	r0, [r3, #0]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	6899      	ldr	r1, [r3, #8]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	f000 fc61 	bl	8006ab0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	609a      	str	r2, [r3, #8]
      break;
 8006206:	e04f      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6818      	ldr	r0, [r3, #0]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	6899      	ldr	r1, [r3, #8]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f000 fc4a 	bl	8006ab0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800622a:	609a      	str	r2, [r3, #8]
      break;
 800622c:	e03c      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6818      	ldr	r0, [r3, #0]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	6859      	ldr	r1, [r3, #4]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	461a      	mov	r2, r3
 800623c:	f000 fbba 	bl	80069b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2150      	movs	r1, #80	; 0x50
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fc14 	bl	8006a74 <TIM_ITRx_SetConfig>
      break;
 800624c:	e02c      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	6859      	ldr	r1, [r3, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	461a      	mov	r2, r3
 800625c:	f000 fbd9 	bl	8006a12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2160      	movs	r1, #96	; 0x60
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fc04 	bl	8006a74 <TIM_ITRx_SetConfig>
      break;
 800626c:	e01c      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	6859      	ldr	r1, [r3, #4]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	461a      	mov	r2, r3
 800627c:	f000 fb9a 	bl	80069b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2140      	movs	r1, #64	; 0x40
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fbf4 	bl	8006a74 <TIM_ITRx_SetConfig>
      break;
 800628c:	e00c      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4619      	mov	r1, r3
 8006298:	4610      	mov	r0, r2
 800629a:	f000 fbeb 	bl	8006a74 <TIM_ITRx_SetConfig>
      break;
 800629e:	e003      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	73fb      	strb	r3, [r7, #15]
      break;
 80062a4:	e000      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80062a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	ffceff88 	.word	0xffceff88
 80062c8:	00100040 	.word	0x00100040
 80062cc:	00100030 	.word	0x00100030
 80062d0:	00100020 	.word	0x00100020

080062d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a40      	ldr	r2, [pc, #256]	; (80063e8 <TIM_Base_SetConfig+0x114>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d013      	beq.n	8006314 <TIM_Base_SetConfig+0x40>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f2:	d00f      	beq.n	8006314 <TIM_Base_SetConfig+0x40>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a3d      	ldr	r2, [pc, #244]	; (80063ec <TIM_Base_SetConfig+0x118>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d00b      	beq.n	8006314 <TIM_Base_SetConfig+0x40>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a3c      	ldr	r2, [pc, #240]	; (80063f0 <TIM_Base_SetConfig+0x11c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d007      	beq.n	8006314 <TIM_Base_SetConfig+0x40>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a3b      	ldr	r2, [pc, #236]	; (80063f4 <TIM_Base_SetConfig+0x120>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d003      	beq.n	8006314 <TIM_Base_SetConfig+0x40>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a3a      	ldr	r2, [pc, #232]	; (80063f8 <TIM_Base_SetConfig+0x124>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d108      	bne.n	8006326 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a2f      	ldr	r2, [pc, #188]	; (80063e8 <TIM_Base_SetConfig+0x114>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d01f      	beq.n	800636e <TIM_Base_SetConfig+0x9a>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006334:	d01b      	beq.n	800636e <TIM_Base_SetConfig+0x9a>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a2c      	ldr	r2, [pc, #176]	; (80063ec <TIM_Base_SetConfig+0x118>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d017      	beq.n	800636e <TIM_Base_SetConfig+0x9a>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a2b      	ldr	r2, [pc, #172]	; (80063f0 <TIM_Base_SetConfig+0x11c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d013      	beq.n	800636e <TIM_Base_SetConfig+0x9a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a2a      	ldr	r2, [pc, #168]	; (80063f4 <TIM_Base_SetConfig+0x120>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00f      	beq.n	800636e <TIM_Base_SetConfig+0x9a>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a29      	ldr	r2, [pc, #164]	; (80063f8 <TIM_Base_SetConfig+0x124>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d00b      	beq.n	800636e <TIM_Base_SetConfig+0x9a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a28      	ldr	r2, [pc, #160]	; (80063fc <TIM_Base_SetConfig+0x128>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d007      	beq.n	800636e <TIM_Base_SetConfig+0x9a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a27      	ldr	r2, [pc, #156]	; (8006400 <TIM_Base_SetConfig+0x12c>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d003      	beq.n	800636e <TIM_Base_SetConfig+0x9a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a26      	ldr	r2, [pc, #152]	; (8006404 <TIM_Base_SetConfig+0x130>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d108      	bne.n	8006380 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	4313      	orrs	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a10      	ldr	r2, [pc, #64]	; (80063e8 <TIM_Base_SetConfig+0x114>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d00f      	beq.n	80063cc <TIM_Base_SetConfig+0xf8>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a12      	ldr	r2, [pc, #72]	; (80063f8 <TIM_Base_SetConfig+0x124>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00b      	beq.n	80063cc <TIM_Base_SetConfig+0xf8>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a11      	ldr	r2, [pc, #68]	; (80063fc <TIM_Base_SetConfig+0x128>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d007      	beq.n	80063cc <TIM_Base_SetConfig+0xf8>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a10      	ldr	r2, [pc, #64]	; (8006400 <TIM_Base_SetConfig+0x12c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d003      	beq.n	80063cc <TIM_Base_SetConfig+0xf8>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a0f      	ldr	r2, [pc, #60]	; (8006404 <TIM_Base_SetConfig+0x130>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d103      	bne.n	80063d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	691a      	ldr	r2, [r3, #16]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	615a      	str	r2, [r3, #20]
}
 80063da:	bf00      	nop
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	40010000 	.word	0x40010000
 80063ec:	40000400 	.word	0x40000400
 80063f0:	40000800 	.word	0x40000800
 80063f4:	40000c00 	.word	0x40000c00
 80063f8:	40010400 	.word	0x40010400
 80063fc:	40014000 	.word	0x40014000
 8006400:	40014400 	.word	0x40014400
 8006404:	40014800 	.word	0x40014800

08006408 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	f023 0201 	bic.w	r2, r3, #1
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	4b37      	ldr	r3, [pc, #220]	; (8006510 <TIM_OC1_SetConfig+0x108>)
 8006434:	4013      	ands	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 0303 	bic.w	r3, r3, #3
 800643e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	4313      	orrs	r3, r2
 8006448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f023 0302 	bic.w	r3, r3, #2
 8006450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a2d      	ldr	r2, [pc, #180]	; (8006514 <TIM_OC1_SetConfig+0x10c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00f      	beq.n	8006484 <TIM_OC1_SetConfig+0x7c>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a2c      	ldr	r2, [pc, #176]	; (8006518 <TIM_OC1_SetConfig+0x110>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d00b      	beq.n	8006484 <TIM_OC1_SetConfig+0x7c>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a2b      	ldr	r2, [pc, #172]	; (800651c <TIM_OC1_SetConfig+0x114>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d007      	beq.n	8006484 <TIM_OC1_SetConfig+0x7c>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a2a      	ldr	r2, [pc, #168]	; (8006520 <TIM_OC1_SetConfig+0x118>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d003      	beq.n	8006484 <TIM_OC1_SetConfig+0x7c>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a29      	ldr	r2, [pc, #164]	; (8006524 <TIM_OC1_SetConfig+0x11c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d10c      	bne.n	800649e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f023 0308 	bic.w	r3, r3, #8
 800648a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	4313      	orrs	r3, r2
 8006494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f023 0304 	bic.w	r3, r3, #4
 800649c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a1c      	ldr	r2, [pc, #112]	; (8006514 <TIM_OC1_SetConfig+0x10c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d00f      	beq.n	80064c6 <TIM_OC1_SetConfig+0xbe>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a1b      	ldr	r2, [pc, #108]	; (8006518 <TIM_OC1_SetConfig+0x110>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d00b      	beq.n	80064c6 <TIM_OC1_SetConfig+0xbe>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a1a      	ldr	r2, [pc, #104]	; (800651c <TIM_OC1_SetConfig+0x114>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d007      	beq.n	80064c6 <TIM_OC1_SetConfig+0xbe>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a19      	ldr	r2, [pc, #100]	; (8006520 <TIM_OC1_SetConfig+0x118>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d003      	beq.n	80064c6 <TIM_OC1_SetConfig+0xbe>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a18      	ldr	r2, [pc, #96]	; (8006524 <TIM_OC1_SetConfig+0x11c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d111      	bne.n	80064ea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	4313      	orrs	r3, r2
 80064de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	621a      	str	r2, [r3, #32]
}
 8006504:	bf00      	nop
 8006506:	371c      	adds	r7, #28
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	fffeff8f 	.word	0xfffeff8f
 8006514:	40010000 	.word	0x40010000
 8006518:	40010400 	.word	0x40010400
 800651c:	40014000 	.word	0x40014000
 8006520:	40014400 	.word	0x40014400
 8006524:	40014800 	.word	0x40014800

08006528 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	f023 0210 	bic.w	r2, r3, #16
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4b34      	ldr	r3, [pc, #208]	; (8006624 <TIM_OC2_SetConfig+0xfc>)
 8006554:	4013      	ands	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800655e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	021b      	lsls	r3, r3, #8
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	4313      	orrs	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	f023 0320 	bic.w	r3, r3, #32
 8006572:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	4313      	orrs	r3, r2
 800657e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a29      	ldr	r2, [pc, #164]	; (8006628 <TIM_OC2_SetConfig+0x100>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d003      	beq.n	8006590 <TIM_OC2_SetConfig+0x68>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a28      	ldr	r2, [pc, #160]	; (800662c <TIM_OC2_SetConfig+0x104>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d10d      	bne.n	80065ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	011b      	lsls	r3, r3, #4
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a1e      	ldr	r2, [pc, #120]	; (8006628 <TIM_OC2_SetConfig+0x100>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d00f      	beq.n	80065d4 <TIM_OC2_SetConfig+0xac>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a1d      	ldr	r2, [pc, #116]	; (800662c <TIM_OC2_SetConfig+0x104>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d00b      	beq.n	80065d4 <TIM_OC2_SetConfig+0xac>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a1c      	ldr	r2, [pc, #112]	; (8006630 <TIM_OC2_SetConfig+0x108>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d007      	beq.n	80065d4 <TIM_OC2_SetConfig+0xac>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a1b      	ldr	r2, [pc, #108]	; (8006634 <TIM_OC2_SetConfig+0x10c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d003      	beq.n	80065d4 <TIM_OC2_SetConfig+0xac>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a1a      	ldr	r2, [pc, #104]	; (8006638 <TIM_OC2_SetConfig+0x110>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d113      	bne.n	80065fc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	621a      	str	r2, [r3, #32]
}
 8006616:	bf00      	nop
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	feff8fff 	.word	0xfeff8fff
 8006628:	40010000 	.word	0x40010000
 800662c:	40010400 	.word	0x40010400
 8006630:	40014000 	.word	0x40014000
 8006634:	40014400 	.word	0x40014400
 8006638:	40014800 	.word	0x40014800

0800663c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4b33      	ldr	r3, [pc, #204]	; (8006734 <TIM_OC3_SetConfig+0xf8>)
 8006668:	4013      	ands	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 0303 	bic.w	r3, r3, #3
 8006672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	021b      	lsls	r3, r3, #8
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a28      	ldr	r2, [pc, #160]	; (8006738 <TIM_OC3_SetConfig+0xfc>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d003      	beq.n	80066a2 <TIM_OC3_SetConfig+0x66>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a27      	ldr	r2, [pc, #156]	; (800673c <TIM_OC3_SetConfig+0x100>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d10d      	bne.n	80066be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	021b      	lsls	r3, r3, #8
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a1d      	ldr	r2, [pc, #116]	; (8006738 <TIM_OC3_SetConfig+0xfc>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d00f      	beq.n	80066e6 <TIM_OC3_SetConfig+0xaa>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a1c      	ldr	r2, [pc, #112]	; (800673c <TIM_OC3_SetConfig+0x100>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d00b      	beq.n	80066e6 <TIM_OC3_SetConfig+0xaa>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a1b      	ldr	r2, [pc, #108]	; (8006740 <TIM_OC3_SetConfig+0x104>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d007      	beq.n	80066e6 <TIM_OC3_SetConfig+0xaa>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a1a      	ldr	r2, [pc, #104]	; (8006744 <TIM_OC3_SetConfig+0x108>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d003      	beq.n	80066e6 <TIM_OC3_SetConfig+0xaa>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a19      	ldr	r2, [pc, #100]	; (8006748 <TIM_OC3_SetConfig+0x10c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d113      	bne.n	800670e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	011b      	lsls	r3, r3, #4
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	011b      	lsls	r3, r3, #4
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4313      	orrs	r3, r2
 800670c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	621a      	str	r2, [r3, #32]
}
 8006728:	bf00      	nop
 800672a:	371c      	adds	r7, #28
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	fffeff8f 	.word	0xfffeff8f
 8006738:	40010000 	.word	0x40010000
 800673c:	40010400 	.word	0x40010400
 8006740:	40014000 	.word	0x40014000
 8006744:	40014400 	.word	0x40014400
 8006748:	40014800 	.word	0x40014800

0800674c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800674c:	b480      	push	{r7}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4b24      	ldr	r3, [pc, #144]	; (8006808 <TIM_OC4_SetConfig+0xbc>)
 8006778:	4013      	ands	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	021b      	lsls	r3, r3, #8
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	4313      	orrs	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006796:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	031b      	lsls	r3, r3, #12
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a19      	ldr	r2, [pc, #100]	; (800680c <TIM_OC4_SetConfig+0xc0>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d00f      	beq.n	80067cc <TIM_OC4_SetConfig+0x80>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a18      	ldr	r2, [pc, #96]	; (8006810 <TIM_OC4_SetConfig+0xc4>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00b      	beq.n	80067cc <TIM_OC4_SetConfig+0x80>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a17      	ldr	r2, [pc, #92]	; (8006814 <TIM_OC4_SetConfig+0xc8>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d007      	beq.n	80067cc <TIM_OC4_SetConfig+0x80>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a16      	ldr	r2, [pc, #88]	; (8006818 <TIM_OC4_SetConfig+0xcc>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d003      	beq.n	80067cc <TIM_OC4_SetConfig+0x80>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a15      	ldr	r2, [pc, #84]	; (800681c <TIM_OC4_SetConfig+0xd0>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d109      	bne.n	80067e0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	019b      	lsls	r3, r3, #6
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	4313      	orrs	r3, r2
 80067de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	621a      	str	r2, [r3, #32]
}
 80067fa:	bf00      	nop
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	feff8fff 	.word	0xfeff8fff
 800680c:	40010000 	.word	0x40010000
 8006810:	40010400 	.word	0x40010400
 8006814:	40014000 	.word	0x40014000
 8006818:	40014400 	.word	0x40014400
 800681c:	40014800 	.word	0x40014800

08006820 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4b21      	ldr	r3, [pc, #132]	; (80068d0 <TIM_OC5_SetConfig+0xb0>)
 800684c:	4013      	ands	r3, r2
 800684e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006860:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	041b      	lsls	r3, r3, #16
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	4313      	orrs	r3, r2
 800686c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a18      	ldr	r2, [pc, #96]	; (80068d4 <TIM_OC5_SetConfig+0xb4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d00f      	beq.n	8006896 <TIM_OC5_SetConfig+0x76>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a17      	ldr	r2, [pc, #92]	; (80068d8 <TIM_OC5_SetConfig+0xb8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00b      	beq.n	8006896 <TIM_OC5_SetConfig+0x76>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a16      	ldr	r2, [pc, #88]	; (80068dc <TIM_OC5_SetConfig+0xbc>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d007      	beq.n	8006896 <TIM_OC5_SetConfig+0x76>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a15      	ldr	r2, [pc, #84]	; (80068e0 <TIM_OC5_SetConfig+0xc0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d003      	beq.n	8006896 <TIM_OC5_SetConfig+0x76>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a14      	ldr	r2, [pc, #80]	; (80068e4 <TIM_OC5_SetConfig+0xc4>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d109      	bne.n	80068aa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800689c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	021b      	lsls	r3, r3, #8
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	621a      	str	r2, [r3, #32]
}
 80068c4:	bf00      	nop
 80068c6:	371c      	adds	r7, #28
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	fffeff8f 	.word	0xfffeff8f
 80068d4:	40010000 	.word	0x40010000
 80068d8:	40010400 	.word	0x40010400
 80068dc:	40014000 	.word	0x40014000
 80068e0:	40014400 	.word	0x40014400
 80068e4:	40014800 	.word	0x40014800

080068e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	4b22      	ldr	r3, [pc, #136]	; (800699c <TIM_OC6_SetConfig+0xb4>)
 8006914:	4013      	ands	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	021b      	lsls	r3, r3, #8
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	4313      	orrs	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800692a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	051b      	lsls	r3, r3, #20
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	4313      	orrs	r3, r2
 8006936:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a19      	ldr	r2, [pc, #100]	; (80069a0 <TIM_OC6_SetConfig+0xb8>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00f      	beq.n	8006960 <TIM_OC6_SetConfig+0x78>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a18      	ldr	r2, [pc, #96]	; (80069a4 <TIM_OC6_SetConfig+0xbc>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d00b      	beq.n	8006960 <TIM_OC6_SetConfig+0x78>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a17      	ldr	r2, [pc, #92]	; (80069a8 <TIM_OC6_SetConfig+0xc0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d007      	beq.n	8006960 <TIM_OC6_SetConfig+0x78>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a16      	ldr	r2, [pc, #88]	; (80069ac <TIM_OC6_SetConfig+0xc4>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d003      	beq.n	8006960 <TIM_OC6_SetConfig+0x78>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a15      	ldr	r2, [pc, #84]	; (80069b0 <TIM_OC6_SetConfig+0xc8>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d109      	bne.n	8006974 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006966:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	029b      	lsls	r3, r3, #10
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4313      	orrs	r3, r2
 8006972:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	621a      	str	r2, [r3, #32]
}
 800698e:	bf00      	nop
 8006990:	371c      	adds	r7, #28
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	feff8fff 	.word	0xfeff8fff
 80069a0:	40010000 	.word	0x40010000
 80069a4:	40010400 	.word	0x40010400
 80069a8:	40014000 	.word	0x40014000
 80069ac:	40014400 	.word	0x40014400
 80069b0:	40014800 	.word	0x40014800

080069b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	f023 0201 	bic.w	r2, r3, #1
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	011b      	lsls	r3, r3, #4
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f023 030a 	bic.w	r3, r3, #10
 80069f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	621a      	str	r2, [r3, #32]
}
 8006a06:	bf00      	nop
 8006a08:	371c      	adds	r7, #28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b087      	sub	sp, #28
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	60f8      	str	r0, [r7, #12]
 8006a1a:	60b9      	str	r1, [r7, #8]
 8006a1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	f023 0210 	bic.w	r2, r3, #16
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	031b      	lsls	r3, r3, #12
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	011b      	lsls	r3, r3, #4
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	621a      	str	r2, [r3, #32]
}
 8006a66:	bf00      	nop
 8006a68:	371c      	adds	r7, #28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
	...

08006a74 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	4b09      	ldr	r3, [pc, #36]	; (8006aac <TIM_ITRx_SetConfig+0x38>)
 8006a88:	4013      	ands	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f043 0307 	orr.w	r3, r3, #7
 8006a96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	609a      	str	r2, [r3, #8]
}
 8006a9e:	bf00      	nop
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	ffcfff8f 	.word	0xffcfff8f

08006ab0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
 8006abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006aca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	021a      	lsls	r2, r3, #8
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	609a      	str	r2, [r3, #8]
}
 8006ae4:	bf00      	nop
 8006ae6:	371c      	adds	r7, #28
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d101      	bne.n	8006b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b04:	2302      	movs	r3, #2
 8006b06:	e06d      	b.n	8006be4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a30      	ldr	r2, [pc, #192]	; (8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d004      	beq.n	8006b3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a2f      	ldr	r2, [pc, #188]	; (8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d108      	bne.n	8006b4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a20      	ldr	r2, [pc, #128]	; (8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d022      	beq.n	8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b7a:	d01d      	beq.n	8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a1d      	ldr	r2, [pc, #116]	; (8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d018      	beq.n	8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a1c      	ldr	r2, [pc, #112]	; (8006bfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d013      	beq.n	8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a1a      	ldr	r2, [pc, #104]	; (8006c00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d00e      	beq.n	8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a15      	ldr	r2, [pc, #84]	; (8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d009      	beq.n	8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a16      	ldr	r2, [pc, #88]	; (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d004      	beq.n	8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a15      	ldr	r2, [pc, #84]	; (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d10c      	bne.n	8006bd2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	40010000 	.word	0x40010000
 8006bf4:	40010400 	.word	0x40010400
 8006bf8:	40000400 	.word	0x40000400
 8006bfc:	40000800 	.word	0x40000800
 8006c00:	40000c00 	.word	0x40000c00
 8006c04:	40001800 	.word	0x40001800
 8006c08:	40014000 	.word	0x40014000

08006c0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d101      	bne.n	8006c28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c24:	2302      	movs	r3, #2
 8006c26:	e087      	b.n	8006d38 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	041b      	lsls	r3, r3, #16
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a27      	ldr	r2, [pc, #156]	; (8006d44 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d004      	beq.n	8006cb6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a25      	ldr	r2, [pc, #148]	; (8006d48 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d106      	bne.n	8006cc4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	69db      	ldr	r3, [r3, #28]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a1e      	ldr	r2, [pc, #120]	; (8006d44 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d004      	beq.n	8006cd8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a1d      	ldr	r2, [pc, #116]	; (8006d48 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d126      	bne.n	8006d26 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce2:	051b      	lsls	r3, r3, #20
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a0e      	ldr	r2, [pc, #56]	; (8006d44 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d004      	beq.n	8006d18 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a0d      	ldr	r2, [pc, #52]	; (8006d48 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d106      	bne.n	8006d26 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d22:	4313      	orrs	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	40010000 	.word	0x40010000
 8006d48:	40010400 	.word	0x40010400

08006d4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e042      	b.n	8006de4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d106      	bne.n	8006d76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7fa f87d 	bl	8000e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2224      	movs	r2, #36	; 0x24
 8006d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 0201 	bic.w	r2, r2, #1
 8006d8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f82c 	bl	8006dec <UART_SetConfig>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d101      	bne.n	8006d9e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e022      	b.n	8006de4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d002      	beq.n	8006dac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fe8c 	bl	8007ac4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006dba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689a      	ldr	r2, [r3, #8]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f042 0201 	orr.w	r2, r2, #1
 8006dda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 ff13 	bl	8007c08 <UART_CheckIdleState>
 8006de2:	4603      	mov	r3, r0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006df0:	b092      	sub	sp, #72	; 0x48
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	431a      	orrs	r2, r3
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	4bbe      	ldr	r3, [pc, #760]	; (8007114 <UART_SetConfig+0x328>)
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	6812      	ldr	r2, [r2, #0]
 8006e22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e24:	430b      	orrs	r3, r1
 8006e26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4ab3      	ldr	r2, [pc, #716]	; (8007118 <UART_SetConfig+0x32c>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d004      	beq.n	8006e58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e54:	4313      	orrs	r3, r2
 8006e56:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689a      	ldr	r2, [r3, #8]
 8006e5e:	4baf      	ldr	r3, [pc, #700]	; (800711c <UART_SetConfig+0x330>)
 8006e60:	4013      	ands	r3, r2
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	6812      	ldr	r2, [r2, #0]
 8006e66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e68:	430b      	orrs	r3, r1
 8006e6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e72:	f023 010f 	bic.w	r1, r3, #15
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4aa6      	ldr	r2, [pc, #664]	; (8007120 <UART_SetConfig+0x334>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d177      	bne.n	8006f7c <UART_SetConfig+0x190>
 8006e8c:	4ba5      	ldr	r3, [pc, #660]	; (8007124 <UART_SetConfig+0x338>)
 8006e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e94:	2b28      	cmp	r3, #40	; 0x28
 8006e96:	d86d      	bhi.n	8006f74 <UART_SetConfig+0x188>
 8006e98:	a201      	add	r2, pc, #4	; (adr r2, 8006ea0 <UART_SetConfig+0xb4>)
 8006e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9e:	bf00      	nop
 8006ea0:	08006f45 	.word	0x08006f45
 8006ea4:	08006f75 	.word	0x08006f75
 8006ea8:	08006f75 	.word	0x08006f75
 8006eac:	08006f75 	.word	0x08006f75
 8006eb0:	08006f75 	.word	0x08006f75
 8006eb4:	08006f75 	.word	0x08006f75
 8006eb8:	08006f75 	.word	0x08006f75
 8006ebc:	08006f75 	.word	0x08006f75
 8006ec0:	08006f4d 	.word	0x08006f4d
 8006ec4:	08006f75 	.word	0x08006f75
 8006ec8:	08006f75 	.word	0x08006f75
 8006ecc:	08006f75 	.word	0x08006f75
 8006ed0:	08006f75 	.word	0x08006f75
 8006ed4:	08006f75 	.word	0x08006f75
 8006ed8:	08006f75 	.word	0x08006f75
 8006edc:	08006f75 	.word	0x08006f75
 8006ee0:	08006f55 	.word	0x08006f55
 8006ee4:	08006f75 	.word	0x08006f75
 8006ee8:	08006f75 	.word	0x08006f75
 8006eec:	08006f75 	.word	0x08006f75
 8006ef0:	08006f75 	.word	0x08006f75
 8006ef4:	08006f75 	.word	0x08006f75
 8006ef8:	08006f75 	.word	0x08006f75
 8006efc:	08006f75 	.word	0x08006f75
 8006f00:	08006f5d 	.word	0x08006f5d
 8006f04:	08006f75 	.word	0x08006f75
 8006f08:	08006f75 	.word	0x08006f75
 8006f0c:	08006f75 	.word	0x08006f75
 8006f10:	08006f75 	.word	0x08006f75
 8006f14:	08006f75 	.word	0x08006f75
 8006f18:	08006f75 	.word	0x08006f75
 8006f1c:	08006f75 	.word	0x08006f75
 8006f20:	08006f65 	.word	0x08006f65
 8006f24:	08006f75 	.word	0x08006f75
 8006f28:	08006f75 	.word	0x08006f75
 8006f2c:	08006f75 	.word	0x08006f75
 8006f30:	08006f75 	.word	0x08006f75
 8006f34:	08006f75 	.word	0x08006f75
 8006f38:	08006f75 	.word	0x08006f75
 8006f3c:	08006f75 	.word	0x08006f75
 8006f40:	08006f6d 	.word	0x08006f6d
 8006f44:	2301      	movs	r3, #1
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f4a:	e326      	b.n	800759a <UART_SetConfig+0x7ae>
 8006f4c:	2304      	movs	r3, #4
 8006f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f52:	e322      	b.n	800759a <UART_SetConfig+0x7ae>
 8006f54:	2308      	movs	r3, #8
 8006f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f5a:	e31e      	b.n	800759a <UART_SetConfig+0x7ae>
 8006f5c:	2310      	movs	r3, #16
 8006f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f62:	e31a      	b.n	800759a <UART_SetConfig+0x7ae>
 8006f64:	2320      	movs	r3, #32
 8006f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f6a:	e316      	b.n	800759a <UART_SetConfig+0x7ae>
 8006f6c:	2340      	movs	r3, #64	; 0x40
 8006f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f72:	e312      	b.n	800759a <UART_SetConfig+0x7ae>
 8006f74:	2380      	movs	r3, #128	; 0x80
 8006f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f7a:	e30e      	b.n	800759a <UART_SetConfig+0x7ae>
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a69      	ldr	r2, [pc, #420]	; (8007128 <UART_SetConfig+0x33c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d130      	bne.n	8006fe8 <UART_SetConfig+0x1fc>
 8006f86:	4b67      	ldr	r3, [pc, #412]	; (8007124 <UART_SetConfig+0x338>)
 8006f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8a:	f003 0307 	and.w	r3, r3, #7
 8006f8e:	2b05      	cmp	r3, #5
 8006f90:	d826      	bhi.n	8006fe0 <UART_SetConfig+0x1f4>
 8006f92:	a201      	add	r2, pc, #4	; (adr r2, 8006f98 <UART_SetConfig+0x1ac>)
 8006f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f98:	08006fb1 	.word	0x08006fb1
 8006f9c:	08006fb9 	.word	0x08006fb9
 8006fa0:	08006fc1 	.word	0x08006fc1
 8006fa4:	08006fc9 	.word	0x08006fc9
 8006fa8:	08006fd1 	.word	0x08006fd1
 8006fac:	08006fd9 	.word	0x08006fd9
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fb6:	e2f0      	b.n	800759a <UART_SetConfig+0x7ae>
 8006fb8:	2304      	movs	r3, #4
 8006fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fbe:	e2ec      	b.n	800759a <UART_SetConfig+0x7ae>
 8006fc0:	2308      	movs	r3, #8
 8006fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fc6:	e2e8      	b.n	800759a <UART_SetConfig+0x7ae>
 8006fc8:	2310      	movs	r3, #16
 8006fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fce:	e2e4      	b.n	800759a <UART_SetConfig+0x7ae>
 8006fd0:	2320      	movs	r3, #32
 8006fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fd6:	e2e0      	b.n	800759a <UART_SetConfig+0x7ae>
 8006fd8:	2340      	movs	r3, #64	; 0x40
 8006fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fde:	e2dc      	b.n	800759a <UART_SetConfig+0x7ae>
 8006fe0:	2380      	movs	r3, #128	; 0x80
 8006fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fe6:	e2d8      	b.n	800759a <UART_SetConfig+0x7ae>
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a4f      	ldr	r2, [pc, #316]	; (800712c <UART_SetConfig+0x340>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d130      	bne.n	8007054 <UART_SetConfig+0x268>
 8006ff2:	4b4c      	ldr	r3, [pc, #304]	; (8007124 <UART_SetConfig+0x338>)
 8006ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	2b05      	cmp	r3, #5
 8006ffc:	d826      	bhi.n	800704c <UART_SetConfig+0x260>
 8006ffe:	a201      	add	r2, pc, #4	; (adr r2, 8007004 <UART_SetConfig+0x218>)
 8007000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007004:	0800701d 	.word	0x0800701d
 8007008:	08007025 	.word	0x08007025
 800700c:	0800702d 	.word	0x0800702d
 8007010:	08007035 	.word	0x08007035
 8007014:	0800703d 	.word	0x0800703d
 8007018:	08007045 	.word	0x08007045
 800701c:	2300      	movs	r3, #0
 800701e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007022:	e2ba      	b.n	800759a <UART_SetConfig+0x7ae>
 8007024:	2304      	movs	r3, #4
 8007026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800702a:	e2b6      	b.n	800759a <UART_SetConfig+0x7ae>
 800702c:	2308      	movs	r3, #8
 800702e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007032:	e2b2      	b.n	800759a <UART_SetConfig+0x7ae>
 8007034:	2310      	movs	r3, #16
 8007036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800703a:	e2ae      	b.n	800759a <UART_SetConfig+0x7ae>
 800703c:	2320      	movs	r3, #32
 800703e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007042:	e2aa      	b.n	800759a <UART_SetConfig+0x7ae>
 8007044:	2340      	movs	r3, #64	; 0x40
 8007046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800704a:	e2a6      	b.n	800759a <UART_SetConfig+0x7ae>
 800704c:	2380      	movs	r3, #128	; 0x80
 800704e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007052:	e2a2      	b.n	800759a <UART_SetConfig+0x7ae>
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a35      	ldr	r2, [pc, #212]	; (8007130 <UART_SetConfig+0x344>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d130      	bne.n	80070c0 <UART_SetConfig+0x2d4>
 800705e:	4b31      	ldr	r3, [pc, #196]	; (8007124 <UART_SetConfig+0x338>)
 8007060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007062:	f003 0307 	and.w	r3, r3, #7
 8007066:	2b05      	cmp	r3, #5
 8007068:	d826      	bhi.n	80070b8 <UART_SetConfig+0x2cc>
 800706a:	a201      	add	r2, pc, #4	; (adr r2, 8007070 <UART_SetConfig+0x284>)
 800706c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007070:	08007089 	.word	0x08007089
 8007074:	08007091 	.word	0x08007091
 8007078:	08007099 	.word	0x08007099
 800707c:	080070a1 	.word	0x080070a1
 8007080:	080070a9 	.word	0x080070a9
 8007084:	080070b1 	.word	0x080070b1
 8007088:	2300      	movs	r3, #0
 800708a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800708e:	e284      	b.n	800759a <UART_SetConfig+0x7ae>
 8007090:	2304      	movs	r3, #4
 8007092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007096:	e280      	b.n	800759a <UART_SetConfig+0x7ae>
 8007098:	2308      	movs	r3, #8
 800709a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800709e:	e27c      	b.n	800759a <UART_SetConfig+0x7ae>
 80070a0:	2310      	movs	r3, #16
 80070a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070a6:	e278      	b.n	800759a <UART_SetConfig+0x7ae>
 80070a8:	2320      	movs	r3, #32
 80070aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ae:	e274      	b.n	800759a <UART_SetConfig+0x7ae>
 80070b0:	2340      	movs	r3, #64	; 0x40
 80070b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070b6:	e270      	b.n	800759a <UART_SetConfig+0x7ae>
 80070b8:	2380      	movs	r3, #128	; 0x80
 80070ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070be:	e26c      	b.n	800759a <UART_SetConfig+0x7ae>
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a1b      	ldr	r2, [pc, #108]	; (8007134 <UART_SetConfig+0x348>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d142      	bne.n	8007150 <UART_SetConfig+0x364>
 80070ca:	4b16      	ldr	r3, [pc, #88]	; (8007124 <UART_SetConfig+0x338>)
 80070cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ce:	f003 0307 	and.w	r3, r3, #7
 80070d2:	2b05      	cmp	r3, #5
 80070d4:	d838      	bhi.n	8007148 <UART_SetConfig+0x35c>
 80070d6:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <UART_SetConfig+0x2f0>)
 80070d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070dc:	080070f5 	.word	0x080070f5
 80070e0:	080070fd 	.word	0x080070fd
 80070e4:	08007105 	.word	0x08007105
 80070e8:	0800710d 	.word	0x0800710d
 80070ec:	08007139 	.word	0x08007139
 80070f0:	08007141 	.word	0x08007141
 80070f4:	2300      	movs	r3, #0
 80070f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070fa:	e24e      	b.n	800759a <UART_SetConfig+0x7ae>
 80070fc:	2304      	movs	r3, #4
 80070fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007102:	e24a      	b.n	800759a <UART_SetConfig+0x7ae>
 8007104:	2308      	movs	r3, #8
 8007106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800710a:	e246      	b.n	800759a <UART_SetConfig+0x7ae>
 800710c:	2310      	movs	r3, #16
 800710e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007112:	e242      	b.n	800759a <UART_SetConfig+0x7ae>
 8007114:	cfff69f3 	.word	0xcfff69f3
 8007118:	58000c00 	.word	0x58000c00
 800711c:	11fff4ff 	.word	0x11fff4ff
 8007120:	40011000 	.word	0x40011000
 8007124:	58024400 	.word	0x58024400
 8007128:	40004400 	.word	0x40004400
 800712c:	40004800 	.word	0x40004800
 8007130:	40004c00 	.word	0x40004c00
 8007134:	40005000 	.word	0x40005000
 8007138:	2320      	movs	r3, #32
 800713a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800713e:	e22c      	b.n	800759a <UART_SetConfig+0x7ae>
 8007140:	2340      	movs	r3, #64	; 0x40
 8007142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007146:	e228      	b.n	800759a <UART_SetConfig+0x7ae>
 8007148:	2380      	movs	r3, #128	; 0x80
 800714a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800714e:	e224      	b.n	800759a <UART_SetConfig+0x7ae>
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4ab1      	ldr	r2, [pc, #708]	; (800741c <UART_SetConfig+0x630>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d176      	bne.n	8007248 <UART_SetConfig+0x45c>
 800715a:	4bb1      	ldr	r3, [pc, #708]	; (8007420 <UART_SetConfig+0x634>)
 800715c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800715e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007162:	2b28      	cmp	r3, #40	; 0x28
 8007164:	d86c      	bhi.n	8007240 <UART_SetConfig+0x454>
 8007166:	a201      	add	r2, pc, #4	; (adr r2, 800716c <UART_SetConfig+0x380>)
 8007168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716c:	08007211 	.word	0x08007211
 8007170:	08007241 	.word	0x08007241
 8007174:	08007241 	.word	0x08007241
 8007178:	08007241 	.word	0x08007241
 800717c:	08007241 	.word	0x08007241
 8007180:	08007241 	.word	0x08007241
 8007184:	08007241 	.word	0x08007241
 8007188:	08007241 	.word	0x08007241
 800718c:	08007219 	.word	0x08007219
 8007190:	08007241 	.word	0x08007241
 8007194:	08007241 	.word	0x08007241
 8007198:	08007241 	.word	0x08007241
 800719c:	08007241 	.word	0x08007241
 80071a0:	08007241 	.word	0x08007241
 80071a4:	08007241 	.word	0x08007241
 80071a8:	08007241 	.word	0x08007241
 80071ac:	08007221 	.word	0x08007221
 80071b0:	08007241 	.word	0x08007241
 80071b4:	08007241 	.word	0x08007241
 80071b8:	08007241 	.word	0x08007241
 80071bc:	08007241 	.word	0x08007241
 80071c0:	08007241 	.word	0x08007241
 80071c4:	08007241 	.word	0x08007241
 80071c8:	08007241 	.word	0x08007241
 80071cc:	08007229 	.word	0x08007229
 80071d0:	08007241 	.word	0x08007241
 80071d4:	08007241 	.word	0x08007241
 80071d8:	08007241 	.word	0x08007241
 80071dc:	08007241 	.word	0x08007241
 80071e0:	08007241 	.word	0x08007241
 80071e4:	08007241 	.word	0x08007241
 80071e8:	08007241 	.word	0x08007241
 80071ec:	08007231 	.word	0x08007231
 80071f0:	08007241 	.word	0x08007241
 80071f4:	08007241 	.word	0x08007241
 80071f8:	08007241 	.word	0x08007241
 80071fc:	08007241 	.word	0x08007241
 8007200:	08007241 	.word	0x08007241
 8007204:	08007241 	.word	0x08007241
 8007208:	08007241 	.word	0x08007241
 800720c:	08007239 	.word	0x08007239
 8007210:	2301      	movs	r3, #1
 8007212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007216:	e1c0      	b.n	800759a <UART_SetConfig+0x7ae>
 8007218:	2304      	movs	r3, #4
 800721a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800721e:	e1bc      	b.n	800759a <UART_SetConfig+0x7ae>
 8007220:	2308      	movs	r3, #8
 8007222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007226:	e1b8      	b.n	800759a <UART_SetConfig+0x7ae>
 8007228:	2310      	movs	r3, #16
 800722a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800722e:	e1b4      	b.n	800759a <UART_SetConfig+0x7ae>
 8007230:	2320      	movs	r3, #32
 8007232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007236:	e1b0      	b.n	800759a <UART_SetConfig+0x7ae>
 8007238:	2340      	movs	r3, #64	; 0x40
 800723a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800723e:	e1ac      	b.n	800759a <UART_SetConfig+0x7ae>
 8007240:	2380      	movs	r3, #128	; 0x80
 8007242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007246:	e1a8      	b.n	800759a <UART_SetConfig+0x7ae>
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a75      	ldr	r2, [pc, #468]	; (8007424 <UART_SetConfig+0x638>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d130      	bne.n	80072b4 <UART_SetConfig+0x4c8>
 8007252:	4b73      	ldr	r3, [pc, #460]	; (8007420 <UART_SetConfig+0x634>)
 8007254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007256:	f003 0307 	and.w	r3, r3, #7
 800725a:	2b05      	cmp	r3, #5
 800725c:	d826      	bhi.n	80072ac <UART_SetConfig+0x4c0>
 800725e:	a201      	add	r2, pc, #4	; (adr r2, 8007264 <UART_SetConfig+0x478>)
 8007260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007264:	0800727d 	.word	0x0800727d
 8007268:	08007285 	.word	0x08007285
 800726c:	0800728d 	.word	0x0800728d
 8007270:	08007295 	.word	0x08007295
 8007274:	0800729d 	.word	0x0800729d
 8007278:	080072a5 	.word	0x080072a5
 800727c:	2300      	movs	r3, #0
 800727e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007282:	e18a      	b.n	800759a <UART_SetConfig+0x7ae>
 8007284:	2304      	movs	r3, #4
 8007286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800728a:	e186      	b.n	800759a <UART_SetConfig+0x7ae>
 800728c:	2308      	movs	r3, #8
 800728e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007292:	e182      	b.n	800759a <UART_SetConfig+0x7ae>
 8007294:	2310      	movs	r3, #16
 8007296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800729a:	e17e      	b.n	800759a <UART_SetConfig+0x7ae>
 800729c:	2320      	movs	r3, #32
 800729e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072a2:	e17a      	b.n	800759a <UART_SetConfig+0x7ae>
 80072a4:	2340      	movs	r3, #64	; 0x40
 80072a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072aa:	e176      	b.n	800759a <UART_SetConfig+0x7ae>
 80072ac:	2380      	movs	r3, #128	; 0x80
 80072ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072b2:	e172      	b.n	800759a <UART_SetConfig+0x7ae>
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a5b      	ldr	r2, [pc, #364]	; (8007428 <UART_SetConfig+0x63c>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d130      	bne.n	8007320 <UART_SetConfig+0x534>
 80072be:	4b58      	ldr	r3, [pc, #352]	; (8007420 <UART_SetConfig+0x634>)
 80072c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c2:	f003 0307 	and.w	r3, r3, #7
 80072c6:	2b05      	cmp	r3, #5
 80072c8:	d826      	bhi.n	8007318 <UART_SetConfig+0x52c>
 80072ca:	a201      	add	r2, pc, #4	; (adr r2, 80072d0 <UART_SetConfig+0x4e4>)
 80072cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d0:	080072e9 	.word	0x080072e9
 80072d4:	080072f1 	.word	0x080072f1
 80072d8:	080072f9 	.word	0x080072f9
 80072dc:	08007301 	.word	0x08007301
 80072e0:	08007309 	.word	0x08007309
 80072e4:	08007311 	.word	0x08007311
 80072e8:	2300      	movs	r3, #0
 80072ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ee:	e154      	b.n	800759a <UART_SetConfig+0x7ae>
 80072f0:	2304      	movs	r3, #4
 80072f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072f6:	e150      	b.n	800759a <UART_SetConfig+0x7ae>
 80072f8:	2308      	movs	r3, #8
 80072fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072fe:	e14c      	b.n	800759a <UART_SetConfig+0x7ae>
 8007300:	2310      	movs	r3, #16
 8007302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007306:	e148      	b.n	800759a <UART_SetConfig+0x7ae>
 8007308:	2320      	movs	r3, #32
 800730a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800730e:	e144      	b.n	800759a <UART_SetConfig+0x7ae>
 8007310:	2340      	movs	r3, #64	; 0x40
 8007312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007316:	e140      	b.n	800759a <UART_SetConfig+0x7ae>
 8007318:	2380      	movs	r3, #128	; 0x80
 800731a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800731e:	e13c      	b.n	800759a <UART_SetConfig+0x7ae>
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a41      	ldr	r2, [pc, #260]	; (800742c <UART_SetConfig+0x640>)
 8007326:	4293      	cmp	r3, r2
 8007328:	f040 8082 	bne.w	8007430 <UART_SetConfig+0x644>
 800732c:	4b3c      	ldr	r3, [pc, #240]	; (8007420 <UART_SetConfig+0x634>)
 800732e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007330:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007334:	2b28      	cmp	r3, #40	; 0x28
 8007336:	d86d      	bhi.n	8007414 <UART_SetConfig+0x628>
 8007338:	a201      	add	r2, pc, #4	; (adr r2, 8007340 <UART_SetConfig+0x554>)
 800733a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733e:	bf00      	nop
 8007340:	080073e5 	.word	0x080073e5
 8007344:	08007415 	.word	0x08007415
 8007348:	08007415 	.word	0x08007415
 800734c:	08007415 	.word	0x08007415
 8007350:	08007415 	.word	0x08007415
 8007354:	08007415 	.word	0x08007415
 8007358:	08007415 	.word	0x08007415
 800735c:	08007415 	.word	0x08007415
 8007360:	080073ed 	.word	0x080073ed
 8007364:	08007415 	.word	0x08007415
 8007368:	08007415 	.word	0x08007415
 800736c:	08007415 	.word	0x08007415
 8007370:	08007415 	.word	0x08007415
 8007374:	08007415 	.word	0x08007415
 8007378:	08007415 	.word	0x08007415
 800737c:	08007415 	.word	0x08007415
 8007380:	080073f5 	.word	0x080073f5
 8007384:	08007415 	.word	0x08007415
 8007388:	08007415 	.word	0x08007415
 800738c:	08007415 	.word	0x08007415
 8007390:	08007415 	.word	0x08007415
 8007394:	08007415 	.word	0x08007415
 8007398:	08007415 	.word	0x08007415
 800739c:	08007415 	.word	0x08007415
 80073a0:	080073fd 	.word	0x080073fd
 80073a4:	08007415 	.word	0x08007415
 80073a8:	08007415 	.word	0x08007415
 80073ac:	08007415 	.word	0x08007415
 80073b0:	08007415 	.word	0x08007415
 80073b4:	08007415 	.word	0x08007415
 80073b8:	08007415 	.word	0x08007415
 80073bc:	08007415 	.word	0x08007415
 80073c0:	08007405 	.word	0x08007405
 80073c4:	08007415 	.word	0x08007415
 80073c8:	08007415 	.word	0x08007415
 80073cc:	08007415 	.word	0x08007415
 80073d0:	08007415 	.word	0x08007415
 80073d4:	08007415 	.word	0x08007415
 80073d8:	08007415 	.word	0x08007415
 80073dc:	08007415 	.word	0x08007415
 80073e0:	0800740d 	.word	0x0800740d
 80073e4:	2301      	movs	r3, #1
 80073e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ea:	e0d6      	b.n	800759a <UART_SetConfig+0x7ae>
 80073ec:	2304      	movs	r3, #4
 80073ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073f2:	e0d2      	b.n	800759a <UART_SetConfig+0x7ae>
 80073f4:	2308      	movs	r3, #8
 80073f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073fa:	e0ce      	b.n	800759a <UART_SetConfig+0x7ae>
 80073fc:	2310      	movs	r3, #16
 80073fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007402:	e0ca      	b.n	800759a <UART_SetConfig+0x7ae>
 8007404:	2320      	movs	r3, #32
 8007406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800740a:	e0c6      	b.n	800759a <UART_SetConfig+0x7ae>
 800740c:	2340      	movs	r3, #64	; 0x40
 800740e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007412:	e0c2      	b.n	800759a <UART_SetConfig+0x7ae>
 8007414:	2380      	movs	r3, #128	; 0x80
 8007416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800741a:	e0be      	b.n	800759a <UART_SetConfig+0x7ae>
 800741c:	40011400 	.word	0x40011400
 8007420:	58024400 	.word	0x58024400
 8007424:	40007800 	.word	0x40007800
 8007428:	40007c00 	.word	0x40007c00
 800742c:	40011800 	.word	0x40011800
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4aad      	ldr	r2, [pc, #692]	; (80076ec <UART_SetConfig+0x900>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d176      	bne.n	8007528 <UART_SetConfig+0x73c>
 800743a:	4bad      	ldr	r3, [pc, #692]	; (80076f0 <UART_SetConfig+0x904>)
 800743c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007442:	2b28      	cmp	r3, #40	; 0x28
 8007444:	d86c      	bhi.n	8007520 <UART_SetConfig+0x734>
 8007446:	a201      	add	r2, pc, #4	; (adr r2, 800744c <UART_SetConfig+0x660>)
 8007448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744c:	080074f1 	.word	0x080074f1
 8007450:	08007521 	.word	0x08007521
 8007454:	08007521 	.word	0x08007521
 8007458:	08007521 	.word	0x08007521
 800745c:	08007521 	.word	0x08007521
 8007460:	08007521 	.word	0x08007521
 8007464:	08007521 	.word	0x08007521
 8007468:	08007521 	.word	0x08007521
 800746c:	080074f9 	.word	0x080074f9
 8007470:	08007521 	.word	0x08007521
 8007474:	08007521 	.word	0x08007521
 8007478:	08007521 	.word	0x08007521
 800747c:	08007521 	.word	0x08007521
 8007480:	08007521 	.word	0x08007521
 8007484:	08007521 	.word	0x08007521
 8007488:	08007521 	.word	0x08007521
 800748c:	08007501 	.word	0x08007501
 8007490:	08007521 	.word	0x08007521
 8007494:	08007521 	.word	0x08007521
 8007498:	08007521 	.word	0x08007521
 800749c:	08007521 	.word	0x08007521
 80074a0:	08007521 	.word	0x08007521
 80074a4:	08007521 	.word	0x08007521
 80074a8:	08007521 	.word	0x08007521
 80074ac:	08007509 	.word	0x08007509
 80074b0:	08007521 	.word	0x08007521
 80074b4:	08007521 	.word	0x08007521
 80074b8:	08007521 	.word	0x08007521
 80074bc:	08007521 	.word	0x08007521
 80074c0:	08007521 	.word	0x08007521
 80074c4:	08007521 	.word	0x08007521
 80074c8:	08007521 	.word	0x08007521
 80074cc:	08007511 	.word	0x08007511
 80074d0:	08007521 	.word	0x08007521
 80074d4:	08007521 	.word	0x08007521
 80074d8:	08007521 	.word	0x08007521
 80074dc:	08007521 	.word	0x08007521
 80074e0:	08007521 	.word	0x08007521
 80074e4:	08007521 	.word	0x08007521
 80074e8:	08007521 	.word	0x08007521
 80074ec:	08007519 	.word	0x08007519
 80074f0:	2301      	movs	r3, #1
 80074f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074f6:	e050      	b.n	800759a <UART_SetConfig+0x7ae>
 80074f8:	2304      	movs	r3, #4
 80074fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074fe:	e04c      	b.n	800759a <UART_SetConfig+0x7ae>
 8007500:	2308      	movs	r3, #8
 8007502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007506:	e048      	b.n	800759a <UART_SetConfig+0x7ae>
 8007508:	2310      	movs	r3, #16
 800750a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800750e:	e044      	b.n	800759a <UART_SetConfig+0x7ae>
 8007510:	2320      	movs	r3, #32
 8007512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007516:	e040      	b.n	800759a <UART_SetConfig+0x7ae>
 8007518:	2340      	movs	r3, #64	; 0x40
 800751a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800751e:	e03c      	b.n	800759a <UART_SetConfig+0x7ae>
 8007520:	2380      	movs	r3, #128	; 0x80
 8007522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007526:	e038      	b.n	800759a <UART_SetConfig+0x7ae>
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a71      	ldr	r2, [pc, #452]	; (80076f4 <UART_SetConfig+0x908>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d130      	bne.n	8007594 <UART_SetConfig+0x7a8>
 8007532:	4b6f      	ldr	r3, [pc, #444]	; (80076f0 <UART_SetConfig+0x904>)
 8007534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007536:	f003 0307 	and.w	r3, r3, #7
 800753a:	2b05      	cmp	r3, #5
 800753c:	d826      	bhi.n	800758c <UART_SetConfig+0x7a0>
 800753e:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <UART_SetConfig+0x758>)
 8007540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007544:	0800755d 	.word	0x0800755d
 8007548:	08007565 	.word	0x08007565
 800754c:	0800756d 	.word	0x0800756d
 8007550:	08007575 	.word	0x08007575
 8007554:	0800757d 	.word	0x0800757d
 8007558:	08007585 	.word	0x08007585
 800755c:	2302      	movs	r3, #2
 800755e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007562:	e01a      	b.n	800759a <UART_SetConfig+0x7ae>
 8007564:	2304      	movs	r3, #4
 8007566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800756a:	e016      	b.n	800759a <UART_SetConfig+0x7ae>
 800756c:	2308      	movs	r3, #8
 800756e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007572:	e012      	b.n	800759a <UART_SetConfig+0x7ae>
 8007574:	2310      	movs	r3, #16
 8007576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800757a:	e00e      	b.n	800759a <UART_SetConfig+0x7ae>
 800757c:	2320      	movs	r3, #32
 800757e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007582:	e00a      	b.n	800759a <UART_SetConfig+0x7ae>
 8007584:	2340      	movs	r3, #64	; 0x40
 8007586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800758a:	e006      	b.n	800759a <UART_SetConfig+0x7ae>
 800758c:	2380      	movs	r3, #128	; 0x80
 800758e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007592:	e002      	b.n	800759a <UART_SetConfig+0x7ae>
 8007594:	2380      	movs	r3, #128	; 0x80
 8007596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a55      	ldr	r2, [pc, #340]	; (80076f4 <UART_SetConfig+0x908>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	f040 80f8 	bne.w	8007796 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80075aa:	2b20      	cmp	r3, #32
 80075ac:	dc46      	bgt.n	800763c <UART_SetConfig+0x850>
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	db75      	blt.n	800769e <UART_SetConfig+0x8b2>
 80075b2:	3b02      	subs	r3, #2
 80075b4:	2b1e      	cmp	r3, #30
 80075b6:	d872      	bhi.n	800769e <UART_SetConfig+0x8b2>
 80075b8:	a201      	add	r2, pc, #4	; (adr r2, 80075c0 <UART_SetConfig+0x7d4>)
 80075ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075be:	bf00      	nop
 80075c0:	08007643 	.word	0x08007643
 80075c4:	0800769f 	.word	0x0800769f
 80075c8:	0800764b 	.word	0x0800764b
 80075cc:	0800769f 	.word	0x0800769f
 80075d0:	0800769f 	.word	0x0800769f
 80075d4:	0800769f 	.word	0x0800769f
 80075d8:	0800765b 	.word	0x0800765b
 80075dc:	0800769f 	.word	0x0800769f
 80075e0:	0800769f 	.word	0x0800769f
 80075e4:	0800769f 	.word	0x0800769f
 80075e8:	0800769f 	.word	0x0800769f
 80075ec:	0800769f 	.word	0x0800769f
 80075f0:	0800769f 	.word	0x0800769f
 80075f4:	0800769f 	.word	0x0800769f
 80075f8:	0800766b 	.word	0x0800766b
 80075fc:	0800769f 	.word	0x0800769f
 8007600:	0800769f 	.word	0x0800769f
 8007604:	0800769f 	.word	0x0800769f
 8007608:	0800769f 	.word	0x0800769f
 800760c:	0800769f 	.word	0x0800769f
 8007610:	0800769f 	.word	0x0800769f
 8007614:	0800769f 	.word	0x0800769f
 8007618:	0800769f 	.word	0x0800769f
 800761c:	0800769f 	.word	0x0800769f
 8007620:	0800769f 	.word	0x0800769f
 8007624:	0800769f 	.word	0x0800769f
 8007628:	0800769f 	.word	0x0800769f
 800762c:	0800769f 	.word	0x0800769f
 8007630:	0800769f 	.word	0x0800769f
 8007634:	0800769f 	.word	0x0800769f
 8007638:	08007691 	.word	0x08007691
 800763c:	2b40      	cmp	r3, #64	; 0x40
 800763e:	d02a      	beq.n	8007696 <UART_SetConfig+0x8aa>
 8007640:	e02d      	b.n	800769e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007642:	f7fd fea9 	bl	8005398 <HAL_RCCEx_GetD3PCLK1Freq>
 8007646:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007648:	e02f      	b.n	80076aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800764a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800764e:	4618      	mov	r0, r3
 8007650:	f7fd feb8 	bl	80053c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007656:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007658:	e027      	b.n	80076aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800765a:	f107 0318 	add.w	r3, r7, #24
 800765e:	4618      	mov	r0, r3
 8007660:	f7fe f804 	bl	800566c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007668:	e01f      	b.n	80076aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800766a:	4b21      	ldr	r3, [pc, #132]	; (80076f0 <UART_SetConfig+0x904>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0320 	and.w	r3, r3, #32
 8007672:	2b00      	cmp	r3, #0
 8007674:	d009      	beq.n	800768a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007676:	4b1e      	ldr	r3, [pc, #120]	; (80076f0 <UART_SetConfig+0x904>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	08db      	lsrs	r3, r3, #3
 800767c:	f003 0303 	and.w	r3, r3, #3
 8007680:	4a1d      	ldr	r2, [pc, #116]	; (80076f8 <UART_SetConfig+0x90c>)
 8007682:	fa22 f303 	lsr.w	r3, r2, r3
 8007686:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007688:	e00f      	b.n	80076aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800768a:	4b1b      	ldr	r3, [pc, #108]	; (80076f8 <UART_SetConfig+0x90c>)
 800768c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800768e:	e00c      	b.n	80076aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007690:	4b1a      	ldr	r3, [pc, #104]	; (80076fc <UART_SetConfig+0x910>)
 8007692:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007694:	e009      	b.n	80076aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800769a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800769c:	e005      	b.n	80076aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800769e:	2300      	movs	r3, #0
 80076a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80076a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 81ee 	beq.w	8007a8e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b6:	4a12      	ldr	r2, [pc, #72]	; (8007700 <UART_SetConfig+0x914>)
 80076b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076bc:	461a      	mov	r2, r3
 80076be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80076c4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	685a      	ldr	r2, [r3, #4]
 80076ca:	4613      	mov	r3, r2
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	4413      	add	r3, r2
 80076d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d305      	bcc.n	80076e2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076de:	429a      	cmp	r2, r3
 80076e0:	d910      	bls.n	8007704 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80076e8:	e1d1      	b.n	8007a8e <UART_SetConfig+0xca2>
 80076ea:	bf00      	nop
 80076ec:	40011c00 	.word	0x40011c00
 80076f0:	58024400 	.word	0x58024400
 80076f4:	58000c00 	.word	0x58000c00
 80076f8:	03d09000 	.word	0x03d09000
 80076fc:	003d0900 	.word	0x003d0900
 8007700:	0800acf0 	.word	0x0800acf0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007706:	2200      	movs	r2, #0
 8007708:	60bb      	str	r3, [r7, #8]
 800770a:	60fa      	str	r2, [r7, #12]
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	4ac0      	ldr	r2, [pc, #768]	; (8007a14 <UART_SetConfig+0xc28>)
 8007712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007716:	b29b      	uxth	r3, r3
 8007718:	2200      	movs	r2, #0
 800771a:	603b      	str	r3, [r7, #0]
 800771c:	607a      	str	r2, [r7, #4]
 800771e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007722:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007726:	f7f8 fde3 	bl	80002f0 <__aeabi_uldivmod>
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	4610      	mov	r0, r2
 8007730:	4619      	mov	r1, r3
 8007732:	f04f 0200 	mov.w	r2, #0
 8007736:	f04f 0300 	mov.w	r3, #0
 800773a:	020b      	lsls	r3, r1, #8
 800773c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007740:	0202      	lsls	r2, r0, #8
 8007742:	6979      	ldr	r1, [r7, #20]
 8007744:	6849      	ldr	r1, [r1, #4]
 8007746:	0849      	lsrs	r1, r1, #1
 8007748:	2000      	movs	r0, #0
 800774a:	460c      	mov	r4, r1
 800774c:	4605      	mov	r5, r0
 800774e:	eb12 0804 	adds.w	r8, r2, r4
 8007752:	eb43 0905 	adc.w	r9, r3, r5
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	469a      	mov	sl, r3
 800775e:	4693      	mov	fp, r2
 8007760:	4652      	mov	r2, sl
 8007762:	465b      	mov	r3, fp
 8007764:	4640      	mov	r0, r8
 8007766:	4649      	mov	r1, r9
 8007768:	f7f8 fdc2 	bl	80002f0 <__aeabi_uldivmod>
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	4613      	mov	r3, r2
 8007772:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007776:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800777a:	d308      	bcc.n	800778e <UART_SetConfig+0x9a2>
 800777c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007782:	d204      	bcs.n	800778e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800778a:	60da      	str	r2, [r3, #12]
 800778c:	e17f      	b.n	8007a8e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007794:	e17b      	b.n	8007a8e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	69db      	ldr	r3, [r3, #28]
 800779a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800779e:	f040 80bd 	bne.w	800791c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80077a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80077a6:	2b20      	cmp	r3, #32
 80077a8:	dc48      	bgt.n	800783c <UART_SetConfig+0xa50>
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	db7b      	blt.n	80078a6 <UART_SetConfig+0xaba>
 80077ae:	2b20      	cmp	r3, #32
 80077b0:	d879      	bhi.n	80078a6 <UART_SetConfig+0xaba>
 80077b2:	a201      	add	r2, pc, #4	; (adr r2, 80077b8 <UART_SetConfig+0x9cc>)
 80077b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b8:	08007843 	.word	0x08007843
 80077bc:	0800784b 	.word	0x0800784b
 80077c0:	080078a7 	.word	0x080078a7
 80077c4:	080078a7 	.word	0x080078a7
 80077c8:	08007853 	.word	0x08007853
 80077cc:	080078a7 	.word	0x080078a7
 80077d0:	080078a7 	.word	0x080078a7
 80077d4:	080078a7 	.word	0x080078a7
 80077d8:	08007863 	.word	0x08007863
 80077dc:	080078a7 	.word	0x080078a7
 80077e0:	080078a7 	.word	0x080078a7
 80077e4:	080078a7 	.word	0x080078a7
 80077e8:	080078a7 	.word	0x080078a7
 80077ec:	080078a7 	.word	0x080078a7
 80077f0:	080078a7 	.word	0x080078a7
 80077f4:	080078a7 	.word	0x080078a7
 80077f8:	08007873 	.word	0x08007873
 80077fc:	080078a7 	.word	0x080078a7
 8007800:	080078a7 	.word	0x080078a7
 8007804:	080078a7 	.word	0x080078a7
 8007808:	080078a7 	.word	0x080078a7
 800780c:	080078a7 	.word	0x080078a7
 8007810:	080078a7 	.word	0x080078a7
 8007814:	080078a7 	.word	0x080078a7
 8007818:	080078a7 	.word	0x080078a7
 800781c:	080078a7 	.word	0x080078a7
 8007820:	080078a7 	.word	0x080078a7
 8007824:	080078a7 	.word	0x080078a7
 8007828:	080078a7 	.word	0x080078a7
 800782c:	080078a7 	.word	0x080078a7
 8007830:	080078a7 	.word	0x080078a7
 8007834:	080078a7 	.word	0x080078a7
 8007838:	08007899 	.word	0x08007899
 800783c:	2b40      	cmp	r3, #64	; 0x40
 800783e:	d02e      	beq.n	800789e <UART_SetConfig+0xab2>
 8007840:	e031      	b.n	80078a6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007842:	f7fb fee7 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 8007846:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007848:	e033      	b.n	80078b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800784a:	f7fb fef9 	bl	8003640 <HAL_RCC_GetPCLK2Freq>
 800784e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007850:	e02f      	b.n	80078b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007856:	4618      	mov	r0, r3
 8007858:	f7fd fdb4 	bl	80053c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007860:	e027      	b.n	80078b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007862:	f107 0318 	add.w	r3, r7, #24
 8007866:	4618      	mov	r0, r3
 8007868:	f7fd ff00 	bl	800566c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007870:	e01f      	b.n	80078b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007872:	4b69      	ldr	r3, [pc, #420]	; (8007a18 <UART_SetConfig+0xc2c>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0320 	and.w	r3, r3, #32
 800787a:	2b00      	cmp	r3, #0
 800787c:	d009      	beq.n	8007892 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800787e:	4b66      	ldr	r3, [pc, #408]	; (8007a18 <UART_SetConfig+0xc2c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	08db      	lsrs	r3, r3, #3
 8007884:	f003 0303 	and.w	r3, r3, #3
 8007888:	4a64      	ldr	r2, [pc, #400]	; (8007a1c <UART_SetConfig+0xc30>)
 800788a:	fa22 f303 	lsr.w	r3, r2, r3
 800788e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007890:	e00f      	b.n	80078b2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007892:	4b62      	ldr	r3, [pc, #392]	; (8007a1c <UART_SetConfig+0xc30>)
 8007894:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007896:	e00c      	b.n	80078b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007898:	4b61      	ldr	r3, [pc, #388]	; (8007a20 <UART_SetConfig+0xc34>)
 800789a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800789c:	e009      	b.n	80078b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800789e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078a4:	e005      	b.n	80078b2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80078b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 80ea 	beq.w	8007a8e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078be:	4a55      	ldr	r2, [pc, #340]	; (8007a14 <UART_SetConfig+0xc28>)
 80078c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078c4:	461a      	mov	r2, r3
 80078c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80078cc:	005a      	lsls	r2, r3, #1
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	085b      	lsrs	r3, r3, #1
 80078d4:	441a      	add	r2, r3
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	fbb2 f3f3 	udiv	r3, r2, r3
 80078de:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e2:	2b0f      	cmp	r3, #15
 80078e4:	d916      	bls.n	8007914 <UART_SetConfig+0xb28>
 80078e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ec:	d212      	bcs.n	8007914 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	f023 030f 	bic.w	r3, r3, #15
 80078f6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fa:	085b      	lsrs	r3, r3, #1
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	f003 0307 	and.w	r3, r3, #7
 8007902:	b29a      	uxth	r2, r3
 8007904:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007906:	4313      	orrs	r3, r2
 8007908:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007910:	60da      	str	r2, [r3, #12]
 8007912:	e0bc      	b.n	8007a8e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800791a:	e0b8      	b.n	8007a8e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800791c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007920:	2b20      	cmp	r3, #32
 8007922:	dc4b      	bgt.n	80079bc <UART_SetConfig+0xbd0>
 8007924:	2b00      	cmp	r3, #0
 8007926:	f2c0 8087 	blt.w	8007a38 <UART_SetConfig+0xc4c>
 800792a:	2b20      	cmp	r3, #32
 800792c:	f200 8084 	bhi.w	8007a38 <UART_SetConfig+0xc4c>
 8007930:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <UART_SetConfig+0xb4c>)
 8007932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007936:	bf00      	nop
 8007938:	080079c3 	.word	0x080079c3
 800793c:	080079cb 	.word	0x080079cb
 8007940:	08007a39 	.word	0x08007a39
 8007944:	08007a39 	.word	0x08007a39
 8007948:	080079d3 	.word	0x080079d3
 800794c:	08007a39 	.word	0x08007a39
 8007950:	08007a39 	.word	0x08007a39
 8007954:	08007a39 	.word	0x08007a39
 8007958:	080079e3 	.word	0x080079e3
 800795c:	08007a39 	.word	0x08007a39
 8007960:	08007a39 	.word	0x08007a39
 8007964:	08007a39 	.word	0x08007a39
 8007968:	08007a39 	.word	0x08007a39
 800796c:	08007a39 	.word	0x08007a39
 8007970:	08007a39 	.word	0x08007a39
 8007974:	08007a39 	.word	0x08007a39
 8007978:	080079f3 	.word	0x080079f3
 800797c:	08007a39 	.word	0x08007a39
 8007980:	08007a39 	.word	0x08007a39
 8007984:	08007a39 	.word	0x08007a39
 8007988:	08007a39 	.word	0x08007a39
 800798c:	08007a39 	.word	0x08007a39
 8007990:	08007a39 	.word	0x08007a39
 8007994:	08007a39 	.word	0x08007a39
 8007998:	08007a39 	.word	0x08007a39
 800799c:	08007a39 	.word	0x08007a39
 80079a0:	08007a39 	.word	0x08007a39
 80079a4:	08007a39 	.word	0x08007a39
 80079a8:	08007a39 	.word	0x08007a39
 80079ac:	08007a39 	.word	0x08007a39
 80079b0:	08007a39 	.word	0x08007a39
 80079b4:	08007a39 	.word	0x08007a39
 80079b8:	08007a2b 	.word	0x08007a2b
 80079bc:	2b40      	cmp	r3, #64	; 0x40
 80079be:	d037      	beq.n	8007a30 <UART_SetConfig+0xc44>
 80079c0:	e03a      	b.n	8007a38 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079c2:	f7fb fe27 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 80079c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079c8:	e03c      	b.n	8007a44 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079ca:	f7fb fe39 	bl	8003640 <HAL_RCC_GetPCLK2Freq>
 80079ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079d0:	e038      	b.n	8007a44 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fd fcf4 	bl	80053c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80079dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079e0:	e030      	b.n	8007a44 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079e2:	f107 0318 	add.w	r3, r7, #24
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fd fe40 	bl	800566c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079f0:	e028      	b.n	8007a44 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079f2:	4b09      	ldr	r3, [pc, #36]	; (8007a18 <UART_SetConfig+0xc2c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0320 	and.w	r3, r3, #32
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d012      	beq.n	8007a24 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80079fe:	4b06      	ldr	r3, [pc, #24]	; (8007a18 <UART_SetConfig+0xc2c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	08db      	lsrs	r3, r3, #3
 8007a04:	f003 0303 	and.w	r3, r3, #3
 8007a08:	4a04      	ldr	r2, [pc, #16]	; (8007a1c <UART_SetConfig+0xc30>)
 8007a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a10:	e018      	b.n	8007a44 <UART_SetConfig+0xc58>
 8007a12:	bf00      	nop
 8007a14:	0800acf0 	.word	0x0800acf0
 8007a18:	58024400 	.word	0x58024400
 8007a1c:	03d09000 	.word	0x03d09000
 8007a20:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007a24:	4b24      	ldr	r3, [pc, #144]	; (8007ab8 <UART_SetConfig+0xccc>)
 8007a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a28:	e00c      	b.n	8007a44 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a2a:	4b24      	ldr	r3, [pc, #144]	; (8007abc <UART_SetConfig+0xcd0>)
 8007a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a2e:	e009      	b.n	8007a44 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a36:	e005      	b.n	8007a44 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007a42:	bf00      	nop
    }

    if (pclk != 0U)
 8007a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d021      	beq.n	8007a8e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4e:	4a1c      	ldr	r2, [pc, #112]	; (8007ac0 <UART_SetConfig+0xcd4>)
 8007a50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a54:	461a      	mov	r2, r3
 8007a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a58:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	085b      	lsrs	r3, r3, #1
 8007a62:	441a      	add	r2, r3
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a6c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a70:	2b0f      	cmp	r3, #15
 8007a72:	d909      	bls.n	8007a88 <UART_SetConfig+0xc9c>
 8007a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a7a:	d205      	bcs.n	8007a88 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	60da      	str	r2, [r3, #12]
 8007a86:	e002      	b.n	8007a8e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007aaa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3748      	adds	r7, #72	; 0x48
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ab8:	03d09000 	.word	0x03d09000
 8007abc:	003d0900 	.word	0x003d0900
 8007ac0:	0800acf0 	.word	0x0800acf0

08007ac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00a      	beq.n	8007aee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00a      	beq.n	8007b10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b14:	f003 0304 	and.w	r3, r3, #4
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00a      	beq.n	8007b32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b36:	f003 0308 	and.w	r3, r3, #8
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00a      	beq.n	8007b54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b58:	f003 0310 	and.w	r3, r3, #16
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00a      	beq.n	8007b76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	430a      	orrs	r2, r1
 8007b96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d01a      	beq.n	8007bda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bc2:	d10a      	bne.n	8007bda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00a      	beq.n	8007bfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	605a      	str	r2, [r3, #4]
  }
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b098      	sub	sp, #96	; 0x60
 8007c0c:	af02      	add	r7, sp, #8
 8007c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c18:	f7f9 fae0 	bl	80011dc <HAL_GetTick>
 8007c1c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0308 	and.w	r3, r3, #8
 8007c28:	2b08      	cmp	r3, #8
 8007c2a:	d12f      	bne.n	8007c8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c34:	2200      	movs	r2, #0
 8007c36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f88e 	bl	8007d5c <UART_WaitOnFlagUntilTimeout>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d022      	beq.n	8007c8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4e:	e853 3f00 	ldrex	r3, [r3]
 8007c52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c5a:	653b      	str	r3, [r7, #80]	; 0x50
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	461a      	mov	r2, r3
 8007c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c64:	647b      	str	r3, [r7, #68]	; 0x44
 8007c66:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c6c:	e841 2300 	strex	r3, r2, [r1]
 8007c70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1e6      	bne.n	8007c46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2220      	movs	r2, #32
 8007c7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e063      	b.n	8007d54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0304 	and.w	r3, r3, #4
 8007c96:	2b04      	cmp	r3, #4
 8007c98:	d149      	bne.n	8007d2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f857 	bl	8007d5c <UART_WaitOnFlagUntilTimeout>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d03c      	beq.n	8007d2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	e853 3f00 	ldrex	r3, [r3]
 8007cc0:	623b      	str	r3, [r7, #32]
   return(result);
 8007cc2:	6a3b      	ldr	r3, [r7, #32]
 8007cc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cd2:	633b      	str	r3, [r7, #48]	; 0x30
 8007cd4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cda:	e841 2300 	strex	r3, r2, [r1]
 8007cde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1e6      	bne.n	8007cb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3308      	adds	r3, #8
 8007cec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	e853 3f00 	ldrex	r3, [r3]
 8007cf4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f023 0301 	bic.w	r3, r3, #1
 8007cfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3308      	adds	r3, #8
 8007d04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d06:	61fa      	str	r2, [r7, #28]
 8007d08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0a:	69b9      	ldr	r1, [r7, #24]
 8007d0c:	69fa      	ldr	r2, [r7, #28]
 8007d0e:	e841 2300 	strex	r3, r2, [r1]
 8007d12:	617b      	str	r3, [r7, #20]
   return(result);
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1e5      	bne.n	8007ce6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e012      	b.n	8007d54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2220      	movs	r2, #32
 8007d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2220      	movs	r2, #32
 8007d3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3758      	adds	r7, #88	; 0x58
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	603b      	str	r3, [r7, #0]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d6c:	e049      	b.n	8007e02 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d74:	d045      	beq.n	8007e02 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d76:	f7f9 fa31 	bl	80011dc <HAL_GetTick>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d302      	bcc.n	8007d8c <UART_WaitOnFlagUntilTimeout+0x30>
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d101      	bne.n	8007d90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	e048      	b.n	8007e22 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0304 	and.w	r3, r3, #4
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d031      	beq.n	8007e02 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	69db      	ldr	r3, [r3, #28]
 8007da4:	f003 0308 	and.w	r3, r3, #8
 8007da8:	2b08      	cmp	r3, #8
 8007daa:	d110      	bne.n	8007dce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2208      	movs	r2, #8
 8007db2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f000 f839 	bl	8007e2c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2208      	movs	r2, #8
 8007dbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e029      	b.n	8007e22 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	69db      	ldr	r3, [r3, #28]
 8007dd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ddc:	d111      	bne.n	8007e02 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007de6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f000 f81f 	bl	8007e2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2220      	movs	r2, #32
 8007df2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e00f      	b.n	8007e22 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	69da      	ldr	r2, [r3, #28]
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	bf0c      	ite	eq
 8007e12:	2301      	moveq	r3, #1
 8007e14:	2300      	movne	r3, #0
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	461a      	mov	r2, r3
 8007e1a:	79fb      	ldrb	r3, [r7, #7]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d0a6      	beq.n	8007d6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
	...

08007e2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b095      	sub	sp, #84	; 0x54
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e3c:	e853 3f00 	ldrex	r3, [r3]
 8007e40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e52:	643b      	str	r3, [r7, #64]	; 0x40
 8007e54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e5a:	e841 2300 	strex	r3, r2, [r1]
 8007e5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1e6      	bne.n	8007e34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	3308      	adds	r3, #8
 8007e6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6e:	6a3b      	ldr	r3, [r7, #32]
 8007e70:	e853 3f00 	ldrex	r3, [r3]
 8007e74:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e76:	69fa      	ldr	r2, [r7, #28]
 8007e78:	4b1e      	ldr	r3, [pc, #120]	; (8007ef4 <UART_EndRxTransfer+0xc8>)
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	3308      	adds	r3, #8
 8007e84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e8e:	e841 2300 	strex	r3, r2, [r1]
 8007e92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1e5      	bne.n	8007e66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d118      	bne.n	8007ed4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	e853 3f00 	ldrex	r3, [r3]
 8007eae:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f023 0310 	bic.w	r3, r3, #16
 8007eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ec0:	61bb      	str	r3, [r7, #24]
 8007ec2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec4:	6979      	ldr	r1, [r7, #20]
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	e841 2300 	strex	r3, r2, [r1]
 8007ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1e6      	bne.n	8007ea2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2220      	movs	r2, #32
 8007ed8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007ee8:	bf00      	nop
 8007eea:	3754      	adds	r7, #84	; 0x54
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	effffffe 	.word	0xeffffffe

08007ef8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d101      	bne.n	8007f0e <HAL_UARTEx_DisableFifoMode+0x16>
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	e027      	b.n	8007f5e <HAL_UARTEx_DisableFifoMode+0x66>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2224      	movs	r2, #36	; 0x24
 8007f1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0201 	bic.w	r2, r2, #1
 8007f34:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007f3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2220      	movs	r2, #32
 8007f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b084      	sub	sp, #16
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d101      	bne.n	8007f82 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f7e:	2302      	movs	r3, #2
 8007f80:	e02d      	b.n	8007fde <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2224      	movs	r2, #36	; 0x24
 8007f8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f022 0201 	bic.w	r2, r2, #1
 8007fa8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f850 	bl	8008064 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2220      	movs	r2, #32
 8007fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d101      	bne.n	8007ffe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	e02d      	b.n	800805a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2224      	movs	r2, #36	; 0x24
 800800a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f022 0201 	bic.w	r2, r2, #1
 8008024:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	430a      	orrs	r2, r1
 8008038:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f812 	bl	8008064 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2220      	movs	r2, #32
 800804c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
	...

08008064 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008070:	2b00      	cmp	r3, #0
 8008072:	d108      	bne.n	8008086 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008084:	e031      	b.n	80080ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008086:	2310      	movs	r3, #16
 8008088:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800808a:	2310      	movs	r3, #16
 800808c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	0e5b      	lsrs	r3, r3, #25
 8008096:	b2db      	uxtb	r3, r3
 8008098:	f003 0307 	and.w	r3, r3, #7
 800809c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	0f5b      	lsrs	r3, r3, #29
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	f003 0307 	and.w	r3, r3, #7
 80080ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080ae:	7bbb      	ldrb	r3, [r7, #14]
 80080b0:	7b3a      	ldrb	r2, [r7, #12]
 80080b2:	4911      	ldr	r1, [pc, #68]	; (80080f8 <UARTEx_SetNbDataToProcess+0x94>)
 80080b4:	5c8a      	ldrb	r2, [r1, r2]
 80080b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080ba:	7b3a      	ldrb	r2, [r7, #12]
 80080bc:	490f      	ldr	r1, [pc, #60]	; (80080fc <UARTEx_SetNbDataToProcess+0x98>)
 80080be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	7b7a      	ldrb	r2, [r7, #13]
 80080d0:	4909      	ldr	r1, [pc, #36]	; (80080f8 <UARTEx_SetNbDataToProcess+0x94>)
 80080d2:	5c8a      	ldrb	r2, [r1, r2]
 80080d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080d8:	7b7a      	ldrb	r2, [r7, #13]
 80080da:	4908      	ldr	r1, [pc, #32]	; (80080fc <UARTEx_SetNbDataToProcess+0x98>)
 80080dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080de:	fb93 f3f2 	sdiv	r3, r3, r2
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80080ea:	bf00      	nop
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	0800ad08 	.word	0x0800ad08
 80080fc:	0800ad10 	.word	0x0800ad10

08008100 <__NVIC_SetPriority>:
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	4603      	mov	r3, r0
 8008108:	6039      	str	r1, [r7, #0]
 800810a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800810c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008110:	2b00      	cmp	r3, #0
 8008112:	db0a      	blt.n	800812a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	b2da      	uxtb	r2, r3
 8008118:	490c      	ldr	r1, [pc, #48]	; (800814c <__NVIC_SetPriority+0x4c>)
 800811a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800811e:	0112      	lsls	r2, r2, #4
 8008120:	b2d2      	uxtb	r2, r2
 8008122:	440b      	add	r3, r1
 8008124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008128:	e00a      	b.n	8008140 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	b2da      	uxtb	r2, r3
 800812e:	4908      	ldr	r1, [pc, #32]	; (8008150 <__NVIC_SetPriority+0x50>)
 8008130:	88fb      	ldrh	r3, [r7, #6]
 8008132:	f003 030f 	and.w	r3, r3, #15
 8008136:	3b04      	subs	r3, #4
 8008138:	0112      	lsls	r2, r2, #4
 800813a:	b2d2      	uxtb	r2, r2
 800813c:	440b      	add	r3, r1
 800813e:	761a      	strb	r2, [r3, #24]
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	e000e100 	.word	0xe000e100
 8008150:	e000ed00 	.word	0xe000ed00

08008154 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008154:	b580      	push	{r7, lr}
 8008156:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008158:	2100      	movs	r1, #0
 800815a:	f06f 0004 	mvn.w	r0, #4
 800815e:	f7ff ffcf 	bl	8008100 <__NVIC_SetPriority>
#endif
}
 8008162:	bf00      	nop
 8008164:	bd80      	pop	{r7, pc}
	...

08008168 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800816e:	f3ef 8305 	mrs	r3, IPSR
 8008172:	603b      	str	r3, [r7, #0]
  return(result);
 8008174:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008176:	2b00      	cmp	r3, #0
 8008178:	d003      	beq.n	8008182 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800817a:	f06f 0305 	mvn.w	r3, #5
 800817e:	607b      	str	r3, [r7, #4]
 8008180:	e00c      	b.n	800819c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008182:	4b0a      	ldr	r3, [pc, #40]	; (80081ac <osKernelInitialize+0x44>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d105      	bne.n	8008196 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800818a:	4b08      	ldr	r3, [pc, #32]	; (80081ac <osKernelInitialize+0x44>)
 800818c:	2201      	movs	r2, #1
 800818e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008190:	2300      	movs	r3, #0
 8008192:	607b      	str	r3, [r7, #4]
 8008194:	e002      	b.n	800819c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008196:	f04f 33ff 	mov.w	r3, #4294967295
 800819a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800819c:	687b      	ldr	r3, [r7, #4]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	2400017c 	.word	0x2400017c

080081b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081b6:	f3ef 8305 	mrs	r3, IPSR
 80081ba:	603b      	str	r3, [r7, #0]
  return(result);
 80081bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80081c2:	f06f 0305 	mvn.w	r3, #5
 80081c6:	607b      	str	r3, [r7, #4]
 80081c8:	e010      	b.n	80081ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80081ca:	4b0b      	ldr	r3, [pc, #44]	; (80081f8 <osKernelStart+0x48>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d109      	bne.n	80081e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80081d2:	f7ff ffbf 	bl	8008154 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80081d6:	4b08      	ldr	r3, [pc, #32]	; (80081f8 <osKernelStart+0x48>)
 80081d8:	2202      	movs	r2, #2
 80081da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80081dc:	f001 f866 	bl	80092ac <vTaskStartScheduler>
      stat = osOK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	607b      	str	r3, [r7, #4]
 80081e4:	e002      	b.n	80081ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80081e6:	f04f 33ff 	mov.w	r3, #4294967295
 80081ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80081ec:	687b      	ldr	r3, [r7, #4]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	2400017c 	.word	0x2400017c

080081fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b08e      	sub	sp, #56	; 0x38
 8008200:	af04      	add	r7, sp, #16
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008208:	2300      	movs	r3, #0
 800820a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800820c:	f3ef 8305 	mrs	r3, IPSR
 8008210:	617b      	str	r3, [r7, #20]
  return(result);
 8008212:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008214:	2b00      	cmp	r3, #0
 8008216:	d17e      	bne.n	8008316 <osThreadNew+0x11a>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d07b      	beq.n	8008316 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800821e:	2380      	movs	r3, #128	; 0x80
 8008220:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008222:	2318      	movs	r3, #24
 8008224:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008226:	2300      	movs	r3, #0
 8008228:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800822a:	f04f 33ff 	mov.w	r3, #4294967295
 800822e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d045      	beq.n	80082c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d002      	beq.n	8008244 <osThreadNew+0x48>
        name = attr->name;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d002      	beq.n	8008252 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d008      	beq.n	800826a <osThreadNew+0x6e>
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	2b38      	cmp	r3, #56	; 0x38
 800825c:	d805      	bhi.n	800826a <osThreadNew+0x6e>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <osThreadNew+0x72>
        return (NULL);
 800826a:	2300      	movs	r3, #0
 800826c:	e054      	b.n	8008318 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	089b      	lsrs	r3, r3, #2
 800827c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00e      	beq.n	80082a4 <osThreadNew+0xa8>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	2b5b      	cmp	r3, #91	; 0x5b
 800828c:	d90a      	bls.n	80082a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008292:	2b00      	cmp	r3, #0
 8008294:	d006      	beq.n	80082a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d002      	beq.n	80082a4 <osThreadNew+0xa8>
        mem = 1;
 800829e:	2301      	movs	r3, #1
 80082a0:	61bb      	str	r3, [r7, #24]
 80082a2:	e010      	b.n	80082c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10c      	bne.n	80082c6 <osThreadNew+0xca>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d108      	bne.n	80082c6 <osThreadNew+0xca>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d104      	bne.n	80082c6 <osThreadNew+0xca>
          mem = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	61bb      	str	r3, [r7, #24]
 80082c0:	e001      	b.n	80082c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80082c2:	2300      	movs	r3, #0
 80082c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d110      	bne.n	80082ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80082d4:	9202      	str	r2, [sp, #8]
 80082d6:	9301      	str	r3, [sp, #4]
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	6a3a      	ldr	r2, [r7, #32]
 80082e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f000 fe0c 	bl	8008f00 <xTaskCreateStatic>
 80082e8:	4603      	mov	r3, r0
 80082ea:	613b      	str	r3, [r7, #16]
 80082ec:	e013      	b.n	8008316 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d110      	bne.n	8008316 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80082f4:	6a3b      	ldr	r3, [r7, #32]
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	f107 0310 	add.w	r3, r7, #16
 80082fc:	9301      	str	r3, [sp, #4]
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 fe57 	bl	8008fba <xTaskCreate>
 800830c:	4603      	mov	r3, r0
 800830e:	2b01      	cmp	r3, #1
 8008310:	d001      	beq.n	8008316 <osThreadNew+0x11a>
            hTask = NULL;
 8008312:	2300      	movs	r3, #0
 8008314:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008316:	693b      	ldr	r3, [r7, #16]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3728      	adds	r7, #40	; 0x28
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008328:	f3ef 8305 	mrs	r3, IPSR
 800832c:	60bb      	str	r3, [r7, #8]
  return(result);
 800832e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008330:	2b00      	cmp	r3, #0
 8008332:	d003      	beq.n	800833c <osDelay+0x1c>
    stat = osErrorISR;
 8008334:	f06f 0305 	mvn.w	r3, #5
 8008338:	60fb      	str	r3, [r7, #12]
 800833a:	e007      	b.n	800834c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800833c:	2300      	movs	r3, #0
 800833e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d002      	beq.n	800834c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 ff7c 	bl	8009244 <vTaskDelay>
    }
  }

  return (stat);
 800834c:	68fb      	ldr	r3, [r7, #12]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
	...

08008358 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	4a07      	ldr	r2, [pc, #28]	; (8008384 <vApplicationGetIdleTaskMemory+0x2c>)
 8008368:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	4a06      	ldr	r2, [pc, #24]	; (8008388 <vApplicationGetIdleTaskMemory+0x30>)
 800836e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2280      	movs	r2, #128	; 0x80
 8008374:	601a      	str	r2, [r3, #0]
}
 8008376:	bf00      	nop
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	24000180 	.word	0x24000180
 8008388:	240001dc 	.word	0x240001dc

0800838c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	4a07      	ldr	r2, [pc, #28]	; (80083b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800839c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	4a06      	ldr	r2, [pc, #24]	; (80083bc <vApplicationGetTimerTaskMemory+0x30>)
 80083a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083aa:	601a      	str	r2, [r3, #0]
}
 80083ac:	bf00      	nop
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	240003dc 	.word	0x240003dc
 80083bc:	24000438 	.word	0x24000438

080083c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f103 0208 	add.w	r2, r3, #8
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f04f 32ff 	mov.w	r2, #4294967295
 80083d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f103 0208 	add.w	r2, r3, #8
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f103 0208 	add.w	r2, r3, #8
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800840e:	bf00      	nop
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800841a:	b480      	push	{r7}
 800841c:	b085      	sub	sp, #20
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	689a      	ldr	r2, [r3, #8]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	1c5a      	adds	r2, r3, #1
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	601a      	str	r2, [r3, #0]
}
 8008456:	bf00      	nop
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008462:	b480      	push	{r7}
 8008464:	b085      	sub	sp, #20
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008478:	d103      	bne.n	8008482 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	60fb      	str	r3, [r7, #12]
 8008480:	e00c      	b.n	800849c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	3308      	adds	r3, #8
 8008486:	60fb      	str	r3, [r7, #12]
 8008488:	e002      	b.n	8008490 <vListInsert+0x2e>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	429a      	cmp	r2, r3
 800849a:	d2f6      	bcs.n	800848a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	685a      	ldr	r2, [r3, #4]
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	601a      	str	r2, [r3, #0]
}
 80084c8:	bf00      	nop
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	6892      	ldr	r2, [r2, #8]
 80084ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	6852      	ldr	r2, [r2, #4]
 80084f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d103      	bne.n	8008508 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689a      	ldr	r2, [r3, #8]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	1e5a      	subs	r2, r3, #1
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10a      	bne.n	8008552 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800854e:	bf00      	nop
 8008550:	e7fe      	b.n	8008550 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008552:	f002 f84f 	bl	800a5f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800855e:	68f9      	ldr	r1, [r7, #12]
 8008560:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008562:	fb01 f303 	mul.w	r3, r1, r3
 8008566:	441a      	add	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008582:	3b01      	subs	r3, #1
 8008584:	68f9      	ldr	r1, [r7, #12]
 8008586:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008588:	fb01 f303 	mul.w	r3, r1, r3
 800858c:	441a      	add	r2, r3
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	22ff      	movs	r2, #255	; 0xff
 8008596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	22ff      	movs	r2, #255	; 0xff
 800859e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d114      	bne.n	80085d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d01a      	beq.n	80085e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	3310      	adds	r3, #16
 80085b4:	4618      	mov	r0, r3
 80085b6:	f001 f903 	bl	80097c0 <xTaskRemoveFromEventList>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d012      	beq.n	80085e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80085c0:	4b0c      	ldr	r3, [pc, #48]	; (80085f4 <xQueueGenericReset+0xcc>)
 80085c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085c6:	601a      	str	r2, [r3, #0]
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	e009      	b.n	80085e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	3310      	adds	r3, #16
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7ff fef2 	bl	80083c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	3324      	adds	r3, #36	; 0x24
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7ff feed 	bl	80083c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80085e6:	f002 f835 	bl	800a654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80085ea:	2301      	movs	r3, #1
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	e000ed04 	.word	0xe000ed04

080085f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b08e      	sub	sp, #56	; 0x38
 80085fc:	af02      	add	r7, sp, #8
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
 8008604:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10a      	bne.n	8008622 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800860c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008610:	f383 8811 	msr	BASEPRI, r3
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800861e:	bf00      	nop
 8008620:	e7fe      	b.n	8008620 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10a      	bne.n	800863e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862c:	f383 8811 	msr	BASEPRI, r3
 8008630:	f3bf 8f6f 	isb	sy
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	627b      	str	r3, [r7, #36]	; 0x24
}
 800863a:	bf00      	nop
 800863c:	e7fe      	b.n	800863c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d002      	beq.n	800864a <xQueueGenericCreateStatic+0x52>
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d001      	beq.n	800864e <xQueueGenericCreateStatic+0x56>
 800864a:	2301      	movs	r3, #1
 800864c:	e000      	b.n	8008650 <xQueueGenericCreateStatic+0x58>
 800864e:	2300      	movs	r3, #0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10a      	bne.n	800866a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	623b      	str	r3, [r7, #32]
}
 8008666:	bf00      	nop
 8008668:	e7fe      	b.n	8008668 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d102      	bne.n	8008676 <xQueueGenericCreateStatic+0x7e>
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d101      	bne.n	800867a <xQueueGenericCreateStatic+0x82>
 8008676:	2301      	movs	r3, #1
 8008678:	e000      	b.n	800867c <xQueueGenericCreateStatic+0x84>
 800867a:	2300      	movs	r3, #0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10a      	bne.n	8008696 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	61fb      	str	r3, [r7, #28]
}
 8008692:	bf00      	nop
 8008694:	e7fe      	b.n	8008694 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008696:	2350      	movs	r3, #80	; 0x50
 8008698:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2b50      	cmp	r3, #80	; 0x50
 800869e:	d00a      	beq.n	80086b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80086a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	61bb      	str	r3, [r7, #24]
}
 80086b2:	bf00      	nop
 80086b4:	e7fe      	b.n	80086b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80086b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80086bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00d      	beq.n	80086de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80086c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c4:	2201      	movs	r2, #1
 80086c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80086ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	4613      	mov	r3, r2
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	68b9      	ldr	r1, [r7, #8]
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f000 f805 	bl	80086e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80086de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3730      	adds	r7, #48	; 0x30
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]
 80086f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d103      	bne.n	8008704 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	69ba      	ldr	r2, [r7, #24]
 8008700:	601a      	str	r2, [r3, #0]
 8008702:	e002      	b.n	800870a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008716:	2101      	movs	r1, #1
 8008718:	69b8      	ldr	r0, [r7, #24]
 800871a:	f7ff ff05 	bl	8008528 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	78fa      	ldrb	r2, [r7, #3]
 8008722:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008726:	bf00      	nop
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
	...

08008730 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b08e      	sub	sp, #56	; 0x38
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
 800873c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800873e:	2300      	movs	r3, #0
 8008740:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10a      	bne.n	8008762 <xQueueGenericSend+0x32>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800875e:	bf00      	nop
 8008760:	e7fe      	b.n	8008760 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d103      	bne.n	8008770 <xQueueGenericSend+0x40>
 8008768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876c:	2b00      	cmp	r3, #0
 800876e:	d101      	bne.n	8008774 <xQueueGenericSend+0x44>
 8008770:	2301      	movs	r3, #1
 8008772:	e000      	b.n	8008776 <xQueueGenericSend+0x46>
 8008774:	2300      	movs	r3, #0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10a      	bne.n	8008790 <xQueueGenericSend+0x60>
	__asm volatile
 800877a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877e:	f383 8811 	msr	BASEPRI, r3
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800878c:	bf00      	nop
 800878e:	e7fe      	b.n	800878e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	2b02      	cmp	r3, #2
 8008794:	d103      	bne.n	800879e <xQueueGenericSend+0x6e>
 8008796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800879a:	2b01      	cmp	r3, #1
 800879c:	d101      	bne.n	80087a2 <xQueueGenericSend+0x72>
 800879e:	2301      	movs	r3, #1
 80087a0:	e000      	b.n	80087a4 <xQueueGenericSend+0x74>
 80087a2:	2300      	movs	r3, #0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10a      	bne.n	80087be <xQueueGenericSend+0x8e>
	__asm volatile
 80087a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	623b      	str	r3, [r7, #32]
}
 80087ba:	bf00      	nop
 80087bc:	e7fe      	b.n	80087bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087be:	f001 f9bd 	bl	8009b3c <xTaskGetSchedulerState>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d102      	bne.n	80087ce <xQueueGenericSend+0x9e>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <xQueueGenericSend+0xa2>
 80087ce:	2301      	movs	r3, #1
 80087d0:	e000      	b.n	80087d4 <xQueueGenericSend+0xa4>
 80087d2:	2300      	movs	r3, #0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10a      	bne.n	80087ee <xQueueGenericSend+0xbe>
	__asm volatile
 80087d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087dc:	f383 8811 	msr	BASEPRI, r3
 80087e0:	f3bf 8f6f 	isb	sy
 80087e4:	f3bf 8f4f 	dsb	sy
 80087e8:	61fb      	str	r3, [r7, #28]
}
 80087ea:	bf00      	nop
 80087ec:	e7fe      	b.n	80087ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087ee:	f001 ff01 	bl	800a5f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d302      	bcc.n	8008804 <xQueueGenericSend+0xd4>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2b02      	cmp	r3, #2
 8008802:	d129      	bne.n	8008858 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	68b9      	ldr	r1, [r7, #8]
 8008808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800880a:	f000 fa0b 	bl	8008c24 <prvCopyDataToQueue>
 800880e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008814:	2b00      	cmp	r3, #0
 8008816:	d010      	beq.n	800883a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881a:	3324      	adds	r3, #36	; 0x24
 800881c:	4618      	mov	r0, r3
 800881e:	f000 ffcf 	bl	80097c0 <xTaskRemoveFromEventList>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d013      	beq.n	8008850 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008828:	4b3f      	ldr	r3, [pc, #252]	; (8008928 <xQueueGenericSend+0x1f8>)
 800882a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	e00a      	b.n	8008850 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800883a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883c:	2b00      	cmp	r3, #0
 800883e:	d007      	beq.n	8008850 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008840:	4b39      	ldr	r3, [pc, #228]	; (8008928 <xQueueGenericSend+0x1f8>)
 8008842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008850:	f001 ff00 	bl	800a654 <vPortExitCritical>
				return pdPASS;
 8008854:	2301      	movs	r3, #1
 8008856:	e063      	b.n	8008920 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d103      	bne.n	8008866 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800885e:	f001 fef9 	bl	800a654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008862:	2300      	movs	r3, #0
 8008864:	e05c      	b.n	8008920 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008868:	2b00      	cmp	r3, #0
 800886a:	d106      	bne.n	800887a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800886c:	f107 0314 	add.w	r3, r7, #20
 8008870:	4618      	mov	r0, r3
 8008872:	f001 f809 	bl	8009888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008876:	2301      	movs	r3, #1
 8008878:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800887a:	f001 feeb 	bl	800a654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800887e:	f000 fd7b 	bl	8009378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008882:	f001 feb7 	bl	800a5f4 <vPortEnterCritical>
 8008886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008888:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800888c:	b25b      	sxtb	r3, r3
 800888e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008892:	d103      	bne.n	800889c <xQueueGenericSend+0x16c>
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800889c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088a2:	b25b      	sxtb	r3, r3
 80088a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a8:	d103      	bne.n	80088b2 <xQueueGenericSend+0x182>
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088b2:	f001 fecf 	bl	800a654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088b6:	1d3a      	adds	r2, r7, #4
 80088b8:	f107 0314 	add.w	r3, r7, #20
 80088bc:	4611      	mov	r1, r2
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 fff8 	bl	80098b4 <xTaskCheckForTimeOut>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d124      	bne.n	8008914 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088cc:	f000 faa2 	bl	8008e14 <prvIsQueueFull>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d018      	beq.n	8008908 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d8:	3310      	adds	r3, #16
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	4611      	mov	r1, r2
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 ff1e 	bl	8009720 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80088e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088e6:	f000 fa2d 	bl	8008d44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80088ea:	f000 fd53 	bl	8009394 <xTaskResumeAll>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f47f af7c 	bne.w	80087ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80088f6:	4b0c      	ldr	r3, [pc, #48]	; (8008928 <xQueueGenericSend+0x1f8>)
 80088f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	e772      	b.n	80087ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800890a:	f000 fa1b 	bl	8008d44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800890e:	f000 fd41 	bl	8009394 <xTaskResumeAll>
 8008912:	e76c      	b.n	80087ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008916:	f000 fa15 	bl	8008d44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800891a:	f000 fd3b 	bl	8009394 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800891e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008920:	4618      	mov	r0, r3
 8008922:	3738      	adds	r7, #56	; 0x38
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	e000ed04 	.word	0xe000ed04

0800892c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b090      	sub	sp, #64	; 0x40
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
 8008938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800893e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10a      	bne.n	800895a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008948:	f383 8811 	msr	BASEPRI, r3
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	f3bf 8f4f 	dsb	sy
 8008954:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008956:	bf00      	nop
 8008958:	e7fe      	b.n	8008958 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d103      	bne.n	8008968 <xQueueGenericSendFromISR+0x3c>
 8008960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008964:	2b00      	cmp	r3, #0
 8008966:	d101      	bne.n	800896c <xQueueGenericSendFromISR+0x40>
 8008968:	2301      	movs	r3, #1
 800896a:	e000      	b.n	800896e <xQueueGenericSendFromISR+0x42>
 800896c:	2300      	movs	r3, #0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d10a      	bne.n	8008988 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008984:	bf00      	nop
 8008986:	e7fe      	b.n	8008986 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	2b02      	cmp	r3, #2
 800898c:	d103      	bne.n	8008996 <xQueueGenericSendFromISR+0x6a>
 800898e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008992:	2b01      	cmp	r3, #1
 8008994:	d101      	bne.n	800899a <xQueueGenericSendFromISR+0x6e>
 8008996:	2301      	movs	r3, #1
 8008998:	e000      	b.n	800899c <xQueueGenericSendFromISR+0x70>
 800899a:	2300      	movs	r3, #0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10a      	bne.n	80089b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	623b      	str	r3, [r7, #32]
}
 80089b2:	bf00      	nop
 80089b4:	e7fe      	b.n	80089b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089b6:	f001 feff 	bl	800a7b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089ba:	f3ef 8211 	mrs	r2, BASEPRI
 80089be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	61fa      	str	r2, [r7, #28]
 80089d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089de:	429a      	cmp	r2, r3
 80089e0:	d302      	bcc.n	80089e8 <xQueueGenericSendFromISR+0xbc>
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d12f      	bne.n	8008a48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	68b9      	ldr	r1, [r7, #8]
 80089fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089fe:	f000 f911 	bl	8008c24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0a:	d112      	bne.n	8008a32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d016      	beq.n	8008a42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a16:	3324      	adds	r3, #36	; 0x24
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f000 fed1 	bl	80097c0 <xTaskRemoveFromEventList>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00e      	beq.n	8008a42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00b      	beq.n	8008a42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	601a      	str	r2, [r3, #0]
 8008a30:	e007      	b.n	8008a42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008a36:	3301      	adds	r3, #1
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	b25a      	sxtb	r2, r3
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008a42:	2301      	movs	r3, #1
 8008a44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008a46:	e001      	b.n	8008a4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3740      	adds	r7, #64	; 0x40
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
	...

08008a64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08c      	sub	sp, #48	; 0x30
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a70:	2300      	movs	r3, #0
 8008a72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10a      	bne.n	8008a94 <xQueueReceive+0x30>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	623b      	str	r3, [r7, #32]
}
 8008a90:	bf00      	nop
 8008a92:	e7fe      	b.n	8008a92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d103      	bne.n	8008aa2 <xQueueReceive+0x3e>
 8008a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d101      	bne.n	8008aa6 <xQueueReceive+0x42>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e000      	b.n	8008aa8 <xQueueReceive+0x44>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d10a      	bne.n	8008ac2 <xQueueReceive+0x5e>
	__asm volatile
 8008aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab0:	f383 8811 	msr	BASEPRI, r3
 8008ab4:	f3bf 8f6f 	isb	sy
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	61fb      	str	r3, [r7, #28]
}
 8008abe:	bf00      	nop
 8008ac0:	e7fe      	b.n	8008ac0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ac2:	f001 f83b 	bl	8009b3c <xTaskGetSchedulerState>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d102      	bne.n	8008ad2 <xQueueReceive+0x6e>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d101      	bne.n	8008ad6 <xQueueReceive+0x72>
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e000      	b.n	8008ad8 <xQueueReceive+0x74>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10a      	bne.n	8008af2 <xQueueReceive+0x8e>
	__asm volatile
 8008adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae0:	f383 8811 	msr	BASEPRI, r3
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	61bb      	str	r3, [r7, #24]
}
 8008aee:	bf00      	nop
 8008af0:	e7fe      	b.n	8008af0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008af2:	f001 fd7f 	bl	800a5f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d01f      	beq.n	8008b42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b02:	68b9      	ldr	r1, [r7, #8]
 8008b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b06:	f000 f8f7 	bl	8008cf8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0c:	1e5a      	subs	r2, r3, #1
 8008b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00f      	beq.n	8008b3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1c:	3310      	adds	r3, #16
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 fe4e 	bl	80097c0 <xTaskRemoveFromEventList>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d007      	beq.n	8008b3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b2a:	4b3d      	ldr	r3, [pc, #244]	; (8008c20 <xQueueReceive+0x1bc>)
 8008b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b30:	601a      	str	r2, [r3, #0]
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b3a:	f001 fd8b 	bl	800a654 <vPortExitCritical>
				return pdPASS;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e069      	b.n	8008c16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d103      	bne.n	8008b50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b48:	f001 fd84 	bl	800a654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	e062      	b.n	8008c16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d106      	bne.n	8008b64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b56:	f107 0310 	add.w	r3, r7, #16
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 fe94 	bl	8009888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b60:	2301      	movs	r3, #1
 8008b62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b64:	f001 fd76 	bl	800a654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b68:	f000 fc06 	bl	8009378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b6c:	f001 fd42 	bl	800a5f4 <vPortEnterCritical>
 8008b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b76:	b25b      	sxtb	r3, r3
 8008b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7c:	d103      	bne.n	8008b86 <xQueueReceive+0x122>
 8008b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b8c:	b25b      	sxtb	r3, r3
 8008b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b92:	d103      	bne.n	8008b9c <xQueueReceive+0x138>
 8008b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b9c:	f001 fd5a 	bl	800a654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ba0:	1d3a      	adds	r2, r7, #4
 8008ba2:	f107 0310 	add.w	r3, r7, #16
 8008ba6:	4611      	mov	r1, r2
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 fe83 	bl	80098b4 <xTaskCheckForTimeOut>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d123      	bne.n	8008bfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bb6:	f000 f917 	bl	8008de8 <prvIsQueueEmpty>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d017      	beq.n	8008bf0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	3324      	adds	r3, #36	; 0x24
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	4611      	mov	r1, r2
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 fda9 	bl	8009720 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bd0:	f000 f8b8 	bl	8008d44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bd4:	f000 fbde 	bl	8009394 <xTaskResumeAll>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d189      	bne.n	8008af2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008bde:	4b10      	ldr	r3, [pc, #64]	; (8008c20 <xQueueReceive+0x1bc>)
 8008be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008be4:	601a      	str	r2, [r3, #0]
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	e780      	b.n	8008af2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bf2:	f000 f8a7 	bl	8008d44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008bf6:	f000 fbcd 	bl	8009394 <xTaskResumeAll>
 8008bfa:	e77a      	b.n	8008af2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bfe:	f000 f8a1 	bl	8008d44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c02:	f000 fbc7 	bl	8009394 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c08:	f000 f8ee 	bl	8008de8 <prvIsQueueEmpty>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f43f af6f 	beq.w	8008af2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3730      	adds	r7, #48	; 0x30
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	e000ed04 	.word	0xe000ed04

08008c24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b086      	sub	sp, #24
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c30:	2300      	movs	r3, #0
 8008c32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d10d      	bne.n	8008c5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d14d      	bne.n	8008ce6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 ff92 	bl	8009b78 <xTaskPriorityDisinherit>
 8008c54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	609a      	str	r2, [r3, #8]
 8008c5c:	e043      	b.n	8008ce6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d119      	bne.n	8008c98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6858      	ldr	r0, [r3, #4]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	68b9      	ldr	r1, [r7, #8]
 8008c70:	f001 fff0 	bl	800ac54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	685a      	ldr	r2, [r3, #4]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7c:	441a      	add	r2, r3
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	685a      	ldr	r2, [r3, #4]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d32b      	bcc.n	8008ce6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	605a      	str	r2, [r3, #4]
 8008c96:	e026      	b.n	8008ce6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	68d8      	ldr	r0, [r3, #12]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	68b9      	ldr	r1, [r7, #8]
 8008ca4:	f001 ffd6 	bl	800ac54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	68da      	ldr	r2, [r3, #12]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb0:	425b      	negs	r3, r3
 8008cb2:	441a      	add	r2, r3
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	68da      	ldr	r2, [r3, #12]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d207      	bcs.n	8008cd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	689a      	ldr	r2, [r3, #8]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ccc:	425b      	negs	r3, r3
 8008cce:	441a      	add	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d105      	bne.n	8008ce6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d002      	beq.n	8008ce6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	1c5a      	adds	r2, r3, #1
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008cee:	697b      	ldr	r3, [r7, #20]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3718      	adds	r7, #24
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d018      	beq.n	8008d3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68da      	ldr	r2, [r3, #12]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d12:	441a      	add	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	68da      	ldr	r2, [r3, #12]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d303      	bcc.n	8008d2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	68d9      	ldr	r1, [r3, #12]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d34:	461a      	mov	r2, r3
 8008d36:	6838      	ldr	r0, [r7, #0]
 8008d38:	f001 ff8c 	bl	800ac54 <memcpy>
	}
}
 8008d3c:	bf00      	nop
 8008d3e:	3708      	adds	r7, #8
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d4c:	f001 fc52 	bl	800a5f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d58:	e011      	b.n	8008d7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d012      	beq.n	8008d88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	3324      	adds	r3, #36	; 0x24
 8008d66:	4618      	mov	r0, r3
 8008d68:	f000 fd2a 	bl	80097c0 <xTaskRemoveFromEventList>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d001      	beq.n	8008d76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d72:	f000 fe01 	bl	8009978 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	dce9      	bgt.n	8008d5a <prvUnlockQueue+0x16>
 8008d86:	e000      	b.n	8008d8a <prvUnlockQueue+0x46>
					break;
 8008d88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	22ff      	movs	r2, #255	; 0xff
 8008d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008d92:	f001 fc5f 	bl	800a654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d96:	f001 fc2d 	bl	800a5f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008da0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008da2:	e011      	b.n	8008dc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d012      	beq.n	8008dd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	3310      	adds	r3, #16
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 fd05 	bl	80097c0 <xTaskRemoveFromEventList>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d001      	beq.n	8008dc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008dbc:	f000 fddc 	bl	8009978 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008dc0:	7bbb      	ldrb	r3, [r7, #14]
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008dc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	dce9      	bgt.n	8008da4 <prvUnlockQueue+0x60>
 8008dd0:	e000      	b.n	8008dd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008dd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	22ff      	movs	r2, #255	; 0xff
 8008dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008ddc:	f001 fc3a 	bl	800a654 <vPortExitCritical>
}
 8008de0:	bf00      	nop
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008df0:	f001 fc00 	bl	800a5f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d102      	bne.n	8008e02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	60fb      	str	r3, [r7, #12]
 8008e00:	e001      	b.n	8008e06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e02:	2300      	movs	r3, #0
 8008e04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e06:	f001 fc25 	bl	800a654 <vPortExitCritical>

	return xReturn;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e1c:	f001 fbea 	bl	800a5f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d102      	bne.n	8008e32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	60fb      	str	r3, [r7, #12]
 8008e30:	e001      	b.n	8008e36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e32:	2300      	movs	r3, #0
 8008e34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e36:	f001 fc0d 	bl	800a654 <vPortExitCritical>

	return xReturn;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e4e:	2300      	movs	r3, #0
 8008e50:	60fb      	str	r3, [r7, #12]
 8008e52:	e014      	b.n	8008e7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008e54:	4a0f      	ldr	r2, [pc, #60]	; (8008e94 <vQueueAddToRegistry+0x50>)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10b      	bne.n	8008e78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008e60:	490c      	ldr	r1, [pc, #48]	; (8008e94 <vQueueAddToRegistry+0x50>)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	683a      	ldr	r2, [r7, #0]
 8008e66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008e6a:	4a0a      	ldr	r2, [pc, #40]	; (8008e94 <vQueueAddToRegistry+0x50>)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	00db      	lsls	r3, r3, #3
 8008e70:	4413      	add	r3, r2
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008e76:	e006      	b.n	8008e86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	60fb      	str	r3, [r7, #12]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2b07      	cmp	r3, #7
 8008e82:	d9e7      	bls.n	8008e54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008e84:	bf00      	nop
 8008e86:	bf00      	nop
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	24000838 	.word	0x24000838

08008e98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008ea8:	f001 fba4 	bl	800a5f4 <vPortEnterCritical>
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008eb2:	b25b      	sxtb	r3, r3
 8008eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb8:	d103      	bne.n	8008ec2 <vQueueWaitForMessageRestricted+0x2a>
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ec8:	b25b      	sxtb	r3, r3
 8008eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ece:	d103      	bne.n	8008ed8 <vQueueWaitForMessageRestricted+0x40>
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ed8:	f001 fbbc 	bl	800a654 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d106      	bne.n	8008ef2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	3324      	adds	r3, #36	; 0x24
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	68b9      	ldr	r1, [r7, #8]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f000 fc3b 	bl	8009768 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008ef2:	6978      	ldr	r0, [r7, #20]
 8008ef4:	f7ff ff26 	bl	8008d44 <prvUnlockQueue>
	}
 8008ef8:	bf00      	nop
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b08e      	sub	sp, #56	; 0x38
 8008f04:	af04      	add	r7, sp, #16
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
 8008f0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10a      	bne.n	8008f2a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f18:	f383 8811 	msr	BASEPRI, r3
 8008f1c:	f3bf 8f6f 	isb	sy
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	623b      	str	r3, [r7, #32]
}
 8008f26:	bf00      	nop
 8008f28:	e7fe      	b.n	8008f28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d10a      	bne.n	8008f46 <xTaskCreateStatic+0x46>
	__asm volatile
 8008f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	61fb      	str	r3, [r7, #28]
}
 8008f42:	bf00      	nop
 8008f44:	e7fe      	b.n	8008f44 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f46:	235c      	movs	r3, #92	; 0x5c
 8008f48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	2b5c      	cmp	r3, #92	; 0x5c
 8008f4e:	d00a      	beq.n	8008f66 <xTaskCreateStatic+0x66>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	61bb      	str	r3, [r7, #24]
}
 8008f62:	bf00      	nop
 8008f64:	e7fe      	b.n	8008f64 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008f66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d01e      	beq.n	8008fac <xTaskCreateStatic+0xac>
 8008f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d01b      	beq.n	8008fac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f80:	2202      	movs	r2, #2
 8008f82:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008f86:	2300      	movs	r3, #0
 8008f88:	9303      	str	r3, [sp, #12]
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	9302      	str	r3, [sp, #8]
 8008f8e:	f107 0314 	add.w	r3, r7, #20
 8008f92:	9301      	str	r3, [sp, #4]
 8008f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	68b9      	ldr	r1, [r7, #8]
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f000 f850 	bl	8009044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fa6:	f000 f8dd 	bl	8009164 <prvAddNewTaskToReadyList>
 8008faa:	e001      	b.n	8008fb0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008fac:	2300      	movs	r3, #0
 8008fae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008fb0:	697b      	ldr	r3, [r7, #20]
	}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3728      	adds	r7, #40	; 0x28
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b08c      	sub	sp, #48	; 0x30
 8008fbe:	af04      	add	r7, sp, #16
 8008fc0:	60f8      	str	r0, [r7, #12]
 8008fc2:	60b9      	str	r1, [r7, #8]
 8008fc4:	603b      	str	r3, [r7, #0]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008fca:	88fb      	ldrh	r3, [r7, #6]
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f001 fc32 	bl	800a838 <pvPortMalloc>
 8008fd4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00e      	beq.n	8008ffa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008fdc:	205c      	movs	r0, #92	; 0x5c
 8008fde:	f001 fc2b 	bl	800a838 <pvPortMalloc>
 8008fe2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d003      	beq.n	8008ff2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	697a      	ldr	r2, [r7, #20]
 8008fee:	631a      	str	r2, [r3, #48]	; 0x30
 8008ff0:	e005      	b.n	8008ffe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ff2:	6978      	ldr	r0, [r7, #20]
 8008ff4:	f001 fcec 	bl	800a9d0 <vPortFree>
 8008ff8:	e001      	b.n	8008ffe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d017      	beq.n	8009034 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800900c:	88fa      	ldrh	r2, [r7, #6]
 800900e:	2300      	movs	r3, #0
 8009010:	9303      	str	r3, [sp, #12]
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	9302      	str	r3, [sp, #8]
 8009016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009018:	9301      	str	r3, [sp, #4]
 800901a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	68b9      	ldr	r1, [r7, #8]
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f000 f80e 	bl	8009044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009028:	69f8      	ldr	r0, [r7, #28]
 800902a:	f000 f89b 	bl	8009164 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800902e:	2301      	movs	r3, #1
 8009030:	61bb      	str	r3, [r7, #24]
 8009032:	e002      	b.n	800903a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009034:	f04f 33ff 	mov.w	r3, #4294967295
 8009038:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800903a:	69bb      	ldr	r3, [r7, #24]
	}
 800903c:	4618      	mov	r0, r3
 800903e:	3720      	adds	r7, #32
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b088      	sub	sp, #32
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
 8009050:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009054:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	461a      	mov	r2, r3
 800905c:	21a5      	movs	r1, #165	; 0xa5
 800905e:	f001 fe07 	bl	800ac70 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009066:	6879      	ldr	r1, [r7, #4]
 8009068:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800906c:	440b      	add	r3, r1
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	f023 0307 	bic.w	r3, r3, #7
 800907a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	f003 0307 	and.w	r3, r3, #7
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00a      	beq.n	800909c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908a:	f383 8811 	msr	BASEPRI, r3
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	617b      	str	r3, [r7, #20]
}
 8009098:	bf00      	nop
 800909a:	e7fe      	b.n	800909a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d01f      	beq.n	80090e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090a2:	2300      	movs	r3, #0
 80090a4:	61fb      	str	r3, [r7, #28]
 80090a6:	e012      	b.n	80090ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	4413      	add	r3, r2
 80090ae:	7819      	ldrb	r1, [r3, #0]
 80090b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	4413      	add	r3, r2
 80090b6:	3334      	adds	r3, #52	; 0x34
 80090b8:	460a      	mov	r2, r1
 80090ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80090bc:	68ba      	ldr	r2, [r7, #8]
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	4413      	add	r3, r2
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d006      	beq.n	80090d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	3301      	adds	r3, #1
 80090cc:	61fb      	str	r3, [r7, #28]
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	2b0f      	cmp	r3, #15
 80090d2:	d9e9      	bls.n	80090a8 <prvInitialiseNewTask+0x64>
 80090d4:	e000      	b.n	80090d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80090d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80090d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090e0:	e003      	b.n	80090ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80090e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80090ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ec:	2b37      	cmp	r3, #55	; 0x37
 80090ee:	d901      	bls.n	80090f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80090f0:	2337      	movs	r3, #55	; 0x37
 80090f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80090f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80090fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009102:	2200      	movs	r2, #0
 8009104:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009108:	3304      	adds	r3, #4
 800910a:	4618      	mov	r0, r3
 800910c:	f7ff f978 	bl	8008400 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009112:	3318      	adds	r3, #24
 8009114:	4618      	mov	r0, r3
 8009116:	f7ff f973 	bl	8008400 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800911a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800911e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800912e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009132:	2200      	movs	r2, #0
 8009134:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	68f9      	ldr	r1, [r7, #12]
 8009142:	69b8      	ldr	r0, [r7, #24]
 8009144:	f001 f928 	bl	800a398 <pxPortInitialiseStack>
 8009148:	4602      	mov	r2, r0
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800914e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009150:	2b00      	cmp	r3, #0
 8009152:	d002      	beq.n	800915a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009158:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800915a:	bf00      	nop
 800915c:	3720      	adds	r7, #32
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
	...

08009164 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800916c:	f001 fa42 	bl	800a5f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009170:	4b2d      	ldr	r3, [pc, #180]	; (8009228 <prvAddNewTaskToReadyList+0xc4>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3301      	adds	r3, #1
 8009176:	4a2c      	ldr	r2, [pc, #176]	; (8009228 <prvAddNewTaskToReadyList+0xc4>)
 8009178:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800917a:	4b2c      	ldr	r3, [pc, #176]	; (800922c <prvAddNewTaskToReadyList+0xc8>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d109      	bne.n	8009196 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009182:	4a2a      	ldr	r2, [pc, #168]	; (800922c <prvAddNewTaskToReadyList+0xc8>)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009188:	4b27      	ldr	r3, [pc, #156]	; (8009228 <prvAddNewTaskToReadyList+0xc4>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d110      	bne.n	80091b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009190:	f000 fc16 	bl	80099c0 <prvInitialiseTaskLists>
 8009194:	e00d      	b.n	80091b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009196:	4b26      	ldr	r3, [pc, #152]	; (8009230 <prvAddNewTaskToReadyList+0xcc>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d109      	bne.n	80091b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800919e:	4b23      	ldr	r3, [pc, #140]	; (800922c <prvAddNewTaskToReadyList+0xc8>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d802      	bhi.n	80091b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80091ac:	4a1f      	ldr	r2, [pc, #124]	; (800922c <prvAddNewTaskToReadyList+0xc8>)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80091b2:	4b20      	ldr	r3, [pc, #128]	; (8009234 <prvAddNewTaskToReadyList+0xd0>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	3301      	adds	r3, #1
 80091b8:	4a1e      	ldr	r2, [pc, #120]	; (8009234 <prvAddNewTaskToReadyList+0xd0>)
 80091ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80091bc:	4b1d      	ldr	r3, [pc, #116]	; (8009234 <prvAddNewTaskToReadyList+0xd0>)
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c8:	4b1b      	ldr	r3, [pc, #108]	; (8009238 <prvAddNewTaskToReadyList+0xd4>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d903      	bls.n	80091d8 <prvAddNewTaskToReadyList+0x74>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d4:	4a18      	ldr	r2, [pc, #96]	; (8009238 <prvAddNewTaskToReadyList+0xd4>)
 80091d6:	6013      	str	r3, [r2, #0]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091dc:	4613      	mov	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	4a15      	ldr	r2, [pc, #84]	; (800923c <prvAddNewTaskToReadyList+0xd8>)
 80091e6:	441a      	add	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	3304      	adds	r3, #4
 80091ec:	4619      	mov	r1, r3
 80091ee:	4610      	mov	r0, r2
 80091f0:	f7ff f913 	bl	800841a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80091f4:	f001 fa2e 	bl	800a654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80091f8:	4b0d      	ldr	r3, [pc, #52]	; (8009230 <prvAddNewTaskToReadyList+0xcc>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00e      	beq.n	800921e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009200:	4b0a      	ldr	r3, [pc, #40]	; (800922c <prvAddNewTaskToReadyList+0xc8>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920a:	429a      	cmp	r2, r3
 800920c:	d207      	bcs.n	800921e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800920e:	4b0c      	ldr	r3, [pc, #48]	; (8009240 <prvAddNewTaskToReadyList+0xdc>)
 8009210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009214:	601a      	str	r2, [r3, #0]
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800921e:	bf00      	nop
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	24000d4c 	.word	0x24000d4c
 800922c:	24000878 	.word	0x24000878
 8009230:	24000d58 	.word	0x24000d58
 8009234:	24000d68 	.word	0x24000d68
 8009238:	24000d54 	.word	0x24000d54
 800923c:	2400087c 	.word	0x2400087c
 8009240:	e000ed04 	.word	0xe000ed04

08009244 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800924c:	2300      	movs	r3, #0
 800924e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d017      	beq.n	8009286 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009256:	4b13      	ldr	r3, [pc, #76]	; (80092a4 <vTaskDelay+0x60>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00a      	beq.n	8009274 <vTaskDelay+0x30>
	__asm volatile
 800925e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009262:	f383 8811 	msr	BASEPRI, r3
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	60bb      	str	r3, [r7, #8]
}
 8009270:	bf00      	nop
 8009272:	e7fe      	b.n	8009272 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009274:	f000 f880 	bl	8009378 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009278:	2100      	movs	r1, #0
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 fcea 	bl	8009c54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009280:	f000 f888 	bl	8009394 <xTaskResumeAll>
 8009284:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d107      	bne.n	800929c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800928c:	4b06      	ldr	r3, [pc, #24]	; (80092a8 <vTaskDelay+0x64>)
 800928e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009292:	601a      	str	r2, [r3, #0]
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800929c:	bf00      	nop
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	24000d74 	.word	0x24000d74
 80092a8:	e000ed04 	.word	0xe000ed04

080092ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b08a      	sub	sp, #40	; 0x28
 80092b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80092b2:	2300      	movs	r3, #0
 80092b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80092b6:	2300      	movs	r3, #0
 80092b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80092ba:	463a      	mov	r2, r7
 80092bc:	1d39      	adds	r1, r7, #4
 80092be:	f107 0308 	add.w	r3, r7, #8
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7ff f848 	bl	8008358 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80092c8:	6839      	ldr	r1, [r7, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	9202      	str	r2, [sp, #8]
 80092d0:	9301      	str	r3, [sp, #4]
 80092d2:	2300      	movs	r3, #0
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	2300      	movs	r3, #0
 80092d8:	460a      	mov	r2, r1
 80092da:	4921      	ldr	r1, [pc, #132]	; (8009360 <vTaskStartScheduler+0xb4>)
 80092dc:	4821      	ldr	r0, [pc, #132]	; (8009364 <vTaskStartScheduler+0xb8>)
 80092de:	f7ff fe0f 	bl	8008f00 <xTaskCreateStatic>
 80092e2:	4603      	mov	r3, r0
 80092e4:	4a20      	ldr	r2, [pc, #128]	; (8009368 <vTaskStartScheduler+0xbc>)
 80092e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80092e8:	4b1f      	ldr	r3, [pc, #124]	; (8009368 <vTaskStartScheduler+0xbc>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d002      	beq.n	80092f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80092f0:	2301      	movs	r3, #1
 80092f2:	617b      	str	r3, [r7, #20]
 80092f4:	e001      	b.n	80092fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80092f6:	2300      	movs	r3, #0
 80092f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d102      	bne.n	8009306 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009300:	f000 fcfc 	bl	8009cfc <xTimerCreateTimerTask>
 8009304:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d116      	bne.n	800933a <vTaskStartScheduler+0x8e>
	__asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009310:	f383 8811 	msr	BASEPRI, r3
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	613b      	str	r3, [r7, #16]
}
 800931e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009320:	4b12      	ldr	r3, [pc, #72]	; (800936c <vTaskStartScheduler+0xc0>)
 8009322:	f04f 32ff 	mov.w	r2, #4294967295
 8009326:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009328:	4b11      	ldr	r3, [pc, #68]	; (8009370 <vTaskStartScheduler+0xc4>)
 800932a:	2201      	movs	r2, #1
 800932c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800932e:	4b11      	ldr	r3, [pc, #68]	; (8009374 <vTaskStartScheduler+0xc8>)
 8009330:	2200      	movs	r2, #0
 8009332:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009334:	f001 f8bc 	bl	800a4b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009338:	e00e      	b.n	8009358 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009340:	d10a      	bne.n	8009358 <vTaskStartScheduler+0xac>
	__asm volatile
 8009342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	60fb      	str	r3, [r7, #12]
}
 8009354:	bf00      	nop
 8009356:	e7fe      	b.n	8009356 <vTaskStartScheduler+0xaa>
}
 8009358:	bf00      	nop
 800935a:	3718      	adds	r7, #24
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	0800aca4 	.word	0x0800aca4
 8009364:	08009991 	.word	0x08009991
 8009368:	24000d70 	.word	0x24000d70
 800936c:	24000d6c 	.word	0x24000d6c
 8009370:	24000d58 	.word	0x24000d58
 8009374:	24000d50 	.word	0x24000d50

08009378 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009378:	b480      	push	{r7}
 800937a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800937c:	4b04      	ldr	r3, [pc, #16]	; (8009390 <vTaskSuspendAll+0x18>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3301      	adds	r3, #1
 8009382:	4a03      	ldr	r2, [pc, #12]	; (8009390 <vTaskSuspendAll+0x18>)
 8009384:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009386:	bf00      	nop
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr
 8009390:	24000d74 	.word	0x24000d74

08009394 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800939a:	2300      	movs	r3, #0
 800939c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800939e:	2300      	movs	r3, #0
 80093a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80093a2:	4b42      	ldr	r3, [pc, #264]	; (80094ac <xTaskResumeAll+0x118>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d10a      	bne.n	80093c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80093aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ae:	f383 8811 	msr	BASEPRI, r3
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	603b      	str	r3, [r7, #0]
}
 80093bc:	bf00      	nop
 80093be:	e7fe      	b.n	80093be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80093c0:	f001 f918 	bl	800a5f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80093c4:	4b39      	ldr	r3, [pc, #228]	; (80094ac <xTaskResumeAll+0x118>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3b01      	subs	r3, #1
 80093ca:	4a38      	ldr	r2, [pc, #224]	; (80094ac <xTaskResumeAll+0x118>)
 80093cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093ce:	4b37      	ldr	r3, [pc, #220]	; (80094ac <xTaskResumeAll+0x118>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d162      	bne.n	800949c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80093d6:	4b36      	ldr	r3, [pc, #216]	; (80094b0 <xTaskResumeAll+0x11c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d05e      	beq.n	800949c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093de:	e02f      	b.n	8009440 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093e0:	4b34      	ldr	r3, [pc, #208]	; (80094b4 <xTaskResumeAll+0x120>)
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3318      	adds	r3, #24
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7ff f871 	bl	80084d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	3304      	adds	r3, #4
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7ff f86c 	bl	80084d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009400:	4b2d      	ldr	r3, [pc, #180]	; (80094b8 <xTaskResumeAll+0x124>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	429a      	cmp	r2, r3
 8009406:	d903      	bls.n	8009410 <xTaskResumeAll+0x7c>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940c:	4a2a      	ldr	r2, [pc, #168]	; (80094b8 <xTaskResumeAll+0x124>)
 800940e:	6013      	str	r3, [r2, #0]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009414:	4613      	mov	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	4a27      	ldr	r2, [pc, #156]	; (80094bc <xTaskResumeAll+0x128>)
 800941e:	441a      	add	r2, r3
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	3304      	adds	r3, #4
 8009424:	4619      	mov	r1, r3
 8009426:	4610      	mov	r0, r2
 8009428:	f7fe fff7 	bl	800841a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009430:	4b23      	ldr	r3, [pc, #140]	; (80094c0 <xTaskResumeAll+0x12c>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009436:	429a      	cmp	r2, r3
 8009438:	d302      	bcc.n	8009440 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800943a:	4b22      	ldr	r3, [pc, #136]	; (80094c4 <xTaskResumeAll+0x130>)
 800943c:	2201      	movs	r2, #1
 800943e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009440:	4b1c      	ldr	r3, [pc, #112]	; (80094b4 <xTaskResumeAll+0x120>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1cb      	bne.n	80093e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d001      	beq.n	8009452 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800944e:	f000 fb55 	bl	8009afc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009452:	4b1d      	ldr	r3, [pc, #116]	; (80094c8 <xTaskResumeAll+0x134>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d010      	beq.n	8009480 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800945e:	f000 f847 	bl	80094f0 <xTaskIncrementTick>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009468:	4b16      	ldr	r3, [pc, #88]	; (80094c4 <xTaskResumeAll+0x130>)
 800946a:	2201      	movs	r2, #1
 800946c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	3b01      	subs	r3, #1
 8009472:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1f1      	bne.n	800945e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800947a:	4b13      	ldr	r3, [pc, #76]	; (80094c8 <xTaskResumeAll+0x134>)
 800947c:	2200      	movs	r2, #0
 800947e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009480:	4b10      	ldr	r3, [pc, #64]	; (80094c4 <xTaskResumeAll+0x130>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d009      	beq.n	800949c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009488:	2301      	movs	r3, #1
 800948a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800948c:	4b0f      	ldr	r3, [pc, #60]	; (80094cc <xTaskResumeAll+0x138>)
 800948e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800949c:	f001 f8da 	bl	800a654 <vPortExitCritical>

	return xAlreadyYielded;
 80094a0:	68bb      	ldr	r3, [r7, #8]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	24000d74 	.word	0x24000d74
 80094b0:	24000d4c 	.word	0x24000d4c
 80094b4:	24000d0c 	.word	0x24000d0c
 80094b8:	24000d54 	.word	0x24000d54
 80094bc:	2400087c 	.word	0x2400087c
 80094c0:	24000878 	.word	0x24000878
 80094c4:	24000d60 	.word	0x24000d60
 80094c8:	24000d5c 	.word	0x24000d5c
 80094cc:	e000ed04 	.word	0xe000ed04

080094d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80094d6:	4b05      	ldr	r3, [pc, #20]	; (80094ec <xTaskGetTickCount+0x1c>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80094dc:	687b      	ldr	r3, [r7, #4]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	24000d50 	.word	0x24000d50

080094f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b086      	sub	sp, #24
 80094f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80094f6:	2300      	movs	r3, #0
 80094f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094fa:	4b4f      	ldr	r3, [pc, #316]	; (8009638 <xTaskIncrementTick+0x148>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	f040 808f 	bne.w	8009622 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009504:	4b4d      	ldr	r3, [pc, #308]	; (800963c <xTaskIncrementTick+0x14c>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	3301      	adds	r3, #1
 800950a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800950c:	4a4b      	ldr	r2, [pc, #300]	; (800963c <xTaskIncrementTick+0x14c>)
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d120      	bne.n	800955a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009518:	4b49      	ldr	r3, [pc, #292]	; (8009640 <xTaskIncrementTick+0x150>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00a      	beq.n	8009538 <xTaskIncrementTick+0x48>
	__asm volatile
 8009522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009526:	f383 8811 	msr	BASEPRI, r3
 800952a:	f3bf 8f6f 	isb	sy
 800952e:	f3bf 8f4f 	dsb	sy
 8009532:	603b      	str	r3, [r7, #0]
}
 8009534:	bf00      	nop
 8009536:	e7fe      	b.n	8009536 <xTaskIncrementTick+0x46>
 8009538:	4b41      	ldr	r3, [pc, #260]	; (8009640 <xTaskIncrementTick+0x150>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	60fb      	str	r3, [r7, #12]
 800953e:	4b41      	ldr	r3, [pc, #260]	; (8009644 <xTaskIncrementTick+0x154>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a3f      	ldr	r2, [pc, #252]	; (8009640 <xTaskIncrementTick+0x150>)
 8009544:	6013      	str	r3, [r2, #0]
 8009546:	4a3f      	ldr	r2, [pc, #252]	; (8009644 <xTaskIncrementTick+0x154>)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6013      	str	r3, [r2, #0]
 800954c:	4b3e      	ldr	r3, [pc, #248]	; (8009648 <xTaskIncrementTick+0x158>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3301      	adds	r3, #1
 8009552:	4a3d      	ldr	r2, [pc, #244]	; (8009648 <xTaskIncrementTick+0x158>)
 8009554:	6013      	str	r3, [r2, #0]
 8009556:	f000 fad1 	bl	8009afc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800955a:	4b3c      	ldr	r3, [pc, #240]	; (800964c <xTaskIncrementTick+0x15c>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	693a      	ldr	r2, [r7, #16]
 8009560:	429a      	cmp	r2, r3
 8009562:	d349      	bcc.n	80095f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009564:	4b36      	ldr	r3, [pc, #216]	; (8009640 <xTaskIncrementTick+0x150>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d104      	bne.n	8009578 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800956e:	4b37      	ldr	r3, [pc, #220]	; (800964c <xTaskIncrementTick+0x15c>)
 8009570:	f04f 32ff 	mov.w	r2, #4294967295
 8009574:	601a      	str	r2, [r3, #0]
					break;
 8009576:	e03f      	b.n	80095f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009578:	4b31      	ldr	r3, [pc, #196]	; (8009640 <xTaskIncrementTick+0x150>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009588:	693a      	ldr	r2, [r7, #16]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	429a      	cmp	r2, r3
 800958e:	d203      	bcs.n	8009598 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009590:	4a2e      	ldr	r2, [pc, #184]	; (800964c <xTaskIncrementTick+0x15c>)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009596:	e02f      	b.n	80095f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	3304      	adds	r3, #4
 800959c:	4618      	mov	r0, r3
 800959e:	f7fe ff99 	bl	80084d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d004      	beq.n	80095b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	3318      	adds	r3, #24
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7fe ff90 	bl	80084d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b8:	4b25      	ldr	r3, [pc, #148]	; (8009650 <xTaskIncrementTick+0x160>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d903      	bls.n	80095c8 <xTaskIncrementTick+0xd8>
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c4:	4a22      	ldr	r2, [pc, #136]	; (8009650 <xTaskIncrementTick+0x160>)
 80095c6:	6013      	str	r3, [r2, #0]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095cc:	4613      	mov	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4413      	add	r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	4a1f      	ldr	r2, [pc, #124]	; (8009654 <xTaskIncrementTick+0x164>)
 80095d6:	441a      	add	r2, r3
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	3304      	adds	r3, #4
 80095dc:	4619      	mov	r1, r3
 80095de:	4610      	mov	r0, r2
 80095e0:	f7fe ff1b 	bl	800841a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e8:	4b1b      	ldr	r3, [pc, #108]	; (8009658 <xTaskIncrementTick+0x168>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d3b8      	bcc.n	8009564 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80095f2:	2301      	movs	r3, #1
 80095f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095f6:	e7b5      	b.n	8009564 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80095f8:	4b17      	ldr	r3, [pc, #92]	; (8009658 <xTaskIncrementTick+0x168>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095fe:	4915      	ldr	r1, [pc, #84]	; (8009654 <xTaskIncrementTick+0x164>)
 8009600:	4613      	mov	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4413      	add	r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	440b      	add	r3, r1
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2b01      	cmp	r3, #1
 800960e:	d901      	bls.n	8009614 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009610:	2301      	movs	r3, #1
 8009612:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009614:	4b11      	ldr	r3, [pc, #68]	; (800965c <xTaskIncrementTick+0x16c>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d007      	beq.n	800962c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800961c:	2301      	movs	r3, #1
 800961e:	617b      	str	r3, [r7, #20]
 8009620:	e004      	b.n	800962c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009622:	4b0f      	ldr	r3, [pc, #60]	; (8009660 <xTaskIncrementTick+0x170>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	3301      	adds	r3, #1
 8009628:	4a0d      	ldr	r2, [pc, #52]	; (8009660 <xTaskIncrementTick+0x170>)
 800962a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800962c:	697b      	ldr	r3, [r7, #20]
}
 800962e:	4618      	mov	r0, r3
 8009630:	3718      	adds	r7, #24
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	24000d74 	.word	0x24000d74
 800963c:	24000d50 	.word	0x24000d50
 8009640:	24000d04 	.word	0x24000d04
 8009644:	24000d08 	.word	0x24000d08
 8009648:	24000d64 	.word	0x24000d64
 800964c:	24000d6c 	.word	0x24000d6c
 8009650:	24000d54 	.word	0x24000d54
 8009654:	2400087c 	.word	0x2400087c
 8009658:	24000878 	.word	0x24000878
 800965c:	24000d60 	.word	0x24000d60
 8009660:	24000d5c 	.word	0x24000d5c

08009664 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800966a:	4b28      	ldr	r3, [pc, #160]	; (800970c <vTaskSwitchContext+0xa8>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009672:	4b27      	ldr	r3, [pc, #156]	; (8009710 <vTaskSwitchContext+0xac>)
 8009674:	2201      	movs	r2, #1
 8009676:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009678:	e041      	b.n	80096fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800967a:	4b25      	ldr	r3, [pc, #148]	; (8009710 <vTaskSwitchContext+0xac>)
 800967c:	2200      	movs	r2, #0
 800967e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009680:	4b24      	ldr	r3, [pc, #144]	; (8009714 <vTaskSwitchContext+0xb0>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	60fb      	str	r3, [r7, #12]
 8009686:	e010      	b.n	80096aa <vTaskSwitchContext+0x46>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10a      	bne.n	80096a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800968e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	607b      	str	r3, [r7, #4]
}
 80096a0:	bf00      	nop
 80096a2:	e7fe      	b.n	80096a2 <vTaskSwitchContext+0x3e>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	3b01      	subs	r3, #1
 80096a8:	60fb      	str	r3, [r7, #12]
 80096aa:	491b      	ldr	r1, [pc, #108]	; (8009718 <vTaskSwitchContext+0xb4>)
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	4613      	mov	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4413      	add	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	440b      	add	r3, r1
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d0e4      	beq.n	8009688 <vTaskSwitchContext+0x24>
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	4613      	mov	r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4413      	add	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4a13      	ldr	r2, [pc, #76]	; (8009718 <vTaskSwitchContext+0xb4>)
 80096ca:	4413      	add	r3, r2
 80096cc:	60bb      	str	r3, [r7, #8]
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	685a      	ldr	r2, [r3, #4]
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	605a      	str	r2, [r3, #4]
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	3308      	adds	r3, #8
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d104      	bne.n	80096ee <vTaskSwitchContext+0x8a>
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	685a      	ldr	r2, [r3, #4]
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	605a      	str	r2, [r3, #4]
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	4a09      	ldr	r2, [pc, #36]	; (800971c <vTaskSwitchContext+0xb8>)
 80096f6:	6013      	str	r3, [r2, #0]
 80096f8:	4a06      	ldr	r2, [pc, #24]	; (8009714 <vTaskSwitchContext+0xb0>)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6013      	str	r3, [r2, #0]
}
 80096fe:	bf00      	nop
 8009700:	3714      	adds	r7, #20
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	24000d74 	.word	0x24000d74
 8009710:	24000d60 	.word	0x24000d60
 8009714:	24000d54 	.word	0x24000d54
 8009718:	2400087c 	.word	0x2400087c
 800971c:	24000878 	.word	0x24000878

08009720 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10a      	bne.n	8009746 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009734:	f383 8811 	msr	BASEPRI, r3
 8009738:	f3bf 8f6f 	isb	sy
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	60fb      	str	r3, [r7, #12]
}
 8009742:	bf00      	nop
 8009744:	e7fe      	b.n	8009744 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009746:	4b07      	ldr	r3, [pc, #28]	; (8009764 <vTaskPlaceOnEventList+0x44>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	3318      	adds	r3, #24
 800974c:	4619      	mov	r1, r3
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7fe fe87 	bl	8008462 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009754:	2101      	movs	r1, #1
 8009756:	6838      	ldr	r0, [r7, #0]
 8009758:	f000 fa7c 	bl	8009c54 <prvAddCurrentTaskToDelayedList>
}
 800975c:	bf00      	nop
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	24000878 	.word	0x24000878

08009768 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d10a      	bne.n	8009790 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800977a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	617b      	str	r3, [r7, #20]
}
 800978c:	bf00      	nop
 800978e:	e7fe      	b.n	800978e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009790:	4b0a      	ldr	r3, [pc, #40]	; (80097bc <vTaskPlaceOnEventListRestricted+0x54>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	3318      	adds	r3, #24
 8009796:	4619      	mov	r1, r3
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f7fe fe3e 	bl	800841a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d002      	beq.n	80097aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80097a4:	f04f 33ff 	mov.w	r3, #4294967295
 80097a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80097aa:	6879      	ldr	r1, [r7, #4]
 80097ac:	68b8      	ldr	r0, [r7, #8]
 80097ae:	f000 fa51 	bl	8009c54 <prvAddCurrentTaskToDelayedList>
	}
 80097b2:	bf00      	nop
 80097b4:	3718      	adds	r7, #24
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	24000878 	.word	0x24000878

080097c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b086      	sub	sp, #24
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10a      	bne.n	80097ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	60fb      	str	r3, [r7, #12]
}
 80097e8:	bf00      	nop
 80097ea:	e7fe      	b.n	80097ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	3318      	adds	r3, #24
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fe fe6f 	bl	80084d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097f6:	4b1e      	ldr	r3, [pc, #120]	; (8009870 <xTaskRemoveFromEventList+0xb0>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d11d      	bne.n	800983a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	3304      	adds	r3, #4
 8009802:	4618      	mov	r0, r3
 8009804:	f7fe fe66 	bl	80084d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800980c:	4b19      	ldr	r3, [pc, #100]	; (8009874 <xTaskRemoveFromEventList+0xb4>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	429a      	cmp	r2, r3
 8009812:	d903      	bls.n	800981c <xTaskRemoveFromEventList+0x5c>
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009818:	4a16      	ldr	r2, [pc, #88]	; (8009874 <xTaskRemoveFromEventList+0xb4>)
 800981a:	6013      	str	r3, [r2, #0]
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009820:	4613      	mov	r3, r2
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	4413      	add	r3, r2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	4a13      	ldr	r2, [pc, #76]	; (8009878 <xTaskRemoveFromEventList+0xb8>)
 800982a:	441a      	add	r2, r3
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	3304      	adds	r3, #4
 8009830:	4619      	mov	r1, r3
 8009832:	4610      	mov	r0, r2
 8009834:	f7fe fdf1 	bl	800841a <vListInsertEnd>
 8009838:	e005      	b.n	8009846 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	3318      	adds	r3, #24
 800983e:	4619      	mov	r1, r3
 8009840:	480e      	ldr	r0, [pc, #56]	; (800987c <xTaskRemoveFromEventList+0xbc>)
 8009842:	f7fe fdea 	bl	800841a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800984a:	4b0d      	ldr	r3, [pc, #52]	; (8009880 <xTaskRemoveFromEventList+0xc0>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009850:	429a      	cmp	r2, r3
 8009852:	d905      	bls.n	8009860 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009854:	2301      	movs	r3, #1
 8009856:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009858:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <xTaskRemoveFromEventList+0xc4>)
 800985a:	2201      	movs	r2, #1
 800985c:	601a      	str	r2, [r3, #0]
 800985e:	e001      	b.n	8009864 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009860:	2300      	movs	r3, #0
 8009862:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009864:	697b      	ldr	r3, [r7, #20]
}
 8009866:	4618      	mov	r0, r3
 8009868:	3718      	adds	r7, #24
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	24000d74 	.word	0x24000d74
 8009874:	24000d54 	.word	0x24000d54
 8009878:	2400087c 	.word	0x2400087c
 800987c:	24000d0c 	.word	0x24000d0c
 8009880:	24000878 	.word	0x24000878
 8009884:	24000d60 	.word	0x24000d60

08009888 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009890:	4b06      	ldr	r3, [pc, #24]	; (80098ac <vTaskInternalSetTimeOutState+0x24>)
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009898:	4b05      	ldr	r3, [pc, #20]	; (80098b0 <vTaskInternalSetTimeOutState+0x28>)
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	605a      	str	r2, [r3, #4]
}
 80098a0:	bf00      	nop
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	24000d64 	.word	0x24000d64
 80098b0:	24000d50 	.word	0x24000d50

080098b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b088      	sub	sp, #32
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d10a      	bne.n	80098da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80098c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c8:	f383 8811 	msr	BASEPRI, r3
 80098cc:	f3bf 8f6f 	isb	sy
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	613b      	str	r3, [r7, #16]
}
 80098d6:	bf00      	nop
 80098d8:	e7fe      	b.n	80098d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10a      	bne.n	80098f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80098e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e4:	f383 8811 	msr	BASEPRI, r3
 80098e8:	f3bf 8f6f 	isb	sy
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	60fb      	str	r3, [r7, #12]
}
 80098f2:	bf00      	nop
 80098f4:	e7fe      	b.n	80098f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80098f6:	f000 fe7d 	bl	800a5f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80098fa:	4b1d      	ldr	r3, [pc, #116]	; (8009970 <xTaskCheckForTimeOut+0xbc>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	69ba      	ldr	r2, [r7, #24]
 8009906:	1ad3      	subs	r3, r2, r3
 8009908:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009912:	d102      	bne.n	800991a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009914:	2300      	movs	r3, #0
 8009916:	61fb      	str	r3, [r7, #28]
 8009918:	e023      	b.n	8009962 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	4b15      	ldr	r3, [pc, #84]	; (8009974 <xTaskCheckForTimeOut+0xc0>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	429a      	cmp	r2, r3
 8009924:	d007      	beq.n	8009936 <xTaskCheckForTimeOut+0x82>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	69ba      	ldr	r2, [r7, #24]
 800992c:	429a      	cmp	r2, r3
 800992e:	d302      	bcc.n	8009936 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009930:	2301      	movs	r3, #1
 8009932:	61fb      	str	r3, [r7, #28]
 8009934:	e015      	b.n	8009962 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	697a      	ldr	r2, [r7, #20]
 800993c:	429a      	cmp	r2, r3
 800993e:	d20b      	bcs.n	8009958 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	1ad2      	subs	r2, r2, r3
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f7ff ff9b 	bl	8009888 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009952:	2300      	movs	r3, #0
 8009954:	61fb      	str	r3, [r7, #28]
 8009956:	e004      	b.n	8009962 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	2200      	movs	r2, #0
 800995c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800995e:	2301      	movs	r3, #1
 8009960:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009962:	f000 fe77 	bl	800a654 <vPortExitCritical>

	return xReturn;
 8009966:	69fb      	ldr	r3, [r7, #28]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3720      	adds	r7, #32
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	24000d50 	.word	0x24000d50
 8009974:	24000d64 	.word	0x24000d64

08009978 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009978:	b480      	push	{r7}
 800997a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800997c:	4b03      	ldr	r3, [pc, #12]	; (800998c <vTaskMissedYield+0x14>)
 800997e:	2201      	movs	r2, #1
 8009980:	601a      	str	r2, [r3, #0]
}
 8009982:	bf00      	nop
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr
 800998c:	24000d60 	.word	0x24000d60

08009990 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009998:	f000 f852 	bl	8009a40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800999c:	4b06      	ldr	r3, [pc, #24]	; (80099b8 <prvIdleTask+0x28>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d9f9      	bls.n	8009998 <prvIdleTask+0x8>
			{
				taskYIELD();
 80099a4:	4b05      	ldr	r3, [pc, #20]	; (80099bc <prvIdleTask+0x2c>)
 80099a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099aa:	601a      	str	r2, [r3, #0]
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80099b4:	e7f0      	b.n	8009998 <prvIdleTask+0x8>
 80099b6:	bf00      	nop
 80099b8:	2400087c 	.word	0x2400087c
 80099bc:	e000ed04 	.word	0xe000ed04

080099c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099c6:	2300      	movs	r3, #0
 80099c8:	607b      	str	r3, [r7, #4]
 80099ca:	e00c      	b.n	80099e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	4613      	mov	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4413      	add	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4a12      	ldr	r2, [pc, #72]	; (8009a20 <prvInitialiseTaskLists+0x60>)
 80099d8:	4413      	add	r3, r2
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fe fcf0 	bl	80083c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	3301      	adds	r3, #1
 80099e4:	607b      	str	r3, [r7, #4]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2b37      	cmp	r3, #55	; 0x37
 80099ea:	d9ef      	bls.n	80099cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80099ec:	480d      	ldr	r0, [pc, #52]	; (8009a24 <prvInitialiseTaskLists+0x64>)
 80099ee:	f7fe fce7 	bl	80083c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80099f2:	480d      	ldr	r0, [pc, #52]	; (8009a28 <prvInitialiseTaskLists+0x68>)
 80099f4:	f7fe fce4 	bl	80083c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80099f8:	480c      	ldr	r0, [pc, #48]	; (8009a2c <prvInitialiseTaskLists+0x6c>)
 80099fa:	f7fe fce1 	bl	80083c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80099fe:	480c      	ldr	r0, [pc, #48]	; (8009a30 <prvInitialiseTaskLists+0x70>)
 8009a00:	f7fe fcde 	bl	80083c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a04:	480b      	ldr	r0, [pc, #44]	; (8009a34 <prvInitialiseTaskLists+0x74>)
 8009a06:	f7fe fcdb 	bl	80083c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a0a:	4b0b      	ldr	r3, [pc, #44]	; (8009a38 <prvInitialiseTaskLists+0x78>)
 8009a0c:	4a05      	ldr	r2, [pc, #20]	; (8009a24 <prvInitialiseTaskLists+0x64>)
 8009a0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a10:	4b0a      	ldr	r3, [pc, #40]	; (8009a3c <prvInitialiseTaskLists+0x7c>)
 8009a12:	4a05      	ldr	r2, [pc, #20]	; (8009a28 <prvInitialiseTaskLists+0x68>)
 8009a14:	601a      	str	r2, [r3, #0]
}
 8009a16:	bf00      	nop
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	2400087c 	.word	0x2400087c
 8009a24:	24000cdc 	.word	0x24000cdc
 8009a28:	24000cf0 	.word	0x24000cf0
 8009a2c:	24000d0c 	.word	0x24000d0c
 8009a30:	24000d20 	.word	0x24000d20
 8009a34:	24000d38 	.word	0x24000d38
 8009a38:	24000d04 	.word	0x24000d04
 8009a3c:	24000d08 	.word	0x24000d08

08009a40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a46:	e019      	b.n	8009a7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a48:	f000 fdd4 	bl	800a5f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a4c:	4b10      	ldr	r3, [pc, #64]	; (8009a90 <prvCheckTasksWaitingTermination+0x50>)
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	3304      	adds	r3, #4
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7fe fd3b 	bl	80084d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a5e:	4b0d      	ldr	r3, [pc, #52]	; (8009a94 <prvCheckTasksWaitingTermination+0x54>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3b01      	subs	r3, #1
 8009a64:	4a0b      	ldr	r2, [pc, #44]	; (8009a94 <prvCheckTasksWaitingTermination+0x54>)
 8009a66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a68:	4b0b      	ldr	r3, [pc, #44]	; (8009a98 <prvCheckTasksWaitingTermination+0x58>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	4a0a      	ldr	r2, [pc, #40]	; (8009a98 <prvCheckTasksWaitingTermination+0x58>)
 8009a70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a72:	f000 fdef 	bl	800a654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 f810 	bl	8009a9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a7c:	4b06      	ldr	r3, [pc, #24]	; (8009a98 <prvCheckTasksWaitingTermination+0x58>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1e1      	bne.n	8009a48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop
 8009a88:	3708      	adds	r7, #8
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	24000d20 	.word	0x24000d20
 8009a94:	24000d4c 	.word	0x24000d4c
 8009a98:	24000d34 	.word	0x24000d34

08009a9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d108      	bne.n	8009ac0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f000 ff8c 	bl	800a9d0 <vPortFree>
				vPortFree( pxTCB );
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 ff89 	bl	800a9d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009abe:	e018      	b.n	8009af2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d103      	bne.n	8009ad2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 ff80 	bl	800a9d0 <vPortFree>
	}
 8009ad0:	e00f      	b.n	8009af2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d00a      	beq.n	8009af2 <prvDeleteTCB+0x56>
	__asm volatile
 8009adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae0:	f383 8811 	msr	BASEPRI, r3
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	f3bf 8f4f 	dsb	sy
 8009aec:	60fb      	str	r3, [r7, #12]
}
 8009aee:	bf00      	nop
 8009af0:	e7fe      	b.n	8009af0 <prvDeleteTCB+0x54>
	}
 8009af2:	bf00      	nop
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
	...

08009afc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b02:	4b0c      	ldr	r3, [pc, #48]	; (8009b34 <prvResetNextTaskUnblockTime+0x38>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d104      	bne.n	8009b16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b0c:	4b0a      	ldr	r3, [pc, #40]	; (8009b38 <prvResetNextTaskUnblockTime+0x3c>)
 8009b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b14:	e008      	b.n	8009b28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b16:	4b07      	ldr	r3, [pc, #28]	; (8009b34 <prvResetNextTaskUnblockTime+0x38>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	4a04      	ldr	r2, [pc, #16]	; (8009b38 <prvResetNextTaskUnblockTime+0x3c>)
 8009b26:	6013      	str	r3, [r2, #0]
}
 8009b28:	bf00      	nop
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	24000d04 	.word	0x24000d04
 8009b38:	24000d6c 	.word	0x24000d6c

08009b3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b42:	4b0b      	ldr	r3, [pc, #44]	; (8009b70 <xTaskGetSchedulerState+0x34>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d102      	bne.n	8009b50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	607b      	str	r3, [r7, #4]
 8009b4e:	e008      	b.n	8009b62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b50:	4b08      	ldr	r3, [pc, #32]	; (8009b74 <xTaskGetSchedulerState+0x38>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d102      	bne.n	8009b5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b58:	2302      	movs	r3, #2
 8009b5a:	607b      	str	r3, [r7, #4]
 8009b5c:	e001      	b.n	8009b62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b62:	687b      	ldr	r3, [r7, #4]
	}
 8009b64:	4618      	mov	r0, r3
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr
 8009b70:	24000d58 	.word	0x24000d58
 8009b74:	24000d74 	.word	0x24000d74

08009b78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b086      	sub	sp, #24
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b84:	2300      	movs	r3, #0
 8009b86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d056      	beq.n	8009c3c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b8e:	4b2e      	ldr	r3, [pc, #184]	; (8009c48 <xTaskPriorityDisinherit+0xd0>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	693a      	ldr	r2, [r7, #16]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d00a      	beq.n	8009bae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9c:	f383 8811 	msr	BASEPRI, r3
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	60fb      	str	r3, [r7, #12]
}
 8009baa:	bf00      	nop
 8009bac:	e7fe      	b.n	8009bac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10a      	bne.n	8009bcc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	60bb      	str	r3, [r7, #8]
}
 8009bc8:	bf00      	nop
 8009bca:	e7fe      	b.n	8009bca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bd0:	1e5a      	subs	r2, r3, #1
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d02c      	beq.n	8009c3c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d128      	bne.n	8009c3c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	3304      	adds	r3, #4
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fe fc70 	bl	80084d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c0c:	4b0f      	ldr	r3, [pc, #60]	; (8009c4c <xTaskPriorityDisinherit+0xd4>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d903      	bls.n	8009c1c <xTaskPriorityDisinherit+0xa4>
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c18:	4a0c      	ldr	r2, [pc, #48]	; (8009c4c <xTaskPriorityDisinherit+0xd4>)
 8009c1a:	6013      	str	r3, [r2, #0]
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c20:	4613      	mov	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4a09      	ldr	r2, [pc, #36]	; (8009c50 <xTaskPriorityDisinherit+0xd8>)
 8009c2a:	441a      	add	r2, r3
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	3304      	adds	r3, #4
 8009c30:	4619      	mov	r1, r3
 8009c32:	4610      	mov	r0, r2
 8009c34:	f7fe fbf1 	bl	800841a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c3c:	697b      	ldr	r3, [r7, #20]
	}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3718      	adds	r7, #24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	24000878 	.word	0x24000878
 8009c4c:	24000d54 	.word	0x24000d54
 8009c50:	2400087c 	.word	0x2400087c

08009c54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c5e:	4b21      	ldr	r3, [pc, #132]	; (8009ce4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c64:	4b20      	ldr	r3, [pc, #128]	; (8009ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	3304      	adds	r3, #4
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fe fc32 	bl	80084d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c76:	d10a      	bne.n	8009c8e <prvAddCurrentTaskToDelayedList+0x3a>
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d007      	beq.n	8009c8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c7e:	4b1a      	ldr	r3, [pc, #104]	; (8009ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	3304      	adds	r3, #4
 8009c84:	4619      	mov	r1, r3
 8009c86:	4819      	ldr	r0, [pc, #100]	; (8009cec <prvAddCurrentTaskToDelayedList+0x98>)
 8009c88:	f7fe fbc7 	bl	800841a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c8c:	e026      	b.n	8009cdc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4413      	add	r3, r2
 8009c94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c96:	4b14      	ldr	r3, [pc, #80]	; (8009ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68ba      	ldr	r2, [r7, #8]
 8009c9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d209      	bcs.n	8009cba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ca6:	4b12      	ldr	r3, [pc, #72]	; (8009cf0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	4b0f      	ldr	r3, [pc, #60]	; (8009ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	3304      	adds	r3, #4
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	4610      	mov	r0, r2
 8009cb4:	f7fe fbd5 	bl	8008462 <vListInsert>
}
 8009cb8:	e010      	b.n	8009cdc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cba:	4b0e      	ldr	r3, [pc, #56]	; (8009cf4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	4b0a      	ldr	r3, [pc, #40]	; (8009ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	f7fe fbcb 	bl	8008462 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009ccc:	4b0a      	ldr	r3, [pc, #40]	; (8009cf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d202      	bcs.n	8009cdc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009cd6:	4a08      	ldr	r2, [pc, #32]	; (8009cf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	6013      	str	r3, [r2, #0]
}
 8009cdc:	bf00      	nop
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	24000d50 	.word	0x24000d50
 8009ce8:	24000878 	.word	0x24000878
 8009cec:	24000d38 	.word	0x24000d38
 8009cf0:	24000d08 	.word	0x24000d08
 8009cf4:	24000d04 	.word	0x24000d04
 8009cf8:	24000d6c 	.word	0x24000d6c

08009cfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08a      	sub	sp, #40	; 0x28
 8009d00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009d02:	2300      	movs	r3, #0
 8009d04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009d06:	f000 fb07 	bl	800a318 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009d0a:	4b1c      	ldr	r3, [pc, #112]	; (8009d7c <xTimerCreateTimerTask+0x80>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d021      	beq.n	8009d56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009d12:	2300      	movs	r3, #0
 8009d14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009d16:	2300      	movs	r3, #0
 8009d18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009d1a:	1d3a      	adds	r2, r7, #4
 8009d1c:	f107 0108 	add.w	r1, r7, #8
 8009d20:	f107 030c 	add.w	r3, r7, #12
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7fe fb31 	bl	800838c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009d2a:	6879      	ldr	r1, [r7, #4]
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	9202      	str	r2, [sp, #8]
 8009d32:	9301      	str	r3, [sp, #4]
 8009d34:	2302      	movs	r3, #2
 8009d36:	9300      	str	r3, [sp, #0]
 8009d38:	2300      	movs	r3, #0
 8009d3a:	460a      	mov	r2, r1
 8009d3c:	4910      	ldr	r1, [pc, #64]	; (8009d80 <xTimerCreateTimerTask+0x84>)
 8009d3e:	4811      	ldr	r0, [pc, #68]	; (8009d84 <xTimerCreateTimerTask+0x88>)
 8009d40:	f7ff f8de 	bl	8008f00 <xTaskCreateStatic>
 8009d44:	4603      	mov	r3, r0
 8009d46:	4a10      	ldr	r2, [pc, #64]	; (8009d88 <xTimerCreateTimerTask+0x8c>)
 8009d48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009d4a:	4b0f      	ldr	r3, [pc, #60]	; (8009d88 <xTimerCreateTimerTask+0x8c>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d001      	beq.n	8009d56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009d52:	2301      	movs	r3, #1
 8009d54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10a      	bne.n	8009d72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	613b      	str	r3, [r7, #16]
}
 8009d6e:	bf00      	nop
 8009d70:	e7fe      	b.n	8009d70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009d72:	697b      	ldr	r3, [r7, #20]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3718      	adds	r7, #24
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	24000da8 	.word	0x24000da8
 8009d80:	0800acac 	.word	0x0800acac
 8009d84:	08009ec1 	.word	0x08009ec1
 8009d88:	24000dac 	.word	0x24000dac

08009d8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b08a      	sub	sp, #40	; 0x28
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
 8009d98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10a      	bne.n	8009dba <xTimerGenericCommand+0x2e>
	__asm volatile
 8009da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	623b      	str	r3, [r7, #32]
}
 8009db6:	bf00      	nop
 8009db8:	e7fe      	b.n	8009db8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009dba:	4b1a      	ldr	r3, [pc, #104]	; (8009e24 <xTimerGenericCommand+0x98>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d02a      	beq.n	8009e18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	2b05      	cmp	r3, #5
 8009dd2:	dc18      	bgt.n	8009e06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009dd4:	f7ff feb2 	bl	8009b3c <xTaskGetSchedulerState>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d109      	bne.n	8009df2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009dde:	4b11      	ldr	r3, [pc, #68]	; (8009e24 <xTimerGenericCommand+0x98>)
 8009de0:	6818      	ldr	r0, [r3, #0]
 8009de2:	f107 0110 	add.w	r1, r7, #16
 8009de6:	2300      	movs	r3, #0
 8009de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dea:	f7fe fca1 	bl	8008730 <xQueueGenericSend>
 8009dee:	6278      	str	r0, [r7, #36]	; 0x24
 8009df0:	e012      	b.n	8009e18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009df2:	4b0c      	ldr	r3, [pc, #48]	; (8009e24 <xTimerGenericCommand+0x98>)
 8009df4:	6818      	ldr	r0, [r3, #0]
 8009df6:	f107 0110 	add.w	r1, r7, #16
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f7fe fc97 	bl	8008730 <xQueueGenericSend>
 8009e02:	6278      	str	r0, [r7, #36]	; 0x24
 8009e04:	e008      	b.n	8009e18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009e06:	4b07      	ldr	r3, [pc, #28]	; (8009e24 <xTimerGenericCommand+0x98>)
 8009e08:	6818      	ldr	r0, [r3, #0]
 8009e0a:	f107 0110 	add.w	r1, r7, #16
 8009e0e:	2300      	movs	r3, #0
 8009e10:	683a      	ldr	r2, [r7, #0]
 8009e12:	f7fe fd8b 	bl	800892c <xQueueGenericSendFromISR>
 8009e16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3728      	adds	r7, #40	; 0x28
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	24000da8 	.word	0x24000da8

08009e28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b088      	sub	sp, #32
 8009e2c:	af02      	add	r7, sp, #8
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e32:	4b22      	ldr	r3, [pc, #136]	; (8009ebc <prvProcessExpiredTimer+0x94>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	3304      	adds	r3, #4
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7fe fb47 	bl	80084d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e4c:	f003 0304 	and.w	r3, r3, #4
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d022      	beq.n	8009e9a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	699a      	ldr	r2, [r3, #24]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	18d1      	adds	r1, r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	683a      	ldr	r2, [r7, #0]
 8009e60:	6978      	ldr	r0, [r7, #20]
 8009e62:	f000 f8d1 	bl	800a008 <prvInsertTimerInActiveList>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d01f      	beq.n	8009eac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	9300      	str	r3, [sp, #0]
 8009e70:	2300      	movs	r3, #0
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	2100      	movs	r1, #0
 8009e76:	6978      	ldr	r0, [r7, #20]
 8009e78:	f7ff ff88 	bl	8009d8c <xTimerGenericCommand>
 8009e7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d113      	bne.n	8009eac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	60fb      	str	r3, [r7, #12]
}
 8009e96:	bf00      	nop
 8009e98:	e7fe      	b.n	8009e98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ea0:	f023 0301 	bic.w	r3, r3, #1
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	6a1b      	ldr	r3, [r3, #32]
 8009eb0:	6978      	ldr	r0, [r7, #20]
 8009eb2:	4798      	blx	r3
}
 8009eb4:	bf00      	nop
 8009eb6:	3718      	adds	r7, #24
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	24000da0 	.word	0x24000da0

08009ec0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ec8:	f107 0308 	add.w	r3, r7, #8
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f000 f857 	bl	8009f80 <prvGetNextExpireTime>
 8009ed2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	68f8      	ldr	r0, [r7, #12]
 8009eda:	f000 f803 	bl	8009ee4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009ede:	f000 f8d5 	bl	800a08c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ee2:	e7f1      	b.n	8009ec8 <prvTimerTask+0x8>

08009ee4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009eee:	f7ff fa43 	bl	8009378 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ef2:	f107 0308 	add.w	r3, r7, #8
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 f866 	bl	8009fc8 <prvSampleTimeNow>
 8009efc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d130      	bne.n	8009f66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10a      	bne.n	8009f20 <prvProcessTimerOrBlockTask+0x3c>
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d806      	bhi.n	8009f20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009f12:	f7ff fa3f 	bl	8009394 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009f16:	68f9      	ldr	r1, [r7, #12]
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f7ff ff85 	bl	8009e28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009f1e:	e024      	b.n	8009f6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d008      	beq.n	8009f38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009f26:	4b13      	ldr	r3, [pc, #76]	; (8009f74 <prvProcessTimerOrBlockTask+0x90>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d101      	bne.n	8009f34 <prvProcessTimerOrBlockTask+0x50>
 8009f30:	2301      	movs	r3, #1
 8009f32:	e000      	b.n	8009f36 <prvProcessTimerOrBlockTask+0x52>
 8009f34:	2300      	movs	r3, #0
 8009f36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009f38:	4b0f      	ldr	r3, [pc, #60]	; (8009f78 <prvProcessTimerOrBlockTask+0x94>)
 8009f3a:	6818      	ldr	r0, [r3, #0]
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	683a      	ldr	r2, [r7, #0]
 8009f44:	4619      	mov	r1, r3
 8009f46:	f7fe ffa7 	bl	8008e98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009f4a:	f7ff fa23 	bl	8009394 <xTaskResumeAll>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10a      	bne.n	8009f6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009f54:	4b09      	ldr	r3, [pc, #36]	; (8009f7c <prvProcessTimerOrBlockTask+0x98>)
 8009f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f5a:	601a      	str	r2, [r3, #0]
 8009f5c:	f3bf 8f4f 	dsb	sy
 8009f60:	f3bf 8f6f 	isb	sy
}
 8009f64:	e001      	b.n	8009f6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009f66:	f7ff fa15 	bl	8009394 <xTaskResumeAll>
}
 8009f6a:	bf00      	nop
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	24000da4 	.word	0x24000da4
 8009f78:	24000da8 	.word	0x24000da8
 8009f7c:	e000ed04 	.word	0xe000ed04

08009f80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009f88:	4b0e      	ldr	r3, [pc, #56]	; (8009fc4 <prvGetNextExpireTime+0x44>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d101      	bne.n	8009f96 <prvGetNextExpireTime+0x16>
 8009f92:	2201      	movs	r2, #1
 8009f94:	e000      	b.n	8009f98 <prvGetNextExpireTime+0x18>
 8009f96:	2200      	movs	r2, #0
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d105      	bne.n	8009fb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fa4:	4b07      	ldr	r3, [pc, #28]	; (8009fc4 <prvGetNextExpireTime+0x44>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	60fb      	str	r3, [r7, #12]
 8009fae:	e001      	b.n	8009fb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	24000da0 	.word	0x24000da0

08009fc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009fd0:	f7ff fa7e 	bl	80094d0 <xTaskGetTickCount>
 8009fd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009fd6:	4b0b      	ldr	r3, [pc, #44]	; (800a004 <prvSampleTimeNow+0x3c>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	68fa      	ldr	r2, [r7, #12]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d205      	bcs.n	8009fec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009fe0:	f000 f936 	bl	800a250 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	601a      	str	r2, [r3, #0]
 8009fea:	e002      	b.n	8009ff2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009ff2:	4a04      	ldr	r2, [pc, #16]	; (800a004 <prvSampleTimeNow+0x3c>)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	24000db0 	.word	0x24000db0

0800a008 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b086      	sub	sp, #24
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	607a      	str	r2, [r7, #4]
 800a014:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a016:	2300      	movs	r3, #0
 800a018:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d812      	bhi.n	800a054 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	1ad2      	subs	r2, r2, r3
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	699b      	ldr	r3, [r3, #24]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d302      	bcc.n	800a042 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a03c:	2301      	movs	r3, #1
 800a03e:	617b      	str	r3, [r7, #20]
 800a040:	e01b      	b.n	800a07a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a042:	4b10      	ldr	r3, [pc, #64]	; (800a084 <prvInsertTimerInActiveList+0x7c>)
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	3304      	adds	r3, #4
 800a04a:	4619      	mov	r1, r3
 800a04c:	4610      	mov	r0, r2
 800a04e:	f7fe fa08 	bl	8008462 <vListInsert>
 800a052:	e012      	b.n	800a07a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d206      	bcs.n	800a06a <prvInsertTimerInActiveList+0x62>
 800a05c:	68ba      	ldr	r2, [r7, #8]
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	429a      	cmp	r2, r3
 800a062:	d302      	bcc.n	800a06a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a064:	2301      	movs	r3, #1
 800a066:	617b      	str	r3, [r7, #20]
 800a068:	e007      	b.n	800a07a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a06a:	4b07      	ldr	r3, [pc, #28]	; (800a088 <prvInsertTimerInActiveList+0x80>)
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	3304      	adds	r3, #4
 800a072:	4619      	mov	r1, r3
 800a074:	4610      	mov	r0, r2
 800a076:	f7fe f9f4 	bl	8008462 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a07a:	697b      	ldr	r3, [r7, #20]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3718      	adds	r7, #24
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	24000da4 	.word	0x24000da4
 800a088:	24000da0 	.word	0x24000da0

0800a08c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b08e      	sub	sp, #56	; 0x38
 800a090:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a092:	e0ca      	b.n	800a22a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2b00      	cmp	r3, #0
 800a098:	da18      	bge.n	800a0cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a09a:	1d3b      	adds	r3, r7, #4
 800a09c:	3304      	adds	r3, #4
 800a09e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d10a      	bne.n	800a0bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0aa:	f383 8811 	msr	BASEPRI, r3
 800a0ae:	f3bf 8f6f 	isb	sy
 800a0b2:	f3bf 8f4f 	dsb	sy
 800a0b6:	61fb      	str	r3, [r7, #28]
}
 800a0b8:	bf00      	nop
 800a0ba:	e7fe      	b.n	800a0ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0c2:	6850      	ldr	r0, [r2, #4]
 800a0c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0c6:	6892      	ldr	r2, [r2, #8]
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f2c0 80aa 	blt.w	800a228 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0da:	695b      	ldr	r3, [r3, #20]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d004      	beq.n	800a0ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e2:	3304      	adds	r3, #4
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7fe f9f5 	bl	80084d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0ea:	463b      	mov	r3, r7
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7ff ff6b 	bl	8009fc8 <prvSampleTimeNow>
 800a0f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b09      	cmp	r3, #9
 800a0f8:	f200 8097 	bhi.w	800a22a <prvProcessReceivedCommands+0x19e>
 800a0fc:	a201      	add	r2, pc, #4	; (adr r2, 800a104 <prvProcessReceivedCommands+0x78>)
 800a0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a102:	bf00      	nop
 800a104:	0800a12d 	.word	0x0800a12d
 800a108:	0800a12d 	.word	0x0800a12d
 800a10c:	0800a12d 	.word	0x0800a12d
 800a110:	0800a1a1 	.word	0x0800a1a1
 800a114:	0800a1b5 	.word	0x0800a1b5
 800a118:	0800a1ff 	.word	0x0800a1ff
 800a11c:	0800a12d 	.word	0x0800a12d
 800a120:	0800a12d 	.word	0x0800a12d
 800a124:	0800a1a1 	.word	0x0800a1a1
 800a128:	0800a1b5 	.word	0x0800a1b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a132:	f043 0301 	orr.w	r3, r3, #1
 800a136:	b2da      	uxtb	r2, r3
 800a138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a142:	699b      	ldr	r3, [r3, #24]
 800a144:	18d1      	adds	r1, r2, r3
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a14a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a14c:	f7ff ff5c 	bl	800a008 <prvInsertTimerInActiveList>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d069      	beq.n	800a22a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a158:	6a1b      	ldr	r3, [r3, #32]
 800a15a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a15c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a164:	f003 0304 	and.w	r3, r3, #4
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d05e      	beq.n	800a22a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	441a      	add	r2, r3
 800a174:	2300      	movs	r3, #0
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	2300      	movs	r3, #0
 800a17a:	2100      	movs	r1, #0
 800a17c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a17e:	f7ff fe05 	bl	8009d8c <xTimerGenericCommand>
 800a182:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a184:	6a3b      	ldr	r3, [r7, #32]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d14f      	bne.n	800a22a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	61bb      	str	r3, [r7, #24]
}
 800a19c:	bf00      	nop
 800a19e:	e7fe      	b.n	800a19e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1a6:	f023 0301 	bic.w	r3, r3, #1
 800a1aa:	b2da      	uxtb	r2, r3
 800a1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a1b2:	e03a      	b.n	800a22a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1ba:	f043 0301 	orr.w	r3, r3, #1
 800a1be:	b2da      	uxtb	r2, r3
 800a1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a1c6:	68ba      	ldr	r2, [r7, #8]
 800a1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d10a      	bne.n	800a1ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d8:	f383 8811 	msr	BASEPRI, r3
 800a1dc:	f3bf 8f6f 	isb	sy
 800a1e0:	f3bf 8f4f 	dsb	sy
 800a1e4:	617b      	str	r3, [r7, #20]
}
 800a1e6:	bf00      	nop
 800a1e8:	e7fe      	b.n	800a1e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ec:	699a      	ldr	r2, [r3, #24]
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	18d1      	adds	r1, r2, r3
 800a1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1f8:	f7ff ff06 	bl	800a008 <prvInsertTimerInActiveList>
					break;
 800a1fc:	e015      	b.n	800a22a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a200:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a204:	f003 0302 	and.w	r3, r3, #2
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d103      	bne.n	800a214 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a20c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a20e:	f000 fbdf 	bl	800a9d0 <vPortFree>
 800a212:	e00a      	b.n	800a22a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a216:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a21a:	f023 0301 	bic.w	r3, r3, #1
 800a21e:	b2da      	uxtb	r2, r3
 800a220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a222:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a226:	e000      	b.n	800a22a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a228:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a22a:	4b08      	ldr	r3, [pc, #32]	; (800a24c <prvProcessReceivedCommands+0x1c0>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	1d39      	adds	r1, r7, #4
 800a230:	2200      	movs	r2, #0
 800a232:	4618      	mov	r0, r3
 800a234:	f7fe fc16 	bl	8008a64 <xQueueReceive>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f47f af2a 	bne.w	800a094 <prvProcessReceivedCommands+0x8>
	}
}
 800a240:	bf00      	nop
 800a242:	bf00      	nop
 800a244:	3730      	adds	r7, #48	; 0x30
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	24000da8 	.word	0x24000da8

0800a250 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b088      	sub	sp, #32
 800a254:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a256:	e048      	b.n	800a2ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a258:	4b2d      	ldr	r3, [pc, #180]	; (800a310 <prvSwitchTimerLists+0xc0>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a262:	4b2b      	ldr	r3, [pc, #172]	; (800a310 <prvSwitchTimerLists+0xc0>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	3304      	adds	r3, #4
 800a270:	4618      	mov	r0, r3
 800a272:	f7fe f92f 	bl	80084d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a284:	f003 0304 	and.w	r3, r3, #4
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d02e      	beq.n	800a2ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	699b      	ldr	r3, [r3, #24]
 800a290:	693a      	ldr	r2, [r7, #16]
 800a292:	4413      	add	r3, r2
 800a294:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a296:	68ba      	ldr	r2, [r7, #8]
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d90e      	bls.n	800a2bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	68ba      	ldr	r2, [r7, #8]
 800a2a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2aa:	4b19      	ldr	r3, [pc, #100]	; (800a310 <prvSwitchTimerLists+0xc0>)
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	3304      	adds	r3, #4
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	4610      	mov	r0, r2
 800a2b6:	f7fe f8d4 	bl	8008462 <vListInsert>
 800a2ba:	e016      	b.n	800a2ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a2bc:	2300      	movs	r3, #0
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	68f8      	ldr	r0, [r7, #12]
 800a2c8:	f7ff fd60 	bl	8009d8c <xTimerGenericCommand>
 800a2cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10a      	bne.n	800a2ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	603b      	str	r3, [r7, #0]
}
 800a2e6:	bf00      	nop
 800a2e8:	e7fe      	b.n	800a2e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a2ea:	4b09      	ldr	r3, [pc, #36]	; (800a310 <prvSwitchTimerLists+0xc0>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d1b1      	bne.n	800a258 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a2f4:	4b06      	ldr	r3, [pc, #24]	; (800a310 <prvSwitchTimerLists+0xc0>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a2fa:	4b06      	ldr	r3, [pc, #24]	; (800a314 <prvSwitchTimerLists+0xc4>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a04      	ldr	r2, [pc, #16]	; (800a310 <prvSwitchTimerLists+0xc0>)
 800a300:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a302:	4a04      	ldr	r2, [pc, #16]	; (800a314 <prvSwitchTimerLists+0xc4>)
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	6013      	str	r3, [r2, #0]
}
 800a308:	bf00      	nop
 800a30a:	3718      	adds	r7, #24
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	24000da0 	.word	0x24000da0
 800a314:	24000da4 	.word	0x24000da4

0800a318 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a31e:	f000 f969 	bl	800a5f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a322:	4b15      	ldr	r3, [pc, #84]	; (800a378 <prvCheckForValidListAndQueue+0x60>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d120      	bne.n	800a36c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a32a:	4814      	ldr	r0, [pc, #80]	; (800a37c <prvCheckForValidListAndQueue+0x64>)
 800a32c:	f7fe f848 	bl	80083c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a330:	4813      	ldr	r0, [pc, #76]	; (800a380 <prvCheckForValidListAndQueue+0x68>)
 800a332:	f7fe f845 	bl	80083c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a336:	4b13      	ldr	r3, [pc, #76]	; (800a384 <prvCheckForValidListAndQueue+0x6c>)
 800a338:	4a10      	ldr	r2, [pc, #64]	; (800a37c <prvCheckForValidListAndQueue+0x64>)
 800a33a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a33c:	4b12      	ldr	r3, [pc, #72]	; (800a388 <prvCheckForValidListAndQueue+0x70>)
 800a33e:	4a10      	ldr	r2, [pc, #64]	; (800a380 <prvCheckForValidListAndQueue+0x68>)
 800a340:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a342:	2300      	movs	r3, #0
 800a344:	9300      	str	r3, [sp, #0]
 800a346:	4b11      	ldr	r3, [pc, #68]	; (800a38c <prvCheckForValidListAndQueue+0x74>)
 800a348:	4a11      	ldr	r2, [pc, #68]	; (800a390 <prvCheckForValidListAndQueue+0x78>)
 800a34a:	2110      	movs	r1, #16
 800a34c:	200a      	movs	r0, #10
 800a34e:	f7fe f953 	bl	80085f8 <xQueueGenericCreateStatic>
 800a352:	4603      	mov	r3, r0
 800a354:	4a08      	ldr	r2, [pc, #32]	; (800a378 <prvCheckForValidListAndQueue+0x60>)
 800a356:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a358:	4b07      	ldr	r3, [pc, #28]	; (800a378 <prvCheckForValidListAndQueue+0x60>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d005      	beq.n	800a36c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a360:	4b05      	ldr	r3, [pc, #20]	; (800a378 <prvCheckForValidListAndQueue+0x60>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	490b      	ldr	r1, [pc, #44]	; (800a394 <prvCheckForValidListAndQueue+0x7c>)
 800a366:	4618      	mov	r0, r3
 800a368:	f7fe fd6c 	bl	8008e44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a36c:	f000 f972 	bl	800a654 <vPortExitCritical>
}
 800a370:	bf00      	nop
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	24000da8 	.word	0x24000da8
 800a37c:	24000d78 	.word	0x24000d78
 800a380:	24000d8c 	.word	0x24000d8c
 800a384:	24000da0 	.word	0x24000da0
 800a388:	24000da4 	.word	0x24000da4
 800a38c:	24000e54 	.word	0x24000e54
 800a390:	24000db4 	.word	0x24000db4
 800a394:	0800acb4 	.word	0x0800acb4

0800a398 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	3b04      	subs	r3, #4
 800a3a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a3b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	3b04      	subs	r3, #4
 800a3b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	f023 0201 	bic.w	r2, r3, #1
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	3b04      	subs	r3, #4
 800a3c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a3c8:	4a0c      	ldr	r2, [pc, #48]	; (800a3fc <pxPortInitialiseStack+0x64>)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	3b14      	subs	r3, #20
 800a3d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	3b04      	subs	r3, #4
 800a3de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f06f 0202 	mvn.w	r2, #2
 800a3e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	3b20      	subs	r3, #32
 800a3ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3714      	adds	r7, #20
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr
 800a3fc:	0800a401 	.word	0x0800a401

0800a400 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a406:	2300      	movs	r3, #0
 800a408:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a40a:	4b12      	ldr	r3, [pc, #72]	; (800a454 <prvTaskExitError+0x54>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a412:	d00a      	beq.n	800a42a <prvTaskExitError+0x2a>
	__asm volatile
 800a414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a418:	f383 8811 	msr	BASEPRI, r3
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	f3bf 8f4f 	dsb	sy
 800a424:	60fb      	str	r3, [r7, #12]
}
 800a426:	bf00      	nop
 800a428:	e7fe      	b.n	800a428 <prvTaskExitError+0x28>
	__asm volatile
 800a42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42e:	f383 8811 	msr	BASEPRI, r3
 800a432:	f3bf 8f6f 	isb	sy
 800a436:	f3bf 8f4f 	dsb	sy
 800a43a:	60bb      	str	r3, [r7, #8]
}
 800a43c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a43e:	bf00      	nop
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d0fc      	beq.n	800a440 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a446:	bf00      	nop
 800a448:	bf00      	nop
 800a44a:	3714      	adds	r7, #20
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr
 800a454:	24000010 	.word	0x24000010
	...

0800a460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a460:	4b07      	ldr	r3, [pc, #28]	; (800a480 <pxCurrentTCBConst2>)
 800a462:	6819      	ldr	r1, [r3, #0]
 800a464:	6808      	ldr	r0, [r1, #0]
 800a466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a46a:	f380 8809 	msr	PSP, r0
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f04f 0000 	mov.w	r0, #0
 800a476:	f380 8811 	msr	BASEPRI, r0
 800a47a:	4770      	bx	lr
 800a47c:	f3af 8000 	nop.w

0800a480 <pxCurrentTCBConst2>:
 800a480:	24000878 	.word	0x24000878
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a484:	bf00      	nop
 800a486:	bf00      	nop

0800a488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a488:	4808      	ldr	r0, [pc, #32]	; (800a4ac <prvPortStartFirstTask+0x24>)
 800a48a:	6800      	ldr	r0, [r0, #0]
 800a48c:	6800      	ldr	r0, [r0, #0]
 800a48e:	f380 8808 	msr	MSP, r0
 800a492:	f04f 0000 	mov.w	r0, #0
 800a496:	f380 8814 	msr	CONTROL, r0
 800a49a:	b662      	cpsie	i
 800a49c:	b661      	cpsie	f
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	df00      	svc	0
 800a4a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a4aa:	bf00      	nop
 800a4ac:	e000ed08 	.word	0xe000ed08

0800a4b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a4b6:	4b46      	ldr	r3, [pc, #280]	; (800a5d0 <xPortStartScheduler+0x120>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a46      	ldr	r2, [pc, #280]	; (800a5d4 <xPortStartScheduler+0x124>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d10a      	bne.n	800a4d6 <xPortStartScheduler+0x26>
	__asm volatile
 800a4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c4:	f383 8811 	msr	BASEPRI, r3
 800a4c8:	f3bf 8f6f 	isb	sy
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	613b      	str	r3, [r7, #16]
}
 800a4d2:	bf00      	nop
 800a4d4:	e7fe      	b.n	800a4d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a4d6:	4b3e      	ldr	r3, [pc, #248]	; (800a5d0 <xPortStartScheduler+0x120>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a3f      	ldr	r2, [pc, #252]	; (800a5d8 <xPortStartScheduler+0x128>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d10a      	bne.n	800a4f6 <xPortStartScheduler+0x46>
	__asm volatile
 800a4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e4:	f383 8811 	msr	BASEPRI, r3
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	f3bf 8f4f 	dsb	sy
 800a4f0:	60fb      	str	r3, [r7, #12]
}
 800a4f2:	bf00      	nop
 800a4f4:	e7fe      	b.n	800a4f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a4f6:	4b39      	ldr	r3, [pc, #228]	; (800a5dc <xPortStartScheduler+0x12c>)
 800a4f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	22ff      	movs	r2, #255	; 0xff
 800a506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a510:	78fb      	ldrb	r3, [r7, #3]
 800a512:	b2db      	uxtb	r3, r3
 800a514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a518:	b2da      	uxtb	r2, r3
 800a51a:	4b31      	ldr	r3, [pc, #196]	; (800a5e0 <xPortStartScheduler+0x130>)
 800a51c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a51e:	4b31      	ldr	r3, [pc, #196]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a520:	2207      	movs	r2, #7
 800a522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a524:	e009      	b.n	800a53a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a526:	4b2f      	ldr	r3, [pc, #188]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	3b01      	subs	r3, #1
 800a52c:	4a2d      	ldr	r2, [pc, #180]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a52e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a530:	78fb      	ldrb	r3, [r7, #3]
 800a532:	b2db      	uxtb	r3, r3
 800a534:	005b      	lsls	r3, r3, #1
 800a536:	b2db      	uxtb	r3, r3
 800a538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a53a:	78fb      	ldrb	r3, [r7, #3]
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a542:	2b80      	cmp	r3, #128	; 0x80
 800a544:	d0ef      	beq.n	800a526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a546:	4b27      	ldr	r3, [pc, #156]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f1c3 0307 	rsb	r3, r3, #7
 800a54e:	2b04      	cmp	r3, #4
 800a550:	d00a      	beq.n	800a568 <xPortStartScheduler+0xb8>
	__asm volatile
 800a552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a556:	f383 8811 	msr	BASEPRI, r3
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	60bb      	str	r3, [r7, #8]
}
 800a564:	bf00      	nop
 800a566:	e7fe      	b.n	800a566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a568:	4b1e      	ldr	r3, [pc, #120]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	021b      	lsls	r3, r3, #8
 800a56e:	4a1d      	ldr	r2, [pc, #116]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a572:	4b1c      	ldr	r3, [pc, #112]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a57a:	4a1a      	ldr	r2, [pc, #104]	; (800a5e4 <xPortStartScheduler+0x134>)
 800a57c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	b2da      	uxtb	r2, r3
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a586:	4b18      	ldr	r3, [pc, #96]	; (800a5e8 <xPortStartScheduler+0x138>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a17      	ldr	r2, [pc, #92]	; (800a5e8 <xPortStartScheduler+0x138>)
 800a58c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a592:	4b15      	ldr	r3, [pc, #84]	; (800a5e8 <xPortStartScheduler+0x138>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a14      	ldr	r2, [pc, #80]	; (800a5e8 <xPortStartScheduler+0x138>)
 800a598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a59c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a59e:	f000 f8dd 	bl	800a75c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a5a2:	4b12      	ldr	r3, [pc, #72]	; (800a5ec <xPortStartScheduler+0x13c>)
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a5a8:	f000 f8fc 	bl	800a7a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a5ac:	4b10      	ldr	r3, [pc, #64]	; (800a5f0 <xPortStartScheduler+0x140>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a0f      	ldr	r2, [pc, #60]	; (800a5f0 <xPortStartScheduler+0x140>)
 800a5b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a5b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a5b8:	f7ff ff66 	bl	800a488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a5bc:	f7ff f852 	bl	8009664 <vTaskSwitchContext>
	prvTaskExitError();
 800a5c0:	f7ff ff1e 	bl	800a400 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3718      	adds	r7, #24
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	e000ed00 	.word	0xe000ed00
 800a5d4:	410fc271 	.word	0x410fc271
 800a5d8:	410fc270 	.word	0x410fc270
 800a5dc:	e000e400 	.word	0xe000e400
 800a5e0:	24000ea4 	.word	0x24000ea4
 800a5e4:	24000ea8 	.word	0x24000ea8
 800a5e8:	e000ed20 	.word	0xe000ed20
 800a5ec:	24000010 	.word	0x24000010
 800a5f0:	e000ef34 	.word	0xe000ef34

0800a5f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
	__asm volatile
 800a5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fe:	f383 8811 	msr	BASEPRI, r3
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	607b      	str	r3, [r7, #4]
}
 800a60c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a60e:	4b0f      	ldr	r3, [pc, #60]	; (800a64c <vPortEnterCritical+0x58>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	3301      	adds	r3, #1
 800a614:	4a0d      	ldr	r2, [pc, #52]	; (800a64c <vPortEnterCritical+0x58>)
 800a616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a618:	4b0c      	ldr	r3, [pc, #48]	; (800a64c <vPortEnterCritical+0x58>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d10f      	bne.n	800a640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a620:	4b0b      	ldr	r3, [pc, #44]	; (800a650 <vPortEnterCritical+0x5c>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	b2db      	uxtb	r3, r3
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00a      	beq.n	800a640 <vPortEnterCritical+0x4c>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	603b      	str	r3, [r7, #0]
}
 800a63c:	bf00      	nop
 800a63e:	e7fe      	b.n	800a63e <vPortEnterCritical+0x4a>
	}
}
 800a640:	bf00      	nop
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	24000010 	.word	0x24000010
 800a650:	e000ed04 	.word	0xe000ed04

0800a654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a65a:	4b12      	ldr	r3, [pc, #72]	; (800a6a4 <vPortExitCritical+0x50>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d10a      	bne.n	800a678 <vPortExitCritical+0x24>
	__asm volatile
 800a662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a666:	f383 8811 	msr	BASEPRI, r3
 800a66a:	f3bf 8f6f 	isb	sy
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	607b      	str	r3, [r7, #4]
}
 800a674:	bf00      	nop
 800a676:	e7fe      	b.n	800a676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a678:	4b0a      	ldr	r3, [pc, #40]	; (800a6a4 <vPortExitCritical+0x50>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	3b01      	subs	r3, #1
 800a67e:	4a09      	ldr	r2, [pc, #36]	; (800a6a4 <vPortExitCritical+0x50>)
 800a680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a682:	4b08      	ldr	r3, [pc, #32]	; (800a6a4 <vPortExitCritical+0x50>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d105      	bne.n	800a696 <vPortExitCritical+0x42>
 800a68a:	2300      	movs	r3, #0
 800a68c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	f383 8811 	msr	BASEPRI, r3
}
 800a694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a696:	bf00      	nop
 800a698:	370c      	adds	r7, #12
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	24000010 	.word	0x24000010
	...

0800a6b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a6b0:	f3ef 8009 	mrs	r0, PSP
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	4b15      	ldr	r3, [pc, #84]	; (800a710 <pxCurrentTCBConst>)
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	f01e 0f10 	tst.w	lr, #16
 800a6c0:	bf08      	it	eq
 800a6c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a6c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ca:	6010      	str	r0, [r2, #0]
 800a6cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a6d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a6d4:	f380 8811 	msr	BASEPRI, r0
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	f3bf 8f6f 	isb	sy
 800a6e0:	f7fe ffc0 	bl	8009664 <vTaskSwitchContext>
 800a6e4:	f04f 0000 	mov.w	r0, #0
 800a6e8:	f380 8811 	msr	BASEPRI, r0
 800a6ec:	bc09      	pop	{r0, r3}
 800a6ee:	6819      	ldr	r1, [r3, #0]
 800a6f0:	6808      	ldr	r0, [r1, #0]
 800a6f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f6:	f01e 0f10 	tst.w	lr, #16
 800a6fa:	bf08      	it	eq
 800a6fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a700:	f380 8809 	msr	PSP, r0
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	f3af 8000 	nop.w

0800a710 <pxCurrentTCBConst>:
 800a710:	24000878 	.word	0x24000878
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a714:	bf00      	nop
 800a716:	bf00      	nop

0800a718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
	__asm volatile
 800a71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	607b      	str	r3, [r7, #4]
}
 800a730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a732:	f7fe fedd 	bl	80094f0 <xTaskIncrementTick>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d003      	beq.n	800a744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a73c:	4b06      	ldr	r3, [pc, #24]	; (800a758 <xPortSysTickHandler+0x40>)
 800a73e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a742:	601a      	str	r2, [r3, #0]
 800a744:	2300      	movs	r3, #0
 800a746:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	f383 8811 	msr	BASEPRI, r3
}
 800a74e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a750:	bf00      	nop
 800a752:	3708      	adds	r7, #8
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	e000ed04 	.word	0xe000ed04

0800a75c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a75c:	b480      	push	{r7}
 800a75e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a760:	4b0b      	ldr	r3, [pc, #44]	; (800a790 <vPortSetupTimerInterrupt+0x34>)
 800a762:	2200      	movs	r2, #0
 800a764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a766:	4b0b      	ldr	r3, [pc, #44]	; (800a794 <vPortSetupTimerInterrupt+0x38>)
 800a768:	2200      	movs	r2, #0
 800a76a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a76c:	4b0a      	ldr	r3, [pc, #40]	; (800a798 <vPortSetupTimerInterrupt+0x3c>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a0a      	ldr	r2, [pc, #40]	; (800a79c <vPortSetupTimerInterrupt+0x40>)
 800a772:	fba2 2303 	umull	r2, r3, r2, r3
 800a776:	099b      	lsrs	r3, r3, #6
 800a778:	4a09      	ldr	r2, [pc, #36]	; (800a7a0 <vPortSetupTimerInterrupt+0x44>)
 800a77a:	3b01      	subs	r3, #1
 800a77c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a77e:	4b04      	ldr	r3, [pc, #16]	; (800a790 <vPortSetupTimerInterrupt+0x34>)
 800a780:	2207      	movs	r2, #7
 800a782:	601a      	str	r2, [r3, #0]
}
 800a784:	bf00      	nop
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	e000e010 	.word	0xe000e010
 800a794:	e000e018 	.word	0xe000e018
 800a798:	24000000 	.word	0x24000000
 800a79c:	10624dd3 	.word	0x10624dd3
 800a7a0:	e000e014 	.word	0xe000e014

0800a7a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a7a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a7b4 <vPortEnableVFP+0x10>
 800a7a8:	6801      	ldr	r1, [r0, #0]
 800a7aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a7ae:	6001      	str	r1, [r0, #0]
 800a7b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a7b2:	bf00      	nop
 800a7b4:	e000ed88 	.word	0xe000ed88

0800a7b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a7be:	f3ef 8305 	mrs	r3, IPSR
 800a7c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2b0f      	cmp	r3, #15
 800a7c8:	d914      	bls.n	800a7f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a7ca:	4a17      	ldr	r2, [pc, #92]	; (800a828 <vPortValidateInterruptPriority+0x70>)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a7d4:	4b15      	ldr	r3, [pc, #84]	; (800a82c <vPortValidateInterruptPriority+0x74>)
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	7afa      	ldrb	r2, [r7, #11]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d20a      	bcs.n	800a7f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	607b      	str	r3, [r7, #4]
}
 800a7f0:	bf00      	nop
 800a7f2:	e7fe      	b.n	800a7f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a7f4:	4b0e      	ldr	r3, [pc, #56]	; (800a830 <vPortValidateInterruptPriority+0x78>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a7fc:	4b0d      	ldr	r3, [pc, #52]	; (800a834 <vPortValidateInterruptPriority+0x7c>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	429a      	cmp	r2, r3
 800a802:	d90a      	bls.n	800a81a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a808:	f383 8811 	msr	BASEPRI, r3
 800a80c:	f3bf 8f6f 	isb	sy
 800a810:	f3bf 8f4f 	dsb	sy
 800a814:	603b      	str	r3, [r7, #0]
}
 800a816:	bf00      	nop
 800a818:	e7fe      	b.n	800a818 <vPortValidateInterruptPriority+0x60>
	}
 800a81a:	bf00      	nop
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop
 800a828:	e000e3f0 	.word	0xe000e3f0
 800a82c:	24000ea4 	.word	0x24000ea4
 800a830:	e000ed0c 	.word	0xe000ed0c
 800a834:	24000ea8 	.word	0x24000ea8

0800a838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b08a      	sub	sp, #40	; 0x28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a840:	2300      	movs	r3, #0
 800a842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a844:	f7fe fd98 	bl	8009378 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a848:	4b5b      	ldr	r3, [pc, #364]	; (800a9b8 <pvPortMalloc+0x180>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d101      	bne.n	800a854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a850:	f000 f920 	bl	800aa94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a854:	4b59      	ldr	r3, [pc, #356]	; (800a9bc <pvPortMalloc+0x184>)
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4013      	ands	r3, r2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	f040 8093 	bne.w	800a988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d01d      	beq.n	800a8a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a868:	2208      	movs	r2, #8
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4413      	add	r3, r2
 800a86e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f003 0307 	and.w	r3, r3, #7
 800a876:	2b00      	cmp	r3, #0
 800a878:	d014      	beq.n	800a8a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f023 0307 	bic.w	r3, r3, #7
 800a880:	3308      	adds	r3, #8
 800a882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f003 0307 	and.w	r3, r3, #7
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00a      	beq.n	800a8a4 <pvPortMalloc+0x6c>
	__asm volatile
 800a88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a892:	f383 8811 	msr	BASEPRI, r3
 800a896:	f3bf 8f6f 	isb	sy
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	617b      	str	r3, [r7, #20]
}
 800a8a0:	bf00      	nop
 800a8a2:	e7fe      	b.n	800a8a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d06e      	beq.n	800a988 <pvPortMalloc+0x150>
 800a8aa:	4b45      	ldr	r3, [pc, #276]	; (800a9c0 <pvPortMalloc+0x188>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d869      	bhi.n	800a988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a8b4:	4b43      	ldr	r3, [pc, #268]	; (800a9c4 <pvPortMalloc+0x18c>)
 800a8b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a8b8:	4b42      	ldr	r3, [pc, #264]	; (800a9c4 <pvPortMalloc+0x18c>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8be:	e004      	b.n	800a8ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d903      	bls.n	800a8dc <pvPortMalloc+0xa4>
 800a8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d1f1      	bne.n	800a8c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a8dc:	4b36      	ldr	r3, [pc, #216]	; (800a9b8 <pvPortMalloc+0x180>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d050      	beq.n	800a988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a8e6:	6a3b      	ldr	r3, [r7, #32]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2208      	movs	r2, #8
 800a8ec:	4413      	add	r3, r2
 800a8ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	6a3b      	ldr	r3, [r7, #32]
 800a8f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	1ad2      	subs	r2, r2, r3
 800a900:	2308      	movs	r3, #8
 800a902:	005b      	lsls	r3, r3, #1
 800a904:	429a      	cmp	r2, r3
 800a906:	d91f      	bls.n	800a948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4413      	add	r3, r2
 800a90e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a910:	69bb      	ldr	r3, [r7, #24]
 800a912:	f003 0307 	and.w	r3, r3, #7
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00a      	beq.n	800a930 <pvPortMalloc+0xf8>
	__asm volatile
 800a91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91e:	f383 8811 	msr	BASEPRI, r3
 800a922:	f3bf 8f6f 	isb	sy
 800a926:	f3bf 8f4f 	dsb	sy
 800a92a:	613b      	str	r3, [r7, #16]
}
 800a92c:	bf00      	nop
 800a92e:	e7fe      	b.n	800a92e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a932:	685a      	ldr	r2, [r3, #4]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	1ad2      	subs	r2, r2, r3
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a942:	69b8      	ldr	r0, [r7, #24]
 800a944:	f000 f908 	bl	800ab58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a948:	4b1d      	ldr	r3, [pc, #116]	; (800a9c0 <pvPortMalloc+0x188>)
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	4a1b      	ldr	r2, [pc, #108]	; (800a9c0 <pvPortMalloc+0x188>)
 800a954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a956:	4b1a      	ldr	r3, [pc, #104]	; (800a9c0 <pvPortMalloc+0x188>)
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	4b1b      	ldr	r3, [pc, #108]	; (800a9c8 <pvPortMalloc+0x190>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d203      	bcs.n	800a96a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a962:	4b17      	ldr	r3, [pc, #92]	; (800a9c0 <pvPortMalloc+0x188>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a18      	ldr	r2, [pc, #96]	; (800a9c8 <pvPortMalloc+0x190>)
 800a968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96c:	685a      	ldr	r2, [r3, #4]
 800a96e:	4b13      	ldr	r3, [pc, #76]	; (800a9bc <pvPortMalloc+0x184>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	431a      	orrs	r2, r3
 800a974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97a:	2200      	movs	r2, #0
 800a97c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a97e:	4b13      	ldr	r3, [pc, #76]	; (800a9cc <pvPortMalloc+0x194>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	3301      	adds	r3, #1
 800a984:	4a11      	ldr	r2, [pc, #68]	; (800a9cc <pvPortMalloc+0x194>)
 800a986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a988:	f7fe fd04 	bl	8009394 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	f003 0307 	and.w	r3, r3, #7
 800a992:	2b00      	cmp	r3, #0
 800a994:	d00a      	beq.n	800a9ac <pvPortMalloc+0x174>
	__asm volatile
 800a996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99a:	f383 8811 	msr	BASEPRI, r3
 800a99e:	f3bf 8f6f 	isb	sy
 800a9a2:	f3bf 8f4f 	dsb	sy
 800a9a6:	60fb      	str	r3, [r7, #12]
}
 800a9a8:	bf00      	nop
 800a9aa:	e7fe      	b.n	800a9aa <pvPortMalloc+0x172>
	return pvReturn;
 800a9ac:	69fb      	ldr	r3, [r7, #28]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3728      	adds	r7, #40	; 0x28
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	24004ab4 	.word	0x24004ab4
 800a9bc:	24004ac8 	.word	0x24004ac8
 800a9c0:	24004ab8 	.word	0x24004ab8
 800a9c4:	24004aac 	.word	0x24004aac
 800a9c8:	24004abc 	.word	0x24004abc
 800a9cc:	24004ac0 	.word	0x24004ac0

0800a9d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d04d      	beq.n	800aa7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a9e2:	2308      	movs	r3, #8
 800a9e4:	425b      	negs	r3, r3
 800a9e6:	697a      	ldr	r2, [r7, #20]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	685a      	ldr	r2, [r3, #4]
 800a9f4:	4b24      	ldr	r3, [pc, #144]	; (800aa88 <vPortFree+0xb8>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4013      	ands	r3, r2
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d10a      	bne.n	800aa14 <vPortFree+0x44>
	__asm volatile
 800a9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa02:	f383 8811 	msr	BASEPRI, r3
 800aa06:	f3bf 8f6f 	isb	sy
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	60fb      	str	r3, [r7, #12]
}
 800aa10:	bf00      	nop
 800aa12:	e7fe      	b.n	800aa12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00a      	beq.n	800aa32 <vPortFree+0x62>
	__asm volatile
 800aa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	60bb      	str	r3, [r7, #8]
}
 800aa2e:	bf00      	nop
 800aa30:	e7fe      	b.n	800aa30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	685a      	ldr	r2, [r3, #4]
 800aa36:	4b14      	ldr	r3, [pc, #80]	; (800aa88 <vPortFree+0xb8>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d01e      	beq.n	800aa7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d11a      	bne.n	800aa7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	685a      	ldr	r2, [r3, #4]
 800aa4c:	4b0e      	ldr	r3, [pc, #56]	; (800aa88 <vPortFree+0xb8>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	43db      	mvns	r3, r3
 800aa52:	401a      	ands	r2, r3
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aa58:	f7fe fc8e 	bl	8009378 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	685a      	ldr	r2, [r3, #4]
 800aa60:	4b0a      	ldr	r3, [pc, #40]	; (800aa8c <vPortFree+0xbc>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4413      	add	r3, r2
 800aa66:	4a09      	ldr	r2, [pc, #36]	; (800aa8c <vPortFree+0xbc>)
 800aa68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa6a:	6938      	ldr	r0, [r7, #16]
 800aa6c:	f000 f874 	bl	800ab58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aa70:	4b07      	ldr	r3, [pc, #28]	; (800aa90 <vPortFree+0xc0>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	3301      	adds	r3, #1
 800aa76:	4a06      	ldr	r2, [pc, #24]	; (800aa90 <vPortFree+0xc0>)
 800aa78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aa7a:	f7fe fc8b 	bl	8009394 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aa7e:	bf00      	nop
 800aa80:	3718      	adds	r7, #24
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	24004ac8 	.word	0x24004ac8
 800aa8c:	24004ab8 	.word	0x24004ab8
 800aa90:	24004ac4 	.word	0x24004ac4

0800aa94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aa9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800aa9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aaa0:	4b27      	ldr	r3, [pc, #156]	; (800ab40 <prvHeapInit+0xac>)
 800aaa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f003 0307 	and.w	r3, r3, #7
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00c      	beq.n	800aac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	3307      	adds	r3, #7
 800aab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f023 0307 	bic.w	r3, r3, #7
 800aaba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	1ad3      	subs	r3, r2, r3
 800aac2:	4a1f      	ldr	r2, [pc, #124]	; (800ab40 <prvHeapInit+0xac>)
 800aac4:	4413      	add	r3, r2
 800aac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aacc:	4a1d      	ldr	r2, [pc, #116]	; (800ab44 <prvHeapInit+0xb0>)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aad2:	4b1c      	ldr	r3, [pc, #112]	; (800ab44 <prvHeapInit+0xb0>)
 800aad4:	2200      	movs	r2, #0
 800aad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	68ba      	ldr	r2, [r7, #8]
 800aadc:	4413      	add	r3, r2
 800aade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aae0:	2208      	movs	r2, #8
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	1a9b      	subs	r3, r3, r2
 800aae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f023 0307 	bic.w	r3, r3, #7
 800aaee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	4a15      	ldr	r2, [pc, #84]	; (800ab48 <prvHeapInit+0xb4>)
 800aaf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aaf6:	4b14      	ldr	r3, [pc, #80]	; (800ab48 <prvHeapInit+0xb4>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2200      	movs	r2, #0
 800aafc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aafe:	4b12      	ldr	r3, [pc, #72]	; (800ab48 <prvHeapInit+0xb4>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2200      	movs	r2, #0
 800ab04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	1ad2      	subs	r2, r2, r3
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab14:	4b0c      	ldr	r3, [pc, #48]	; (800ab48 <prvHeapInit+0xb4>)
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	4a0a      	ldr	r2, [pc, #40]	; (800ab4c <prvHeapInit+0xb8>)
 800ab22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	4a09      	ldr	r2, [pc, #36]	; (800ab50 <prvHeapInit+0xbc>)
 800ab2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab2c:	4b09      	ldr	r3, [pc, #36]	; (800ab54 <prvHeapInit+0xc0>)
 800ab2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ab32:	601a      	str	r2, [r3, #0]
}
 800ab34:	bf00      	nop
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr
 800ab40:	24000eac 	.word	0x24000eac
 800ab44:	24004aac 	.word	0x24004aac
 800ab48:	24004ab4 	.word	0x24004ab4
 800ab4c:	24004abc 	.word	0x24004abc
 800ab50:	24004ab8 	.word	0x24004ab8
 800ab54:	24004ac8 	.word	0x24004ac8

0800ab58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab60:	4b28      	ldr	r3, [pc, #160]	; (800ac04 <prvInsertBlockIntoFreeList+0xac>)
 800ab62:	60fb      	str	r3, [r7, #12]
 800ab64:	e002      	b.n	800ab6c <prvInsertBlockIntoFreeList+0x14>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	60fb      	str	r3, [r7, #12]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d8f7      	bhi.n	800ab66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	68ba      	ldr	r2, [r7, #8]
 800ab80:	4413      	add	r3, r2
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d108      	bne.n	800ab9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	685a      	ldr	r2, [r3, #4]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	441a      	add	r2, r3
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	68ba      	ldr	r2, [r7, #8]
 800aba4:	441a      	add	r2, r3
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d118      	bne.n	800abe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	4b15      	ldr	r3, [pc, #84]	; (800ac08 <prvInsertBlockIntoFreeList+0xb0>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d00d      	beq.n	800abd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	685a      	ldr	r2, [r3, #4]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	441a      	add	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	601a      	str	r2, [r3, #0]
 800abd4:	e008      	b.n	800abe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800abd6:	4b0c      	ldr	r3, [pc, #48]	; (800ac08 <prvInsertBlockIntoFreeList+0xb0>)
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	601a      	str	r2, [r3, #0]
 800abde:	e003      	b.n	800abe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	429a      	cmp	r2, r3
 800abee:	d002      	beq.n	800abf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abf6:	bf00      	nop
 800abf8:	3714      	adds	r7, #20
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop
 800ac04:	24004aac 	.word	0x24004aac
 800ac08:	24004ab4 	.word	0x24004ab4

0800ac0c <__libc_init_array>:
 800ac0c:	b570      	push	{r4, r5, r6, lr}
 800ac0e:	4d0d      	ldr	r5, [pc, #52]	; (800ac44 <__libc_init_array+0x38>)
 800ac10:	4c0d      	ldr	r4, [pc, #52]	; (800ac48 <__libc_init_array+0x3c>)
 800ac12:	1b64      	subs	r4, r4, r5
 800ac14:	10a4      	asrs	r4, r4, #2
 800ac16:	2600      	movs	r6, #0
 800ac18:	42a6      	cmp	r6, r4
 800ac1a:	d109      	bne.n	800ac30 <__libc_init_array+0x24>
 800ac1c:	4d0b      	ldr	r5, [pc, #44]	; (800ac4c <__libc_init_array+0x40>)
 800ac1e:	4c0c      	ldr	r4, [pc, #48]	; (800ac50 <__libc_init_array+0x44>)
 800ac20:	f000 f82e 	bl	800ac80 <_init>
 800ac24:	1b64      	subs	r4, r4, r5
 800ac26:	10a4      	asrs	r4, r4, #2
 800ac28:	2600      	movs	r6, #0
 800ac2a:	42a6      	cmp	r6, r4
 800ac2c:	d105      	bne.n	800ac3a <__libc_init_array+0x2e>
 800ac2e:	bd70      	pop	{r4, r5, r6, pc}
 800ac30:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac34:	4798      	blx	r3
 800ac36:	3601      	adds	r6, #1
 800ac38:	e7ee      	b.n	800ac18 <__libc_init_array+0xc>
 800ac3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac3e:	4798      	blx	r3
 800ac40:	3601      	adds	r6, #1
 800ac42:	e7f2      	b.n	800ac2a <__libc_init_array+0x1e>
 800ac44:	0800ad20 	.word	0x0800ad20
 800ac48:	0800ad20 	.word	0x0800ad20
 800ac4c:	0800ad20 	.word	0x0800ad20
 800ac50:	0800ad24 	.word	0x0800ad24

0800ac54 <memcpy>:
 800ac54:	440a      	add	r2, r1
 800ac56:	4291      	cmp	r1, r2
 800ac58:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac5c:	d100      	bne.n	800ac60 <memcpy+0xc>
 800ac5e:	4770      	bx	lr
 800ac60:	b510      	push	{r4, lr}
 800ac62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac6a:	4291      	cmp	r1, r2
 800ac6c:	d1f9      	bne.n	800ac62 <memcpy+0xe>
 800ac6e:	bd10      	pop	{r4, pc}

0800ac70 <memset>:
 800ac70:	4402      	add	r2, r0
 800ac72:	4603      	mov	r3, r0
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d100      	bne.n	800ac7a <memset+0xa>
 800ac78:	4770      	bx	lr
 800ac7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac7e:	e7f9      	b.n	800ac74 <memset+0x4>

0800ac80 <_init>:
 800ac80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac82:	bf00      	nop
 800ac84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac86:	bc08      	pop	{r3}
 800ac88:	469e      	mov	lr, r3
 800ac8a:	4770      	bx	lr

0800ac8c <_fini>:
 800ac8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac8e:	bf00      	nop
 800ac90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac92:	bc08      	pop	{r3}
 800ac94:	469e      	mov	lr, r3
 800ac96:	4770      	bx	lr


RTOS_Hydrophone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c758  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013070  0800ca08  0800ca08  0001ca08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801fa78  0801fa78  0002fa78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801fa80  0801fa80  0002fa80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801fa84  0801fa84  0002fa84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0801fa88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004b48  24000014  0801fa9c  00030014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004b5c  0801fa9c  00034b5c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000284ab  00000000  00000000  00030042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000446a  00000000  00000000  000584ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d28  00000000  00000000  0005c958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001ba8  00000000  00000000  0005e680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005192  00000000  00000000  00060228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002314a  00000000  00000000  000653ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016058f  00000000  00000000  00088504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000c5  00000000  00000000  001e8a93  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007d50  00000000  00000000  001e8b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    0000064f  00000000  00000000  001f08a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000014 	.word	0x24000014
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800c9f0 	.word	0x0800c9f0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000018 	.word	0x24000018
 80002ec:	0800c9f0 	.word	0x0800c9f0

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fdcc 	bl	8001194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f826 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 fa3c 	bl	8000a7c <MX_GPIO_Init>
  MX_DMA_Init();
 8000604:	f000 fa1a 	bl	8000a3c <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 8000608:	f000 fa10 	bl	8000a2c <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 800060c:	f000 f89e 	bl	800074c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000610:	f000 f9c0 	bl	8000994 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000614:	f000 f912 	bl	800083c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  float32_t maxValue;

  // Initialize RFFT
  arm_rfft_fast_init_f32(&fft_handler, adc_buff_size);
 8000618:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800061c:	4807      	ldr	r0, [pc, #28]	; (800063c <main+0x48>)
 800061e:	f00c f979 	bl	800c914 <arm_rfft_fast_init_f32>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000622:	f009 fb5d 	bl	8009ce0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000626:	4a06      	ldr	r2, [pc, #24]	; (8000640 <main+0x4c>)
 8000628:	2100      	movs	r1, #0
 800062a:	4806      	ldr	r0, [pc, #24]	; (8000644 <main+0x50>)
 800062c:	f009 fba2 	bl	8009d74 <osThreadNew>
 8000630:	4603      	mov	r3, r0
 8000632:	4a05      	ldr	r2, [pc, #20]	; (8000648 <main+0x54>)
 8000634:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000636:	f009 fb77 	bl	8009d28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063a:	e7fe      	b.n	800063a <main+0x46>
 800063c:	240001f0 	.word	0x240001f0
 8000640:	0800ca2c 	.word	0x0800ca2c
 8000644:	08000cb1 	.word	0x08000cb1
 8000648:	240001ec 	.word	0x240001ec

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b09c      	sub	sp, #112	; 0x70
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000656:	224c      	movs	r2, #76	; 0x4c
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f00c f9c0 	bl	800c9e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2220      	movs	r2, #32
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f00c f9ba 	bl	800c9e0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800066c:	4b35      	ldr	r3, [pc, #212]	; (8000744 <SystemClock_Config+0xf8>)
 800066e:	f04f 32ff 	mov.w	r2, #4294967295
 8000672:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000676:	2004      	movs	r0, #4
 8000678:	f003 fd9c 	bl	80041b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	4b31      	ldr	r3, [pc, #196]	; (8000748 <SystemClock_Config+0xfc>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a30      	ldr	r2, [pc, #192]	; (8000748 <SystemClock_Config+0xfc>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b2e      	ldr	r3, [pc, #184]	; (8000748 <SystemClock_Config+0xfc>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000698:	bf00      	nop
 800069a:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <SystemClock_Config+0xfc>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006a6:	d1f8      	bne.n	800069a <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006a8:	4b26      	ldr	r3, [pc, #152]	; (8000744 <SystemClock_Config+0xf8>)
 80006aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ac:	f023 0303 	bic.w	r3, r3, #3
 80006b0:	4a24      	ldr	r2, [pc, #144]	; (8000744 <SystemClock_Config+0xf8>)
 80006b2:	f043 0302 	orr.w	r3, r3, #2
 80006b6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006b8:	2321      	movs	r3, #33	; 0x21
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006c2:	2301      	movs	r3, #1
 80006c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 80006d2:	2314      	movs	r3, #20
 80006d4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006da:	2304      	movs	r3, #4
 80006dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006e2:	230c      	movs	r3, #12
 80006e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 fdb8 	bl	8004268 <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006fe:	f000 fae7 	bl	8000cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	233f      	movs	r3, #63	; 0x3f
 8000704:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2303      	movs	r3, #3
 8000708:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 800070a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800070e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000714:	2340      	movs	r3, #64	; 0x40
 8000716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000718:	2340      	movs	r3, #64	; 0x40
 800071a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800071c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000720:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000722:	2340      	movs	r3, #64	; 0x40
 8000724:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f004 f9ce 	bl	8004acc <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000736:	f000 facb 	bl	8000cd0 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3770      	adds	r7, #112	; 0x70
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	58024400 	.word	0x58024400
 8000748:	58024800 	.word	0x58024800

0800074c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
 800076c:	615a      	str	r2, [r3, #20]
 800076e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000770:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <MX_ADC1_Init+0xe4>)
 8000772:	4a30      	ldr	r2, [pc, #192]	; (8000834 <MX_ADC1_Init+0xe8>)
 8000774:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000776:	4b2e      	ldr	r3, [pc, #184]	; (8000830 <MX_ADC1_Init+0xe4>)
 8000778:	2200      	movs	r2, #0
 800077a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800077c:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <MX_ADC1_Init+0xe4>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000782:	4b2b      	ldr	r3, [pc, #172]	; (8000830 <MX_ADC1_Init+0xe4>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000788:	4b29      	ldr	r3, [pc, #164]	; (8000830 <MX_ADC1_Init+0xe4>)
 800078a:	2204      	movs	r2, #4
 800078c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800078e:	4b28      	ldr	r3, [pc, #160]	; (8000830 <MX_ADC1_Init+0xe4>)
 8000790:	2200      	movs	r2, #0
 8000792:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000794:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_ADC1_Init+0xe4>)
 8000796:	2200      	movs	r2, #0
 8000798:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800079a:	4b25      	ldr	r3, [pc, #148]	; (8000830 <MX_ADC1_Init+0xe4>)
 800079c:	2201      	movs	r2, #1
 800079e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a0:	4b23      	ldr	r3, [pc, #140]	; (8000830 <MX_ADC1_Init+0xe4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a6:	4b22      	ldr	r3, [pc, #136]	; (8000830 <MX_ADC1_Init+0xe4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ac:	4b20      	ldr	r3, [pc, #128]	; (8000830 <MX_ADC1_Init+0xe4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 80007b2:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_ADC1_Init+0xe4>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <MX_ADC1_Init+0xe4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_ADC1_Init+0xe4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007c4:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_ADC1_Init+0xe4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007cc:	4818      	ldr	r0, [pc, #96]	; (8000830 <MX_ADC1_Init+0xe4>)
 80007ce:	f000 feff 	bl	80015d0 <HAL_ADC_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007d8:	f000 fa7a 	bl	8000cd0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4619      	mov	r1, r3
 80007e6:	4812      	ldr	r0, [pc, #72]	; (8000830 <MX_ADC1_Init+0xe4>)
 80007e8:	f001 fc26 	bl	8002038 <HAL_ADCEx_MultiModeConfigChannel>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80007f2:	f000 fa6d 	bl	8000cd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_ADC1_Init+0xec>)
 80007f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007fa:	2306      	movs	r3, #6
 80007fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000802:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000806:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000808:	2304      	movs	r3, #4
 800080a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_ADC1_Init+0xe4>)
 800081a:	f001 f833 	bl	8001884 <HAL_ADC_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000824:	f000 fa54 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	24000030 	.word	0x24000030
 8000834:	40022000 	.word	0x40022000
 8000838:	3ef08000 	.word	0x3ef08000

0800083c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b09c      	sub	sp, #112	; 0x70
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000842:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000850:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800085c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
 800086c:	615a      	str	r2, [r3, #20]
 800086e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2234      	movs	r2, #52	; 0x34
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f00c f8b2 	bl	800c9e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800087c:	4b43      	ldr	r3, [pc, #268]	; (800098c <MX_TIM1_Init+0x150>)
 800087e:	4a44      	ldr	r2, [pc, #272]	; (8000990 <MX_TIM1_Init+0x154>)
 8000880:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000882:	4b42      	ldr	r3, [pc, #264]	; (800098c <MX_TIM1_Init+0x150>)
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000888:	4b40      	ldr	r3, [pc, #256]	; (800098c <MX_TIM1_Init+0x150>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6000-1;
 800088e:	4b3f      	ldr	r3, [pc, #252]	; (800098c <MX_TIM1_Init+0x150>)
 8000890:	f241 726f 	movw	r2, #5999	; 0x176f
 8000894:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000896:	4b3d      	ldr	r3, [pc, #244]	; (800098c <MX_TIM1_Init+0x150>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800089c:	4b3b      	ldr	r3, [pc, #236]	; (800098c <MX_TIM1_Init+0x150>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a2:	4b3a      	ldr	r3, [pc, #232]	; (800098c <MX_TIM1_Init+0x150>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008a8:	4838      	ldr	r0, [pc, #224]	; (800098c <MX_TIM1_Init+0x150>)
 80008aa:	f007 f8a5 	bl	80079f8 <HAL_TIM_Base_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80008b4:	f000 fa0c 	bl	8000cd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008bc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008c2:	4619      	mov	r1, r3
 80008c4:	4831      	ldr	r0, [pc, #196]	; (800098c <MX_TIM1_Init+0x150>)
 80008c6:	f007 f9c9 	bl	8007c5c <HAL_TIM_ConfigClockSource>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80008d0:	f000 f9fe 	bl	8000cd0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80008d4:	482d      	ldr	r0, [pc, #180]	; (800098c <MX_TIM1_Init+0x150>)
 80008d6:	f007 f8e6 	bl	8007aa6 <HAL_TIM_OC_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80008e0:	f000 f9f6 	bl	8000cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008e4:	2320      	movs	r3, #32
 80008e6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008e8:	2300      	movs	r3, #0
 80008ea:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008f4:	4619      	mov	r1, r3
 80008f6:	4825      	ldr	r0, [pc, #148]	; (800098c <MX_TIM1_Init+0x150>)
 80008f8:	f007 feb6 	bl	8008668 <HAL_TIMEx_MasterConfigSynchronization>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000902:	f000 f9e5 	bl	8000cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000906:	2330      	movs	r3, #48	; 0x30
 8000908:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800090e:	2300      	movs	r3, #0
 8000910:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000912:	2300      	movs	r3, #0
 8000914:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800091a:	2300      	movs	r3, #0
 800091c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800091e:	2300      	movs	r3, #0
 8000920:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000922:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000926:	2200      	movs	r2, #0
 8000928:	4619      	mov	r1, r3
 800092a:	4818      	ldr	r0, [pc, #96]	; (800098c <MX_TIM1_Init+0x150>)
 800092c:	f007 f91c 	bl	8007b68 <HAL_TIM_OC_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000936:	f000 f9cb 	bl	8000cd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800094e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000952:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800095c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4619      	mov	r1, r3
 800096e:	4807      	ldr	r0, [pc, #28]	; (800098c <MX_TIM1_Init+0x150>)
 8000970:	f007 ff08 	bl	8008784 <HAL_TIMEx_ConfigBreakDeadTime>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800097a:	f000 f9a9 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800097e:	4803      	ldr	r0, [pc, #12]	; (800098c <MX_TIM1_Init+0x150>)
 8000980:	f000 fa92 	bl	8000ea8 <HAL_TIM_MspPostInit>

}
 8000984:	bf00      	nop
 8000986:	3770      	adds	r7, #112	; 0x70
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	2400010c 	.word	0x2400010c
 8000990:	40010000 	.word	0x40010000

08000994 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <MX_USART3_UART_Init+0x90>)
 800099a:	4a23      	ldr	r2, [pc, #140]	; (8000a28 <MX_USART3_UART_Init+0x94>)
 800099c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <MX_USART3_UART_Init+0x90>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <MX_USART3_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <MX_USART3_UART_Init+0x90>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <MX_USART3_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_USART3_UART_Init+0x90>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <MX_USART3_UART_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_USART3_UART_Init+0x90>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <MX_USART3_UART_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_USART3_UART_Init+0x90>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <MX_USART3_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009dc:	4811      	ldr	r0, [pc, #68]	; (8000a24 <MX_USART3_UART_Init+0x90>)
 80009de:	f007 ff71 	bl	80088c4 <HAL_UART_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009e8:	f000 f972 	bl	8000cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ec:	2100      	movs	r1, #0
 80009ee:	480d      	ldr	r0, [pc, #52]	; (8000a24 <MX_USART3_UART_Init+0x90>)
 80009f0:	f009 f877 	bl	8009ae2 <HAL_UARTEx_SetTxFifoThreshold>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009fa:	f000 f969 	bl	8000cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fe:	2100      	movs	r1, #0
 8000a00:	4808      	ldr	r0, [pc, #32]	; (8000a24 <MX_USART3_UART_Init+0x90>)
 8000a02:	f009 f8ac 	bl	8009b5e <HAL_UARTEx_SetRxFifoThreshold>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a0c:	f000 f960 	bl	8000cd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_USART3_UART_Init+0x90>)
 8000a12:	f009 f82d 	bl	8009a70 <HAL_UARTEx_DisableFifoMode>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a1c:	f000 f958 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	24000158 	.word	0x24000158
 8000a28:	40004800 	.word	0x40004800

08000a2c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
	...

08000a3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <MX_DMA_Init+0x3c>)
 8000a44:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a48:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <MX_DMA_Init+0x3c>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_DMA_Init+0x3c>)
 8000a54:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2105      	movs	r1, #5
 8000a64:	200b      	movs	r0, #11
 8000a66:	f001 fc5e 	bl	8002326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a6a:	200b      	movs	r0, #11
 8000a6c:	f001 fc75 	bl	800235a <HAL_NVIC_EnableIRQ>

}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	58024400 	.word	0x58024400

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	; 0x38
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	4b80      	ldr	r3, [pc, #512]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000a94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a98:	4a7e      	ldr	r2, [pc, #504]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aa2:	4b7c      	ldr	r3, [pc, #496]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000aa4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aa8:	f003 0304 	and.w	r3, r3, #4
 8000aac:	623b      	str	r3, [r7, #32]
 8000aae:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ab0:	4b78      	ldr	r3, [pc, #480]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000ab2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ab6:	4a77      	ldr	r2, [pc, #476]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000ab8:	f043 0320 	orr.w	r3, r3, #32
 8000abc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ac0:	4b74      	ldr	r3, [pc, #464]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000ac2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac6:	f003 0320 	and.w	r3, r3, #32
 8000aca:	61fb      	str	r3, [r7, #28]
 8000acc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ace:	4b71      	ldr	r3, [pc, #452]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000ad0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad4:	4a6f      	ldr	r2, [pc, #444]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ada:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ade:	4b6d      	ldr	r3, [pc, #436]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000ae0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae8:	61bb      	str	r3, [r7, #24]
 8000aea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aec:	4b69      	ldr	r3, [pc, #420]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000aee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000af2:	4a68      	ldr	r2, [pc, #416]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000afc:	4b65      	ldr	r3, [pc, #404]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000afe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0a:	4b62      	ldr	r3, [pc, #392]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000b0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b10:	4a60      	ldr	r2, [pc, #384]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000b12:	f043 0310 	orr.w	r3, r3, #16
 8000b16:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b1a:	4b5e      	ldr	r3, [pc, #376]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000b1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b20:	f003 0310 	and.w	r3, r3, #16
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b28:	4b5a      	ldr	r3, [pc, #360]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000b2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b2e:	4a59      	ldr	r2, [pc, #356]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b38:	4b56      	ldr	r3, [pc, #344]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000b3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	4b53      	ldr	r3, [pc, #332]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000b48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b4c:	4a51      	ldr	r2, [pc, #324]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b56:	4b4f      	ldr	r3, [pc, #316]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000b58:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b64:	4b4b      	ldr	r3, [pc, #300]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000b66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b6a:	4a4a      	ldr	r2, [pc, #296]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b70:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b74:	4b47      	ldr	r3, [pc, #284]	; (8000c94 <MX_GPIO_Init+0x218>)
 8000b76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b88:	4843      	ldr	r0, [pc, #268]	; (8000c98 <MX_GPIO_Init+0x21c>)
 8000b8a:	f003 fadf 	bl	800414c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b94:	4841      	ldr	r0, [pc, #260]	; (8000c9c <MX_GPIO_Init+0x220>)
 8000b96:	f003 fad9 	bl	800414c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	4840      	ldr	r0, [pc, #256]	; (8000ca0 <MX_GPIO_Init+0x224>)
 8000ba0:	f003 fad4 	bl	800414c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	483a      	ldr	r0, [pc, #232]	; (8000ca4 <MX_GPIO_Init+0x228>)
 8000bba:	f003 f917 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4830      	ldr	r0, [pc, #192]	; (8000c98 <MX_GPIO_Init+0x21c>)
 8000bd8:	f003 f908 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000bdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4829      	ldr	r0, [pc, #164]	; (8000c9c <MX_GPIO_Init+0x220>)
 8000bf6:	f003 f8f9 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bfe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4826      	ldr	r0, [pc, #152]	; (8000ca8 <MX_GPIO_Init+0x22c>)
 8000c10:	f003 f8ec 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000c14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4820      	ldr	r0, [pc, #128]	; (8000cac <MX_GPIO_Init+0x230>)
 8000c2a:	f003 f8df 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c40:	230a      	movs	r3, #10
 8000c42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4818      	ldr	r0, [pc, #96]	; (8000cac <MX_GPIO_Init+0x230>)
 8000c4c:	f003 f8ce 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000c50:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	4810      	ldr	r0, [pc, #64]	; (8000cac <MX_GPIO_Init+0x230>)
 8000c6a:	f003 f8bf 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <MX_GPIO_Init+0x224>)
 8000c86:	f003 f8b1 	bl	8003dec <HAL_GPIO_Init>

}
 8000c8a:	bf00      	nop
 8000c8c:	3738      	adds	r7, #56	; 0x38
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	58024400 	.word	0x58024400
 8000c98:	58021400 	.word	0x58021400
 8000c9c:	58020400 	.word	0x58020400
 8000ca0:	58021000 	.word	0x58021000
 8000ca4:	58020800 	.word	0x58020800
 8000ca8:	58021800 	.word	0x58021800
 8000cac:	58020000 	.word	0x58020000

08000cb0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	// Toggling LD3 (red) to see if it ever enters this default state
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000cb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cbc:	4803      	ldr	r0, [pc, #12]	; (8000ccc <StartDefaultTask+0x1c>)
 8000cbe:	f003 fa5e 	bl	800417e <HAL_GPIO_TogglePin>
    osDelay(50); /* Insert delay of 50ms */
 8000cc2:	2032      	movs	r0, #50	; 0x32
 8000cc4:	f009 f8e8 	bl	8009e98 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000cc8:	e7f6      	b.n	8000cb8 <StartDefaultTask+0x8>
 8000cca:	bf00      	nop
 8000ccc:	58020400 	.word	0x58020400

08000cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd4:	b672      	cpsid	i
}
 8000cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <Error_Handler+0x8>
	...

08000cdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_MspInit+0x38>)
 8000ce4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_MspInit+0x38>)
 8000cea:	f043 0302 	orr.w	r3, r3, #2
 8000cee:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_MspInit+0x38>)
 8000cf4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	210f      	movs	r1, #15
 8000d04:	f06f 0001 	mvn.w	r0, #1
 8000d08:	f001 fb0d 	bl	8002326 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	58024400 	.word	0x58024400

08000d18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0ba      	sub	sp, #232	; 0xe8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	22c0      	movs	r2, #192	; 0xc0
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f00b fe51 	bl	800c9e0 <memset>
  if(hadc->Instance==ADC1)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a43      	ldr	r2, [pc, #268]	; (8000e50 <HAL_ADC_MspInit+0x138>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d17e      	bne.n	8000e46 <HAL_ADC_MspInit+0x12e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d48:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 20;
 8000d58:	2314      	movs	r3, #20
 8000d5a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d64:	2302      	movs	r3, #2
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d68:	23c0      	movs	r3, #192	; 0xc0
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d7a:	f107 0310 	add.w	r3, r7, #16
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f004 fa30 	bl	80051e4 <HAL_RCCEx_PeriphCLKConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000d8a:	f7ff ffa1 	bl	8000cd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d8e:	4b31      	ldr	r3, [pc, #196]	; (8000e54 <HAL_ADC_MspInit+0x13c>)
 8000d90:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d94:	4a2f      	ldr	r2, [pc, #188]	; (8000e54 <HAL_ADC_MspInit+0x13c>)
 8000d96:	f043 0320 	orr.w	r3, r3, #32
 8000d9a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000d9e:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <HAL_ADC_MspInit+0x13c>)
 8000da0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000da4:	f003 0320 	and.w	r3, r3, #32
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dac:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <HAL_ADC_MspInit+0x13c>)
 8000dae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000db2:	4a28      	ldr	r2, [pc, #160]	; (8000e54 <HAL_ADC_MspInit+0x13c>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dbc:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <HAL_ADC_MspInit+0x13c>)
 8000dbe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dca:	2308      	movs	r3, #8
 8000dcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000de0:	4619      	mov	r1, r3
 8000de2:	481d      	ldr	r0, [pc, #116]	; (8000e58 <HAL_ADC_MspInit+0x140>)
 8000de4:	f003 f802 	bl	8003dec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000de8:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <HAL_ADC_MspInit+0x144>)
 8000dea:	4a1d      	ldr	r2, [pc, #116]	; (8000e60 <HAL_ADC_MspInit+0x148>)
 8000dec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000dee:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <HAL_ADC_MspInit+0x144>)
 8000df0:	2209      	movs	r2, #9
 8000df2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <HAL_ADC_MspInit+0x144>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <HAL_ADC_MspInit+0x144>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <HAL_ADC_MspInit+0x144>)
 8000e02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e06:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_ADC_MspInit+0x144>)
 8000e0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e0e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_ADC_MspInit+0x144>)
 8000e12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e16:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000e18:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <HAL_ADC_MspInit+0x144>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <HAL_ADC_MspInit+0x144>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e24:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <HAL_ADC_MspInit+0x144>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e2a:	480c      	ldr	r0, [pc, #48]	; (8000e5c <HAL_ADC_MspInit+0x144>)
 8000e2c:	f001 fab0 	bl	8002390 <HAL_DMA_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_ADC_MspInit+0x122>
    {
      Error_Handler();
 8000e36:	f7ff ff4b 	bl	8000cd0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <HAL_ADC_MspInit+0x144>)
 8000e3e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e40:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <HAL_ADC_MspInit+0x144>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e46:	bf00      	nop
 8000e48:	37e8      	adds	r7, #232	; 0xe8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40022000 	.word	0x40022000
 8000e54:	58024400 	.word	0x58024400
 8000e58:	58020000 	.word	0x58020000
 8000e5c:	24000094 	.word	0x24000094
 8000e60:	40020010 	.word	0x40020010

08000e64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <HAL_TIM_Base_MspInit+0x3c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10e      	bne.n	8000e94 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_TIM_Base_MspInit+0x40>)
 8000e78:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000e7c:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <HAL_TIM_Base_MspInit+0x40>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <HAL_TIM_Base_MspInit+0x40>)
 8000e88:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	58024400 	.word	0x58024400

08000ea8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <HAL_TIM_MspPostInit+0x6c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d11f      	bne.n	8000f0a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <HAL_TIM_MspPostInit+0x70>)
 8000ecc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ed0:	4a11      	ldr	r2, [pc, #68]	; (8000f18 <HAL_TIM_MspPostInit+0x70>)
 8000ed2:	f043 0310 	orr.w	r3, r3, #16
 8000ed6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_TIM_MspPostInit+0x70>)
 8000edc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ee0:	f003 0310 	and.w	r3, r3, #16
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000efa:	2301      	movs	r3, #1
 8000efc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <HAL_TIM_MspPostInit+0x74>)
 8000f06:	f002 ff71 	bl	8003dec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3720      	adds	r7, #32
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40010000 	.word	0x40010000
 8000f18:	58024400 	.word	0x58024400
 8000f1c:	58021000 	.word	0x58021000

08000f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b0ba      	sub	sp, #232	; 0xe8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	22c0      	movs	r2, #192	; 0xc0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f00b fd4d 	bl	800c9e0 <memset>
  if(huart->Instance==USART3)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a27      	ldr	r2, [pc, #156]	; (8000fe8 <HAL_UART_MspInit+0xc8>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d146      	bne.n	8000fde <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f50:	f04f 0202 	mov.w	r2, #2
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f62:	f107 0310 	add.w	r3, r7, #16
 8000f66:	4618      	mov	r0, r3
 8000f68:	f004 f93c 	bl	80051e4 <HAL_RCCEx_PeriphCLKConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f72:	f7ff fead 	bl	8000cd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f76:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <HAL_UART_MspInit+0xcc>)
 8000f78:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	; (8000fec <HAL_UART_MspInit+0xcc>)
 8000f7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f82:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <HAL_UART_MspInit+0xcc>)
 8000f88:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_UART_MspInit+0xcc>)
 8000f96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f9a:	4a14      	ldr	r2, [pc, #80]	; (8000fec <HAL_UART_MspInit+0xcc>)
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_UART_MspInit+0xcc>)
 8000fa6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000fb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fcc:	2307      	movs	r3, #7
 8000fce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <HAL_UART_MspInit+0xd0>)
 8000fda:	f002 ff07 	bl	8003dec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fde:	bf00      	nop
 8000fe0:	37e8      	adds	r7, #232	; 0xe8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40004800 	.word	0x40004800
 8000fec:	58024400 	.word	0x58024400
 8000ff0:	58020c00 	.word	0x58020c00

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <HardFault_Handler+0x4>

08001000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <MemManage_Handler+0x4>

08001006 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <BusFault_Handler+0x4>

0800100c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <UsageFault_Handler+0x4>

08001012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001024:	f000 f928 	bl	8001278 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001028:	f00a fb44 	bl	800b6b4 <xTaskGetSchedulerState>
 800102c:	4603      	mov	r3, r0
 800102e:	2b01      	cmp	r3, #1
 8001030:	d001      	beq.n	8001036 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001032:	f00b f929 	bl	800c288 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <DMA1_Stream0_IRQHandler+0x10>)
 8001042:	f001 fd35 	bl	8002ab0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	24000094 	.word	0x24000094

08001050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001054:	4b32      	ldr	r3, [pc, #200]	; (8001120 <SystemInit+0xd0>)
 8001056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105a:	4a31      	ldr	r2, [pc, #196]	; (8001120 <SystemInit+0xd0>)
 800105c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001064:	4b2f      	ldr	r3, [pc, #188]	; (8001124 <SystemInit+0xd4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 030f 	and.w	r3, r3, #15
 800106c:	2b02      	cmp	r3, #2
 800106e:	d807      	bhi.n	8001080 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001070:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <SystemInit+0xd4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f023 030f 	bic.w	r3, r3, #15
 8001078:	4a2a      	ldr	r2, [pc, #168]	; (8001124 <SystemInit+0xd4>)
 800107a:	f043 0303 	orr.w	r3, r3, #3
 800107e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001080:	4b29      	ldr	r3, [pc, #164]	; (8001128 <SystemInit+0xd8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a28      	ldr	r2, [pc, #160]	; (8001128 <SystemInit+0xd8>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800108c:	4b26      	ldr	r3, [pc, #152]	; (8001128 <SystemInit+0xd8>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <SystemInit+0xd8>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4924      	ldr	r1, [pc, #144]	; (8001128 <SystemInit+0xd8>)
 8001098:	4b24      	ldr	r3, [pc, #144]	; (800112c <SystemInit+0xdc>)
 800109a:	4013      	ands	r3, r2
 800109c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <SystemInit+0xd4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d007      	beq.n	80010ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <SystemInit+0xd4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f023 030f 	bic.w	r3, r3, #15
 80010b2:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <SystemInit+0xd4>)
 80010b4:	f043 0303 	orr.w	r3, r3, #3
 80010b8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <SystemInit+0xd8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80010c0:	4b19      	ldr	r3, [pc, #100]	; (8001128 <SystemInit+0xd8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <SystemInit+0xd8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <SystemInit+0xd8>)
 80010ce:	4a18      	ldr	r2, [pc, #96]	; (8001130 <SystemInit+0xe0>)
 80010d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <SystemInit+0xd8>)
 80010d4:	4a17      	ldr	r2, [pc, #92]	; (8001134 <SystemInit+0xe4>)
 80010d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <SystemInit+0xd8>)
 80010da:	4a17      	ldr	r2, [pc, #92]	; (8001138 <SystemInit+0xe8>)
 80010dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <SystemInit+0xd8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <SystemInit+0xd8>)
 80010e6:	4a14      	ldr	r2, [pc, #80]	; (8001138 <SystemInit+0xe8>)
 80010e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <SystemInit+0xd8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <SystemInit+0xd8>)
 80010f2:	4a11      	ldr	r2, [pc, #68]	; (8001138 <SystemInit+0xe8>)
 80010f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <SystemInit+0xd8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <SystemInit+0xd8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a09      	ldr	r2, [pc, #36]	; (8001128 <SystemInit+0xd8>)
 8001102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001106:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <SystemInit+0xd8>)
 800110a:	2200      	movs	r2, #0
 800110c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <SystemInit+0xec>)
 8001110:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001114:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00
 8001124:	52002000 	.word	0x52002000
 8001128:	58024400 	.word	0x58024400
 800112c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001130:	02020200 	.word	0x02020200
 8001134:	01ff0000 	.word	0x01ff0000
 8001138:	01010280 	.word	0x01010280
 800113c:	52004000 	.word	0x52004000

08001140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001178 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001144:	f7ff ff84 	bl	8001050 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001148:	480c      	ldr	r0, [pc, #48]	; (800117c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800114a:	490d      	ldr	r1, [pc, #52]	; (8001180 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800114c:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001150:	e002      	b.n	8001158 <LoopCopyDataInit>

08001152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001156:	3304      	adds	r3, #4

08001158 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800115c:	d3f9      	bcc.n	8001152 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001160:	4c0a      	ldr	r4, [pc, #40]	; (800118c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001164:	e001      	b.n	800116a <LoopFillZerobss>

08001166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001168:	3204      	adds	r2, #4

0800116a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800116c:	d3fb      	bcc.n	8001166 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800116e:	f00b fc05 	bl	800c97c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001172:	f7ff fa3f 	bl	80005f4 <main>
  bx  lr
 8001176:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001178:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800117c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001180:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001184:	0801fa88 	.word	0x0801fa88
  ldr r2, =_sbss
 8001188:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 800118c:	24004b5c 	.word	0x24004b5c

08001190 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC_IRQHandler>
	...

08001194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119a:	2003      	movs	r0, #3
 800119c:	f001 f8b8 	bl	8002310 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80011a0:	f003 fe4a 	bl	8004e38 <HAL_RCC_GetSysClockFreq>
 80011a4:	4602      	mov	r2, r0
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_Init+0x68>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	0a1b      	lsrs	r3, r3, #8
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	4913      	ldr	r1, [pc, #76]	; (8001200 <HAL_Init+0x6c>)
 80011b2:	5ccb      	ldrb	r3, [r1, r3]
 80011b4:	f003 031f 	and.w	r3, r3, #31
 80011b8:	fa22 f303 	lsr.w	r3, r2, r3
 80011bc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_Init+0x68>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <HAL_Init+0x6c>)
 80011c8:	5cd3      	ldrb	r3, [r2, r3]
 80011ca:	f003 031f 	and.w	r3, r3, #31
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	fa22 f303 	lsr.w	r3, r2, r3
 80011d4:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <HAL_Init+0x70>)
 80011d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011d8:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <HAL_Init+0x74>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011de:	200f      	movs	r0, #15
 80011e0:	f000 f814 	bl	800120c <HAL_InitTick>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e002      	b.n	80011f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011ee:	f7ff fd75 	bl	8000cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	58024400 	.word	0x58024400
 8001200:	0800ca50 	.word	0x0800ca50
 8001204:	24000004 	.word	0x24000004
 8001208:	24000000 	.word	0x24000000

0800120c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_InitTick+0x60>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e021      	b.n	8001264 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <HAL_InitTick+0x64>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_InitTick+0x60>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f001 f89d 	bl	8002376 <HAL_SYSTICK_Config>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e00e      	b.n	8001264 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b0f      	cmp	r3, #15
 800124a:	d80a      	bhi.n	8001262 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124c:	2200      	movs	r2, #0
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f001 f867 	bl	8002326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001258:	4a06      	ldr	r2, [pc, #24]	; (8001274 <HAL_InitTick+0x68>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2400000c 	.word	0x2400000c
 8001270:	24000000 	.word	0x24000000
 8001274:	24000008 	.word	0x24000008

08001278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_IncTick+0x20>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_IncTick+0x24>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <HAL_IncTick+0x24>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	2400000c 	.word	0x2400000c
 800129c:	24000208 	.word	0x24000208

080012a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	24000208 	.word	0x24000208

080012b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	431a      	orrs	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	609a      	str	r2, [r3, #8]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	609a      	str	r2, [r3, #8]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001320:	b480      	push	{r7}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	3360      	adds	r3, #96	; 0x60
 8001332:	461a      	mov	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	430b      	orrs	r3, r1
 800134e:	431a      	orrs	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001354:	bf00      	nop
 8001356:	371c      	adds	r7, #28
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	f003 031f 	and.w	r3, r3, #31
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	431a      	orrs	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	611a      	str	r2, [r3, #16]
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001392:	b480      	push	{r7}
 8001394:	b087      	sub	sp, #28
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3360      	adds	r3, #96	; 0x60
 80013a2:	461a      	mov	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	431a      	orrs	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	601a      	str	r2, [r3, #0]
  }
}
 80013bc:	bf00      	nop
 80013be:	371c      	adds	r7, #28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b087      	sub	sp, #28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	3330      	adds	r3, #48	; 0x30
 80013d8:	461a      	mov	r2, r3
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	f003 030c 	and.w	r3, r3, #12
 80013e4:	4413      	add	r3, r2
 80013e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	f003 031f 	and.w	r3, r3, #31
 80013f2:	211f      	movs	r1, #31
 80013f4:	fa01 f303 	lsl.w	r3, r1, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	401a      	ands	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	0e9b      	lsrs	r3, r3, #26
 8001400:	f003 011f 	and.w	r1, r3, #31
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	f003 031f 	and.w	r3, r3, #31
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	431a      	orrs	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001414:	bf00      	nop
 8001416:	371c      	adds	r7, #28
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3314      	adds	r3, #20
 8001430:	461a      	mov	r2, r3
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	0e5b      	lsrs	r3, r3, #25
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	4413      	add	r3, r2
 800143e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	0d1b      	lsrs	r3, r3, #20
 8001448:	f003 031f 	and.w	r3, r3, #31
 800144c:	2107      	movs	r1, #7
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	401a      	ands	r2, r3
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	0d1b      	lsrs	r3, r3, #20
 800145a:	f003 031f 	and.w	r3, r3, #31
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	fa01 f303 	lsl.w	r3, r1, r3
 8001464:	431a      	orrs	r2, r3
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800146a:	bf00      	nop
 800146c:	371c      	adds	r7, #28
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001490:	43db      	mvns	r3, r3
 8001492:	401a      	ands	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f003 0318 	and.w	r3, r3, #24
 800149a:	4908      	ldr	r1, [pc, #32]	; (80014bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800149c:	40d9      	lsrs	r1, r3
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	400b      	ands	r3, r1
 80014a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014a6:	431a      	orrs	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	000fffff 	.word	0x000fffff

080014c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80014ce:	4013      	ands	r3, r2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6093      	str	r3, [r2, #8]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	5fffffc0 	.word	0x5fffffc0

080014e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014f8:	d101      	bne.n	80014fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <LL_ADC_EnableInternalRegulator+0x24>)
 800151a:	4013      	ands	r3, r2
 800151c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	6fffffc0 	.word	0x6fffffc0

08001534 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001544:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001548:	d101      	bne.n	800154e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <LL_ADC_IsEnabled+0x18>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <LL_ADC_IsEnabled+0x1a>
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	2b04      	cmp	r3, #4
 8001594:	d101      	bne.n	800159a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d101      	bne.n	80015c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e138      	b.n	800185c <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d109      	bne.n	800160c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff fb8d 	bl	8000d18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff67 	bl	80014e4 <LL_ADC_IsDeepPowerDownEnabled>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d004      	beq.n	8001626 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff4d 	bl	80014c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ff82 	bl	8001534 <LL_ADC_IsInternalRegulatorEnabled>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d114      	bne.n	8001660 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff66 	bl	800150c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001640:	4b88      	ldr	r3, [pc, #544]	; (8001864 <HAL_ADC_Init+0x294>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	099b      	lsrs	r3, r3, #6
 8001646:	4a88      	ldr	r2, [pc, #544]	; (8001868 <HAL_ADC_Init+0x298>)
 8001648:	fba2 2303 	umull	r2, r3, r2, r3
 800164c:	099b      	lsrs	r3, r3, #6
 800164e:	3301      	adds	r3, #1
 8001650:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001652:	e002      	b.n	800165a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	3b01      	subs	r3, #1
 8001658:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f9      	bne.n	8001654 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff65 	bl	8001534 <LL_ADC_IsInternalRegulatorEnabled>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10d      	bne.n	800168c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001674:	f043 0210 	orr.w	r2, r3, #16
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001680:	f043 0201 	orr.w	r2, r3, #1
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff76 	bl	8001582 <LL_ADC_REG_IsConversionOngoing>
 8001696:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f040 80d2 	bne.w	800184a <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f040 80ce 	bne.w	800184a <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016b6:	f043 0202 	orr.w	r2, r3, #2
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ff4a 	bl	800155c <LL_ADC_IsEnabled>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d110      	bne.n	80016f0 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016ce:	4867      	ldr	r0, [pc, #412]	; (800186c <HAL_ADC_Init+0x29c>)
 80016d0:	f7ff ff44 	bl	800155c <LL_ADC_IsEnabled>
 80016d4:	4604      	mov	r4, r0
 80016d6:	4866      	ldr	r0, [pc, #408]	; (8001870 <HAL_ADC_Init+0x2a0>)
 80016d8:	f7ff ff40 	bl	800155c <LL_ADC_IsEnabled>
 80016dc:	4603      	mov	r3, r0
 80016de:	4323      	orrs	r3, r4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d105      	bne.n	80016f0 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	4619      	mov	r1, r3
 80016ea:	4862      	ldr	r0, [pc, #392]	; (8001874 <HAL_ADC_Init+0x2a4>)
 80016ec:	f7ff fde4 	bl	80012b8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7d5b      	ldrb	r3, [r3, #21]
 80016f4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016fa:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001700:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7f1b      	ldrb	r3, [r3, #28]
 8001706:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7f1b      	ldrb	r3, [r3, #28]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d106      	bne.n	8001722 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	3b01      	subs	r3, #1
 800171a:	045b      	lsls	r3, r3, #17
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	2b00      	cmp	r3, #0
 8001728:	d009      	beq.n	800173e <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001736:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	4b4c      	ldr	r3, [pc, #304]	; (8001878 <HAL_ADC_Init+0x2a8>)
 8001746:	4013      	ands	r3, r2
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	69b9      	ldr	r1, [r7, #24]
 800174e:	430b      	orrs	r3, r1
 8001750:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff13 	bl	8001582 <LL_ADC_REG_IsConversionOngoing>
 800175c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff ff20 	bl	80015a8 <LL_ADC_INJ_IsConversionOngoing>
 8001768:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d14a      	bne.n	8001806 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d147      	bne.n	8001806 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	7d1b      	ldrb	r3, [r3, #20]
 800177a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	4b3c      	ldr	r3, [pc, #240]	; (800187c <HAL_ADC_Init+0x2ac>)
 800178c:	4013      	ands	r3, r2
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	69b9      	ldr	r1, [r7, #24]
 8001794:	430b      	orrs	r3, r1
 8001796:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d11b      	bne.n	80017da <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	691a      	ldr	r2, [r3, #16]
 80017ae:	4b34      	ldr	r3, [pc, #208]	; (8001880 <HAL_ADC_Init+0x2b0>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017b6:	3a01      	subs	r2, #1
 80017b8:	0411      	lsls	r1, r2, #16
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017be:	4311      	orrs	r1, r2
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017c4:	4311      	orrs	r1, r2
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017ca:	430a      	orrs	r2, r1
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f042 0201 	orr.w	r2, r2, #1
 80017d6:	611a      	str	r2, [r3, #16]
 80017d8:	e007      	b.n	80017ea <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	691a      	ldr	r2, [r3, #16]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0201 	bic.w	r2, r2, #1
 80017e8:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 fb25 	bl	8001e50 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d10c      	bne.n	8001828 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	f023 010f 	bic.w	r1, r3, #15
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	1e5a      	subs	r2, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	631a      	str	r2, [r3, #48]	; 0x30
 8001826:	e007      	b.n	8001838 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 020f 	bic.w	r2, r2, #15
 8001836:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183c:	f023 0303 	bic.w	r3, r3, #3
 8001840:	f043 0201 	orr.w	r2, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	655a      	str	r2, [r3, #84]	; 0x54
 8001848:	e007      	b.n	800185a <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184e:	f043 0210 	orr.w	r2, r3, #16
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800185a:	7ffb      	ldrb	r3, [r7, #31]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3724      	adds	r7, #36	; 0x24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd90      	pop	{r4, r7, pc}
 8001864:	24000000 	.word	0x24000000
 8001868:	053e2d63 	.word	0x053e2d63
 800186c:	40022000 	.word	0x40022000
 8001870:	40022100 	.word	0x40022100
 8001874:	40022300 	.word	0x40022300
 8001878:	fff0c003 	.word	0xfff0c003
 800187c:	ffffbffc 	.word	0xffffbffc
 8001880:	fc00f81e 	.word	0xfc00f81e

08001884 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b0a1      	sub	sp, #132	; 0x84
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	4a9a      	ldr	r2, [pc, #616]	; (8001b08 <HAL_ADC_ConfigChannel+0x284>)
 800189e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_ConfigChannel+0x2a>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e2bc      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x5a4>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fe61 	bl	8001582 <LL_ADC_REG_IsConversionOngoing>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f040 82a1 	bne.w	8001e0a <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d108      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x62>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	0e9b      	lsrs	r3, r3, #26
 80018da:	f003 031f 	and.w	r3, r3, #31
 80018de:	2201      	movs	r2, #1
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	e016      	b.n	8001914 <HAL_ADC_ConfigChannel+0x90>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018ee:	fa93 f3a3 	rbit	r3, r3
 80018f2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018f6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80018fe:	2320      	movs	r3, #32
 8001900:	e003      	b.n	800190a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001902:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001904:	fab3 f383 	clz	r3, r3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f003 031f 	and.w	r3, r3, #31
 800190e:	2201      	movs	r2, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	69d1      	ldr	r1, [r2, #28]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	430b      	orrs	r3, r1
 8001920:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	6859      	ldr	r1, [r3, #4]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	f7ff fd4a 	bl	80013c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fe22 	bl	8001582 <LL_ADC_REG_IsConversionOngoing>
 800193e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fe2f 	bl	80015a8 <LL_ADC_INJ_IsConversionOngoing>
 800194a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800194c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800194e:	2b00      	cmp	r3, #0
 8001950:	f040 80a0 	bne.w	8001a94 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001954:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001956:	2b00      	cmp	r3, #0
 8001958:	f040 809c 	bne.w	8001a94 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	6819      	ldr	r1, [r3, #0]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	461a      	mov	r2, r3
 800196a:	f7ff fd59 	bl	8001420 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f003 0310 	and.w	r3, r3, #16
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10b      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x110>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	695a      	ldr	r2, [r3, #20]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	e00a      	b.n	80019aa <HAL_ADC_ConfigChannel+0x126>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	695a      	ldr	r2, [r3, #20]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	089b      	lsrs	r3, r3, #2
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d027      	beq.n	8001a04 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	6919      	ldr	r1, [r3, #16]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019c2:	f7ff fcad 	bl	8001320 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	6919      	ldr	r1, [r3, #16]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	7e5b      	ldrb	r3, [r3, #25]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d102      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x158>
 80019d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80019da:	e000      	b.n	80019de <HAL_ADC_ConfigChannel+0x15a>
 80019dc:	2300      	movs	r3, #0
 80019de:	461a      	mov	r2, r3
 80019e0:	f7ff fcd7 	bl	8001392 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6919      	ldr	r1, [r3, #16]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	7e1b      	ldrb	r3, [r3, #24]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d102      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x176>
 80019f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019f8:	e000      	b.n	80019fc <HAL_ADC_ConfigChannel+0x178>
 80019fa:	2300      	movs	r3, #0
 80019fc:	461a      	mov	r2, r3
 80019fe:	f7ff fcaf 	bl	8001360 <LL_ADC_SetDataRightShift>
 8001a02:	e047      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	069b      	lsls	r3, r3, #26
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d107      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a26:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	069b      	lsls	r3, r3, #26
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d107      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a4a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	069b      	lsls	r3, r3, #26
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d107      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a6e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	069b      	lsls	r3, r3, #26
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d107      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a92:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fd5f 	bl	800155c <LL_ADC_IsEnabled>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f040 81bb 	bne.w	8001e1c <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	6819      	ldr	r1, [r3, #0]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	f7ff fce0 	bl	8001478 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <HAL_ADC_ConfigChannel+0x284>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	f040 8130 	bne.w	8001d24 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10b      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x268>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	0e9b      	lsrs	r3, r3, #26
 8001ada:	3301      	adds	r3, #1
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	2b09      	cmp	r3, #9
 8001ae2:	bf94      	ite	ls
 8001ae4:	2301      	movls	r3, #1
 8001ae6:	2300      	movhi	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	e01b      	b.n	8001b24 <HAL_ADC_ConfigChannel+0x2a0>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d103      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8001b04:	2320      	movs	r3, #32
 8001b06:	e005      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x290>
 8001b08:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8001b0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	3301      	adds	r3, #1
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	2b09      	cmp	r3, #9
 8001b1c:	bf94      	ite	ls
 8001b1e:	2301      	movls	r3, #1
 8001b20:	2300      	movhi	r3, #0
 8001b22:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d079      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d107      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x2c0>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	0e9b      	lsrs	r3, r3, #26
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	069b      	lsls	r3, r3, #26
 8001b3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b42:	e015      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x2ec>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b54:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8001b5c:	2320      	movs	r3, #32
 8001b5e:	e003      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8001b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b62:	fab3 f383 	clz	r3, r3
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	3301      	adds	r3, #1
 8001b6a:	069b      	lsls	r3, r3, #26
 8001b6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d109      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x30c>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	0e9b      	lsrs	r3, r3, #26
 8001b82:	3301      	adds	r3, #1
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	2101      	movs	r1, #1
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	e017      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x33c>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ba0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8001ba8:	2320      	movs	r3, #32
 8001baa:	e003      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8001bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bae:	fab3 f383 	clz	r3, r3
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	f003 031f 	and.w	r3, r3, #31
 8001bba:	2101      	movs	r1, #1
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	ea42 0103 	orr.w	r1, r2, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10a      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x362>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	0e9b      	lsrs	r3, r3, #26
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	f003 021f 	and.w	r2, r3, #31
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	051b      	lsls	r3, r3, #20
 8001be4:	e018      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x394>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8001bfe:	2320      	movs	r3, #32
 8001c00:	e003      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8001c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c04:	fab3 f383 	clz	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	f003 021f 	and.w	r2, r3, #31
 8001c10:	4613      	mov	r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	4413      	add	r3, r2
 8001c16:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	e07e      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d107      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x3b4>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	0e9b      	lsrs	r3, r3, #26
 8001c2e:	3301      	adds	r3, #1
 8001c30:	069b      	lsls	r3, r3, #26
 8001c32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c36:	e015      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x3e0>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001c50:	2320      	movs	r3, #32
 8001c52:	e003      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	069b      	lsls	r3, r3, #26
 8001c60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d109      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x400>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	0e9b      	lsrs	r3, r3, #26
 8001c76:	3301      	adds	r3, #1
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	e017      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x430>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	fa93 f3a3 	rbit	r3, r3
 8001c90:	61bb      	str	r3, [r7, #24]
  return result;
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	e003      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	3301      	adds	r3, #1
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	2101      	movs	r1, #1
 8001cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb4:	ea42 0103 	orr.w	r1, r2, r3
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10d      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x45c>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	0e9b      	lsrs	r3, r3, #26
 8001cca:	3301      	adds	r3, #1
 8001ccc:	f003 021f 	and.w	r2, r3, #31
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3b1e      	subs	r3, #30
 8001cd8:	051b      	lsls	r3, r3, #20
 8001cda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cde:	e01b      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x494>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	fa93 f3a3 	rbit	r3, r3
 8001cec:	60fb      	str	r3, [r7, #12]
  return result;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8001cf8:	2320      	movs	r3, #32
 8001cfa:	e003      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fab3 f383 	clz	r3, r3
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	3301      	adds	r3, #1
 8001d06:	f003 021f 	and.w	r2, r3, #31
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4413      	add	r3, r2
 8001d10:	3b1e      	subs	r3, #30
 8001d12:	051b      	lsls	r3, r3, #20
 8001d14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	6892      	ldr	r2, [r2, #8]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f7ff fb7e 	bl	8001420 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	da77      	bge.n	8001e1c <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d2c:	4840      	ldr	r0, [pc, #256]	; (8001e30 <HAL_ADC_ConfigChannel+0x5ac>)
 8001d2e:	f7ff fae9 	bl	8001304 <LL_ADC_GetCommonPathInternalCh>
 8001d32:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d34:	483f      	ldr	r0, [pc, #252]	; (8001e34 <HAL_ADC_ConfigChannel+0x5b0>)
 8001d36:	f7ff fc11 	bl	800155c <LL_ADC_IsEnabled>
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	483e      	ldr	r0, [pc, #248]	; (8001e38 <HAL_ADC_ConfigChannel+0x5b4>)
 8001d3e:	f7ff fc0d 	bl	800155c <LL_ADC_IsEnabled>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4323      	orrs	r3, r4
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d155      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a3b      	ldr	r2, [pc, #236]	; (8001e3c <HAL_ADC_ConfigChannel+0x5b8>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d122      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x516>
 8001d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d11d      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a35      	ldr	r2, [pc, #212]	; (8001e38 <HAL_ADC_ConfigChannel+0x5b4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d159      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d6e:	4619      	mov	r1, r3
 8001d70:	482f      	ldr	r0, [pc, #188]	; (8001e30 <HAL_ADC_ConfigChannel+0x5ac>)
 8001d72:	f7ff fab4 	bl	80012de <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d76:	4b32      	ldr	r3, [pc, #200]	; (8001e40 <HAL_ADC_ConfigChannel+0x5bc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	099b      	lsrs	r3, r3, #6
 8001d7c:	4a31      	ldr	r2, [pc, #196]	; (8001e44 <HAL_ADC_ConfigChannel+0x5c0>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	099b      	lsrs	r3, r3, #6
 8001d84:	3301      	adds	r3, #1
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001d8a:	e002      	b.n	8001d92 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f9      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d98:	e040      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a2a      	ldr	r2, [pc, #168]	; (8001e48 <HAL_ADC_ConfigChannel+0x5c4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d111      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x544>
 8001da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10c      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a21      	ldr	r2, [pc, #132]	; (8001e38 <HAL_ADC_ConfigChannel+0x5b4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d131      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	481b      	ldr	r0, [pc, #108]	; (8001e30 <HAL_ADC_ConfigChannel+0x5ac>)
 8001dc2:	f7ff fa8c 	bl	80012de <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dc6:	e029      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1f      	ldr	r2, [pc, #124]	; (8001e4c <HAL_ADC_ConfigChannel+0x5c8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d124      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x598>
 8001dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d11f      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a15      	ldr	r2, [pc, #84]	; (8001e38 <HAL_ADC_ConfigChannel+0x5b4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d11a      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dec:	4619      	mov	r1, r3
 8001dee:	4810      	ldr	r0, [pc, #64]	; (8001e30 <HAL_ADC_ConfigChannel+0x5ac>)
 8001df0:	f7ff fa75 	bl	80012de <LL_ADC_SetCommonPathInternalCh>
 8001df4:	e012      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfa:	f043 0220 	orr.w	r2, r3, #32
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001e08:	e008      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0e:	f043 0220 	orr.w	r2, r3, #32
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e24:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3784      	adds	r7, #132	; 0x84
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd90      	pop	{r4, r7, pc}
 8001e30:	40022300 	.word	0x40022300
 8001e34:	40022000 	.word	0x40022000
 8001e38:	40022100 	.word	0x40022100
 8001e3c:	cb840000 	.word	0xcb840000
 8001e40:	24000000 	.word	0x24000000
 8001e44:	053e2d63 	.word	0x053e2d63
 8001e48:	bac04000 	.word	0xbac04000
 8001e4c:	cfb80000 	.word	0xcfb80000

08001e50 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001e58:	4b60      	ldr	r3, [pc, #384]	; (8001fdc <ADC_ConfigureBoostMode+0x18c>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01c      	beq.n	8001e9e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001e64:	f003 f962 	bl	800512c <HAL_RCC_GetHCLKFreq>
 8001e68:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e72:	d010      	beq.n	8001e96 <ADC_ConfigureBoostMode+0x46>
 8001e74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e78:	d873      	bhi.n	8001f62 <ADC_ConfigureBoostMode+0x112>
 8001e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7e:	d002      	beq.n	8001e86 <ADC_ConfigureBoostMode+0x36>
 8001e80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e84:	d16d      	bne.n	8001f62 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	0c1b      	lsrs	r3, r3, #16
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e92:	60fb      	str	r3, [r7, #12]
        break;
 8001e94:	e068      	b.n	8001f68 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	60fb      	str	r3, [r7, #12]
        break;
 8001e9c:	e064      	b.n	8001f68 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001e9e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001ea2:	f04f 0100 	mov.w	r1, #0
 8001ea6:	f004 fb5b 	bl	8006560 <HAL_RCCEx_GetPeriphCLKFreq>
 8001eaa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001eb4:	d051      	beq.n	8001f5a <ADC_ConfigureBoostMode+0x10a>
 8001eb6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001eba:	d854      	bhi.n	8001f66 <ADC_ConfigureBoostMode+0x116>
 8001ebc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001ec0:	d047      	beq.n	8001f52 <ADC_ConfigureBoostMode+0x102>
 8001ec2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001ec6:	d84e      	bhi.n	8001f66 <ADC_ConfigureBoostMode+0x116>
 8001ec8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001ecc:	d03d      	beq.n	8001f4a <ADC_ConfigureBoostMode+0xfa>
 8001ece:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001ed2:	d848      	bhi.n	8001f66 <ADC_ConfigureBoostMode+0x116>
 8001ed4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ed8:	d033      	beq.n	8001f42 <ADC_ConfigureBoostMode+0xf2>
 8001eda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ede:	d842      	bhi.n	8001f66 <ADC_ConfigureBoostMode+0x116>
 8001ee0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001ee4:	d029      	beq.n	8001f3a <ADC_ConfigureBoostMode+0xea>
 8001ee6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001eea:	d83c      	bhi.n	8001f66 <ADC_ConfigureBoostMode+0x116>
 8001eec:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001ef0:	d01a      	beq.n	8001f28 <ADC_ConfigureBoostMode+0xd8>
 8001ef2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001ef6:	d836      	bhi.n	8001f66 <ADC_ConfigureBoostMode+0x116>
 8001ef8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001efc:	d014      	beq.n	8001f28 <ADC_ConfigureBoostMode+0xd8>
 8001efe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001f02:	d830      	bhi.n	8001f66 <ADC_ConfigureBoostMode+0x116>
 8001f04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f08:	d00e      	beq.n	8001f28 <ADC_ConfigureBoostMode+0xd8>
 8001f0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f0e:	d82a      	bhi.n	8001f66 <ADC_ConfigureBoostMode+0x116>
 8001f10:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001f14:	d008      	beq.n	8001f28 <ADC_ConfigureBoostMode+0xd8>
 8001f16:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001f1a:	d824      	bhi.n	8001f66 <ADC_ConfigureBoostMode+0x116>
 8001f1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f20:	d002      	beq.n	8001f28 <ADC_ConfigureBoostMode+0xd8>
 8001f22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f26:	d11e      	bne.n	8001f66 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	0c9b      	lsrs	r3, r3, #18
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f36:	60fb      	str	r3, [r7, #12]
        break;
 8001f38:	e016      	b.n	8001f68 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	60fb      	str	r3, [r7, #12]
        break;
 8001f40:	e012      	b.n	8001f68 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	095b      	lsrs	r3, r3, #5
 8001f46:	60fb      	str	r3, [r7, #12]
        break;
 8001f48:	e00e      	b.n	8001f68 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	099b      	lsrs	r3, r3, #6
 8001f4e:	60fb      	str	r3, [r7, #12]
        break;
 8001f50:	e00a      	b.n	8001f68 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	09db      	lsrs	r3, r3, #7
 8001f56:	60fb      	str	r3, [r7, #12]
        break;
 8001f58:	e006      	b.n	8001f68 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	60fb      	str	r3, [r7, #12]
        break;
 8001f60:	e002      	b.n	8001f68 <ADC_ConfigureBoostMode+0x118>
        break;
 8001f62:	bf00      	nop
 8001f64:	e000      	b.n	8001f68 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8001f66:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	085b      	lsrs	r3, r3, #1
 8001f6c:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4a1b      	ldr	r2, [pc, #108]	; (8001fe0 <ADC_ConfigureBoostMode+0x190>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d808      	bhi.n	8001f88 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001f84:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001f86:	e025      	b.n	8001fd4 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4a16      	ldr	r2, [pc, #88]	; (8001fe4 <ADC_ConfigureBoostMode+0x194>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d80a      	bhi.n	8001fa6 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fa2:	609a      	str	r2, [r3, #8]
}
 8001fa4:	e016      	b.n	8001fd4 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4a0f      	ldr	r2, [pc, #60]	; (8001fe8 <ADC_ConfigureBoostMode+0x198>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d80a      	bhi.n	8001fc4 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc0:	609a      	str	r2, [r3, #8]
}
 8001fc2:	e007      	b.n	8001fd4 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001fd2:	609a      	str	r2, [r3, #8]
}
 8001fd4:	bf00      	nop
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40022300 	.word	0x40022300
 8001fe0:	005f5e10 	.word	0x005f5e10
 8001fe4:	00bebc20 	.word	0x00bebc20
 8001fe8:	017d7840 	.word	0x017d7840

08001fec <LL_ADC_IsEnabled>:
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <LL_ADC_IsEnabled+0x18>
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <LL_ADC_IsEnabled+0x1a>
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <LL_ADC_REG_IsConversionOngoing>:
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b04      	cmp	r3, #4
 8002024:	d101      	bne.n	800202a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002038:	b590      	push	{r4, r7, lr}
 800203a:	b09f      	sub	sp, #124	; 0x7c
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002052:	2302      	movs	r3, #2
 8002054:	e080      	b.n	8002158 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002062:	2300      	movs	r3, #0
 8002064:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a3d      	ldr	r2, [pc, #244]	; (8002160 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d102      	bne.n	8002076 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002070:	4b3c      	ldr	r3, [pc, #240]	; (8002164 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	e001      	b.n	800207a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10b      	bne.n	8002098 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002084:	f043 0220 	orr.w	r2, r3, #32
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e05f      	b.n	8002158 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ffb9 	bl	8002012 <LL_ADC_REG_IsConversionOngoing>
 80020a0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff ffb3 	bl	8002012 <LL_ADC_REG_IsConversionOngoing>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d141      	bne.n	8002136 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80020b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d13e      	bne.n	8002136 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80020b8:	4b2b      	ldr	r3, [pc, #172]	; (8002168 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80020ba:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d020      	beq.n	8002106 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80020c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	431a      	orrs	r2, r3
 80020d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020d6:	4822      	ldr	r0, [pc, #136]	; (8002160 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80020d8:	f7ff ff88 	bl	8001fec <LL_ADC_IsEnabled>
 80020dc:	4604      	mov	r4, r0
 80020de:	4821      	ldr	r0, [pc, #132]	; (8002164 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80020e0:	f7ff ff84 	bl	8001fec <LL_ADC_IsEnabled>
 80020e4:	4603      	mov	r3, r0
 80020e6:	4323      	orrs	r3, r4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d12e      	bne.n	800214a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80020ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	4b1e      	ldr	r3, [pc, #120]	; (800216c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	6811      	ldr	r1, [r2, #0]
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	6892      	ldr	r2, [r2, #8]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	431a      	orrs	r2, r3
 8002100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002102:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002104:	e021      	b.n	800214a <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800210e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002110:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002112:	4813      	ldr	r0, [pc, #76]	; (8002160 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002114:	f7ff ff6a 	bl	8001fec <LL_ADC_IsEnabled>
 8002118:	4604      	mov	r4, r0
 800211a:	4812      	ldr	r0, [pc, #72]	; (8002164 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800211c:	f7ff ff66 	bl	8001fec <LL_ADC_IsEnabled>
 8002120:	4603      	mov	r3, r0
 8002122:	4323      	orrs	r3, r4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d110      	bne.n	800214a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	4b0f      	ldr	r3, [pc, #60]	; (800216c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800212e:	4013      	ands	r3, r2
 8002130:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002132:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002134:	e009      	b.n	800214a <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	f043 0220 	orr.w	r2, r3, #32
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002148:	e000      	b.n	800214c <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800214a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002154:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002158:	4618      	mov	r0, r3
 800215a:	377c      	adds	r7, #124	; 0x7c
 800215c:	46bd      	mov	sp, r7
 800215e:	bd90      	pop	{r4, r7, pc}
 8002160:	40022000 	.word	0x40022000
 8002164:	40022100 	.word	0x40022100
 8002168:	40022300 	.word	0x40022300
 800216c:	fffff0e0 	.word	0xfffff0e0

08002170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <__NVIC_SetPriorityGrouping+0x40>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800218c:	4013      	ands	r3, r2
 800218e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002198:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 800219a:	4313      	orrs	r3, r2
 800219c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219e:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <__NVIC_SetPriorityGrouping+0x40>)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	60d3      	str	r3, [r2, #12]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00
 80021b4:	05fa0000 	.word	0x05fa0000

080021b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <__NVIC_GetPriorityGrouping+0x18>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	f003 0307 	and.w	r3, r3, #7
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	db0b      	blt.n	80021fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	f003 021f 	and.w	r2, r3, #31
 80021ec:	4907      	ldr	r1, [pc, #28]	; (800220c <__NVIC_EnableIRQ+0x38>)
 80021ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	2001      	movs	r0, #1
 80021f6:	fa00 f202 	lsl.w	r2, r0, r2
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000e100 	.word	0xe000e100

08002210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	6039      	str	r1, [r7, #0]
 800221a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800221c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002220:	2b00      	cmp	r3, #0
 8002222:	db0a      	blt.n	800223a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	b2da      	uxtb	r2, r3
 8002228:	490c      	ldr	r1, [pc, #48]	; (800225c <__NVIC_SetPriority+0x4c>)
 800222a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800222e:	0112      	lsls	r2, r2, #4
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	440b      	add	r3, r1
 8002234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002238:	e00a      	b.n	8002250 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4908      	ldr	r1, [pc, #32]	; (8002260 <__NVIC_SetPriority+0x50>)
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	3b04      	subs	r3, #4
 8002248:	0112      	lsls	r2, r2, #4
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	440b      	add	r3, r1
 800224e:	761a      	strb	r2, [r3, #24]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000e100 	.word	0xe000e100
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002264:	b480      	push	{r7}
 8002266:	b089      	sub	sp, #36	; 0x24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f1c3 0307 	rsb	r3, r3, #7
 800227e:	2b04      	cmp	r3, #4
 8002280:	bf28      	it	cs
 8002282:	2304      	movcs	r3, #4
 8002284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3304      	adds	r3, #4
 800228a:	2b06      	cmp	r3, #6
 800228c:	d902      	bls.n	8002294 <NVIC_EncodePriority+0x30>
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3b03      	subs	r3, #3
 8002292:	e000      	b.n	8002296 <NVIC_EncodePriority+0x32>
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	f04f 32ff 	mov.w	r2, #4294967295
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43da      	mvns	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	401a      	ands	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ac:	f04f 31ff 	mov.w	r1, #4294967295
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fa01 f303 	lsl.w	r3, r1, r3
 80022b6:	43d9      	mvns	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	4313      	orrs	r3, r2
         );
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3724      	adds	r7, #36	; 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022dc:	d301      	bcc.n	80022e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022de:	2301      	movs	r3, #1
 80022e0:	e00f      	b.n	8002302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022e2:	4a0a      	ldr	r2, [pc, #40]	; (800230c <SysTick_Config+0x40>)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ea:	210f      	movs	r1, #15
 80022ec:	f04f 30ff 	mov.w	r0, #4294967295
 80022f0:	f7ff ff8e 	bl	8002210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <SysTick_Config+0x40>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fa:	4b04      	ldr	r3, [pc, #16]	; (800230c <SysTick_Config+0x40>)
 80022fc:	2207      	movs	r2, #7
 80022fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	e000e010 	.word	0xe000e010

08002310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff29 	bl	8002170 <__NVIC_SetPriorityGrouping>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	4603      	mov	r3, r0
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002334:	f7ff ff40 	bl	80021b8 <__NVIC_GetPriorityGrouping>
 8002338:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	6978      	ldr	r0, [r7, #20]
 8002340:	f7ff ff90 	bl	8002264 <NVIC_EncodePriority>
 8002344:	4602      	mov	r2, r0
 8002346:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff5f 	bl	8002210 <__NVIC_SetPriority>
}
 8002352:	bf00      	nop
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	4603      	mov	r3, r0
 8002362:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002364:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff33 	bl	80021d4 <__NVIC_EnableIRQ>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff ffa4 	bl	80022cc <SysTick_Config>
 8002384:	4603      	mov	r3, r0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002398:	f7fe ff82 	bl	80012a0 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e37f      	b.n	8002aa8 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a66      	ldr	r2, [pc, #408]	; (8002548 <HAL_DMA_Init+0x1b8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d04a      	beq.n	8002448 <HAL_DMA_Init+0xb8>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a65      	ldr	r2, [pc, #404]	; (800254c <HAL_DMA_Init+0x1bc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d045      	beq.n	8002448 <HAL_DMA_Init+0xb8>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a63      	ldr	r2, [pc, #396]	; (8002550 <HAL_DMA_Init+0x1c0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d040      	beq.n	8002448 <HAL_DMA_Init+0xb8>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a62      	ldr	r2, [pc, #392]	; (8002554 <HAL_DMA_Init+0x1c4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d03b      	beq.n	8002448 <HAL_DMA_Init+0xb8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a60      	ldr	r2, [pc, #384]	; (8002558 <HAL_DMA_Init+0x1c8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d036      	beq.n	8002448 <HAL_DMA_Init+0xb8>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a5f      	ldr	r2, [pc, #380]	; (800255c <HAL_DMA_Init+0x1cc>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d031      	beq.n	8002448 <HAL_DMA_Init+0xb8>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a5d      	ldr	r2, [pc, #372]	; (8002560 <HAL_DMA_Init+0x1d0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d02c      	beq.n	8002448 <HAL_DMA_Init+0xb8>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a5c      	ldr	r2, [pc, #368]	; (8002564 <HAL_DMA_Init+0x1d4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d027      	beq.n	8002448 <HAL_DMA_Init+0xb8>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a5a      	ldr	r2, [pc, #360]	; (8002568 <HAL_DMA_Init+0x1d8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d022      	beq.n	8002448 <HAL_DMA_Init+0xb8>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a59      	ldr	r2, [pc, #356]	; (800256c <HAL_DMA_Init+0x1dc>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d01d      	beq.n	8002448 <HAL_DMA_Init+0xb8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a57      	ldr	r2, [pc, #348]	; (8002570 <HAL_DMA_Init+0x1e0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d018      	beq.n	8002448 <HAL_DMA_Init+0xb8>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a56      	ldr	r2, [pc, #344]	; (8002574 <HAL_DMA_Init+0x1e4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d013      	beq.n	8002448 <HAL_DMA_Init+0xb8>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a54      	ldr	r2, [pc, #336]	; (8002578 <HAL_DMA_Init+0x1e8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d00e      	beq.n	8002448 <HAL_DMA_Init+0xb8>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a53      	ldr	r2, [pc, #332]	; (800257c <HAL_DMA_Init+0x1ec>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d009      	beq.n	8002448 <HAL_DMA_Init+0xb8>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a51      	ldr	r2, [pc, #324]	; (8002580 <HAL_DMA_Init+0x1f0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d004      	beq.n	8002448 <HAL_DMA_Init+0xb8>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a50      	ldr	r2, [pc, #320]	; (8002584 <HAL_DMA_Init+0x1f4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d101      	bne.n	800244c <HAL_DMA_Init+0xbc>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <HAL_DMA_Init+0xbe>
 800244c:	2300      	movs	r3, #0
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 813c 	beq.w	80026cc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a37      	ldr	r2, [pc, #220]	; (8002548 <HAL_DMA_Init+0x1b8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d04a      	beq.n	8002504 <HAL_DMA_Init+0x174>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a36      	ldr	r2, [pc, #216]	; (800254c <HAL_DMA_Init+0x1bc>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d045      	beq.n	8002504 <HAL_DMA_Init+0x174>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a34      	ldr	r2, [pc, #208]	; (8002550 <HAL_DMA_Init+0x1c0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d040      	beq.n	8002504 <HAL_DMA_Init+0x174>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a33      	ldr	r2, [pc, #204]	; (8002554 <HAL_DMA_Init+0x1c4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d03b      	beq.n	8002504 <HAL_DMA_Init+0x174>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a31      	ldr	r2, [pc, #196]	; (8002558 <HAL_DMA_Init+0x1c8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d036      	beq.n	8002504 <HAL_DMA_Init+0x174>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a30      	ldr	r2, [pc, #192]	; (800255c <HAL_DMA_Init+0x1cc>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d031      	beq.n	8002504 <HAL_DMA_Init+0x174>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a2e      	ldr	r2, [pc, #184]	; (8002560 <HAL_DMA_Init+0x1d0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d02c      	beq.n	8002504 <HAL_DMA_Init+0x174>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a2d      	ldr	r2, [pc, #180]	; (8002564 <HAL_DMA_Init+0x1d4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d027      	beq.n	8002504 <HAL_DMA_Init+0x174>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a2b      	ldr	r2, [pc, #172]	; (8002568 <HAL_DMA_Init+0x1d8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d022      	beq.n	8002504 <HAL_DMA_Init+0x174>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a2a      	ldr	r2, [pc, #168]	; (800256c <HAL_DMA_Init+0x1dc>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d01d      	beq.n	8002504 <HAL_DMA_Init+0x174>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a28      	ldr	r2, [pc, #160]	; (8002570 <HAL_DMA_Init+0x1e0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d018      	beq.n	8002504 <HAL_DMA_Init+0x174>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a27      	ldr	r2, [pc, #156]	; (8002574 <HAL_DMA_Init+0x1e4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d013      	beq.n	8002504 <HAL_DMA_Init+0x174>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a25      	ldr	r2, [pc, #148]	; (8002578 <HAL_DMA_Init+0x1e8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00e      	beq.n	8002504 <HAL_DMA_Init+0x174>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a24      	ldr	r2, [pc, #144]	; (800257c <HAL_DMA_Init+0x1ec>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d009      	beq.n	8002504 <HAL_DMA_Init+0x174>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a22      	ldr	r2, [pc, #136]	; (8002580 <HAL_DMA_Init+0x1f0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d004      	beq.n	8002504 <HAL_DMA_Init+0x174>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a21      	ldr	r2, [pc, #132]	; (8002584 <HAL_DMA_Init+0x1f4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d108      	bne.n	8002516 <HAL_DMA_Init+0x186>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0201 	bic.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e007      	b.n	8002526 <HAL_DMA_Init+0x196>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0201 	bic.w	r2, r2, #1
 8002524:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002526:	e02f      	b.n	8002588 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002528:	f7fe feba 	bl	80012a0 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b05      	cmp	r3, #5
 8002534:	d928      	bls.n	8002588 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2220      	movs	r2, #32
 800253a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2203      	movs	r2, #3
 8002540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e2af      	b.n	8002aa8 <HAL_DMA_Init+0x718>
 8002548:	40020010 	.word	0x40020010
 800254c:	40020028 	.word	0x40020028
 8002550:	40020040 	.word	0x40020040
 8002554:	40020058 	.word	0x40020058
 8002558:	40020070 	.word	0x40020070
 800255c:	40020088 	.word	0x40020088
 8002560:	400200a0 	.word	0x400200a0
 8002564:	400200b8 	.word	0x400200b8
 8002568:	40020410 	.word	0x40020410
 800256c:	40020428 	.word	0x40020428
 8002570:	40020440 	.word	0x40020440
 8002574:	40020458 	.word	0x40020458
 8002578:	40020470 	.word	0x40020470
 800257c:	40020488 	.word	0x40020488
 8002580:	400204a0 	.word	0x400204a0
 8002584:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1c8      	bne.n	8002528 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4b73      	ldr	r3, [pc, #460]	; (8002770 <HAL_DMA_Init+0x3e0>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80025ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d107      	bne.n	80025ec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	4313      	orrs	r3, r2
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b28      	cmp	r3, #40	; 0x28
 80025f2:	d903      	bls.n	80025fc <HAL_DMA_Init+0x26c>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b2e      	cmp	r3, #46	; 0x2e
 80025fa:	d91f      	bls.n	800263c <HAL_DMA_Init+0x2ac>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b3e      	cmp	r3, #62	; 0x3e
 8002602:	d903      	bls.n	800260c <HAL_DMA_Init+0x27c>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b42      	cmp	r3, #66	; 0x42
 800260a:	d917      	bls.n	800263c <HAL_DMA_Init+0x2ac>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b46      	cmp	r3, #70	; 0x46
 8002612:	d903      	bls.n	800261c <HAL_DMA_Init+0x28c>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b48      	cmp	r3, #72	; 0x48
 800261a:	d90f      	bls.n	800263c <HAL_DMA_Init+0x2ac>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b4e      	cmp	r3, #78	; 0x4e
 8002622:	d903      	bls.n	800262c <HAL_DMA_Init+0x29c>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b52      	cmp	r3, #82	; 0x52
 800262a:	d907      	bls.n	800263c <HAL_DMA_Init+0x2ac>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b73      	cmp	r3, #115	; 0x73
 8002632:	d905      	bls.n	8002640 <HAL_DMA_Init+0x2b0>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b77      	cmp	r3, #119	; 0x77
 800263a:	d801      	bhi.n	8002640 <HAL_DMA_Init+0x2b0>
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <HAL_DMA_Init+0x2b2>
 8002640:	2300      	movs	r3, #0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800264c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f023 0307 	bic.w	r3, r3, #7
 8002664:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	4313      	orrs	r3, r2
 800266e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	2b04      	cmp	r3, #4
 8002676:	d117      	bne.n	80026a8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	4313      	orrs	r3, r2
 8002680:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00e      	beq.n	80026a8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f001 fa24 	bl	8003ad8 <DMA_CheckFifoParam>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2240      	movs	r2, #64	; 0x40
 800269a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e1ff      	b.n	8002aa8 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f001 f95f 	bl	8003974 <DMA_CalcBaseAndBitshift>
 80026b6:	4603      	mov	r3, r0
 80026b8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026be:	f003 031f 	and.w	r3, r3, #31
 80026c2:	223f      	movs	r2, #63	; 0x3f
 80026c4:	409a      	lsls	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	e0fe      	b.n	80028ca <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a28      	ldr	r2, [pc, #160]	; (8002774 <HAL_DMA_Init+0x3e4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d04a      	beq.n	800276c <HAL_DMA_Init+0x3dc>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a27      	ldr	r2, [pc, #156]	; (8002778 <HAL_DMA_Init+0x3e8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d045      	beq.n	800276c <HAL_DMA_Init+0x3dc>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a25      	ldr	r2, [pc, #148]	; (800277c <HAL_DMA_Init+0x3ec>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d040      	beq.n	800276c <HAL_DMA_Init+0x3dc>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a24      	ldr	r2, [pc, #144]	; (8002780 <HAL_DMA_Init+0x3f0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d03b      	beq.n	800276c <HAL_DMA_Init+0x3dc>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a22      	ldr	r2, [pc, #136]	; (8002784 <HAL_DMA_Init+0x3f4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d036      	beq.n	800276c <HAL_DMA_Init+0x3dc>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a21      	ldr	r2, [pc, #132]	; (8002788 <HAL_DMA_Init+0x3f8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d031      	beq.n	800276c <HAL_DMA_Init+0x3dc>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a1f      	ldr	r2, [pc, #124]	; (800278c <HAL_DMA_Init+0x3fc>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d02c      	beq.n	800276c <HAL_DMA_Init+0x3dc>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a1e      	ldr	r2, [pc, #120]	; (8002790 <HAL_DMA_Init+0x400>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d027      	beq.n	800276c <HAL_DMA_Init+0x3dc>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1c      	ldr	r2, [pc, #112]	; (8002794 <HAL_DMA_Init+0x404>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d022      	beq.n	800276c <HAL_DMA_Init+0x3dc>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a1b      	ldr	r2, [pc, #108]	; (8002798 <HAL_DMA_Init+0x408>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d01d      	beq.n	800276c <HAL_DMA_Init+0x3dc>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a19      	ldr	r2, [pc, #100]	; (800279c <HAL_DMA_Init+0x40c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d018      	beq.n	800276c <HAL_DMA_Init+0x3dc>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a18      	ldr	r2, [pc, #96]	; (80027a0 <HAL_DMA_Init+0x410>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d013      	beq.n	800276c <HAL_DMA_Init+0x3dc>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a16      	ldr	r2, [pc, #88]	; (80027a4 <HAL_DMA_Init+0x414>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00e      	beq.n	800276c <HAL_DMA_Init+0x3dc>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a15      	ldr	r2, [pc, #84]	; (80027a8 <HAL_DMA_Init+0x418>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d009      	beq.n	800276c <HAL_DMA_Init+0x3dc>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a13      	ldr	r2, [pc, #76]	; (80027ac <HAL_DMA_Init+0x41c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d004      	beq.n	800276c <HAL_DMA_Init+0x3dc>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a12      	ldr	r2, [pc, #72]	; (80027b0 <HAL_DMA_Init+0x420>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d123      	bne.n	80027b4 <HAL_DMA_Init+0x424>
 800276c:	2301      	movs	r3, #1
 800276e:	e022      	b.n	80027b6 <HAL_DMA_Init+0x426>
 8002770:	fe10803f 	.word	0xfe10803f
 8002774:	48022c08 	.word	0x48022c08
 8002778:	48022c1c 	.word	0x48022c1c
 800277c:	48022c30 	.word	0x48022c30
 8002780:	48022c44 	.word	0x48022c44
 8002784:	48022c58 	.word	0x48022c58
 8002788:	48022c6c 	.word	0x48022c6c
 800278c:	48022c80 	.word	0x48022c80
 8002790:	48022c94 	.word	0x48022c94
 8002794:	58025408 	.word	0x58025408
 8002798:	5802541c 	.word	0x5802541c
 800279c:	58025430 	.word	0x58025430
 80027a0:	58025444 	.word	0x58025444
 80027a4:	58025458 	.word	0x58025458
 80027a8:	5802546c 	.word	0x5802546c
 80027ac:	58025480 	.word	0x58025480
 80027b0:	58025494 	.word	0x58025494
 80027b4:	2300      	movs	r3, #0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d07e      	beq.n	80028b8 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a80      	ldr	r2, [pc, #512]	; (80029c0 <HAL_DMA_Init+0x630>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d021      	beq.n	8002808 <HAL_DMA_Init+0x478>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a7e      	ldr	r2, [pc, #504]	; (80029c4 <HAL_DMA_Init+0x634>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01c      	beq.n	8002808 <HAL_DMA_Init+0x478>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a7d      	ldr	r2, [pc, #500]	; (80029c8 <HAL_DMA_Init+0x638>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d017      	beq.n	8002808 <HAL_DMA_Init+0x478>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a7b      	ldr	r2, [pc, #492]	; (80029cc <HAL_DMA_Init+0x63c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d012      	beq.n	8002808 <HAL_DMA_Init+0x478>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a7a      	ldr	r2, [pc, #488]	; (80029d0 <HAL_DMA_Init+0x640>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00d      	beq.n	8002808 <HAL_DMA_Init+0x478>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a78      	ldr	r2, [pc, #480]	; (80029d4 <HAL_DMA_Init+0x644>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d008      	beq.n	8002808 <HAL_DMA_Init+0x478>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a77      	ldr	r2, [pc, #476]	; (80029d8 <HAL_DMA_Init+0x648>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d003      	beq.n	8002808 <HAL_DMA_Init+0x478>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a75      	ldr	r2, [pc, #468]	; (80029dc <HAL_DMA_Init+0x64c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2202      	movs	r2, #2
 800280e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	4b6e      	ldr	r3, [pc, #440]	; (80029e0 <HAL_DMA_Init+0x650>)
 8002826:	4013      	ands	r3, r2
 8002828:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b40      	cmp	r3, #64	; 0x40
 8002830:	d008      	beq.n	8002844 <HAL_DMA_Init+0x4b4>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b80      	cmp	r3, #128	; 0x80
 8002838:	d102      	bne.n	8002840 <HAL_DMA_Init+0x4b0>
 800283a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800283e:	e002      	b.n	8002846 <HAL_DMA_Init+0x4b6>
 8002840:	2300      	movs	r3, #0
 8002842:	e000      	b.n	8002846 <HAL_DMA_Init+0x4b6>
 8002844:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68d2      	ldr	r2, [r2, #12]
 800284a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800284c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002854:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800285c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002864:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800286c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002874:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4313      	orrs	r3, r2
 800287a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	4b56      	ldr	r3, [pc, #344]	; (80029e4 <HAL_DMA_Init+0x654>)
 800288c:	4413      	add	r3, r2
 800288e:	4a56      	ldr	r2, [pc, #344]	; (80029e8 <HAL_DMA_Init+0x658>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	009a      	lsls	r2, r3, #2
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f001 f869 	bl	8003974 <DMA_CalcBaseAndBitshift>
 80028a2:	4603      	mov	r3, r0
 80028a4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	2201      	movs	r2, #1
 80028b0:	409a      	lsls	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	e008      	b.n	80028ca <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2240      	movs	r2, #64	; 0x40
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2203      	movs	r2, #3
 80028c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0ee      	b.n	8002aa8 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a47      	ldr	r2, [pc, #284]	; (80029ec <HAL_DMA_Init+0x65c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d072      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a45      	ldr	r2, [pc, #276]	; (80029f0 <HAL_DMA_Init+0x660>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d06d      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a44      	ldr	r2, [pc, #272]	; (80029f4 <HAL_DMA_Init+0x664>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d068      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a42      	ldr	r2, [pc, #264]	; (80029f8 <HAL_DMA_Init+0x668>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d063      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a41      	ldr	r2, [pc, #260]	; (80029fc <HAL_DMA_Init+0x66c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d05e      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a3f      	ldr	r2, [pc, #252]	; (8002a00 <HAL_DMA_Init+0x670>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d059      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a3e      	ldr	r2, [pc, #248]	; (8002a04 <HAL_DMA_Init+0x674>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d054      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a3c      	ldr	r2, [pc, #240]	; (8002a08 <HAL_DMA_Init+0x678>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d04f      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a3b      	ldr	r2, [pc, #236]	; (8002a0c <HAL_DMA_Init+0x67c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d04a      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a39      	ldr	r2, [pc, #228]	; (8002a10 <HAL_DMA_Init+0x680>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d045      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a38      	ldr	r2, [pc, #224]	; (8002a14 <HAL_DMA_Init+0x684>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d040      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a36      	ldr	r2, [pc, #216]	; (8002a18 <HAL_DMA_Init+0x688>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d03b      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a35      	ldr	r2, [pc, #212]	; (8002a1c <HAL_DMA_Init+0x68c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d036      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a33      	ldr	r2, [pc, #204]	; (8002a20 <HAL_DMA_Init+0x690>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d031      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a32      	ldr	r2, [pc, #200]	; (8002a24 <HAL_DMA_Init+0x694>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d02c      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a30      	ldr	r2, [pc, #192]	; (8002a28 <HAL_DMA_Init+0x698>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d027      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a14      	ldr	r2, [pc, #80]	; (80029c0 <HAL_DMA_Init+0x630>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d022      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a12      	ldr	r2, [pc, #72]	; (80029c4 <HAL_DMA_Init+0x634>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d01d      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a11      	ldr	r2, [pc, #68]	; (80029c8 <HAL_DMA_Init+0x638>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d018      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a0f      	ldr	r2, [pc, #60]	; (80029cc <HAL_DMA_Init+0x63c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d013      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a0e      	ldr	r2, [pc, #56]	; (80029d0 <HAL_DMA_Init+0x640>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d00e      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0c      	ldr	r2, [pc, #48]	; (80029d4 <HAL_DMA_Init+0x644>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d009      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a0b      	ldr	r2, [pc, #44]	; (80029d8 <HAL_DMA_Init+0x648>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d004      	beq.n	80029ba <HAL_DMA_Init+0x62a>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a09      	ldr	r2, [pc, #36]	; (80029dc <HAL_DMA_Init+0x64c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d138      	bne.n	8002a2c <HAL_DMA_Init+0x69c>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e037      	b.n	8002a2e <HAL_DMA_Init+0x69e>
 80029be:	bf00      	nop
 80029c0:	58025408 	.word	0x58025408
 80029c4:	5802541c 	.word	0x5802541c
 80029c8:	58025430 	.word	0x58025430
 80029cc:	58025444 	.word	0x58025444
 80029d0:	58025458 	.word	0x58025458
 80029d4:	5802546c 	.word	0x5802546c
 80029d8:	58025480 	.word	0x58025480
 80029dc:	58025494 	.word	0x58025494
 80029e0:	fffe000f 	.word	0xfffe000f
 80029e4:	a7fdabf8 	.word	0xa7fdabf8
 80029e8:	cccccccd 	.word	0xcccccccd
 80029ec:	40020010 	.word	0x40020010
 80029f0:	40020028 	.word	0x40020028
 80029f4:	40020040 	.word	0x40020040
 80029f8:	40020058 	.word	0x40020058
 80029fc:	40020070 	.word	0x40020070
 8002a00:	40020088 	.word	0x40020088
 8002a04:	400200a0 	.word	0x400200a0
 8002a08:	400200b8 	.word	0x400200b8
 8002a0c:	40020410 	.word	0x40020410
 8002a10:	40020428 	.word	0x40020428
 8002a14:	40020440 	.word	0x40020440
 8002a18:	40020458 	.word	0x40020458
 8002a1c:	40020470 	.word	0x40020470
 8002a20:	40020488 	.word	0x40020488
 8002a24:	400204a0 	.word	0x400204a0
 8002a28:	400204b8 	.word	0x400204b8
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d032      	beq.n	8002a98 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f001 f8cc 	bl	8003bd0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b80      	cmp	r3, #128	; 0x80
 8002a3e:	d102      	bne.n	8002a46 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a5a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d010      	beq.n	8002a86 <HAL_DMA_Init+0x6f6>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d80c      	bhi.n	8002a86 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f001 f949 	bl	8003d04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a82:	605a      	str	r2, [r3, #4]
 8002a84:	e008      	b.n	8002a98 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	; 0x28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002abc:	4b67      	ldr	r3, [pc, #412]	; (8002c5c <HAL_DMA_IRQHandler+0x1ac>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a67      	ldr	r2, [pc, #412]	; (8002c60 <HAL_DMA_IRQHandler+0x1b0>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	0a9b      	lsrs	r3, r3, #10
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ace:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a5f      	ldr	r2, [pc, #380]	; (8002c64 <HAL_DMA_IRQHandler+0x1b4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d04a      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xd2>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a5d      	ldr	r2, [pc, #372]	; (8002c68 <HAL_DMA_IRQHandler+0x1b8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d045      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xd2>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a5c      	ldr	r2, [pc, #368]	; (8002c6c <HAL_DMA_IRQHandler+0x1bc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d040      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xd2>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a5a      	ldr	r2, [pc, #360]	; (8002c70 <HAL_DMA_IRQHandler+0x1c0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d03b      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xd2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a59      	ldr	r2, [pc, #356]	; (8002c74 <HAL_DMA_IRQHandler+0x1c4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d036      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xd2>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a57      	ldr	r2, [pc, #348]	; (8002c78 <HAL_DMA_IRQHandler+0x1c8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d031      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xd2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a56      	ldr	r2, [pc, #344]	; (8002c7c <HAL_DMA_IRQHandler+0x1cc>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d02c      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xd2>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a54      	ldr	r2, [pc, #336]	; (8002c80 <HAL_DMA_IRQHandler+0x1d0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d027      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xd2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a53      	ldr	r2, [pc, #332]	; (8002c84 <HAL_DMA_IRQHandler+0x1d4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d022      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xd2>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a51      	ldr	r2, [pc, #324]	; (8002c88 <HAL_DMA_IRQHandler+0x1d8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01d      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xd2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a50      	ldr	r2, [pc, #320]	; (8002c8c <HAL_DMA_IRQHandler+0x1dc>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d018      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xd2>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a4e      	ldr	r2, [pc, #312]	; (8002c90 <HAL_DMA_IRQHandler+0x1e0>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d013      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xd2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a4d      	ldr	r2, [pc, #308]	; (8002c94 <HAL_DMA_IRQHandler+0x1e4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00e      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xd2>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a4b      	ldr	r2, [pc, #300]	; (8002c98 <HAL_DMA_IRQHandler+0x1e8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d009      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xd2>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a4a      	ldr	r2, [pc, #296]	; (8002c9c <HAL_DMA_IRQHandler+0x1ec>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d004      	beq.n	8002b82 <HAL_DMA_IRQHandler+0xd2>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a48      	ldr	r2, [pc, #288]	; (8002ca0 <HAL_DMA_IRQHandler+0x1f0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d101      	bne.n	8002b86 <HAL_DMA_IRQHandler+0xd6>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <HAL_DMA_IRQHandler+0xd8>
 8002b86:	2300      	movs	r3, #0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 842b 	beq.w	80033e4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b92:	f003 031f 	and.w	r3, r3, #31
 8002b96:	2208      	movs	r2, #8
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 80a2 	beq.w	8002ce8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a2e      	ldr	r2, [pc, #184]	; (8002c64 <HAL_DMA_IRQHandler+0x1b4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d04a      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x194>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a2d      	ldr	r2, [pc, #180]	; (8002c68 <HAL_DMA_IRQHandler+0x1b8>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d045      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x194>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a2b      	ldr	r2, [pc, #172]	; (8002c6c <HAL_DMA_IRQHandler+0x1bc>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d040      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x194>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a2a      	ldr	r2, [pc, #168]	; (8002c70 <HAL_DMA_IRQHandler+0x1c0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d03b      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x194>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a28      	ldr	r2, [pc, #160]	; (8002c74 <HAL_DMA_IRQHandler+0x1c4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d036      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x194>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a27      	ldr	r2, [pc, #156]	; (8002c78 <HAL_DMA_IRQHandler+0x1c8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d031      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x194>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a25      	ldr	r2, [pc, #148]	; (8002c7c <HAL_DMA_IRQHandler+0x1cc>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d02c      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x194>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a24      	ldr	r2, [pc, #144]	; (8002c80 <HAL_DMA_IRQHandler+0x1d0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d027      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x194>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a22      	ldr	r2, [pc, #136]	; (8002c84 <HAL_DMA_IRQHandler+0x1d4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d022      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x194>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a21      	ldr	r2, [pc, #132]	; (8002c88 <HAL_DMA_IRQHandler+0x1d8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d01d      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x194>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a1f      	ldr	r2, [pc, #124]	; (8002c8c <HAL_DMA_IRQHandler+0x1dc>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d018      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x194>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a1e      	ldr	r2, [pc, #120]	; (8002c90 <HAL_DMA_IRQHandler+0x1e0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d013      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x194>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a1c      	ldr	r2, [pc, #112]	; (8002c94 <HAL_DMA_IRQHandler+0x1e4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00e      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x194>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a1b      	ldr	r2, [pc, #108]	; (8002c98 <HAL_DMA_IRQHandler+0x1e8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d009      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x194>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a19      	ldr	r2, [pc, #100]	; (8002c9c <HAL_DMA_IRQHandler+0x1ec>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d004      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x194>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a18      	ldr	r2, [pc, #96]	; (8002ca0 <HAL_DMA_IRQHandler+0x1f0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d12f      	bne.n	8002ca4 <HAL_DMA_IRQHandler+0x1f4>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	bf14      	ite	ne
 8002c52:	2301      	movne	r3, #1
 8002c54:	2300      	moveq	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	e02e      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x208>
 8002c5a:	bf00      	nop
 8002c5c:	24000000 	.word	0x24000000
 8002c60:	1b4e81b5 	.word	0x1b4e81b5
 8002c64:	40020010 	.word	0x40020010
 8002c68:	40020028 	.word	0x40020028
 8002c6c:	40020040 	.word	0x40020040
 8002c70:	40020058 	.word	0x40020058
 8002c74:	40020070 	.word	0x40020070
 8002c78:	40020088 	.word	0x40020088
 8002c7c:	400200a0 	.word	0x400200a0
 8002c80:	400200b8 	.word	0x400200b8
 8002c84:	40020410 	.word	0x40020410
 8002c88:	40020428 	.word	0x40020428
 8002c8c:	40020440 	.word	0x40020440
 8002c90:	40020458 	.word	0x40020458
 8002c94:	40020470 	.word	0x40020470
 8002c98:	40020488 	.word	0x40020488
 8002c9c:	400204a0 	.word	0x400204a0
 8002ca0:	400204b8 	.word	0x400204b8
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	bf14      	ite	ne
 8002cb2:	2301      	movne	r3, #1
 8002cb4:	2300      	moveq	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d015      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0204 	bic.w	r2, r2, #4
 8002cca:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd0:	f003 031f 	and.w	r3, r3, #31
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce0:	f043 0201 	orr.w	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cec:	f003 031f 	and.w	r3, r3, #31
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d06e      	beq.n	8002ddc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a69      	ldr	r2, [pc, #420]	; (8002ea8 <HAL_DMA_IRQHandler+0x3f8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d04a      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x2ee>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a67      	ldr	r2, [pc, #412]	; (8002eac <HAL_DMA_IRQHandler+0x3fc>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d045      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x2ee>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a66      	ldr	r2, [pc, #408]	; (8002eb0 <HAL_DMA_IRQHandler+0x400>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d040      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x2ee>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a64      	ldr	r2, [pc, #400]	; (8002eb4 <HAL_DMA_IRQHandler+0x404>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d03b      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x2ee>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a63      	ldr	r2, [pc, #396]	; (8002eb8 <HAL_DMA_IRQHandler+0x408>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d036      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x2ee>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a61      	ldr	r2, [pc, #388]	; (8002ebc <HAL_DMA_IRQHandler+0x40c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d031      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x2ee>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a60      	ldr	r2, [pc, #384]	; (8002ec0 <HAL_DMA_IRQHandler+0x410>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d02c      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x2ee>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a5e      	ldr	r2, [pc, #376]	; (8002ec4 <HAL_DMA_IRQHandler+0x414>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d027      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x2ee>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a5d      	ldr	r2, [pc, #372]	; (8002ec8 <HAL_DMA_IRQHandler+0x418>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d022      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x2ee>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a5b      	ldr	r2, [pc, #364]	; (8002ecc <HAL_DMA_IRQHandler+0x41c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01d      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x2ee>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a5a      	ldr	r2, [pc, #360]	; (8002ed0 <HAL_DMA_IRQHandler+0x420>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d018      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x2ee>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a58      	ldr	r2, [pc, #352]	; (8002ed4 <HAL_DMA_IRQHandler+0x424>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x2ee>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a57      	ldr	r2, [pc, #348]	; (8002ed8 <HAL_DMA_IRQHandler+0x428>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d00e      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x2ee>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a55      	ldr	r2, [pc, #340]	; (8002edc <HAL_DMA_IRQHandler+0x42c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d009      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x2ee>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a54      	ldr	r2, [pc, #336]	; (8002ee0 <HAL_DMA_IRQHandler+0x430>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d004      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x2ee>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a52      	ldr	r2, [pc, #328]	; (8002ee4 <HAL_DMA_IRQHandler+0x434>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d10a      	bne.n	8002db4 <HAL_DMA_IRQHandler+0x304>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf14      	ite	ne
 8002dac:	2301      	movne	r3, #1
 8002dae:	2300      	moveq	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	e003      	b.n	8002dbc <HAL_DMA_IRQHandler+0x30c>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00d      	beq.n	8002ddc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	2201      	movs	r2, #1
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd4:	f043 0202 	orr.w	r2, r3, #2
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	2204      	movs	r2, #4
 8002de6:	409a      	lsls	r2, r3
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 808f 	beq.w	8002f10 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a2c      	ldr	r2, [pc, #176]	; (8002ea8 <HAL_DMA_IRQHandler+0x3f8>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d04a      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x3e2>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a2a      	ldr	r2, [pc, #168]	; (8002eac <HAL_DMA_IRQHandler+0x3fc>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d045      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x3e2>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a29      	ldr	r2, [pc, #164]	; (8002eb0 <HAL_DMA_IRQHandler+0x400>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d040      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x3e2>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a27      	ldr	r2, [pc, #156]	; (8002eb4 <HAL_DMA_IRQHandler+0x404>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d03b      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x3e2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a26      	ldr	r2, [pc, #152]	; (8002eb8 <HAL_DMA_IRQHandler+0x408>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d036      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x3e2>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a24      	ldr	r2, [pc, #144]	; (8002ebc <HAL_DMA_IRQHandler+0x40c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d031      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x3e2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a23      	ldr	r2, [pc, #140]	; (8002ec0 <HAL_DMA_IRQHandler+0x410>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d02c      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x3e2>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a21      	ldr	r2, [pc, #132]	; (8002ec4 <HAL_DMA_IRQHandler+0x414>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d027      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x3e2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a20      	ldr	r2, [pc, #128]	; (8002ec8 <HAL_DMA_IRQHandler+0x418>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d022      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x3e2>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a1e      	ldr	r2, [pc, #120]	; (8002ecc <HAL_DMA_IRQHandler+0x41c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d01d      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x3e2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ed0 <HAL_DMA_IRQHandler+0x420>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d018      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x3e2>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a1b      	ldr	r2, [pc, #108]	; (8002ed4 <HAL_DMA_IRQHandler+0x424>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d013      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x3e2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a1a      	ldr	r2, [pc, #104]	; (8002ed8 <HAL_DMA_IRQHandler+0x428>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00e      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x3e2>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a18      	ldr	r2, [pc, #96]	; (8002edc <HAL_DMA_IRQHandler+0x42c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d009      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x3e2>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a17      	ldr	r2, [pc, #92]	; (8002ee0 <HAL_DMA_IRQHandler+0x430>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d004      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x3e2>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a15      	ldr	r2, [pc, #84]	; (8002ee4 <HAL_DMA_IRQHandler+0x434>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d12a      	bne.n	8002ee8 <HAL_DMA_IRQHandler+0x438>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf14      	ite	ne
 8002ea0:	2301      	movne	r3, #1
 8002ea2:	2300      	moveq	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	e023      	b.n	8002ef0 <HAL_DMA_IRQHandler+0x440>
 8002ea8:	40020010 	.word	0x40020010
 8002eac:	40020028 	.word	0x40020028
 8002eb0:	40020040 	.word	0x40020040
 8002eb4:	40020058 	.word	0x40020058
 8002eb8:	40020070 	.word	0x40020070
 8002ebc:	40020088 	.word	0x40020088
 8002ec0:	400200a0 	.word	0x400200a0
 8002ec4:	400200b8 	.word	0x400200b8
 8002ec8:	40020410 	.word	0x40020410
 8002ecc:	40020428 	.word	0x40020428
 8002ed0:	40020440 	.word	0x40020440
 8002ed4:	40020458 	.word	0x40020458
 8002ed8:	40020470 	.word	0x40020470
 8002edc:	40020488 	.word	0x40020488
 8002ee0:	400204a0 	.word	0x400204a0
 8002ee4:	400204b8 	.word	0x400204b8
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00d      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	2204      	movs	r2, #4
 8002efe:	409a      	lsls	r2, r3
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	f043 0204 	orr.w	r2, r3, #4
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	2210      	movs	r2, #16
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80a6 	beq.w	8003072 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a85      	ldr	r2, [pc, #532]	; (8003140 <HAL_DMA_IRQHandler+0x690>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d04a      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x516>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a83      	ldr	r2, [pc, #524]	; (8003144 <HAL_DMA_IRQHandler+0x694>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d045      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x516>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a82      	ldr	r2, [pc, #520]	; (8003148 <HAL_DMA_IRQHandler+0x698>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d040      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x516>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a80      	ldr	r2, [pc, #512]	; (800314c <HAL_DMA_IRQHandler+0x69c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d03b      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x516>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a7f      	ldr	r2, [pc, #508]	; (8003150 <HAL_DMA_IRQHandler+0x6a0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d036      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x516>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a7d      	ldr	r2, [pc, #500]	; (8003154 <HAL_DMA_IRQHandler+0x6a4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d031      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x516>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a7c      	ldr	r2, [pc, #496]	; (8003158 <HAL_DMA_IRQHandler+0x6a8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d02c      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x516>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a7a      	ldr	r2, [pc, #488]	; (800315c <HAL_DMA_IRQHandler+0x6ac>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d027      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x516>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a79      	ldr	r2, [pc, #484]	; (8003160 <HAL_DMA_IRQHandler+0x6b0>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d022      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x516>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a77      	ldr	r2, [pc, #476]	; (8003164 <HAL_DMA_IRQHandler+0x6b4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d01d      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x516>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a76      	ldr	r2, [pc, #472]	; (8003168 <HAL_DMA_IRQHandler+0x6b8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d018      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x516>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a74      	ldr	r2, [pc, #464]	; (800316c <HAL_DMA_IRQHandler+0x6bc>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d013      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x516>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a73      	ldr	r2, [pc, #460]	; (8003170 <HAL_DMA_IRQHandler+0x6c0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00e      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x516>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a71      	ldr	r2, [pc, #452]	; (8003174 <HAL_DMA_IRQHandler+0x6c4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d009      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x516>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a70      	ldr	r2, [pc, #448]	; (8003178 <HAL_DMA_IRQHandler+0x6c8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d004      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x516>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a6e      	ldr	r2, [pc, #440]	; (800317c <HAL_DMA_IRQHandler+0x6cc>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d10a      	bne.n	8002fdc <HAL_DMA_IRQHandler+0x52c>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bf14      	ite	ne
 8002fd4:	2301      	movne	r3, #1
 8002fd6:	2300      	moveq	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e009      	b.n	8002ff0 <HAL_DMA_IRQHandler+0x540>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	bf14      	ite	ne
 8002fea:	2301      	movne	r3, #1
 8002fec:	2300      	moveq	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d03e      	beq.n	8003072 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	2210      	movs	r2, #16
 8002ffe:	409a      	lsls	r2, r3
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d018      	beq.n	8003044 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d108      	bne.n	8003032 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	2b00      	cmp	r3, #0
 8003026:	d024      	beq.n	8003072 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4798      	blx	r3
 8003030:	e01f      	b.n	8003072 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003036:	2b00      	cmp	r3, #0
 8003038:	d01b      	beq.n	8003072 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	4798      	blx	r3
 8003042:	e016      	b.n	8003072 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304e:	2b00      	cmp	r3, #0
 8003050:	d107      	bne.n	8003062 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0208 	bic.w	r2, r2, #8
 8003060:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003076:	f003 031f 	and.w	r3, r3, #31
 800307a:	2220      	movs	r2, #32
 800307c:	409a      	lsls	r2, r3
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	4013      	ands	r3, r2
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 8110 	beq.w	80032a8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a2c      	ldr	r2, [pc, #176]	; (8003140 <HAL_DMA_IRQHandler+0x690>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d04a      	beq.n	8003128 <HAL_DMA_IRQHandler+0x678>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a2b      	ldr	r2, [pc, #172]	; (8003144 <HAL_DMA_IRQHandler+0x694>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d045      	beq.n	8003128 <HAL_DMA_IRQHandler+0x678>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a29      	ldr	r2, [pc, #164]	; (8003148 <HAL_DMA_IRQHandler+0x698>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d040      	beq.n	8003128 <HAL_DMA_IRQHandler+0x678>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a28      	ldr	r2, [pc, #160]	; (800314c <HAL_DMA_IRQHandler+0x69c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d03b      	beq.n	8003128 <HAL_DMA_IRQHandler+0x678>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a26      	ldr	r2, [pc, #152]	; (8003150 <HAL_DMA_IRQHandler+0x6a0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d036      	beq.n	8003128 <HAL_DMA_IRQHandler+0x678>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a25      	ldr	r2, [pc, #148]	; (8003154 <HAL_DMA_IRQHandler+0x6a4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d031      	beq.n	8003128 <HAL_DMA_IRQHandler+0x678>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a23      	ldr	r2, [pc, #140]	; (8003158 <HAL_DMA_IRQHandler+0x6a8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d02c      	beq.n	8003128 <HAL_DMA_IRQHandler+0x678>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a22      	ldr	r2, [pc, #136]	; (800315c <HAL_DMA_IRQHandler+0x6ac>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d027      	beq.n	8003128 <HAL_DMA_IRQHandler+0x678>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a20      	ldr	r2, [pc, #128]	; (8003160 <HAL_DMA_IRQHandler+0x6b0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d022      	beq.n	8003128 <HAL_DMA_IRQHandler+0x678>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a1f      	ldr	r2, [pc, #124]	; (8003164 <HAL_DMA_IRQHandler+0x6b4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d01d      	beq.n	8003128 <HAL_DMA_IRQHandler+0x678>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1d      	ldr	r2, [pc, #116]	; (8003168 <HAL_DMA_IRQHandler+0x6b8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d018      	beq.n	8003128 <HAL_DMA_IRQHandler+0x678>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1c      	ldr	r2, [pc, #112]	; (800316c <HAL_DMA_IRQHandler+0x6bc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d013      	beq.n	8003128 <HAL_DMA_IRQHandler+0x678>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a1a      	ldr	r2, [pc, #104]	; (8003170 <HAL_DMA_IRQHandler+0x6c0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00e      	beq.n	8003128 <HAL_DMA_IRQHandler+0x678>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a19      	ldr	r2, [pc, #100]	; (8003174 <HAL_DMA_IRQHandler+0x6c4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d009      	beq.n	8003128 <HAL_DMA_IRQHandler+0x678>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a17      	ldr	r2, [pc, #92]	; (8003178 <HAL_DMA_IRQHandler+0x6c8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d004      	beq.n	8003128 <HAL_DMA_IRQHandler+0x678>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a16      	ldr	r2, [pc, #88]	; (800317c <HAL_DMA_IRQHandler+0x6cc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d12b      	bne.n	8003180 <HAL_DMA_IRQHandler+0x6d0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0310 	and.w	r3, r3, #16
 8003132:	2b00      	cmp	r3, #0
 8003134:	bf14      	ite	ne
 8003136:	2301      	movne	r3, #1
 8003138:	2300      	moveq	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	e02a      	b.n	8003194 <HAL_DMA_IRQHandler+0x6e4>
 800313e:	bf00      	nop
 8003140:	40020010 	.word	0x40020010
 8003144:	40020028 	.word	0x40020028
 8003148:	40020040 	.word	0x40020040
 800314c:	40020058 	.word	0x40020058
 8003150:	40020070 	.word	0x40020070
 8003154:	40020088 	.word	0x40020088
 8003158:	400200a0 	.word	0x400200a0
 800315c:	400200b8 	.word	0x400200b8
 8003160:	40020410 	.word	0x40020410
 8003164:	40020428 	.word	0x40020428
 8003168:	40020440 	.word	0x40020440
 800316c:	40020458 	.word	0x40020458
 8003170:	40020470 	.word	0x40020470
 8003174:	40020488 	.word	0x40020488
 8003178:	400204a0 	.word	0x400204a0
 800317c:	400204b8 	.word	0x400204b8
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	bf14      	ite	ne
 800318e:	2301      	movne	r3, #1
 8003190:	2300      	moveq	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 8087 	beq.w	80032a8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319e:	f003 031f 	and.w	r3, r3, #31
 80031a2:	2220      	movs	r2, #32
 80031a4:	409a      	lsls	r2, r3
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d139      	bne.n	800322a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0216 	bic.w	r2, r2, #22
 80031c4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695a      	ldr	r2, [r3, #20]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031d4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d103      	bne.n	80031e6 <HAL_DMA_IRQHandler+0x736>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0208 	bic.w	r2, r2, #8
 80031f4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fa:	f003 031f 	and.w	r3, r3, #31
 80031fe:	223f      	movs	r2, #63	; 0x3f
 8003200:	409a      	lsls	r2, r3
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 8382 	beq.w	8003924 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	4798      	blx	r3
          }
          return;
 8003228:	e37c      	b.n	8003924 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d018      	beq.n	800326a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d108      	bne.n	8003258 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	2b00      	cmp	r3, #0
 800324c:	d02c      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	4798      	blx	r3
 8003256:	e027      	b.n	80032a8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	2b00      	cmp	r3, #0
 800325e:	d023      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	4798      	blx	r3
 8003268:	e01e      	b.n	80032a8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10f      	bne.n	8003298 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0210 	bic.w	r2, r2, #16
 8003286:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 833e 	beq.w	800392e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8088 	beq.w	80033d0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2204      	movs	r2, #4
 80032c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a89      	ldr	r2, [pc, #548]	; (80034f4 <HAL_DMA_IRQHandler+0xa44>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d04a      	beq.n	8003368 <HAL_DMA_IRQHandler+0x8b8>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a88      	ldr	r2, [pc, #544]	; (80034f8 <HAL_DMA_IRQHandler+0xa48>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d045      	beq.n	8003368 <HAL_DMA_IRQHandler+0x8b8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a86      	ldr	r2, [pc, #536]	; (80034fc <HAL_DMA_IRQHandler+0xa4c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d040      	beq.n	8003368 <HAL_DMA_IRQHandler+0x8b8>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a85      	ldr	r2, [pc, #532]	; (8003500 <HAL_DMA_IRQHandler+0xa50>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d03b      	beq.n	8003368 <HAL_DMA_IRQHandler+0x8b8>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a83      	ldr	r2, [pc, #524]	; (8003504 <HAL_DMA_IRQHandler+0xa54>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d036      	beq.n	8003368 <HAL_DMA_IRQHandler+0x8b8>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a82      	ldr	r2, [pc, #520]	; (8003508 <HAL_DMA_IRQHandler+0xa58>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d031      	beq.n	8003368 <HAL_DMA_IRQHandler+0x8b8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a80      	ldr	r2, [pc, #512]	; (800350c <HAL_DMA_IRQHandler+0xa5c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d02c      	beq.n	8003368 <HAL_DMA_IRQHandler+0x8b8>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a7f      	ldr	r2, [pc, #508]	; (8003510 <HAL_DMA_IRQHandler+0xa60>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d027      	beq.n	8003368 <HAL_DMA_IRQHandler+0x8b8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a7d      	ldr	r2, [pc, #500]	; (8003514 <HAL_DMA_IRQHandler+0xa64>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d022      	beq.n	8003368 <HAL_DMA_IRQHandler+0x8b8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a7c      	ldr	r2, [pc, #496]	; (8003518 <HAL_DMA_IRQHandler+0xa68>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d01d      	beq.n	8003368 <HAL_DMA_IRQHandler+0x8b8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a7a      	ldr	r2, [pc, #488]	; (800351c <HAL_DMA_IRQHandler+0xa6c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d018      	beq.n	8003368 <HAL_DMA_IRQHandler+0x8b8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a79      	ldr	r2, [pc, #484]	; (8003520 <HAL_DMA_IRQHandler+0xa70>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d013      	beq.n	8003368 <HAL_DMA_IRQHandler+0x8b8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a77      	ldr	r2, [pc, #476]	; (8003524 <HAL_DMA_IRQHandler+0xa74>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00e      	beq.n	8003368 <HAL_DMA_IRQHandler+0x8b8>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a76      	ldr	r2, [pc, #472]	; (8003528 <HAL_DMA_IRQHandler+0xa78>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d009      	beq.n	8003368 <HAL_DMA_IRQHandler+0x8b8>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a74      	ldr	r2, [pc, #464]	; (800352c <HAL_DMA_IRQHandler+0xa7c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d004      	beq.n	8003368 <HAL_DMA_IRQHandler+0x8b8>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a73      	ldr	r2, [pc, #460]	; (8003530 <HAL_DMA_IRQHandler+0xa80>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d108      	bne.n	800337a <HAL_DMA_IRQHandler+0x8ca>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0201 	bic.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	e007      	b.n	800338a <HAL_DMA_IRQHandler+0x8da>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0201 	bic.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3301      	adds	r3, #1
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003392:	429a      	cmp	r2, r3
 8003394:	d307      	bcc.n	80033a6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1f2      	bne.n	800338a <HAL_DMA_IRQHandler+0x8da>
 80033a4:	e000      	b.n	80033a8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80033a6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d004      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2203      	movs	r2, #3
 80033ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80033be:	e003      	b.n	80033c8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 82aa 	beq.w	800392e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
 80033e2:	e2a4      	b.n	800392e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a52      	ldr	r2, [pc, #328]	; (8003534 <HAL_DMA_IRQHandler+0xa84>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d04a      	beq.n	8003484 <HAL_DMA_IRQHandler+0x9d4>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a51      	ldr	r2, [pc, #324]	; (8003538 <HAL_DMA_IRQHandler+0xa88>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d045      	beq.n	8003484 <HAL_DMA_IRQHandler+0x9d4>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a4f      	ldr	r2, [pc, #316]	; (800353c <HAL_DMA_IRQHandler+0xa8c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d040      	beq.n	8003484 <HAL_DMA_IRQHandler+0x9d4>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a4e      	ldr	r2, [pc, #312]	; (8003540 <HAL_DMA_IRQHandler+0xa90>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d03b      	beq.n	8003484 <HAL_DMA_IRQHandler+0x9d4>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a4c      	ldr	r2, [pc, #304]	; (8003544 <HAL_DMA_IRQHandler+0xa94>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d036      	beq.n	8003484 <HAL_DMA_IRQHandler+0x9d4>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a4b      	ldr	r2, [pc, #300]	; (8003548 <HAL_DMA_IRQHandler+0xa98>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d031      	beq.n	8003484 <HAL_DMA_IRQHandler+0x9d4>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a49      	ldr	r2, [pc, #292]	; (800354c <HAL_DMA_IRQHandler+0xa9c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d02c      	beq.n	8003484 <HAL_DMA_IRQHandler+0x9d4>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a48      	ldr	r2, [pc, #288]	; (8003550 <HAL_DMA_IRQHandler+0xaa0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d027      	beq.n	8003484 <HAL_DMA_IRQHandler+0x9d4>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a46      	ldr	r2, [pc, #280]	; (8003554 <HAL_DMA_IRQHandler+0xaa4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d022      	beq.n	8003484 <HAL_DMA_IRQHandler+0x9d4>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a45      	ldr	r2, [pc, #276]	; (8003558 <HAL_DMA_IRQHandler+0xaa8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d01d      	beq.n	8003484 <HAL_DMA_IRQHandler+0x9d4>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a43      	ldr	r2, [pc, #268]	; (800355c <HAL_DMA_IRQHandler+0xaac>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d018      	beq.n	8003484 <HAL_DMA_IRQHandler+0x9d4>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a42      	ldr	r2, [pc, #264]	; (8003560 <HAL_DMA_IRQHandler+0xab0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d013      	beq.n	8003484 <HAL_DMA_IRQHandler+0x9d4>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a40      	ldr	r2, [pc, #256]	; (8003564 <HAL_DMA_IRQHandler+0xab4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d00e      	beq.n	8003484 <HAL_DMA_IRQHandler+0x9d4>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a3f      	ldr	r2, [pc, #252]	; (8003568 <HAL_DMA_IRQHandler+0xab8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d009      	beq.n	8003484 <HAL_DMA_IRQHandler+0x9d4>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a3d      	ldr	r2, [pc, #244]	; (800356c <HAL_DMA_IRQHandler+0xabc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d004      	beq.n	8003484 <HAL_DMA_IRQHandler+0x9d4>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a3c      	ldr	r2, [pc, #240]	; (8003570 <HAL_DMA_IRQHandler+0xac0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d101      	bne.n	8003488 <HAL_DMA_IRQHandler+0x9d8>
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <HAL_DMA_IRQHandler+0x9da>
 8003488:	2300      	movs	r3, #0
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 824f 	beq.w	800392e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	2204      	movs	r2, #4
 80034a2:	409a      	lsls	r2, r3
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80dd 	beq.w	8003668 <HAL_DMA_IRQHandler+0xbb8>
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 80d7 	beq.w	8003668 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034be:	f003 031f 	and.w	r3, r3, #31
 80034c2:	2204      	movs	r2, #4
 80034c4:	409a      	lsls	r2, r3
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d059      	beq.n	8003588 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d14a      	bne.n	8003574 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8220 	beq.w	8003928 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034f0:	e21a      	b.n	8003928 <HAL_DMA_IRQHandler+0xe78>
 80034f2:	bf00      	nop
 80034f4:	40020010 	.word	0x40020010
 80034f8:	40020028 	.word	0x40020028
 80034fc:	40020040 	.word	0x40020040
 8003500:	40020058 	.word	0x40020058
 8003504:	40020070 	.word	0x40020070
 8003508:	40020088 	.word	0x40020088
 800350c:	400200a0 	.word	0x400200a0
 8003510:	400200b8 	.word	0x400200b8
 8003514:	40020410 	.word	0x40020410
 8003518:	40020428 	.word	0x40020428
 800351c:	40020440 	.word	0x40020440
 8003520:	40020458 	.word	0x40020458
 8003524:	40020470 	.word	0x40020470
 8003528:	40020488 	.word	0x40020488
 800352c:	400204a0 	.word	0x400204a0
 8003530:	400204b8 	.word	0x400204b8
 8003534:	48022c08 	.word	0x48022c08
 8003538:	48022c1c 	.word	0x48022c1c
 800353c:	48022c30 	.word	0x48022c30
 8003540:	48022c44 	.word	0x48022c44
 8003544:	48022c58 	.word	0x48022c58
 8003548:	48022c6c 	.word	0x48022c6c
 800354c:	48022c80 	.word	0x48022c80
 8003550:	48022c94 	.word	0x48022c94
 8003554:	58025408 	.word	0x58025408
 8003558:	5802541c 	.word	0x5802541c
 800355c:	58025430 	.word	0x58025430
 8003560:	58025444 	.word	0x58025444
 8003564:	58025458 	.word	0x58025458
 8003568:	5802546c 	.word	0x5802546c
 800356c:	58025480 	.word	0x58025480
 8003570:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 81d5 	beq.w	8003928 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003586:	e1cf      	b.n	8003928 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d160      	bne.n	8003654 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a7f      	ldr	r2, [pc, #508]	; (8003794 <HAL_DMA_IRQHandler+0xce4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d04a      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb82>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a7d      	ldr	r2, [pc, #500]	; (8003798 <HAL_DMA_IRQHandler+0xce8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d045      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb82>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a7c      	ldr	r2, [pc, #496]	; (800379c <HAL_DMA_IRQHandler+0xcec>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d040      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb82>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a7a      	ldr	r2, [pc, #488]	; (80037a0 <HAL_DMA_IRQHandler+0xcf0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d03b      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb82>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a79      	ldr	r2, [pc, #484]	; (80037a4 <HAL_DMA_IRQHandler+0xcf4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d036      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb82>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a77      	ldr	r2, [pc, #476]	; (80037a8 <HAL_DMA_IRQHandler+0xcf8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d031      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb82>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a76      	ldr	r2, [pc, #472]	; (80037ac <HAL_DMA_IRQHandler+0xcfc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d02c      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb82>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a74      	ldr	r2, [pc, #464]	; (80037b0 <HAL_DMA_IRQHandler+0xd00>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d027      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb82>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a73      	ldr	r2, [pc, #460]	; (80037b4 <HAL_DMA_IRQHandler+0xd04>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d022      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb82>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a71      	ldr	r2, [pc, #452]	; (80037b8 <HAL_DMA_IRQHandler+0xd08>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d01d      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb82>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a70      	ldr	r2, [pc, #448]	; (80037bc <HAL_DMA_IRQHandler+0xd0c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d018      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb82>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a6e      	ldr	r2, [pc, #440]	; (80037c0 <HAL_DMA_IRQHandler+0xd10>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d013      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb82>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a6d      	ldr	r2, [pc, #436]	; (80037c4 <HAL_DMA_IRQHandler+0xd14>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00e      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb82>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a6b      	ldr	r2, [pc, #428]	; (80037c8 <HAL_DMA_IRQHandler+0xd18>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d009      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb82>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a6a      	ldr	r2, [pc, #424]	; (80037cc <HAL_DMA_IRQHandler+0xd1c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d004      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb82>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a68      	ldr	r2, [pc, #416]	; (80037d0 <HAL_DMA_IRQHandler+0xd20>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d108      	bne.n	8003644 <HAL_DMA_IRQHandler+0xb94>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0208 	bic.w	r2, r2, #8
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	e007      	b.n	8003654 <HAL_DMA_IRQHandler+0xba4>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0204 	bic.w	r2, r2, #4
 8003652:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 8165 	beq.w	8003928 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003666:	e15f      	b.n	8003928 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	2202      	movs	r2, #2
 8003672:	409a      	lsls	r2, r3
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	4013      	ands	r3, r2
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80c5 	beq.w	8003808 <HAL_DMA_IRQHandler+0xd58>
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80bf 	beq.w	8003808 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	2202      	movs	r2, #2
 8003694:	409a      	lsls	r2, r3
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d018      	beq.n	80036d6 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 813a 	beq.w	800392c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036c0:	e134      	b.n	800392c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8130 	beq.w	800392c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036d4:	e12a      	b.n	800392c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f003 0320 	and.w	r3, r3, #32
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f040 8089 	bne.w	80037f4 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a2b      	ldr	r2, [pc, #172]	; (8003794 <HAL_DMA_IRQHandler+0xce4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d04a      	beq.n	8003782 <HAL_DMA_IRQHandler+0xcd2>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a29      	ldr	r2, [pc, #164]	; (8003798 <HAL_DMA_IRQHandler+0xce8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d045      	beq.n	8003782 <HAL_DMA_IRQHandler+0xcd2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a28      	ldr	r2, [pc, #160]	; (800379c <HAL_DMA_IRQHandler+0xcec>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d040      	beq.n	8003782 <HAL_DMA_IRQHandler+0xcd2>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a26      	ldr	r2, [pc, #152]	; (80037a0 <HAL_DMA_IRQHandler+0xcf0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d03b      	beq.n	8003782 <HAL_DMA_IRQHandler+0xcd2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a25      	ldr	r2, [pc, #148]	; (80037a4 <HAL_DMA_IRQHandler+0xcf4>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d036      	beq.n	8003782 <HAL_DMA_IRQHandler+0xcd2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a23      	ldr	r2, [pc, #140]	; (80037a8 <HAL_DMA_IRQHandler+0xcf8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d031      	beq.n	8003782 <HAL_DMA_IRQHandler+0xcd2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a22      	ldr	r2, [pc, #136]	; (80037ac <HAL_DMA_IRQHandler+0xcfc>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d02c      	beq.n	8003782 <HAL_DMA_IRQHandler+0xcd2>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a20      	ldr	r2, [pc, #128]	; (80037b0 <HAL_DMA_IRQHandler+0xd00>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d027      	beq.n	8003782 <HAL_DMA_IRQHandler+0xcd2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a1f      	ldr	r2, [pc, #124]	; (80037b4 <HAL_DMA_IRQHandler+0xd04>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d022      	beq.n	8003782 <HAL_DMA_IRQHandler+0xcd2>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a1d      	ldr	r2, [pc, #116]	; (80037b8 <HAL_DMA_IRQHandler+0xd08>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d01d      	beq.n	8003782 <HAL_DMA_IRQHandler+0xcd2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a1c      	ldr	r2, [pc, #112]	; (80037bc <HAL_DMA_IRQHandler+0xd0c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d018      	beq.n	8003782 <HAL_DMA_IRQHandler+0xcd2>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a1a      	ldr	r2, [pc, #104]	; (80037c0 <HAL_DMA_IRQHandler+0xd10>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d013      	beq.n	8003782 <HAL_DMA_IRQHandler+0xcd2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a19      	ldr	r2, [pc, #100]	; (80037c4 <HAL_DMA_IRQHandler+0xd14>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00e      	beq.n	8003782 <HAL_DMA_IRQHandler+0xcd2>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a17      	ldr	r2, [pc, #92]	; (80037c8 <HAL_DMA_IRQHandler+0xd18>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d009      	beq.n	8003782 <HAL_DMA_IRQHandler+0xcd2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a16      	ldr	r2, [pc, #88]	; (80037cc <HAL_DMA_IRQHandler+0xd1c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d004      	beq.n	8003782 <HAL_DMA_IRQHandler+0xcd2>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a14      	ldr	r2, [pc, #80]	; (80037d0 <HAL_DMA_IRQHandler+0xd20>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d128      	bne.n	80037d4 <HAL_DMA_IRQHandler+0xd24>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0214 	bic.w	r2, r2, #20
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	e027      	b.n	80037e4 <HAL_DMA_IRQHandler+0xd34>
 8003794:	40020010 	.word	0x40020010
 8003798:	40020028 	.word	0x40020028
 800379c:	40020040 	.word	0x40020040
 80037a0:	40020058 	.word	0x40020058
 80037a4:	40020070 	.word	0x40020070
 80037a8:	40020088 	.word	0x40020088
 80037ac:	400200a0 	.word	0x400200a0
 80037b0:	400200b8 	.word	0x400200b8
 80037b4:	40020410 	.word	0x40020410
 80037b8:	40020428 	.word	0x40020428
 80037bc:	40020440 	.word	0x40020440
 80037c0:	40020458 	.word	0x40020458
 80037c4:	40020470 	.word	0x40020470
 80037c8:	40020488 	.word	0x40020488
 80037cc:	400204a0 	.word	0x400204a0
 80037d0:	400204b8 	.word	0x400204b8
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 020a 	bic.w	r2, r2, #10
 80037e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8097 	beq.w	800392c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003806:	e091      	b.n	800392c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	2208      	movs	r2, #8
 8003812:	409a      	lsls	r2, r3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	4013      	ands	r3, r2
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8088 	beq.w	800392e <HAL_DMA_IRQHandler+0xe7e>
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 8082 	beq.w	800392e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a41      	ldr	r2, [pc, #260]	; (8003934 <HAL_DMA_IRQHandler+0xe84>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d04a      	beq.n	80038ca <HAL_DMA_IRQHandler+0xe1a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a3f      	ldr	r2, [pc, #252]	; (8003938 <HAL_DMA_IRQHandler+0xe88>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d045      	beq.n	80038ca <HAL_DMA_IRQHandler+0xe1a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a3e      	ldr	r2, [pc, #248]	; (800393c <HAL_DMA_IRQHandler+0xe8c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d040      	beq.n	80038ca <HAL_DMA_IRQHandler+0xe1a>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a3c      	ldr	r2, [pc, #240]	; (8003940 <HAL_DMA_IRQHandler+0xe90>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d03b      	beq.n	80038ca <HAL_DMA_IRQHandler+0xe1a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a3b      	ldr	r2, [pc, #236]	; (8003944 <HAL_DMA_IRQHandler+0xe94>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d036      	beq.n	80038ca <HAL_DMA_IRQHandler+0xe1a>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a39      	ldr	r2, [pc, #228]	; (8003948 <HAL_DMA_IRQHandler+0xe98>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d031      	beq.n	80038ca <HAL_DMA_IRQHandler+0xe1a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a38      	ldr	r2, [pc, #224]	; (800394c <HAL_DMA_IRQHandler+0xe9c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d02c      	beq.n	80038ca <HAL_DMA_IRQHandler+0xe1a>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a36      	ldr	r2, [pc, #216]	; (8003950 <HAL_DMA_IRQHandler+0xea0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d027      	beq.n	80038ca <HAL_DMA_IRQHandler+0xe1a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a35      	ldr	r2, [pc, #212]	; (8003954 <HAL_DMA_IRQHandler+0xea4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d022      	beq.n	80038ca <HAL_DMA_IRQHandler+0xe1a>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a33      	ldr	r2, [pc, #204]	; (8003958 <HAL_DMA_IRQHandler+0xea8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d01d      	beq.n	80038ca <HAL_DMA_IRQHandler+0xe1a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a32      	ldr	r2, [pc, #200]	; (800395c <HAL_DMA_IRQHandler+0xeac>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d018      	beq.n	80038ca <HAL_DMA_IRQHandler+0xe1a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a30      	ldr	r2, [pc, #192]	; (8003960 <HAL_DMA_IRQHandler+0xeb0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d013      	beq.n	80038ca <HAL_DMA_IRQHandler+0xe1a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a2f      	ldr	r2, [pc, #188]	; (8003964 <HAL_DMA_IRQHandler+0xeb4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d00e      	beq.n	80038ca <HAL_DMA_IRQHandler+0xe1a>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a2d      	ldr	r2, [pc, #180]	; (8003968 <HAL_DMA_IRQHandler+0xeb8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d009      	beq.n	80038ca <HAL_DMA_IRQHandler+0xe1a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a2c      	ldr	r2, [pc, #176]	; (800396c <HAL_DMA_IRQHandler+0xebc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d004      	beq.n	80038ca <HAL_DMA_IRQHandler+0xe1a>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a2a      	ldr	r2, [pc, #168]	; (8003970 <HAL_DMA_IRQHandler+0xec0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d108      	bne.n	80038dc <HAL_DMA_IRQHandler+0xe2c>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 021c 	bic.w	r2, r2, #28
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	e007      	b.n	80038ec <HAL_DMA_IRQHandler+0xe3c>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 020e 	bic.w	r2, r2, #14
 80038ea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f0:	f003 031f 	and.w	r3, r3, #31
 80038f4:	2201      	movs	r2, #1
 80038f6:	409a      	lsls	r2, r3
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d009      	beq.n	800392e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	4798      	blx	r3
 8003922:	e004      	b.n	800392e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8003924:	bf00      	nop
 8003926:	e002      	b.n	800392e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003928:	bf00      	nop
 800392a:	e000      	b.n	800392e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800392c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800392e:	3728      	adds	r7, #40	; 0x28
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40020010 	.word	0x40020010
 8003938:	40020028 	.word	0x40020028
 800393c:	40020040 	.word	0x40020040
 8003940:	40020058 	.word	0x40020058
 8003944:	40020070 	.word	0x40020070
 8003948:	40020088 	.word	0x40020088
 800394c:	400200a0 	.word	0x400200a0
 8003950:	400200b8 	.word	0x400200b8
 8003954:	40020410 	.word	0x40020410
 8003958:	40020428 	.word	0x40020428
 800395c:	40020440 	.word	0x40020440
 8003960:	40020458 	.word	0x40020458
 8003964:	40020470 	.word	0x40020470
 8003968:	40020488 	.word	0x40020488
 800396c:	400204a0 	.word	0x400204a0
 8003970:	400204b8 	.word	0x400204b8

08003974 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a42      	ldr	r2, [pc, #264]	; (8003a8c <DMA_CalcBaseAndBitshift+0x118>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d04a      	beq.n	8003a1c <DMA_CalcBaseAndBitshift+0xa8>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a41      	ldr	r2, [pc, #260]	; (8003a90 <DMA_CalcBaseAndBitshift+0x11c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d045      	beq.n	8003a1c <DMA_CalcBaseAndBitshift+0xa8>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a3f      	ldr	r2, [pc, #252]	; (8003a94 <DMA_CalcBaseAndBitshift+0x120>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d040      	beq.n	8003a1c <DMA_CalcBaseAndBitshift+0xa8>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a3e      	ldr	r2, [pc, #248]	; (8003a98 <DMA_CalcBaseAndBitshift+0x124>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d03b      	beq.n	8003a1c <DMA_CalcBaseAndBitshift+0xa8>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a3c      	ldr	r2, [pc, #240]	; (8003a9c <DMA_CalcBaseAndBitshift+0x128>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d036      	beq.n	8003a1c <DMA_CalcBaseAndBitshift+0xa8>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a3b      	ldr	r2, [pc, #236]	; (8003aa0 <DMA_CalcBaseAndBitshift+0x12c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d031      	beq.n	8003a1c <DMA_CalcBaseAndBitshift+0xa8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a39      	ldr	r2, [pc, #228]	; (8003aa4 <DMA_CalcBaseAndBitshift+0x130>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d02c      	beq.n	8003a1c <DMA_CalcBaseAndBitshift+0xa8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a38      	ldr	r2, [pc, #224]	; (8003aa8 <DMA_CalcBaseAndBitshift+0x134>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d027      	beq.n	8003a1c <DMA_CalcBaseAndBitshift+0xa8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a36      	ldr	r2, [pc, #216]	; (8003aac <DMA_CalcBaseAndBitshift+0x138>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d022      	beq.n	8003a1c <DMA_CalcBaseAndBitshift+0xa8>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a35      	ldr	r2, [pc, #212]	; (8003ab0 <DMA_CalcBaseAndBitshift+0x13c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d01d      	beq.n	8003a1c <DMA_CalcBaseAndBitshift+0xa8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a33      	ldr	r2, [pc, #204]	; (8003ab4 <DMA_CalcBaseAndBitshift+0x140>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d018      	beq.n	8003a1c <DMA_CalcBaseAndBitshift+0xa8>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a32      	ldr	r2, [pc, #200]	; (8003ab8 <DMA_CalcBaseAndBitshift+0x144>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d013      	beq.n	8003a1c <DMA_CalcBaseAndBitshift+0xa8>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a30      	ldr	r2, [pc, #192]	; (8003abc <DMA_CalcBaseAndBitshift+0x148>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00e      	beq.n	8003a1c <DMA_CalcBaseAndBitshift+0xa8>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a2f      	ldr	r2, [pc, #188]	; (8003ac0 <DMA_CalcBaseAndBitshift+0x14c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d009      	beq.n	8003a1c <DMA_CalcBaseAndBitshift+0xa8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a2d      	ldr	r2, [pc, #180]	; (8003ac4 <DMA_CalcBaseAndBitshift+0x150>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d004      	beq.n	8003a1c <DMA_CalcBaseAndBitshift+0xa8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a2c      	ldr	r2, [pc, #176]	; (8003ac8 <DMA_CalcBaseAndBitshift+0x154>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d101      	bne.n	8003a20 <DMA_CalcBaseAndBitshift+0xac>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <DMA_CalcBaseAndBitshift+0xae>
 8003a20:	2300      	movs	r3, #0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d024      	beq.n	8003a70 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	3b10      	subs	r3, #16
 8003a2e:	4a27      	ldr	r2, [pc, #156]	; (8003acc <DMA_CalcBaseAndBitshift+0x158>)
 8003a30:	fba2 2303 	umull	r2, r3, r2, r3
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	4a24      	ldr	r2, [pc, #144]	; (8003ad0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003a40:	5cd3      	ldrb	r3, [r2, r3]
 8003a42:	461a      	mov	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d908      	bls.n	8003a60 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	4b1f      	ldr	r3, [pc, #124]	; (8003ad4 <DMA_CalcBaseAndBitshift+0x160>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	1d1a      	adds	r2, r3, #4
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	659a      	str	r2, [r3, #88]	; 0x58
 8003a5e:	e00d      	b.n	8003a7c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	4b1b      	ldr	r3, [pc, #108]	; (8003ad4 <DMA_CalcBaseAndBitshift+0x160>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a6e:	e005      	b.n	8003a7c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	40020010 	.word	0x40020010
 8003a90:	40020028 	.word	0x40020028
 8003a94:	40020040 	.word	0x40020040
 8003a98:	40020058 	.word	0x40020058
 8003a9c:	40020070 	.word	0x40020070
 8003aa0:	40020088 	.word	0x40020088
 8003aa4:	400200a0 	.word	0x400200a0
 8003aa8:	400200b8 	.word	0x400200b8
 8003aac:	40020410 	.word	0x40020410
 8003ab0:	40020428 	.word	0x40020428
 8003ab4:	40020440 	.word	0x40020440
 8003ab8:	40020458 	.word	0x40020458
 8003abc:	40020470 	.word	0x40020470
 8003ac0:	40020488 	.word	0x40020488
 8003ac4:	400204a0 	.word	0x400204a0
 8003ac8:	400204b8 	.word	0x400204b8
 8003acc:	aaaaaaab 	.word	0xaaaaaaab
 8003ad0:	0800ca60 	.word	0x0800ca60
 8003ad4:	fffffc00 	.word	0xfffffc00

08003ad8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d120      	bne.n	8003b2e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d858      	bhi.n	8003ba6 <DMA_CheckFifoParam+0xce>
 8003af4:	a201      	add	r2, pc, #4	; (adr r2, 8003afc <DMA_CheckFifoParam+0x24>)
 8003af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afa:	bf00      	nop
 8003afc:	08003b0d 	.word	0x08003b0d
 8003b00:	08003b1f 	.word	0x08003b1f
 8003b04:	08003b0d 	.word	0x08003b0d
 8003b08:	08003ba7 	.word	0x08003ba7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d048      	beq.n	8003baa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b1c:	e045      	b.n	8003baa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b26:	d142      	bne.n	8003bae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b2c:	e03f      	b.n	8003bae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b36:	d123      	bne.n	8003b80 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	d838      	bhi.n	8003bb2 <DMA_CheckFifoParam+0xda>
 8003b40:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <DMA_CheckFifoParam+0x70>)
 8003b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b46:	bf00      	nop
 8003b48:	08003b59 	.word	0x08003b59
 8003b4c:	08003b5f 	.word	0x08003b5f
 8003b50:	08003b59 	.word	0x08003b59
 8003b54:	08003b71 	.word	0x08003b71
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	73fb      	strb	r3, [r7, #15]
        break;
 8003b5c:	e030      	b.n	8003bc0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d025      	beq.n	8003bb6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b6e:	e022      	b.n	8003bb6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b78:	d11f      	bne.n	8003bba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b7e:	e01c      	b.n	8003bba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d902      	bls.n	8003b8e <DMA_CheckFifoParam+0xb6>
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d003      	beq.n	8003b94 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003b8c:	e018      	b.n	8003bc0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	73fb      	strb	r3, [r7, #15]
        break;
 8003b92:	e015      	b.n	8003bc0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00e      	beq.n	8003bbe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
    break;
 8003ba4:	e00b      	b.n	8003bbe <DMA_CheckFifoParam+0xe6>
        break;
 8003ba6:	bf00      	nop
 8003ba8:	e00a      	b.n	8003bc0 <DMA_CheckFifoParam+0xe8>
        break;
 8003baa:	bf00      	nop
 8003bac:	e008      	b.n	8003bc0 <DMA_CheckFifoParam+0xe8>
        break;
 8003bae:	bf00      	nop
 8003bb0:	e006      	b.n	8003bc0 <DMA_CheckFifoParam+0xe8>
        break;
 8003bb2:	bf00      	nop
 8003bb4:	e004      	b.n	8003bc0 <DMA_CheckFifoParam+0xe8>
        break;
 8003bb6:	bf00      	nop
 8003bb8:	e002      	b.n	8003bc0 <DMA_CheckFifoParam+0xe8>
        break;
 8003bba:	bf00      	nop
 8003bbc:	e000      	b.n	8003bc0 <DMA_CheckFifoParam+0xe8>
    break;
 8003bbe:	bf00      	nop
    }
  }

  return status;
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop

08003bd0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a38      	ldr	r2, [pc, #224]	; (8003cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d022      	beq.n	8003c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a36      	ldr	r2, [pc, #216]	; (8003cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d01d      	beq.n	8003c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a35      	ldr	r2, [pc, #212]	; (8003ccc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d018      	beq.n	8003c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a33      	ldr	r2, [pc, #204]	; (8003cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a32      	ldr	r2, [pc, #200]	; (8003cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00e      	beq.n	8003c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a30      	ldr	r2, [pc, #192]	; (8003cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d009      	beq.n	8003c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a2f      	ldr	r2, [pc, #188]	; (8003cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d004      	beq.n	8003c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a2d      	ldr	r2, [pc, #180]	; (8003ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d101      	bne.n	8003c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003c32:	2300      	movs	r3, #0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d01a      	beq.n	8003c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	3b08      	subs	r3, #8
 8003c40:	4a28      	ldr	r2, [pc, #160]	; (8003ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	091b      	lsrs	r3, r3, #4
 8003c48:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4b26      	ldr	r3, [pc, #152]	; (8003ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003c4e:	4413      	add	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	461a      	mov	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a24      	ldr	r2, [pc, #144]	; (8003cec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003c5c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f003 031f 	and.w	r3, r3, #31
 8003c64:	2201      	movs	r2, #1
 8003c66:	409a      	lsls	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003c6c:	e024      	b.n	8003cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	3b10      	subs	r3, #16
 8003c76:	4a1e      	ldr	r2, [pc, #120]	; (8003cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003c78:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7c:	091b      	lsrs	r3, r3, #4
 8003c7e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4a1c      	ldr	r2, [pc, #112]	; (8003cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d806      	bhi.n	8003c96 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4a1b      	ldr	r2, [pc, #108]	; (8003cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d902      	bls.n	8003c96 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	3308      	adds	r3, #8
 8003c94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4b18      	ldr	r3, [pc, #96]	; (8003cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a16      	ldr	r2, [pc, #88]	; (8003d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003ca8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	409a      	lsls	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003cb8:	bf00      	nop
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	58025408 	.word	0x58025408
 8003cc8:	5802541c 	.word	0x5802541c
 8003ccc:	58025430 	.word	0x58025430
 8003cd0:	58025444 	.word	0x58025444
 8003cd4:	58025458 	.word	0x58025458
 8003cd8:	5802546c 	.word	0x5802546c
 8003cdc:	58025480 	.word	0x58025480
 8003ce0:	58025494 	.word	0x58025494
 8003ce4:	cccccccd 	.word	0xcccccccd
 8003ce8:	16009600 	.word	0x16009600
 8003cec:	58025880 	.word	0x58025880
 8003cf0:	aaaaaaab 	.word	0xaaaaaaab
 8003cf4:	400204b8 	.word	0x400204b8
 8003cf8:	4002040f 	.word	0x4002040f
 8003cfc:	10008200 	.word	0x10008200
 8003d00:	40020880 	.word	0x40020880

08003d04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d04a      	beq.n	8003db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d847      	bhi.n	8003db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a25      	ldr	r2, [pc, #148]	; (8003dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d022      	beq.n	8003d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a24      	ldr	r2, [pc, #144]	; (8003dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d01d      	beq.n	8003d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a22      	ldr	r2, [pc, #136]	; (8003dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d018      	beq.n	8003d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a21      	ldr	r2, [pc, #132]	; (8003dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d013      	beq.n	8003d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a1f      	ldr	r2, [pc, #124]	; (8003dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00e      	beq.n	8003d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a1e      	ldr	r2, [pc, #120]	; (8003dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d009      	beq.n	8003d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1c      	ldr	r2, [pc, #112]	; (8003dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d004      	beq.n	8003d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1b      	ldr	r2, [pc, #108]	; (8003dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d101      	bne.n	8003d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003d74:	2300      	movs	r3, #0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	461a      	mov	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a15      	ldr	r2, [pc, #84]	; (8003de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003d8c:	671a      	str	r2, [r3, #112]	; 0x70
 8003d8e:	e009      	b.n	8003da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4b14      	ldr	r3, [pc, #80]	; (8003de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	461a      	mov	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a11      	ldr	r2, [pc, #68]	; (8003de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003da2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	2201      	movs	r2, #1
 8003daa:	409a      	lsls	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003db0:	bf00      	nop
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	58025408 	.word	0x58025408
 8003dc0:	5802541c 	.word	0x5802541c
 8003dc4:	58025430 	.word	0x58025430
 8003dc8:	58025444 	.word	0x58025444
 8003dcc:	58025458 	.word	0x58025458
 8003dd0:	5802546c 	.word	0x5802546c
 8003dd4:	58025480 	.word	0x58025480
 8003dd8:	58025494 	.word	0x58025494
 8003ddc:	1600963f 	.word	0x1600963f
 8003de0:	58025940 	.word	0x58025940
 8003de4:	1000823f 	.word	0x1000823f
 8003de8:	40020940 	.word	0x40020940

08003dec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b089      	sub	sp, #36	; 0x24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003dfa:	4b89      	ldr	r3, [pc, #548]	; (8004020 <HAL_GPIO_Init+0x234>)
 8003dfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003dfe:	e194      	b.n	800412a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	2101      	movs	r1, #1
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 8186 	beq.w	8004124 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d005      	beq.n	8003e30 <HAL_GPIO_Init+0x44>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f003 0303 	and.w	r3, r3, #3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d130      	bne.n	8003e92 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4013      	ands	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e66:	2201      	movs	r2, #1
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4013      	ands	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	091b      	lsrs	r3, r3, #4
 8003e7c:	f003 0201 	and.w	r2, r3, #1
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d017      	beq.n	8003ece <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d123      	bne.n	8003f22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	08da      	lsrs	r2, r3, #3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3208      	adds	r2, #8
 8003ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	220f      	movs	r2, #15
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4013      	ands	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	08da      	lsrs	r2, r3, #3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3208      	adds	r2, #8
 8003f1c:	69b9      	ldr	r1, [r7, #24]
 8003f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	2203      	movs	r2, #3
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	43db      	mvns	r3, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4013      	ands	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f003 0203 	and.w	r2, r3, #3
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80e0 	beq.w	8004124 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f64:	4b2f      	ldr	r3, [pc, #188]	; (8004024 <HAL_GPIO_Init+0x238>)
 8003f66:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003f6a:	4a2e      	ldr	r2, [pc, #184]	; (8004024 <HAL_GPIO_Init+0x238>)
 8003f6c:	f043 0302 	orr.w	r3, r3, #2
 8003f70:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003f74:	4b2b      	ldr	r3, [pc, #172]	; (8004024 <HAL_GPIO_Init+0x238>)
 8003f76:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f82:	4a29      	ldr	r2, [pc, #164]	; (8004028 <HAL_GPIO_Init+0x23c>)
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	089b      	lsrs	r3, r3, #2
 8003f88:	3302      	adds	r3, #2
 8003f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	220f      	movs	r2, #15
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a20      	ldr	r2, [pc, #128]	; (800402c <HAL_GPIO_Init+0x240>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d052      	beq.n	8004054 <HAL_GPIO_Init+0x268>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a1f      	ldr	r2, [pc, #124]	; (8004030 <HAL_GPIO_Init+0x244>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d031      	beq.n	800401a <HAL_GPIO_Init+0x22e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a1e      	ldr	r2, [pc, #120]	; (8004034 <HAL_GPIO_Init+0x248>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d02b      	beq.n	8004016 <HAL_GPIO_Init+0x22a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a1d      	ldr	r2, [pc, #116]	; (8004038 <HAL_GPIO_Init+0x24c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d025      	beq.n	8004012 <HAL_GPIO_Init+0x226>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a1c      	ldr	r2, [pc, #112]	; (800403c <HAL_GPIO_Init+0x250>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d01f      	beq.n	800400e <HAL_GPIO_Init+0x222>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a1b      	ldr	r2, [pc, #108]	; (8004040 <HAL_GPIO_Init+0x254>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d019      	beq.n	800400a <HAL_GPIO_Init+0x21e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a1a      	ldr	r2, [pc, #104]	; (8004044 <HAL_GPIO_Init+0x258>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d013      	beq.n	8004006 <HAL_GPIO_Init+0x21a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a19      	ldr	r2, [pc, #100]	; (8004048 <HAL_GPIO_Init+0x25c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00d      	beq.n	8004002 <HAL_GPIO_Init+0x216>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a18      	ldr	r2, [pc, #96]	; (800404c <HAL_GPIO_Init+0x260>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d007      	beq.n	8003ffe <HAL_GPIO_Init+0x212>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a17      	ldr	r2, [pc, #92]	; (8004050 <HAL_GPIO_Init+0x264>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d101      	bne.n	8003ffa <HAL_GPIO_Init+0x20e>
 8003ff6:	2309      	movs	r3, #9
 8003ff8:	e02d      	b.n	8004056 <HAL_GPIO_Init+0x26a>
 8003ffa:	230a      	movs	r3, #10
 8003ffc:	e02b      	b.n	8004056 <HAL_GPIO_Init+0x26a>
 8003ffe:	2308      	movs	r3, #8
 8004000:	e029      	b.n	8004056 <HAL_GPIO_Init+0x26a>
 8004002:	2307      	movs	r3, #7
 8004004:	e027      	b.n	8004056 <HAL_GPIO_Init+0x26a>
 8004006:	2306      	movs	r3, #6
 8004008:	e025      	b.n	8004056 <HAL_GPIO_Init+0x26a>
 800400a:	2305      	movs	r3, #5
 800400c:	e023      	b.n	8004056 <HAL_GPIO_Init+0x26a>
 800400e:	2304      	movs	r3, #4
 8004010:	e021      	b.n	8004056 <HAL_GPIO_Init+0x26a>
 8004012:	2303      	movs	r3, #3
 8004014:	e01f      	b.n	8004056 <HAL_GPIO_Init+0x26a>
 8004016:	2302      	movs	r3, #2
 8004018:	e01d      	b.n	8004056 <HAL_GPIO_Init+0x26a>
 800401a:	2301      	movs	r3, #1
 800401c:	e01b      	b.n	8004056 <HAL_GPIO_Init+0x26a>
 800401e:	bf00      	nop
 8004020:	58000080 	.word	0x58000080
 8004024:	58024400 	.word	0x58024400
 8004028:	58000400 	.word	0x58000400
 800402c:	58020000 	.word	0x58020000
 8004030:	58020400 	.word	0x58020400
 8004034:	58020800 	.word	0x58020800
 8004038:	58020c00 	.word	0x58020c00
 800403c:	58021000 	.word	0x58021000
 8004040:	58021400 	.word	0x58021400
 8004044:	58021800 	.word	0x58021800
 8004048:	58021c00 	.word	0x58021c00
 800404c:	58022000 	.word	0x58022000
 8004050:	58022400 	.word	0x58022400
 8004054:	2300      	movs	r3, #0
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	f002 0203 	and.w	r2, r2, #3
 800405c:	0092      	lsls	r2, r2, #2
 800405e:	4093      	lsls	r3, r2
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4313      	orrs	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004066:	4938      	ldr	r1, [pc, #224]	; (8004148 <HAL_GPIO_Init+0x35c>)
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	089b      	lsrs	r3, r3, #2
 800406c:	3302      	adds	r3, #2
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	43db      	mvns	r3, r3
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	4013      	ands	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	4313      	orrs	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800409a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80040a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	43db      	mvns	r3, r3
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4013      	ands	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80040c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	43db      	mvns	r3, r3
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4013      	ands	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	43db      	mvns	r3, r3
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	4013      	ands	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	3301      	adds	r3, #1
 8004128:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	fa22 f303 	lsr.w	r3, r2, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	f47f ae63 	bne.w	8003e00 <HAL_GPIO_Init+0x14>
  }
}
 800413a:	bf00      	nop
 800413c:	bf00      	nop
 800413e:	3724      	adds	r7, #36	; 0x24
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	58000400 	.word	0x58000400

0800414c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	807b      	strh	r3, [r7, #2]
 8004158:	4613      	mov	r3, r2
 800415a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800415c:	787b      	ldrb	r3, [r7, #1]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004162:	887a      	ldrh	r2, [r7, #2]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004168:	e003      	b.n	8004172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800416a:	887b      	ldrh	r3, [r7, #2]
 800416c:	041a      	lsls	r2, r3, #16
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	619a      	str	r2, [r3, #24]
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800417e:	b480      	push	{r7}
 8004180:	b085      	sub	sp, #20
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	460b      	mov	r3, r1
 8004188:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004190:	887a      	ldrh	r2, [r7, #2]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4013      	ands	r3, r2
 8004196:	041a      	lsls	r2, r3, #16
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	43d9      	mvns	r1, r3
 800419c:	887b      	ldrh	r3, [r7, #2]
 800419e:	400b      	ands	r3, r1
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	619a      	str	r2, [r3, #24]
}
 80041a6:	bf00      	nop
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
	...

080041b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80041bc:	4b29      	ldr	r3, [pc, #164]	; (8004264 <HAL_PWREx_ConfigSupply+0xb0>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	2b06      	cmp	r3, #6
 80041c6:	d00a      	beq.n	80041de <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80041c8:	4b26      	ldr	r3, [pc, #152]	; (8004264 <HAL_PWREx_ConfigSupply+0xb0>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d001      	beq.n	80041da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e040      	b.n	800425c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	e03e      	b.n	800425c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80041de:	4b21      	ldr	r3, [pc, #132]	; (8004264 <HAL_PWREx_ConfigSupply+0xb0>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80041e6:	491f      	ldr	r1, [pc, #124]	; (8004264 <HAL_PWREx_ConfigSupply+0xb0>)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80041ee:	f7fd f857 	bl	80012a0 <HAL_GetTick>
 80041f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80041f4:	e009      	b.n	800420a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80041f6:	f7fd f853 	bl	80012a0 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004204:	d901      	bls.n	800420a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e028      	b.n	800425c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800420a:	4b16      	ldr	r3, [pc, #88]	; (8004264 <HAL_PWREx_ConfigSupply+0xb0>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004216:	d1ee      	bne.n	80041f6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b1e      	cmp	r3, #30
 800421c:	d008      	beq.n	8004230 <HAL_PWREx_ConfigSupply+0x7c>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b2e      	cmp	r3, #46	; 0x2e
 8004222:	d005      	beq.n	8004230 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b1d      	cmp	r3, #29
 8004228:	d002      	beq.n	8004230 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b2d      	cmp	r3, #45	; 0x2d
 800422e:	d114      	bne.n	800425a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004230:	f7fd f836 	bl	80012a0 <HAL_GetTick>
 8004234:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004236:	e009      	b.n	800424c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004238:	f7fd f832 	bl	80012a0 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004246:	d901      	bls.n	800424c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e007      	b.n	800425c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <HAL_PWREx_ConfigSupply+0xb0>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004258:	d1ee      	bne.n	8004238 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	58024800 	.word	0x58024800

08004268 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b08c      	sub	sp, #48	; 0x30
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d102      	bne.n	800427c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	f000 bc1f 	b.w	8004aba <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80b3 	beq.w	80043f0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800428a:	4b95      	ldr	r3, [pc, #596]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004294:	4b92      	ldr	r3, [pc, #584]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 8004296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004298:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	2b10      	cmp	r3, #16
 800429e:	d007      	beq.n	80042b0 <HAL_RCC_OscConfig+0x48>
 80042a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a2:	2b18      	cmp	r3, #24
 80042a4:	d112      	bne.n	80042cc <HAL_RCC_OscConfig+0x64>
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d10d      	bne.n	80042cc <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b0:	4b8b      	ldr	r3, [pc, #556]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 8098 	beq.w	80043ee <HAL_RCC_OscConfig+0x186>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f040 8093 	bne.w	80043ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e3f6      	b.n	8004aba <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d4:	d106      	bne.n	80042e4 <HAL_RCC_OscConfig+0x7c>
 80042d6:	4b82      	ldr	r3, [pc, #520]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a81      	ldr	r2, [pc, #516]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 80042dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	e058      	b.n	8004396 <HAL_RCC_OscConfig+0x12e>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d112      	bne.n	8004312 <HAL_RCC_OscConfig+0xaa>
 80042ec:	4b7c      	ldr	r3, [pc, #496]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a7b      	ldr	r2, [pc, #492]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 80042f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	4b79      	ldr	r3, [pc, #484]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a78      	ldr	r2, [pc, #480]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 80042fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	4b76      	ldr	r3, [pc, #472]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a75      	ldr	r2, [pc, #468]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 800430a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	e041      	b.n	8004396 <HAL_RCC_OscConfig+0x12e>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800431a:	d112      	bne.n	8004342 <HAL_RCC_OscConfig+0xda>
 800431c:	4b70      	ldr	r3, [pc, #448]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a6f      	ldr	r2, [pc, #444]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 8004322:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	4b6d      	ldr	r3, [pc, #436]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a6c      	ldr	r2, [pc, #432]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 800432e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	4b6a      	ldr	r3, [pc, #424]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a69      	ldr	r2, [pc, #420]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 800433a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	e029      	b.n	8004396 <HAL_RCC_OscConfig+0x12e>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800434a:	d112      	bne.n	8004372 <HAL_RCC_OscConfig+0x10a>
 800434c:	4b64      	ldr	r3, [pc, #400]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a63      	ldr	r2, [pc, #396]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 8004352:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	4b61      	ldr	r3, [pc, #388]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a60      	ldr	r2, [pc, #384]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 800435e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	4b5e      	ldr	r3, [pc, #376]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a5d      	ldr	r2, [pc, #372]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 800436a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	e011      	b.n	8004396 <HAL_RCC_OscConfig+0x12e>
 8004372:	4b5b      	ldr	r3, [pc, #364]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a5a      	ldr	r2, [pc, #360]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 8004378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	4b58      	ldr	r3, [pc, #352]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a57      	ldr	r2, [pc, #348]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 8004384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	4b55      	ldr	r3, [pc, #340]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a54      	ldr	r2, [pc, #336]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 8004390:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004394:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d013      	beq.n	80043c6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439e:	f7fc ff7f 	bl	80012a0 <HAL_GetTick>
 80043a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a6:	f7fc ff7b 	bl	80012a0 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b64      	cmp	r3, #100	; 0x64
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e380      	b.n	8004aba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043b8:	4b49      	ldr	r3, [pc, #292]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f0      	beq.n	80043a6 <HAL_RCC_OscConfig+0x13e>
 80043c4:	e014      	b.n	80043f0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c6:	f7fc ff6b 	bl	80012a0 <HAL_GetTick>
 80043ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ce:	f7fc ff67 	bl	80012a0 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b64      	cmp	r3, #100	; 0x64
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e36c      	b.n	8004aba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043e0:	4b3f      	ldr	r3, [pc, #252]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1f0      	bne.n	80043ce <HAL_RCC_OscConfig+0x166>
 80043ec:	e000      	b.n	80043f0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 808c 	beq.w	8004516 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043fe:	4b38      	ldr	r3, [pc, #224]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004406:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004408:	4b35      	ldr	r3, [pc, #212]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 800440a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d007      	beq.n	8004424 <HAL_RCC_OscConfig+0x1bc>
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	2b18      	cmp	r3, #24
 8004418:	d137      	bne.n	800448a <HAL_RCC_OscConfig+0x222>
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d132      	bne.n	800448a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004424:	4b2e      	ldr	r3, [pc, #184]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_RCC_OscConfig+0x1d4>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e33e      	b.n	8004aba <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800443c:	4b28      	ldr	r3, [pc, #160]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f023 0219 	bic.w	r2, r3, #25
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	4925      	ldr	r1, [pc, #148]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 800444a:	4313      	orrs	r3, r2
 800444c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444e:	f7fc ff27 	bl	80012a0 <HAL_GetTick>
 8004452:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004456:	f7fc ff23 	bl	80012a0 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e328      	b.n	8004aba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004468:	4b1d      	ldr	r3, [pc, #116]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004474:	4b1a      	ldr	r3, [pc, #104]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	061b      	lsls	r3, r3, #24
 8004482:	4917      	ldr	r1, [pc, #92]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 8004484:	4313      	orrs	r3, r2
 8004486:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004488:	e045      	b.n	8004516 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d028      	beq.n	80044e4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004492:	4b13      	ldr	r3, [pc, #76]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f023 0219 	bic.w	r2, r3, #25
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	4910      	ldr	r1, [pc, #64]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a4:	f7fc fefc 	bl	80012a0 <HAL_GetTick>
 80044a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ac:	f7fc fef8 	bl	80012a0 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e2fd      	b.n	8004aba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044be:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f0      	beq.n	80044ac <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ca:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	061b      	lsls	r3, r3, #24
 80044d8:	4901      	ldr	r1, [pc, #4]	; (80044e0 <HAL_RCC_OscConfig+0x278>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	604b      	str	r3, [r1, #4]
 80044de:	e01a      	b.n	8004516 <HAL_RCC_OscConfig+0x2ae>
 80044e0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044e4:	4b97      	ldr	r3, [pc, #604]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a96      	ldr	r2, [pc, #600]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7fc fed6 	bl	80012a0 <HAL_GetTick>
 80044f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044f8:	f7fc fed2 	bl	80012a0 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e2d7      	b.n	8004aba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800450a:	4b8e      	ldr	r3, [pc, #568]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f0      	bne.n	80044f8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2b00      	cmp	r3, #0
 8004520:	d06a      	beq.n	80045f8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004522:	4b88      	ldr	r3, [pc, #544]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800452a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800452c:	4b85      	ldr	r3, [pc, #532]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 800452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004530:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b08      	cmp	r3, #8
 8004536:	d007      	beq.n	8004548 <HAL_RCC_OscConfig+0x2e0>
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	2b18      	cmp	r3, #24
 800453c:	d11b      	bne.n	8004576 <HAL_RCC_OscConfig+0x30e>
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	2b01      	cmp	r3, #1
 8004546:	d116      	bne.n	8004576 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004548:	4b7e      	ldr	r3, [pc, #504]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <HAL_RCC_OscConfig+0x2f8>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	2b80      	cmp	r3, #128	; 0x80
 800455a:	d001      	beq.n	8004560 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e2ac      	b.n	8004aba <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004560:	4b78      	ldr	r3, [pc, #480]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	061b      	lsls	r3, r3, #24
 800456e:	4975      	ldr	r1, [pc, #468]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 8004570:	4313      	orrs	r3, r2
 8004572:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004574:	e040      	b.n	80045f8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d023      	beq.n	80045c6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800457e:	4b71      	ldr	r3, [pc, #452]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a70      	ldr	r2, [pc, #448]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 8004584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458a:	f7fc fe89 	bl	80012a0 <HAL_GetTick>
 800458e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004590:	e008      	b.n	80045a4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004592:	f7fc fe85 	bl	80012a0 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e28a      	b.n	8004aba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045a4:	4b67      	ldr	r3, [pc, #412]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0f0      	beq.n	8004592 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045b0:	4b64      	ldr	r3, [pc, #400]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	061b      	lsls	r3, r3, #24
 80045be:	4961      	ldr	r1, [pc, #388]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	60cb      	str	r3, [r1, #12]
 80045c4:	e018      	b.n	80045f8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80045c6:	4b5f      	ldr	r3, [pc, #380]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a5e      	ldr	r2, [pc, #376]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 80045cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d2:	f7fc fe65 	bl	80012a0 <HAL_GetTick>
 80045d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80045da:	f7fc fe61 	bl	80012a0 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e266      	b.n	8004aba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045ec:	4b55      	ldr	r3, [pc, #340]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1f0      	bne.n	80045da <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0308 	and.w	r3, r3, #8
 8004600:	2b00      	cmp	r3, #0
 8004602:	d036      	beq.n	8004672 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d019      	beq.n	8004640 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800460c:	4b4d      	ldr	r3, [pc, #308]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 800460e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004610:	4a4c      	ldr	r2, [pc, #304]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 8004612:	f043 0301 	orr.w	r3, r3, #1
 8004616:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004618:	f7fc fe42 	bl	80012a0 <HAL_GetTick>
 800461c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004620:	f7fc fe3e 	bl	80012a0 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e243      	b.n	8004aba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004632:	4b44      	ldr	r3, [pc, #272]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 8004634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0f0      	beq.n	8004620 <HAL_RCC_OscConfig+0x3b8>
 800463e:	e018      	b.n	8004672 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004640:	4b40      	ldr	r3, [pc, #256]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 8004642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004644:	4a3f      	ldr	r2, [pc, #252]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 8004646:	f023 0301 	bic.w	r3, r3, #1
 800464a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464c:	f7fc fe28 	bl	80012a0 <HAL_GetTick>
 8004650:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004654:	f7fc fe24 	bl	80012a0 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e229      	b.n	8004aba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004666:	4b37      	ldr	r3, [pc, #220]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 8004668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f0      	bne.n	8004654 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d036      	beq.n	80046ec <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d019      	beq.n	80046ba <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004686:	4b2f      	ldr	r3, [pc, #188]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a2e      	ldr	r2, [pc, #184]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 800468c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004690:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004692:	f7fc fe05 	bl	80012a0 <HAL_GetTick>
 8004696:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800469a:	f7fc fe01 	bl	80012a0 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e206      	b.n	8004aba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046ac:	4b25      	ldr	r3, [pc, #148]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x432>
 80046b8:	e018      	b.n	80046ec <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046ba:	4b22      	ldr	r3, [pc, #136]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a21      	ldr	r2, [pc, #132]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 80046c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80046c6:	f7fc fdeb 	bl	80012a0 <HAL_GetTick>
 80046ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046ce:	f7fc fde7 	bl	80012a0 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e1ec      	b.n	8004aba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80046e0:	4b18      	ldr	r3, [pc, #96]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1f0      	bne.n	80046ce <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80af 	beq.w	8004858 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80046fa:	4b13      	ldr	r3, [pc, #76]	; (8004748 <HAL_RCC_OscConfig+0x4e0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a12      	ldr	r2, [pc, #72]	; (8004748 <HAL_RCC_OscConfig+0x4e0>)
 8004700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004704:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004706:	f7fc fdcb 	bl	80012a0 <HAL_GetTick>
 800470a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800470e:	f7fc fdc7 	bl	80012a0 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b64      	cmp	r3, #100	; 0x64
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e1cc      	b.n	8004aba <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004720:	4b09      	ldr	r3, [pc, #36]	; (8004748 <HAL_RCC_OscConfig+0x4e0>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0f0      	beq.n	800470e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d10b      	bne.n	800474c <HAL_RCC_OscConfig+0x4e4>
 8004734:	4b03      	ldr	r3, [pc, #12]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 8004736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004738:	4a02      	ldr	r2, [pc, #8]	; (8004744 <HAL_RCC_OscConfig+0x4dc>)
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	6713      	str	r3, [r2, #112]	; 0x70
 8004740:	e05b      	b.n	80047fa <HAL_RCC_OscConfig+0x592>
 8004742:	bf00      	nop
 8004744:	58024400 	.word	0x58024400
 8004748:	58024800 	.word	0x58024800
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d112      	bne.n	800477a <HAL_RCC_OscConfig+0x512>
 8004754:	4b9d      	ldr	r3, [pc, #628]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 8004756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004758:	4a9c      	ldr	r2, [pc, #624]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 800475a:	f023 0301 	bic.w	r3, r3, #1
 800475e:	6713      	str	r3, [r2, #112]	; 0x70
 8004760:	4b9a      	ldr	r3, [pc, #616]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 8004762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004764:	4a99      	ldr	r2, [pc, #612]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 8004766:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800476a:	6713      	str	r3, [r2, #112]	; 0x70
 800476c:	4b97      	ldr	r3, [pc, #604]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004770:	4a96      	ldr	r2, [pc, #600]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 8004772:	f023 0304 	bic.w	r3, r3, #4
 8004776:	6713      	str	r3, [r2, #112]	; 0x70
 8004778:	e03f      	b.n	80047fa <HAL_RCC_OscConfig+0x592>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b05      	cmp	r3, #5
 8004780:	d112      	bne.n	80047a8 <HAL_RCC_OscConfig+0x540>
 8004782:	4b92      	ldr	r3, [pc, #584]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004786:	4a91      	ldr	r2, [pc, #580]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 8004788:	f043 0304 	orr.w	r3, r3, #4
 800478c:	6713      	str	r3, [r2, #112]	; 0x70
 800478e:	4b8f      	ldr	r3, [pc, #572]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004792:	4a8e      	ldr	r2, [pc, #568]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 8004794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004798:	6713      	str	r3, [r2, #112]	; 0x70
 800479a:	4b8c      	ldr	r3, [pc, #560]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 800479c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479e:	4a8b      	ldr	r2, [pc, #556]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	6713      	str	r3, [r2, #112]	; 0x70
 80047a6:	e028      	b.n	80047fa <HAL_RCC_OscConfig+0x592>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2b85      	cmp	r3, #133	; 0x85
 80047ae:	d112      	bne.n	80047d6 <HAL_RCC_OscConfig+0x56e>
 80047b0:	4b86      	ldr	r3, [pc, #536]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	4a85      	ldr	r2, [pc, #532]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 80047b6:	f043 0304 	orr.w	r3, r3, #4
 80047ba:	6713      	str	r3, [r2, #112]	; 0x70
 80047bc:	4b83      	ldr	r3, [pc, #524]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 80047be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c0:	4a82      	ldr	r2, [pc, #520]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 80047c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c6:	6713      	str	r3, [r2, #112]	; 0x70
 80047c8:	4b80      	ldr	r3, [pc, #512]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 80047ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047cc:	4a7f      	ldr	r2, [pc, #508]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 80047ce:	f043 0301 	orr.w	r3, r3, #1
 80047d2:	6713      	str	r3, [r2, #112]	; 0x70
 80047d4:	e011      	b.n	80047fa <HAL_RCC_OscConfig+0x592>
 80047d6:	4b7d      	ldr	r3, [pc, #500]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047da:	4a7c      	ldr	r2, [pc, #496]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 80047dc:	f023 0301 	bic.w	r3, r3, #1
 80047e0:	6713      	str	r3, [r2, #112]	; 0x70
 80047e2:	4b7a      	ldr	r3, [pc, #488]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e6:	4a79      	ldr	r2, [pc, #484]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 80047e8:	f023 0304 	bic.w	r3, r3, #4
 80047ec:	6713      	str	r3, [r2, #112]	; 0x70
 80047ee:	4b77      	ldr	r3, [pc, #476]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 80047f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f2:	4a76      	ldr	r2, [pc, #472]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 80047f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d015      	beq.n	800482e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004802:	f7fc fd4d 	bl	80012a0 <HAL_GetTick>
 8004806:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004808:	e00a      	b.n	8004820 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480a:	f7fc fd49 	bl	80012a0 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	f241 3288 	movw	r2, #5000	; 0x1388
 8004818:	4293      	cmp	r3, r2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e14c      	b.n	8004aba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004820:	4b6a      	ldr	r3, [pc, #424]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0ee      	beq.n	800480a <HAL_RCC_OscConfig+0x5a2>
 800482c:	e014      	b.n	8004858 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482e:	f7fc fd37 	bl	80012a0 <HAL_GetTick>
 8004832:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004834:	e00a      	b.n	800484c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004836:	f7fc fd33 	bl	80012a0 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	f241 3288 	movw	r2, #5000	; 0x1388
 8004844:	4293      	cmp	r3, r2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e136      	b.n	8004aba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800484c:	4b5f      	ldr	r3, [pc, #380]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 800484e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1ee      	bne.n	8004836 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 812b 	beq.w	8004ab8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004862:	4b5a      	ldr	r3, [pc, #360]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800486a:	2b18      	cmp	r3, #24
 800486c:	f000 80bb 	beq.w	80049e6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	2b02      	cmp	r3, #2
 8004876:	f040 8095 	bne.w	80049a4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800487a:	4b54      	ldr	r3, [pc, #336]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a53      	ldr	r2, [pc, #332]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 8004880:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004886:	f7fc fd0b 	bl	80012a0 <HAL_GetTick>
 800488a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800488c:	e008      	b.n	80048a0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800488e:	f7fc fd07 	bl	80012a0 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e10c      	b.n	8004aba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048a0:	4b4a      	ldr	r3, [pc, #296]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1f0      	bne.n	800488e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ac:	4b47      	ldr	r3, [pc, #284]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 80048ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048b0:	4b47      	ldr	r3, [pc, #284]	; (80049d0 <HAL_RCC_OscConfig+0x768>)
 80048b2:	4013      	ands	r3, r2
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80048bc:	0112      	lsls	r2, r2, #4
 80048be:	430a      	orrs	r2, r1
 80048c0:	4942      	ldr	r1, [pc, #264]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	628b      	str	r3, [r1, #40]	; 0x28
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	3b01      	subs	r3, #1
 80048cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d4:	3b01      	subs	r3, #1
 80048d6:	025b      	lsls	r3, r3, #9
 80048d8:	b29b      	uxth	r3, r3
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e0:	3b01      	subs	r3, #1
 80048e2:	041b      	lsls	r3, r3, #16
 80048e4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ee:	3b01      	subs	r3, #1
 80048f0:	061b      	lsls	r3, r3, #24
 80048f2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048f6:	4935      	ldr	r1, [pc, #212]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80048fc:	4b33      	ldr	r3, [pc, #204]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	4a32      	ldr	r2, [pc, #200]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 8004902:	f023 0301 	bic.w	r3, r3, #1
 8004906:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004908:	4b30      	ldr	r3, [pc, #192]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 800490a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800490c:	4b31      	ldr	r3, [pc, #196]	; (80049d4 <HAL_RCC_OscConfig+0x76c>)
 800490e:	4013      	ands	r3, r2
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004914:	00d2      	lsls	r2, r2, #3
 8004916:	492d      	ldr	r1, [pc, #180]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 8004918:	4313      	orrs	r3, r2
 800491a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800491c:	4b2b      	ldr	r3, [pc, #172]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 800491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004920:	f023 020c 	bic.w	r2, r3, #12
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	4928      	ldr	r1, [pc, #160]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 800492a:	4313      	orrs	r3, r2
 800492c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800492e:	4b27      	ldr	r3, [pc, #156]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	f023 0202 	bic.w	r2, r3, #2
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493a:	4924      	ldr	r1, [pc, #144]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 800493c:	4313      	orrs	r3, r2
 800493e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004940:	4b22      	ldr	r3, [pc, #136]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	4a21      	ldr	r2, [pc, #132]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 8004946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800494a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800494c:	4b1f      	ldr	r3, [pc, #124]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	4a1e      	ldr	r2, [pc, #120]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 8004952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004956:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004958:	4b1c      	ldr	r3, [pc, #112]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 800495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495c:	4a1b      	ldr	r2, [pc, #108]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 800495e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004962:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004964:	4b19      	ldr	r3, [pc, #100]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	4a18      	ldr	r2, [pc, #96]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 800496a:	f043 0301 	orr.w	r3, r3, #1
 800496e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004970:	4b16      	ldr	r3, [pc, #88]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a15      	ldr	r2, [pc, #84]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 8004976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800497a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497c:	f7fc fc90 	bl	80012a0 <HAL_GetTick>
 8004980:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004984:	f7fc fc8c 	bl	80012a0 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e091      	b.n	8004aba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004996:	4b0d      	ldr	r3, [pc, #52]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0f0      	beq.n	8004984 <HAL_RCC_OscConfig+0x71c>
 80049a2:	e089      	b.n	8004ab8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a4:	4b09      	ldr	r3, [pc, #36]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a08      	ldr	r2, [pc, #32]	; (80049cc <HAL_RCC_OscConfig+0x764>)
 80049aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b0:	f7fc fc76 	bl	80012a0 <HAL_GetTick>
 80049b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049b6:	e00f      	b.n	80049d8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b8:	f7fc fc72 	bl	80012a0 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d908      	bls.n	80049d8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e077      	b.n	8004aba <HAL_RCC_OscConfig+0x852>
 80049ca:	bf00      	nop
 80049cc:	58024400 	.word	0x58024400
 80049d0:	fffffc0c 	.word	0xfffffc0c
 80049d4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049d8:	4b3a      	ldr	r3, [pc, #232]	; (8004ac4 <HAL_RCC_OscConfig+0x85c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e9      	bne.n	80049b8 <HAL_RCC_OscConfig+0x750>
 80049e4:	e068      	b.n	8004ab8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80049e6:	4b37      	ldr	r3, [pc, #220]	; (8004ac4 <HAL_RCC_OscConfig+0x85c>)
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80049ec:	4b35      	ldr	r3, [pc, #212]	; (8004ac4 <HAL_RCC_OscConfig+0x85c>)
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d031      	beq.n	8004a5e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f003 0203 	and.w	r2, r3, #3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d12a      	bne.n	8004a5e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	091b      	lsrs	r3, r3, #4
 8004a0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d122      	bne.n	8004a5e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d11a      	bne.n	8004a5e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	0a5b      	lsrs	r3, r3, #9
 8004a2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a34:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d111      	bne.n	8004a5e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	0c1b      	lsrs	r3, r3, #16
 8004a3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d108      	bne.n	8004a5e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	0e1b      	lsrs	r3, r3, #24
 8004a50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a58:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d001      	beq.n	8004a62 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e02b      	b.n	8004aba <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004a62:	4b18      	ldr	r3, [pc, #96]	; (8004ac4 <HAL_RCC_OscConfig+0x85c>)
 8004a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a66:	08db      	lsrs	r3, r3, #3
 8004a68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a6c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d01f      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004a78:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <HAL_RCC_OscConfig+0x85c>)
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	4a11      	ldr	r2, [pc, #68]	; (8004ac4 <HAL_RCC_OscConfig+0x85c>)
 8004a7e:	f023 0301 	bic.w	r3, r3, #1
 8004a82:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a84:	f7fc fc0c 	bl	80012a0 <HAL_GetTick>
 8004a88:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004a8a:	bf00      	nop
 8004a8c:	f7fc fc08 	bl	80012a0 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d0f9      	beq.n	8004a8c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a98:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <HAL_RCC_OscConfig+0x85c>)
 8004a9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <HAL_RCC_OscConfig+0x860>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004aa4:	00d2      	lsls	r2, r2, #3
 8004aa6:	4907      	ldr	r1, [pc, #28]	; (8004ac4 <HAL_RCC_OscConfig+0x85c>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004aac:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <HAL_RCC_OscConfig+0x85c>)
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	4a04      	ldr	r2, [pc, #16]	; (8004ac4 <HAL_RCC_OscConfig+0x85c>)
 8004ab2:	f043 0301 	orr.w	r3, r3, #1
 8004ab6:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3730      	adds	r7, #48	; 0x30
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	58024400 	.word	0x58024400
 8004ac8:	ffff0007 	.word	0xffff0007

08004acc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e19c      	b.n	8004e1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ae0:	4b8a      	ldr	r3, [pc, #552]	; (8004d0c <HAL_RCC_ClockConfig+0x240>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 030f 	and.w	r3, r3, #15
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d910      	bls.n	8004b10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aee:	4b87      	ldr	r3, [pc, #540]	; (8004d0c <HAL_RCC_ClockConfig+0x240>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f023 020f 	bic.w	r2, r3, #15
 8004af6:	4985      	ldr	r1, [pc, #532]	; (8004d0c <HAL_RCC_ClockConfig+0x240>)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afe:	4b83      	ldr	r3, [pc, #524]	; (8004d0c <HAL_RCC_ClockConfig+0x240>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d001      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e184      	b.n	8004e1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d010      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	4b7b      	ldr	r3, [pc, #492]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d908      	bls.n	8004b3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b2c:	4b78      	ldr	r3, [pc, #480]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	4975      	ldr	r1, [pc, #468]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d010      	beq.n	8004b6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	695a      	ldr	r2, [r3, #20]
 8004b4e:	4b70      	ldr	r3, [pc, #448]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d908      	bls.n	8004b6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b5a:	4b6d      	ldr	r3, [pc, #436]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	496a      	ldr	r1, [pc, #424]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0310 	and.w	r3, r3, #16
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d010      	beq.n	8004b9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699a      	ldr	r2, [r3, #24]
 8004b7c:	4b64      	ldr	r3, [pc, #400]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d908      	bls.n	8004b9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b88:	4b61      	ldr	r3, [pc, #388]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	495e      	ldr	r1, [pc, #376]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d010      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69da      	ldr	r2, [r3, #28]
 8004baa:	4b59      	ldr	r3, [pc, #356]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d908      	bls.n	8004bc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004bb6:	4b56      	ldr	r3, [pc, #344]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	4953      	ldr	r1, [pc, #332]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d010      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	4b4d      	ldr	r3, [pc, #308]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	f003 030f 	and.w	r3, r3, #15
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d908      	bls.n	8004bf6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004be4:	4b4a      	ldr	r3, [pc, #296]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	f023 020f 	bic.w	r2, r3, #15
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	4947      	ldr	r1, [pc, #284]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d055      	beq.n	8004cae <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004c02:	4b43      	ldr	r3, [pc, #268]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	4940      	ldr	r1, [pc, #256]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d107      	bne.n	8004c2c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c1c:	4b3c      	ldr	r3, [pc, #240]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d121      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e0f6      	b.n	8004e1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d107      	bne.n	8004c44 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c34:	4b36      	ldr	r3, [pc, #216]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d115      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0ea      	b.n	8004e1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d107      	bne.n	8004c5c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c4c:	4b30      	ldr	r3, [pc, #192]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d109      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e0de      	b.n	8004e1a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c5c:	4b2c      	ldr	r3, [pc, #176]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0d6      	b.n	8004e1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c6c:	4b28      	ldr	r3, [pc, #160]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	f023 0207 	bic.w	r2, r3, #7
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	4925      	ldr	r1, [pc, #148]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c7e:	f7fc fb0f 	bl	80012a0 <HAL_GetTick>
 8004c82:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c84:	e00a      	b.n	8004c9c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c86:	f7fc fb0b 	bl	80012a0 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e0be      	b.n	8004e1a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9c:	4b1c      	ldr	r3, [pc, #112]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d1eb      	bne.n	8004c86 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d010      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	4b14      	ldr	r3, [pc, #80]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d208      	bcs.n	8004cdc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cca:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f023 020f 	bic.w	r2, r3, #15
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	490e      	ldr	r1, [pc, #56]	; (8004d10 <HAL_RCC_ClockConfig+0x244>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cdc:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <HAL_RCC_ClockConfig+0x240>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 030f 	and.w	r3, r3, #15
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d214      	bcs.n	8004d14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cea:	4b08      	ldr	r3, [pc, #32]	; (8004d0c <HAL_RCC_ClockConfig+0x240>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f023 020f 	bic.w	r2, r3, #15
 8004cf2:	4906      	ldr	r1, [pc, #24]	; (8004d0c <HAL_RCC_ClockConfig+0x240>)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfa:	4b04      	ldr	r3, [pc, #16]	; (8004d0c <HAL_RCC_ClockConfig+0x240>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d005      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e086      	b.n	8004e1a <HAL_RCC_ClockConfig+0x34e>
 8004d0c:	52002000 	.word	0x52002000
 8004d10:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d010      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	4b3f      	ldr	r3, [pc, #252]	; (8004e24 <HAL_RCC_ClockConfig+0x358>)
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d208      	bcs.n	8004d42 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d30:	4b3c      	ldr	r3, [pc, #240]	; (8004e24 <HAL_RCC_ClockConfig+0x358>)
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	4939      	ldr	r1, [pc, #228]	; (8004e24 <HAL_RCC_ClockConfig+0x358>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d010      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695a      	ldr	r2, [r3, #20]
 8004d52:	4b34      	ldr	r3, [pc, #208]	; (8004e24 <HAL_RCC_ClockConfig+0x358>)
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d208      	bcs.n	8004d70 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d5e:	4b31      	ldr	r3, [pc, #196]	; (8004e24 <HAL_RCC_ClockConfig+0x358>)
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	492e      	ldr	r1, [pc, #184]	; (8004e24 <HAL_RCC_ClockConfig+0x358>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d010      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699a      	ldr	r2, [r3, #24]
 8004d80:	4b28      	ldr	r3, [pc, #160]	; (8004e24 <HAL_RCC_ClockConfig+0x358>)
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d208      	bcs.n	8004d9e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d8c:	4b25      	ldr	r3, [pc, #148]	; (8004e24 <HAL_RCC_ClockConfig+0x358>)
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	4922      	ldr	r1, [pc, #136]	; (8004e24 <HAL_RCC_ClockConfig+0x358>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0320 	and.w	r3, r3, #32
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d010      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69da      	ldr	r2, [r3, #28]
 8004dae:	4b1d      	ldr	r3, [pc, #116]	; (8004e24 <HAL_RCC_ClockConfig+0x358>)
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d208      	bcs.n	8004dcc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004dba:	4b1a      	ldr	r3, [pc, #104]	; (8004e24 <HAL_RCC_ClockConfig+0x358>)
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	4917      	ldr	r1, [pc, #92]	; (8004e24 <HAL_RCC_ClockConfig+0x358>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004dcc:	f000 f834 	bl	8004e38 <HAL_RCC_GetSysClockFreq>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	4b14      	ldr	r3, [pc, #80]	; (8004e24 <HAL_RCC_ClockConfig+0x358>)
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	0a1b      	lsrs	r3, r3, #8
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	4912      	ldr	r1, [pc, #72]	; (8004e28 <HAL_RCC_ClockConfig+0x35c>)
 8004dde:	5ccb      	ldrb	r3, [r1, r3]
 8004de0:	f003 031f 	and.w	r3, r3, #31
 8004de4:	fa22 f303 	lsr.w	r3, r2, r3
 8004de8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004dea:	4b0e      	ldr	r3, [pc, #56]	; (8004e24 <HAL_RCC_ClockConfig+0x358>)
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	4a0d      	ldr	r2, [pc, #52]	; (8004e28 <HAL_RCC_ClockConfig+0x35c>)
 8004df4:	5cd3      	ldrb	r3, [r2, r3]
 8004df6:	f003 031f 	and.w	r3, r3, #31
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004e00:	4a0a      	ldr	r2, [pc, #40]	; (8004e2c <HAL_RCC_ClockConfig+0x360>)
 8004e02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e04:	4a0a      	ldr	r2, [pc, #40]	; (8004e30 <HAL_RCC_ClockConfig+0x364>)
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004e0a:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <HAL_RCC_ClockConfig+0x368>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fc f9fc 	bl	800120c <HAL_InitTick>
 8004e14:	4603      	mov	r3, r0
 8004e16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	58024400 	.word	0x58024400
 8004e28:	0800ca50 	.word	0x0800ca50
 8004e2c:	24000004 	.word	0x24000004
 8004e30:	24000000 	.word	0x24000000
 8004e34:	24000008 	.word	0x24000008

08004e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b089      	sub	sp, #36	; 0x24
 8004e3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e3e:	4bb3      	ldr	r3, [pc, #716]	; (800510c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e46:	2b18      	cmp	r3, #24
 8004e48:	f200 8155 	bhi.w	80050f6 <HAL_RCC_GetSysClockFreq+0x2be>
 8004e4c:	a201      	add	r2, pc, #4	; (adr r2, 8004e54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e52:	bf00      	nop
 8004e54:	08004eb9 	.word	0x08004eb9
 8004e58:	080050f7 	.word	0x080050f7
 8004e5c:	080050f7 	.word	0x080050f7
 8004e60:	080050f7 	.word	0x080050f7
 8004e64:	080050f7 	.word	0x080050f7
 8004e68:	080050f7 	.word	0x080050f7
 8004e6c:	080050f7 	.word	0x080050f7
 8004e70:	080050f7 	.word	0x080050f7
 8004e74:	08004edf 	.word	0x08004edf
 8004e78:	080050f7 	.word	0x080050f7
 8004e7c:	080050f7 	.word	0x080050f7
 8004e80:	080050f7 	.word	0x080050f7
 8004e84:	080050f7 	.word	0x080050f7
 8004e88:	080050f7 	.word	0x080050f7
 8004e8c:	080050f7 	.word	0x080050f7
 8004e90:	080050f7 	.word	0x080050f7
 8004e94:	08004ee5 	.word	0x08004ee5
 8004e98:	080050f7 	.word	0x080050f7
 8004e9c:	080050f7 	.word	0x080050f7
 8004ea0:	080050f7 	.word	0x080050f7
 8004ea4:	080050f7 	.word	0x080050f7
 8004ea8:	080050f7 	.word	0x080050f7
 8004eac:	080050f7 	.word	0x080050f7
 8004eb0:	080050f7 	.word	0x080050f7
 8004eb4:	08004eeb 	.word	0x08004eeb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eb8:	4b94      	ldr	r3, [pc, #592]	; (800510c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0320 	and.w	r3, r3, #32
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d009      	beq.n	8004ed8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ec4:	4b91      	ldr	r3, [pc, #580]	; (800510c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	08db      	lsrs	r3, r3, #3
 8004eca:	f003 0303 	and.w	r3, r3, #3
 8004ece:	4a90      	ldr	r2, [pc, #576]	; (8005110 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004ed6:	e111      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ed8:	4b8d      	ldr	r3, [pc, #564]	; (8005110 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004eda:	61bb      	str	r3, [r7, #24]
      break;
 8004edc:	e10e      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004ede:	4b8d      	ldr	r3, [pc, #564]	; (8005114 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ee0:	61bb      	str	r3, [r7, #24]
      break;
 8004ee2:	e10b      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004ee4:	4b8c      	ldr	r3, [pc, #560]	; (8005118 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004ee6:	61bb      	str	r3, [r7, #24]
      break;
 8004ee8:	e108      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004eea:	4b88      	ldr	r3, [pc, #544]	; (800510c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004ef4:	4b85      	ldr	r3, [pc, #532]	; (800510c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	091b      	lsrs	r3, r3, #4
 8004efa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004efe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f00:	4b82      	ldr	r3, [pc, #520]	; (800510c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004f0a:	4b80      	ldr	r3, [pc, #512]	; (800510c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0e:	08db      	lsrs	r3, r3, #3
 8004f10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	fb02 f303 	mul.w	r3, r2, r3
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f22:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 80e1 	beq.w	80050f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	f000 8083 	beq.w	800503c <HAL_RCC_GetSysClockFreq+0x204>
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	f200 80a1 	bhi.w	8005080 <HAL_RCC_GetSysClockFreq+0x248>
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <HAL_RCC_GetSysClockFreq+0x114>
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d056      	beq.n	8004ff8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004f4a:	e099      	b.n	8005080 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f4c:	4b6f      	ldr	r3, [pc, #444]	; (800510c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0320 	and.w	r3, r3, #32
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d02d      	beq.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f58:	4b6c      	ldr	r3, [pc, #432]	; (800510c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	08db      	lsrs	r3, r3, #3
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	4a6b      	ldr	r2, [pc, #428]	; (8005110 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f64:	fa22 f303 	lsr.w	r3, r2, r3
 8004f68:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	ee07 3a90 	vmov	s15, r3
 8004f70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f82:	4b62      	ldr	r3, [pc, #392]	; (800510c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f8a:	ee07 3a90 	vmov	s15, r3
 8004f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f92:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f96:	eddf 5a61 	vldr	s11, [pc, #388]	; 800511c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004fb2:	e087      	b.n	80050c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	ee07 3a90 	vmov	s15, r3
 8004fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fbe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005120 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fc6:	4b51      	ldr	r3, [pc, #324]	; (800510c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fce:	ee07 3a90 	vmov	s15, r3
 8004fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fda:	eddf 5a50 	vldr	s11, [pc, #320]	; 800511c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ff6:	e065      	b.n	80050c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	ee07 3a90 	vmov	s15, r3
 8004ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005002:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005124 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800500a:	4b40      	ldr	r3, [pc, #256]	; (800510c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800501a:	ed97 6a02 	vldr	s12, [r7, #8]
 800501e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800511c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800502a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800502e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005036:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800503a:	e043      	b.n	80050c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	ee07 3a90 	vmov	s15, r3
 8005042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005046:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005128 <HAL_RCC_GetSysClockFreq+0x2f0>
 800504a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800504e:	4b2f      	ldr	r3, [pc, #188]	; (800510c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800505e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005062:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800511c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800506a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800506e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800507e:	e021      	b.n	80050c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	ee07 3a90 	vmov	s15, r3
 8005086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005124 <HAL_RCC_GetSysClockFreq+0x2ec>
 800508e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005092:	4b1e      	ldr	r3, [pc, #120]	; (800510c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80050a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800511c <HAL_RCC_GetSysClockFreq+0x2e4>
 80050aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80050c4:	4b11      	ldr	r3, [pc, #68]	; (800510c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c8:	0a5b      	lsrs	r3, r3, #9
 80050ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050ce:	3301      	adds	r3, #1
 80050d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	ee07 3a90 	vmov	s15, r3
 80050d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80050e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050e8:	ee17 3a90 	vmov	r3, s15
 80050ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80050ee:	e005      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	61bb      	str	r3, [r7, #24]
      break;
 80050f4:	e002      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80050f6:	4b07      	ldr	r3, [pc, #28]	; (8005114 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80050f8:	61bb      	str	r3, [r7, #24]
      break;
 80050fa:	bf00      	nop
  }

  return sysclockfreq;
 80050fc:	69bb      	ldr	r3, [r7, #24]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3724      	adds	r7, #36	; 0x24
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	58024400 	.word	0x58024400
 8005110:	03d09000 	.word	0x03d09000
 8005114:	003d0900 	.word	0x003d0900
 8005118:	007a1200 	.word	0x007a1200
 800511c:	46000000 	.word	0x46000000
 8005120:	4c742400 	.word	0x4c742400
 8005124:	4a742400 	.word	0x4a742400
 8005128:	4af42400 	.word	0x4af42400

0800512c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005132:	f7ff fe81 	bl	8004e38 <HAL_RCC_GetSysClockFreq>
 8005136:	4602      	mov	r2, r0
 8005138:	4b10      	ldr	r3, [pc, #64]	; (800517c <HAL_RCC_GetHCLKFreq+0x50>)
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	0a1b      	lsrs	r3, r3, #8
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	490f      	ldr	r1, [pc, #60]	; (8005180 <HAL_RCC_GetHCLKFreq+0x54>)
 8005144:	5ccb      	ldrb	r3, [r1, r3]
 8005146:	f003 031f 	and.w	r3, r3, #31
 800514a:	fa22 f303 	lsr.w	r3, r2, r3
 800514e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005150:	4b0a      	ldr	r3, [pc, #40]	; (800517c <HAL_RCC_GetHCLKFreq+0x50>)
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	4a09      	ldr	r2, [pc, #36]	; (8005180 <HAL_RCC_GetHCLKFreq+0x54>)
 800515a:	5cd3      	ldrb	r3, [r2, r3]
 800515c:	f003 031f 	and.w	r3, r3, #31
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	fa22 f303 	lsr.w	r3, r2, r3
 8005166:	4a07      	ldr	r2, [pc, #28]	; (8005184 <HAL_RCC_GetHCLKFreq+0x58>)
 8005168:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800516a:	4a07      	ldr	r2, [pc, #28]	; (8005188 <HAL_RCC_GetHCLKFreq+0x5c>)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005170:	4b04      	ldr	r3, [pc, #16]	; (8005184 <HAL_RCC_GetHCLKFreq+0x58>)
 8005172:	681b      	ldr	r3, [r3, #0]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	58024400 	.word	0x58024400
 8005180:	0800ca50 	.word	0x0800ca50
 8005184:	24000004 	.word	0x24000004
 8005188:	24000000 	.word	0x24000000

0800518c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005190:	f7ff ffcc 	bl	800512c <HAL_RCC_GetHCLKFreq>
 8005194:	4602      	mov	r2, r0
 8005196:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	091b      	lsrs	r3, r3, #4
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	4904      	ldr	r1, [pc, #16]	; (80051b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051a2:	5ccb      	ldrb	r3, [r1, r3]
 80051a4:	f003 031f 	and.w	r3, r3, #31
 80051a8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	58024400 	.word	0x58024400
 80051b4:	0800ca50 	.word	0x0800ca50

080051b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80051bc:	f7ff ffb6 	bl	800512c <HAL_RCC_GetHCLKFreq>
 80051c0:	4602      	mov	r2, r0
 80051c2:	4b06      	ldr	r3, [pc, #24]	; (80051dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	0a1b      	lsrs	r3, r3, #8
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	4904      	ldr	r1, [pc, #16]	; (80051e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80051ce:	5ccb      	ldrb	r3, [r1, r3]
 80051d0:	f003 031f 	and.w	r3, r3, #31
 80051d4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80051d8:	4618      	mov	r0, r3
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	58024400 	.word	0x58024400
 80051e0:	0800ca50 	.word	0x0800ca50

080051e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051e8:	b0c8      	sub	sp, #288	; 0x120
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051f0:	2300      	movs	r3, #0
 80051f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051f6:	2300      	movs	r3, #0
 80051f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005204:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005208:	2500      	movs	r5, #0
 800520a:	ea54 0305 	orrs.w	r3, r4, r5
 800520e:	d049      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005216:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800521a:	d02f      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800521c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005220:	d828      	bhi.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005222:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005226:	d01a      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005228:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800522c:	d822      	bhi.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005236:	d007      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005238:	e01c      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800523a:	4ba7      	ldr	r3, [pc, #668]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	4aa6      	ldr	r2, [pc, #664]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005244:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005246:	e01a      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800524c:	3308      	adds	r3, #8
 800524e:	2102      	movs	r1, #2
 8005250:	4618      	mov	r0, r3
 8005252:	f002 fa6d 	bl	8007730 <RCCEx_PLL2_Config>
 8005256:	4603      	mov	r3, r0
 8005258:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800525c:	e00f      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800525e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005262:	3328      	adds	r3, #40	; 0x28
 8005264:	2102      	movs	r1, #2
 8005266:	4618      	mov	r0, r3
 8005268:	f002 fb14 	bl	8007894 <RCCEx_PLL3_Config>
 800526c:	4603      	mov	r3, r0
 800526e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005272:	e004      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800527a:	e000      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800527c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800527e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10a      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005286:	4b94      	ldr	r3, [pc, #592]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800528a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800528e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005294:	4a90      	ldr	r2, [pc, #576]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005296:	430b      	orrs	r3, r1
 8005298:	6513      	str	r3, [r2, #80]	; 0x50
 800529a:	e003      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80052a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ac:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80052b0:	f04f 0900 	mov.w	r9, #0
 80052b4:	ea58 0309 	orrs.w	r3, r8, r9
 80052b8:	d047      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80052ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d82a      	bhi.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80052c4:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80052c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ca:	bf00      	nop
 80052cc:	080052e1 	.word	0x080052e1
 80052d0:	080052ef 	.word	0x080052ef
 80052d4:	08005305 	.word	0x08005305
 80052d8:	08005323 	.word	0x08005323
 80052dc:	08005323 	.word	0x08005323
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052e0:	4b7d      	ldr	r3, [pc, #500]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	4a7c      	ldr	r2, [pc, #496]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052ec:	e01a      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052f2:	3308      	adds	r3, #8
 80052f4:	2100      	movs	r1, #0
 80052f6:	4618      	mov	r0, r3
 80052f8:	f002 fa1a 	bl	8007730 <RCCEx_PLL2_Config>
 80052fc:	4603      	mov	r3, r0
 80052fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005302:	e00f      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005308:	3328      	adds	r3, #40	; 0x28
 800530a:	2100      	movs	r1, #0
 800530c:	4618      	mov	r0, r3
 800530e:	f002 fac1 	bl	8007894 <RCCEx_PLL3_Config>
 8005312:	4603      	mov	r3, r0
 8005314:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005318:	e004      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005320:	e000      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005322:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005324:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10a      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800532c:	4b6a      	ldr	r3, [pc, #424]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800532e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005330:	f023 0107 	bic.w	r1, r3, #7
 8005334:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533a:	4a67      	ldr	r2, [pc, #412]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800533c:	430b      	orrs	r3, r1
 800533e:	6513      	str	r3, [r2, #80]	; 0x50
 8005340:	e003      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005342:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005346:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800534a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800534e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005352:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005356:	f04f 0b00 	mov.w	fp, #0
 800535a:	ea5a 030b 	orrs.w	r3, sl, fp
 800535e:	d054      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005366:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800536a:	d036      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800536c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005370:	d82f      	bhi.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005376:	d032      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800537c:	d829      	bhi.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800537e:	2bc0      	cmp	r3, #192	; 0xc0
 8005380:	d02f      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8005382:	2bc0      	cmp	r3, #192	; 0xc0
 8005384:	d825      	bhi.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005386:	2b80      	cmp	r3, #128	; 0x80
 8005388:	d018      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800538a:	2b80      	cmp	r3, #128	; 0x80
 800538c:	d821      	bhi.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005392:	2b40      	cmp	r3, #64	; 0x40
 8005394:	d007      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005396:	e01c      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005398:	4b4f      	ldr	r3, [pc, #316]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800539a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539c:	4a4e      	ldr	r2, [pc, #312]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800539e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80053a4:	e01e      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053aa:	3308      	adds	r3, #8
 80053ac:	2100      	movs	r1, #0
 80053ae:	4618      	mov	r0, r3
 80053b0:	f002 f9be 	bl	8007730 <RCCEx_PLL2_Config>
 80053b4:	4603      	mov	r3, r0
 80053b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80053ba:	e013      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c0:	3328      	adds	r3, #40	; 0x28
 80053c2:	2100      	movs	r1, #0
 80053c4:	4618      	mov	r0, r3
 80053c6:	f002 fa65 	bl	8007894 <RCCEx_PLL3_Config>
 80053ca:	4603      	mov	r3, r0
 80053cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80053d0:	e008      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80053d8:	e004      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80053da:	bf00      	nop
 80053dc:	e002      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80053de:	bf00      	nop
 80053e0:	e000      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80053e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10a      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80053ec:	4b3a      	ldr	r3, [pc, #232]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80053f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053fa:	4a37      	ldr	r2, [pc, #220]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053fc:	430b      	orrs	r3, r1
 80053fe:	6513      	str	r3, [r2, #80]	; 0x50
 8005400:	e003      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005402:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005406:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800540a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800540e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005412:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005416:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800541a:	2300      	movs	r3, #0
 800541c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005420:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005424:	460b      	mov	r3, r1
 8005426:	4313      	orrs	r3, r2
 8005428:	d05c      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800542a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800542e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005430:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005434:	d03b      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005436:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800543a:	d834      	bhi.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800543c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005440:	d037      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8005442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005446:	d82e      	bhi.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005448:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800544c:	d033      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800544e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005452:	d828      	bhi.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005458:	d01a      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800545a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545e:	d822      	bhi.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005468:	d007      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800546a:	e01c      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800546c:	4b1a      	ldr	r3, [pc, #104]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	4a19      	ldr	r2, [pc, #100]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005476:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005478:	e01e      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800547a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800547e:	3308      	adds	r3, #8
 8005480:	2100      	movs	r1, #0
 8005482:	4618      	mov	r0, r3
 8005484:	f002 f954 	bl	8007730 <RCCEx_PLL2_Config>
 8005488:	4603      	mov	r3, r0
 800548a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800548e:	e013      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005494:	3328      	adds	r3, #40	; 0x28
 8005496:	2100      	movs	r1, #0
 8005498:	4618      	mov	r0, r3
 800549a:	f002 f9fb 	bl	8007894 <RCCEx_PLL3_Config>
 800549e:	4603      	mov	r3, r0
 80054a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80054a4:	e008      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80054ac:	e004      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80054ae:	bf00      	nop
 80054b0:	e002      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80054b2:	bf00      	nop
 80054b4:	e000      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80054b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10d      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80054c0:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80054c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ce:	4a02      	ldr	r2, [pc, #8]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054d0:	430b      	orrs	r3, r1
 80054d2:	6513      	str	r3, [r2, #80]	; 0x50
 80054d4:	e006      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80054d6:	bf00      	nop
 80054d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80054e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80054e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80054f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054f4:	2300      	movs	r3, #0
 80054f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80054fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80054fe:	460b      	mov	r3, r1
 8005500:	4313      	orrs	r3, r2
 8005502:	d03a      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005504:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800550a:	2b30      	cmp	r3, #48	; 0x30
 800550c:	d01f      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800550e:	2b30      	cmp	r3, #48	; 0x30
 8005510:	d819      	bhi.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005512:	2b20      	cmp	r3, #32
 8005514:	d00c      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005516:	2b20      	cmp	r3, #32
 8005518:	d815      	bhi.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d019      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800551e:	2b10      	cmp	r3, #16
 8005520:	d111      	bne.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005522:	4bae      	ldr	r3, [pc, #696]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005526:	4aad      	ldr	r2, [pc, #692]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800552c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800552e:	e011      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005530:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005534:	3308      	adds	r3, #8
 8005536:	2102      	movs	r1, #2
 8005538:	4618      	mov	r0, r3
 800553a:	f002 f8f9 	bl	8007730 <RCCEx_PLL2_Config>
 800553e:	4603      	mov	r3, r0
 8005540:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005544:	e006      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800554c:	e002      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800554e:	bf00      	nop
 8005550:	e000      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005552:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005554:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800555c:	4b9f      	ldr	r3, [pc, #636]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800555e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005560:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800556a:	4a9c      	ldr	r2, [pc, #624]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800556c:	430b      	orrs	r3, r1
 800556e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005570:	e003      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005572:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005576:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800557a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005582:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005586:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800558a:	2300      	movs	r3, #0
 800558c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005590:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005594:	460b      	mov	r3, r1
 8005596:	4313      	orrs	r3, r2
 8005598:	d051      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800559a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800559e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055a4:	d035      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80055a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055aa:	d82e      	bhi.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80055ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055b0:	d031      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80055b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055b6:	d828      	bhi.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80055b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055bc:	d01a      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80055be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c2:	d822      	bhi.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80055c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055cc:	d007      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80055ce:	e01c      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055d0:	4b82      	ldr	r3, [pc, #520]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	4a81      	ldr	r2, [pc, #516]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80055d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80055dc:	e01c      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055e2:	3308      	adds	r3, #8
 80055e4:	2100      	movs	r1, #0
 80055e6:	4618      	mov	r0, r3
 80055e8:	f002 f8a2 	bl	8007730 <RCCEx_PLL2_Config>
 80055ec:	4603      	mov	r3, r0
 80055ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80055f2:	e011      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055f8:	3328      	adds	r3, #40	; 0x28
 80055fa:	2100      	movs	r1, #0
 80055fc:	4618      	mov	r0, r3
 80055fe:	f002 f949 	bl	8007894 <RCCEx_PLL3_Config>
 8005602:	4603      	mov	r3, r0
 8005604:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005608:	e006      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005610:	e002      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005612:	bf00      	nop
 8005614:	e000      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005618:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10a      	bne.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005620:	4b6e      	ldr	r3, [pc, #440]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005624:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800562c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800562e:	4a6b      	ldr	r2, [pc, #428]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005630:	430b      	orrs	r3, r1
 8005632:	6513      	str	r3, [r2, #80]	; 0x50
 8005634:	e003      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005636:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800563a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800563e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005646:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800564a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800564e:	2300      	movs	r3, #0
 8005650:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005654:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005658:	460b      	mov	r3, r1
 800565a:	4313      	orrs	r3, r2
 800565c:	d053      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800565e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005668:	d033      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800566a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800566e:	d82c      	bhi.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005670:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005674:	d02f      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005676:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800567a:	d826      	bhi.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800567c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005680:	d02b      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005682:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005686:	d820      	bhi.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800568c:	d012      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800568e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005692:	d81a      	bhi.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005694:	2b00      	cmp	r3, #0
 8005696:	d022      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800569c:	d115      	bne.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800569e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056a2:	3308      	adds	r3, #8
 80056a4:	2101      	movs	r1, #1
 80056a6:	4618      	mov	r0, r3
 80056a8:	f002 f842 	bl	8007730 <RCCEx_PLL2_Config>
 80056ac:	4603      	mov	r3, r0
 80056ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056b2:	e015      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056b8:	3328      	adds	r3, #40	; 0x28
 80056ba:	2101      	movs	r1, #1
 80056bc:	4618      	mov	r0, r3
 80056be:	f002 f8e9 	bl	8007894 <RCCEx_PLL3_Config>
 80056c2:	4603      	mov	r3, r0
 80056c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056c8:	e00a      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80056d0:	e006      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80056d2:	bf00      	nop
 80056d4:	e004      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80056d6:	bf00      	nop
 80056d8:	e002      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80056da:	bf00      	nop
 80056dc:	e000      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80056de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10a      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80056e8:	4b3c      	ldr	r3, [pc, #240]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80056ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80056f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056f6:	4a39      	ldr	r2, [pc, #228]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80056f8:	430b      	orrs	r3, r1
 80056fa:	6513      	str	r3, [r2, #80]	; 0x50
 80056fc:	e003      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005702:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005712:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005716:	2300      	movs	r3, #0
 8005718:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800571c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005720:	460b      	mov	r3, r1
 8005722:	4313      	orrs	r3, r2
 8005724:	d060      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800572a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800572e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005732:	d039      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005734:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005738:	d832      	bhi.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800573a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800573e:	d035      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005740:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005744:	d82c      	bhi.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574a:	d031      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800574c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005750:	d826      	bhi.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005752:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005756:	d02d      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005758:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800575c:	d820      	bhi.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800575e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005762:	d012      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005768:	d81a      	bhi.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d024      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800576e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005772:	d115      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005778:	3308      	adds	r3, #8
 800577a:	2101      	movs	r1, #1
 800577c:	4618      	mov	r0, r3
 800577e:	f001 ffd7 	bl	8007730 <RCCEx_PLL2_Config>
 8005782:	4603      	mov	r3, r0
 8005784:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005788:	e017      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800578a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800578e:	3328      	adds	r3, #40	; 0x28
 8005790:	2101      	movs	r1, #1
 8005792:	4618      	mov	r0, r3
 8005794:	f002 f87e 	bl	8007894 <RCCEx_PLL3_Config>
 8005798:	4603      	mov	r3, r0
 800579a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800579e:	e00c      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80057a6:	e008      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80057a8:	bf00      	nop
 80057aa:	e006      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80057ac:	bf00      	nop
 80057ae:	e004      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80057b0:	bf00      	nop
 80057b2:	e002      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80057b4:	bf00      	nop
 80057b6:	e000      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80057b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10e      	bne.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80057c2:	4b06      	ldr	r3, [pc, #24]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80057ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057d2:	4a02      	ldr	r2, [pc, #8]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057d4:	430b      	orrs	r3, r1
 80057d6:	6593      	str	r3, [r2, #88]	; 0x58
 80057d8:	e006      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80057da:	bf00      	nop
 80057dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80057e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80057e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80057f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057f8:	2300      	movs	r3, #0
 80057fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80057fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005802:	460b      	mov	r3, r1
 8005804:	4313      	orrs	r3, r2
 8005806:	d037      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005808:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800580c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800580e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005812:	d00e      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005818:	d816      	bhi.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d018      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800581e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005822:	d111      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005824:	4bc4      	ldr	r3, [pc, #784]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005828:	4ac3      	ldr	r2, [pc, #780]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800582a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800582e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005830:	e00f      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005836:	3308      	adds	r3, #8
 8005838:	2101      	movs	r1, #1
 800583a:	4618      	mov	r0, r3
 800583c:	f001 ff78 	bl	8007730 <RCCEx_PLL2_Config>
 8005840:	4603      	mov	r3, r0
 8005842:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005846:	e004      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800584e:	e000      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005852:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10a      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800585a:	4bb7      	ldr	r3, [pc, #732]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800585c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800585e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005862:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005866:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005868:	4ab3      	ldr	r2, [pc, #716]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800586a:	430b      	orrs	r3, r1
 800586c:	6513      	str	r3, [r2, #80]	; 0x50
 800586e:	e003      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005870:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005874:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800587c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005880:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005884:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005888:	2300      	movs	r3, #0
 800588a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800588e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005892:	460b      	mov	r3, r1
 8005894:	4313      	orrs	r3, r2
 8005896:	d039      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800589c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d81c      	bhi.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80058a2:	a201      	add	r2, pc, #4	; (adr r2, 80058a8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80058a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a8:	080058e5 	.word	0x080058e5
 80058ac:	080058b9 	.word	0x080058b9
 80058b0:	080058c7 	.word	0x080058c7
 80058b4:	080058e5 	.word	0x080058e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058b8:	4b9f      	ldr	r3, [pc, #636]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	4a9e      	ldr	r2, [pc, #632]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80058c4:	e00f      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ca:	3308      	adds	r3, #8
 80058cc:	2102      	movs	r1, #2
 80058ce:	4618      	mov	r0, r3
 80058d0:	f001 ff2e 	bl	8007730 <RCCEx_PLL2_Config>
 80058d4:	4603      	mov	r3, r0
 80058d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80058da:	e004      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80058e2:	e000      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80058e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10a      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80058ee:	4b92      	ldr	r3, [pc, #584]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f2:	f023 0103 	bic.w	r1, r3, #3
 80058f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058fc:	4a8e      	ldr	r2, [pc, #568]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058fe:	430b      	orrs	r3, r1
 8005900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005902:	e003      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005904:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005908:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800590c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005914:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005918:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800591c:	2300      	movs	r3, #0
 800591e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005922:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005926:	460b      	mov	r3, r1
 8005928:	4313      	orrs	r3, r2
 800592a:	f000 8099 	beq.w	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800592e:	4b83      	ldr	r3, [pc, #524]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a82      	ldr	r2, [pc, #520]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005938:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800593a:	f7fb fcb1 	bl	80012a0 <HAL_GetTick>
 800593e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005942:	e00b      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005944:	f7fb fcac 	bl	80012a0 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b64      	cmp	r3, #100	; 0x64
 8005952:	d903      	bls.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800595a:	e005      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800595c:	4b77      	ldr	r3, [pc, #476]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0ed      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005968:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800596c:	2b00      	cmp	r3, #0
 800596e:	d173      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005970:	4b71      	ldr	r3, [pc, #452]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005972:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005978:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800597c:	4053      	eors	r3, r2
 800597e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005982:	2b00      	cmp	r3, #0
 8005984:	d015      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005986:	4b6c      	ldr	r3, [pc, #432]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800598e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005992:	4b69      	ldr	r3, [pc, #420]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005996:	4a68      	ldr	r2, [pc, #416]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800599c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800599e:	4b66      	ldr	r3, [pc, #408]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a2:	4a65      	ldr	r2, [pc, #404]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059a8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80059aa:	4a63      	ldr	r2, [pc, #396]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80059b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059be:	d118      	bne.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c0:	f7fb fc6e 	bl	80012a0 <HAL_GetTick>
 80059c4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059c8:	e00d      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ca:	f7fb fc69 	bl	80012a0 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80059d4:	1ad2      	subs	r2, r2, r3
 80059d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80059da:	429a      	cmp	r2, r3
 80059dc:	d903      	bls.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80059e4:	e005      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059e6:	4b54      	ldr	r3, [pc, #336]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0eb      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80059f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d129      	bne.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a0a:	d10e      	bne.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005a0c:	4b4a      	ldr	r3, [pc, #296]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a1c:	091a      	lsrs	r2, r3, #4
 8005a1e:	4b48      	ldr	r3, [pc, #288]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a20:	4013      	ands	r3, r2
 8005a22:	4a45      	ldr	r2, [pc, #276]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a24:	430b      	orrs	r3, r1
 8005a26:	6113      	str	r3, [r2, #16]
 8005a28:	e005      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005a2a:	4b43      	ldr	r3, [pc, #268]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	4a42      	ldr	r2, [pc, #264]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a34:	6113      	str	r3, [r2, #16]
 8005a36:	4b40      	ldr	r3, [pc, #256]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a38:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a46:	4a3c      	ldr	r2, [pc, #240]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a48:	430b      	orrs	r3, r1
 8005a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a4c:	e008      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a52:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005a56:	e003      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a68:	f002 0301 	and.w	r3, r2, #1
 8005a6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a70:	2300      	movs	r3, #0
 8005a72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a76:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f000 8090 	beq.w	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a8a:	2b28      	cmp	r3, #40	; 0x28
 8005a8c:	d870      	bhi.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005a8e:	a201      	add	r2, pc, #4	; (adr r2, 8005a94 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a94:	08005b79 	.word	0x08005b79
 8005a98:	08005b71 	.word	0x08005b71
 8005a9c:	08005b71 	.word	0x08005b71
 8005aa0:	08005b71 	.word	0x08005b71
 8005aa4:	08005b71 	.word	0x08005b71
 8005aa8:	08005b71 	.word	0x08005b71
 8005aac:	08005b71 	.word	0x08005b71
 8005ab0:	08005b71 	.word	0x08005b71
 8005ab4:	08005b45 	.word	0x08005b45
 8005ab8:	08005b71 	.word	0x08005b71
 8005abc:	08005b71 	.word	0x08005b71
 8005ac0:	08005b71 	.word	0x08005b71
 8005ac4:	08005b71 	.word	0x08005b71
 8005ac8:	08005b71 	.word	0x08005b71
 8005acc:	08005b71 	.word	0x08005b71
 8005ad0:	08005b71 	.word	0x08005b71
 8005ad4:	08005b5b 	.word	0x08005b5b
 8005ad8:	08005b71 	.word	0x08005b71
 8005adc:	08005b71 	.word	0x08005b71
 8005ae0:	08005b71 	.word	0x08005b71
 8005ae4:	08005b71 	.word	0x08005b71
 8005ae8:	08005b71 	.word	0x08005b71
 8005aec:	08005b71 	.word	0x08005b71
 8005af0:	08005b71 	.word	0x08005b71
 8005af4:	08005b79 	.word	0x08005b79
 8005af8:	08005b71 	.word	0x08005b71
 8005afc:	08005b71 	.word	0x08005b71
 8005b00:	08005b71 	.word	0x08005b71
 8005b04:	08005b71 	.word	0x08005b71
 8005b08:	08005b71 	.word	0x08005b71
 8005b0c:	08005b71 	.word	0x08005b71
 8005b10:	08005b71 	.word	0x08005b71
 8005b14:	08005b79 	.word	0x08005b79
 8005b18:	08005b71 	.word	0x08005b71
 8005b1c:	08005b71 	.word	0x08005b71
 8005b20:	08005b71 	.word	0x08005b71
 8005b24:	08005b71 	.word	0x08005b71
 8005b28:	08005b71 	.word	0x08005b71
 8005b2c:	08005b71 	.word	0x08005b71
 8005b30:	08005b71 	.word	0x08005b71
 8005b34:	08005b79 	.word	0x08005b79
 8005b38:	58024400 	.word	0x58024400
 8005b3c:	58024800 	.word	0x58024800
 8005b40:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b48:	3308      	adds	r3, #8
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f001 fdef 	bl	8007730 <RCCEx_PLL2_Config>
 8005b52:	4603      	mov	r3, r0
 8005b54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005b58:	e00f      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b5e:	3328      	adds	r3, #40	; 0x28
 8005b60:	2101      	movs	r1, #1
 8005b62:	4618      	mov	r0, r3
 8005b64:	f001 fe96 	bl	8007894 <RCCEx_PLL3_Config>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005b6e:	e004      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005b76:	e000      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10b      	bne.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005b82:	4bc0      	ldr	r3, [pc, #768]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b86:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b92:	4abc      	ldr	r2, [pc, #752]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005b94:	430b      	orrs	r3, r1
 8005b96:	6553      	str	r3, [r2, #84]	; 0x54
 8005b98:	e003      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b9e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005baa:	f002 0302 	and.w	r3, r2, #2
 8005bae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005bb8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	d043      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bca:	2b05      	cmp	r3, #5
 8005bcc:	d824      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005bce:	a201      	add	r2, pc, #4	; (adr r2, 8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd4:	08005c21 	.word	0x08005c21
 8005bd8:	08005bed 	.word	0x08005bed
 8005bdc:	08005c03 	.word	0x08005c03
 8005be0:	08005c21 	.word	0x08005c21
 8005be4:	08005c21 	.word	0x08005c21
 8005be8:	08005c21 	.word	0x08005c21
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bf0:	3308      	adds	r3, #8
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f001 fd9b 	bl	8007730 <RCCEx_PLL2_Config>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c00:	e00f      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c06:	3328      	adds	r3, #40	; 0x28
 8005c08:	2101      	movs	r1, #1
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f001 fe42 	bl	8007894 <RCCEx_PLL3_Config>
 8005c10:	4603      	mov	r3, r0
 8005c12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c16:	e004      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005c1e:	e000      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10b      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005c2a:	4b96      	ldr	r3, [pc, #600]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2e:	f023 0107 	bic.w	r1, r3, #7
 8005c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c3a:	4a92      	ldr	r2, [pc, #584]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005c3c:	430b      	orrs	r3, r1
 8005c3e:	6553      	str	r3, [r2, #84]	; 0x54
 8005c40:	e003      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c46:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c52:	f002 0304 	and.w	r3, r2, #4
 8005c56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c60:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4313      	orrs	r3, r2
 8005c68:	d043      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c72:	2b05      	cmp	r3, #5
 8005c74:	d824      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005c76:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7c:	08005cc9 	.word	0x08005cc9
 8005c80:	08005c95 	.word	0x08005c95
 8005c84:	08005cab 	.word	0x08005cab
 8005c88:	08005cc9 	.word	0x08005cc9
 8005c8c:	08005cc9 	.word	0x08005cc9
 8005c90:	08005cc9 	.word	0x08005cc9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c98:	3308      	adds	r3, #8
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f001 fd47 	bl	8007730 <RCCEx_PLL2_Config>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ca8:	e00f      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cae:	3328      	adds	r3, #40	; 0x28
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f001 fdee 	bl	8007894 <RCCEx_PLL3_Config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005cbe:	e004      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005cc6:	e000      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10b      	bne.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cd2:	4b6c      	ldr	r3, [pc, #432]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd6:	f023 0107 	bic.w	r1, r3, #7
 8005cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ce2:	4a68      	ldr	r2, [pc, #416]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005ce4:	430b      	orrs	r3, r1
 8005ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8005ce8:	e003      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005cee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfa:	f002 0320 	and.w	r3, r2, #32
 8005cfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d02:	2300      	movs	r3, #0
 8005d04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	d055      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d1e:	d033      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d24:	d82c      	bhi.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2a:	d02f      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d30:	d826      	bhi.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005d32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d36:	d02b      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005d38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d3c:	d820      	bhi.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005d3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d42:	d012      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d48:	d81a      	bhi.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d022      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005d4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d52:	d115      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d58:	3308      	adds	r3, #8
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f001 fce7 	bl	8007730 <RCCEx_PLL2_Config>
 8005d62:	4603      	mov	r3, r0
 8005d64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005d68:	e015      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d6e:	3328      	adds	r3, #40	; 0x28
 8005d70:	2102      	movs	r1, #2
 8005d72:	4618      	mov	r0, r3
 8005d74:	f001 fd8e 	bl	8007894 <RCCEx_PLL3_Config>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005d7e:	e00a      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005d86:	e006      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005d88:	bf00      	nop
 8005d8a:	e004      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005d8c:	bf00      	nop
 8005d8e:	e002      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005d90:	bf00      	nop
 8005d92:	e000      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10b      	bne.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d9e:	4b39      	ldr	r3, [pc, #228]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005daa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dae:	4a35      	ldr	r2, [pc, #212]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005db0:	430b      	orrs	r3, r1
 8005db2:	6553      	str	r3, [r2, #84]	; 0x54
 8005db4:	e003      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005dba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005dca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005dd4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	d058      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005de2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005de6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005dea:	d033      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005dec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005df0:	d82c      	bhi.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005df6:	d02f      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dfc:	d826      	bhi.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005dfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e02:	d02b      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005e04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e08:	d820      	bhi.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005e0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e0e:	d012      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8005e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e14:	d81a      	bhi.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d022      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8005e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e1e:	d115      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e24:	3308      	adds	r3, #8
 8005e26:	2100      	movs	r1, #0
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f001 fc81 	bl	8007730 <RCCEx_PLL2_Config>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e34:	e015      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e3a:	3328      	adds	r3, #40	; 0x28
 8005e3c:	2102      	movs	r1, #2
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f001 fd28 	bl	8007894 <RCCEx_PLL3_Config>
 8005e44:	4603      	mov	r3, r0
 8005e46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e4a:	e00a      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005e52:	e006      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005e54:	bf00      	nop
 8005e56:	e004      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005e58:	bf00      	nop
 8005e5a:	e002      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005e5c:	bf00      	nop
 8005e5e:	e000      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10e      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e6a:	4b06      	ldr	r3, [pc, #24]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e7a:	4a02      	ldr	r2, [pc, #8]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005e7c:	430b      	orrs	r3, r1
 8005e7e:	6593      	str	r3, [r2, #88]	; 0x58
 8005e80:	e006      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8005e82:	bf00      	nop
 8005e84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e8c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005e9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ea6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4313      	orrs	r3, r2
 8005eae:	d055      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005eb8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005ebc:	d033      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005ebe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005ec2:	d82c      	bhi.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ec8:	d02f      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ece:	d826      	bhi.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005ed0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ed4:	d02b      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005ed6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005eda:	d820      	bhi.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005edc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ee0:	d012      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8005ee2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ee6:	d81a      	bhi.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d022      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8005eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef0:	d115      	bne.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ef6:	3308      	adds	r3, #8
 8005ef8:	2100      	movs	r1, #0
 8005efa:	4618      	mov	r0, r3
 8005efc:	f001 fc18 	bl	8007730 <RCCEx_PLL2_Config>
 8005f00:	4603      	mov	r3, r0
 8005f02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f06:	e015      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f0c:	3328      	adds	r3, #40	; 0x28
 8005f0e:	2102      	movs	r1, #2
 8005f10:	4618      	mov	r0, r3
 8005f12:	f001 fcbf 	bl	8007894 <RCCEx_PLL3_Config>
 8005f16:	4603      	mov	r3, r0
 8005f18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f1c:	e00a      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005f24:	e006      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005f26:	bf00      	nop
 8005f28:	e004      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005f2a:	bf00      	nop
 8005f2c:	e002      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005f2e:	bf00      	nop
 8005f30:	e000      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005f32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10b      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005f3c:	4ba1      	ldr	r3, [pc, #644]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f40:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005f4c:	4a9d      	ldr	r2, [pc, #628]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f4e:	430b      	orrs	r3, r1
 8005f50:	6593      	str	r3, [r2, #88]	; 0x58
 8005f52:	e003      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f58:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	f002 0308 	and.w	r3, r2, #8
 8005f68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f72:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005f76:	460b      	mov	r3, r1
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	d01e      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f88:	d10c      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f8e:	3328      	adds	r3, #40	; 0x28
 8005f90:	2102      	movs	r1, #2
 8005f92:	4618      	mov	r0, r3
 8005f94:	f001 fc7e 	bl	8007894 <RCCEx_PLL3_Config>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005fa4:	4b87      	ldr	r3, [pc, #540]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fb4:	4a83      	ldr	r2, [pc, #524]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005fb6:	430b      	orrs	r3, r1
 8005fb8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc2:	f002 0310 	and.w	r3, r2, #16
 8005fc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005fd0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	d01e      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fe6:	d10c      	bne.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fec:	3328      	adds	r3, #40	; 0x28
 8005fee:	2102      	movs	r1, #2
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f001 fc4f 	bl	8007894 <RCCEx_PLL3_Config>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006002:	4b70      	ldr	r3, [pc, #448]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006006:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800600a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800600e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006012:	4a6c      	ldr	r2, [pc, #432]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006014:	430b      	orrs	r3, r1
 8006016:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006018:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006024:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006028:	2300      	movs	r3, #0
 800602a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800602e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006032:	460b      	mov	r3, r1
 8006034:	4313      	orrs	r3, r2
 8006036:	d03e      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006038:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800603c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006044:	d022      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8006046:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800604a:	d81b      	bhi.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006054:	d00b      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006056:	e015      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006058:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800605c:	3308      	adds	r3, #8
 800605e:	2100      	movs	r1, #0
 8006060:	4618      	mov	r0, r3
 8006062:	f001 fb65 	bl	8007730 <RCCEx_PLL2_Config>
 8006066:	4603      	mov	r3, r0
 8006068:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800606c:	e00f      	b.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800606e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006072:	3328      	adds	r3, #40	; 0x28
 8006074:	2102      	movs	r1, #2
 8006076:	4618      	mov	r0, r3
 8006078:	f001 fc0c 	bl	8007894 <RCCEx_PLL3_Config>
 800607c:	4603      	mov	r3, r0
 800607e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006082:	e004      	b.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800608a:	e000      	b.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800608c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800608e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10b      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006096:	4b4b      	ldr	r3, [pc, #300]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800609e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80060a6:	4a47      	ldr	r2, [pc, #284]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060a8:	430b      	orrs	r3, r1
 80060aa:	6593      	str	r3, [r2, #88]	; 0x58
 80060ac:	e003      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80060b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060be:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80060c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80060c4:	2300      	movs	r3, #0
 80060c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80060cc:	460b      	mov	r3, r1
 80060ce:	4313      	orrs	r3, r2
 80060d0:	d03b      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80060d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060de:	d01f      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80060e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060e4:	d818      	bhi.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80060e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ea:	d003      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80060ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060f0:	d007      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80060f2:	e011      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060f4:	4b33      	ldr	r3, [pc, #204]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	4a32      	ldr	r2, [pc, #200]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006100:	e00f      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006106:	3328      	adds	r3, #40	; 0x28
 8006108:	2101      	movs	r1, #1
 800610a:	4618      	mov	r0, r3
 800610c:	f001 fbc2 	bl	8007894 <RCCEx_PLL3_Config>
 8006110:	4603      	mov	r3, r0
 8006112:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006116:	e004      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800611e:	e000      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006122:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10b      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800612a:	4b26      	ldr	r3, [pc, #152]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800612c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006132:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613a:	4a22      	ldr	r2, [pc, #136]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800613c:	430b      	orrs	r3, r1
 800613e:	6553      	str	r3, [r2, #84]	; 0x54
 8006140:	e003      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006142:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006146:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800614a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006156:	673b      	str	r3, [r7, #112]	; 0x70
 8006158:	2300      	movs	r3, #0
 800615a:	677b      	str	r3, [r7, #116]	; 0x74
 800615c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006160:	460b      	mov	r3, r1
 8006162:	4313      	orrs	r3, r2
 8006164:	d034      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800616a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006174:	d007      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006176:	e011      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006178:	4b12      	ldr	r3, [pc, #72]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	4a11      	ldr	r2, [pc, #68]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800617e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006182:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006184:	e00e      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006186:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800618a:	3308      	adds	r3, #8
 800618c:	2102      	movs	r1, #2
 800618e:	4618      	mov	r0, r3
 8006190:	f001 face 	bl	8007730 <RCCEx_PLL2_Config>
 8006194:	4603      	mov	r3, r0
 8006196:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800619a:	e003      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80061a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10d      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80061ac:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ba:	4a02      	ldr	r2, [pc, #8]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061bc:	430b      	orrs	r3, r1
 80061be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061c0:	e006      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80061c2:	bf00      	nop
 80061c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80061cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80061d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80061dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80061de:	2300      	movs	r3, #0
 80061e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80061e6:	460b      	mov	r3, r1
 80061e8:	4313      	orrs	r3, r2
 80061ea:	d00c      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061f0:	3328      	adds	r3, #40	; 0x28
 80061f2:	2102      	movs	r1, #2
 80061f4:	4618      	mov	r0, r3
 80061f6:	f001 fb4d 	bl	8007894 <RCCEx_PLL3_Config>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006212:	663b      	str	r3, [r7, #96]	; 0x60
 8006214:	2300      	movs	r3, #0
 8006216:	667b      	str	r3, [r7, #100]	; 0x64
 8006218:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800621c:	460b      	mov	r3, r1
 800621e:	4313      	orrs	r3, r2
 8006220:	d038      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006222:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800622e:	d018      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006230:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006234:	d811      	bhi.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800623a:	d014      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800623c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006240:	d80b      	bhi.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006242:	2b00      	cmp	r3, #0
 8006244:	d011      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800624a:	d106      	bne.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800624c:	4bc3      	ldr	r3, [pc, #780]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800624e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006250:	4ac2      	ldr	r2, [pc, #776]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006256:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006258:	e008      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006260:	e004      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006262:	bf00      	nop
 8006264:	e002      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006266:	bf00      	nop
 8006268:	e000      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800626a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800626c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10b      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006274:	4bb9      	ldr	r3, [pc, #740]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006278:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800627c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006284:	4ab5      	ldr	r2, [pc, #724]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006286:	430b      	orrs	r3, r1
 8006288:	6553      	str	r3, [r2, #84]	; 0x54
 800628a:	e003      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800628c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006290:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006294:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80062a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80062a2:	2300      	movs	r3, #0
 80062a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80062aa:	460b      	mov	r3, r1
 80062ac:	4313      	orrs	r3, r2
 80062ae:	d009      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062b0:	4baa      	ldr	r3, [pc, #680]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80062b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80062b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062be:	4aa7      	ldr	r2, [pc, #668]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80062c0:	430b      	orrs	r3, r1
 80062c2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80062d0:	653b      	str	r3, [r7, #80]	; 0x50
 80062d2:	2300      	movs	r3, #0
 80062d4:	657b      	str	r3, [r7, #84]	; 0x54
 80062d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80062da:	460b      	mov	r3, r1
 80062dc:	4313      	orrs	r3, r2
 80062de:	d009      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062e0:	4b9e      	ldr	r3, [pc, #632]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80062e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80062e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ee:	4a9b      	ldr	r2, [pc, #620]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80062f0:	430b      	orrs	r3, r1
 80062f2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80062f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006300:	64bb      	str	r3, [r7, #72]	; 0x48
 8006302:	2300      	movs	r3, #0
 8006304:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006306:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800630a:	460b      	mov	r3, r1
 800630c:	4313      	orrs	r3, r2
 800630e:	d009      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006310:	4b92      	ldr	r3, [pc, #584]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006314:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8006318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800631c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800631e:	4a8f      	ldr	r2, [pc, #572]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006320:	430b      	orrs	r3, r1
 8006322:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006324:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006330:	643b      	str	r3, [r7, #64]	; 0x40
 8006332:	2300      	movs	r3, #0
 8006334:	647b      	str	r3, [r7, #68]	; 0x44
 8006336:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800633a:	460b      	mov	r3, r1
 800633c:	4313      	orrs	r3, r2
 800633e:	d00e      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006340:	4b86      	ldr	r3, [pc, #536]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	4a85      	ldr	r2, [pc, #532]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006346:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800634a:	6113      	str	r3, [r2, #16]
 800634c:	4b83      	ldr	r3, [pc, #524]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800634e:	6919      	ldr	r1, [r3, #16]
 8006350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006354:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006358:	4a80      	ldr	r2, [pc, #512]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800635a:	430b      	orrs	r3, r1
 800635c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800635e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006366:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800636a:	63bb      	str	r3, [r7, #56]	; 0x38
 800636c:	2300      	movs	r3, #0
 800636e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006370:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006374:	460b      	mov	r3, r1
 8006376:	4313      	orrs	r3, r2
 8006378:	d009      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800637a:	4b78      	ldr	r3, [pc, #480]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800637c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800637e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006388:	4a74      	ldr	r2, [pc, #464]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800638a:	430b      	orrs	r3, r1
 800638c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800638e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006396:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800639a:	633b      	str	r3, [r7, #48]	; 0x30
 800639c:	2300      	movs	r3, #0
 800639e:	637b      	str	r3, [r7, #52]	; 0x34
 80063a0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80063a4:	460b      	mov	r3, r1
 80063a6:	4313      	orrs	r3, r2
 80063a8:	d00a      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80063aa:	4b6c      	ldr	r3, [pc, #432]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80063ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ae:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80063b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ba:	4a68      	ldr	r2, [pc, #416]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80063bc:	430b      	orrs	r3, r1
 80063be:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80063c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c8:	2100      	movs	r1, #0
 80063ca:	62b9      	str	r1, [r7, #40]	; 0x28
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063d2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80063d6:	460b      	mov	r3, r1
 80063d8:	4313      	orrs	r3, r2
 80063da:	d011      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063e0:	3308      	adds	r3, #8
 80063e2:	2100      	movs	r1, #0
 80063e4:	4618      	mov	r0, r3
 80063e6:	f001 f9a3 	bl	8007730 <RCCEx_PLL2_Config>
 80063ea:	4603      	mov	r3, r0
 80063ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80063f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d003      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80063fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	2100      	movs	r1, #0
 800640a:	6239      	str	r1, [r7, #32]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
 8006412:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006416:	460b      	mov	r3, r1
 8006418:	4313      	orrs	r3, r2
 800641a:	d011      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800641c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006420:	3308      	adds	r3, #8
 8006422:	2101      	movs	r1, #1
 8006424:	4618      	mov	r0, r3
 8006426:	f001 f983 	bl	8007730 <RCCEx_PLL2_Config>
 800642a:	4603      	mov	r3, r0
 800642c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006430:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006434:	2b00      	cmp	r3, #0
 8006436:	d003      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006438:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800643c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006448:	2100      	movs	r1, #0
 800644a:	61b9      	str	r1, [r7, #24]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	61fb      	str	r3, [r7, #28]
 8006452:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006456:	460b      	mov	r3, r1
 8006458:	4313      	orrs	r3, r2
 800645a:	d011      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800645c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006460:	3308      	adds	r3, #8
 8006462:	2102      	movs	r1, #2
 8006464:	4618      	mov	r0, r3
 8006466:	f001 f963 	bl	8007730 <RCCEx_PLL2_Config>
 800646a:	4603      	mov	r3, r0
 800646c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006470:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006474:	2b00      	cmp	r3, #0
 8006476:	d003      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006478:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800647c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006480:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006488:	2100      	movs	r1, #0
 800648a:	6139      	str	r1, [r7, #16]
 800648c:	f003 0308 	and.w	r3, r3, #8
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006496:	460b      	mov	r3, r1
 8006498:	4313      	orrs	r3, r2
 800649a:	d011      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800649c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064a0:	3328      	adds	r3, #40	; 0x28
 80064a2:	2100      	movs	r1, #0
 80064a4:	4618      	mov	r0, r3
 80064a6:	f001 f9f5 	bl	8007894 <RCCEx_PLL3_Config>
 80064aa:	4603      	mov	r3, r0
 80064ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80064b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d003      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80064bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80064c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	2100      	movs	r1, #0
 80064ca:	60b9      	str	r1, [r7, #8]
 80064cc:	f003 0310 	and.w	r3, r3, #16
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80064d6:	460b      	mov	r3, r1
 80064d8:	4313      	orrs	r3, r2
 80064da:	d011      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064e0:	3328      	adds	r3, #40	; 0x28
 80064e2:	2101      	movs	r1, #1
 80064e4:	4618      	mov	r0, r3
 80064e6:	f001 f9d5 	bl	8007894 <RCCEx_PLL3_Config>
 80064ea:	4603      	mov	r3, r0
 80064ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80064f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80064fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	2100      	movs	r1, #0
 800650a:	6039      	str	r1, [r7, #0]
 800650c:	f003 0320 	and.w	r3, r3, #32
 8006510:	607b      	str	r3, [r7, #4]
 8006512:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006516:	460b      	mov	r3, r1
 8006518:	4313      	orrs	r3, r2
 800651a:	d011      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800651c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006520:	3328      	adds	r3, #40	; 0x28
 8006522:	2102      	movs	r1, #2
 8006524:	4618      	mov	r0, r3
 8006526:	f001 f9b5 	bl	8007894 <RCCEx_PLL3_Config>
 800652a:	4603      	mov	r3, r0
 800652c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006530:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006538:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800653c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8006540:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	e000      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
}
 800654e:	4618      	mov	r0, r3
 8006550:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8006554:	46bd      	mov	sp, r7
 8006556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800655a:	bf00      	nop
 800655c:	58024400 	.word	0x58024400

08006560 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b090      	sub	sp, #64	; 0x40
 8006564:	af00      	add	r7, sp, #0
 8006566:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800656a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800656e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006572:	430b      	orrs	r3, r1
 8006574:	f040 8094 	bne.w	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006578:	4b97      	ldr	r3, [pc, #604]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800657a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	2b04      	cmp	r3, #4
 8006586:	f200 8087 	bhi.w	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800658a:	a201      	add	r2, pc, #4	; (adr r2, 8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800658c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006590:	080065a5 	.word	0x080065a5
 8006594:	080065cd 	.word	0x080065cd
 8006598:	080065f5 	.word	0x080065f5
 800659c:	08006691 	.word	0x08006691
 80065a0:	0800661d 	.word	0x0800661d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065a4:	4b8c      	ldr	r3, [pc, #560]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065b0:	d108      	bne.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 ff68 	bl	800748c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065c0:	f000 bc97 	b.w	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80065c4:	2300      	movs	r3, #0
 80065c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065c8:	f000 bc93 	b.w	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065cc:	4b82      	ldr	r3, [pc, #520]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065d8:	d108      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065da:	f107 0318 	add.w	r3, r7, #24
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fcac 	bl	8006f3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065e8:	f000 bc83 	b.w	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80065ec:	2300      	movs	r3, #0
 80065ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065f0:	f000 bc7f 	b.w	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065f4:	4b78      	ldr	r3, [pc, #480]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006600:	d108      	bne.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006602:	f107 030c 	add.w	r3, r7, #12
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fdec 	bl	80071e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006610:	f000 bc6f 	b.w	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006614:	2300      	movs	r3, #0
 8006616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006618:	f000 bc6b 	b.w	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800661c:	4b6e      	ldr	r3, [pc, #440]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800661e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006620:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006624:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006626:	4b6c      	ldr	r3, [pc, #432]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0304 	and.w	r3, r3, #4
 800662e:	2b04      	cmp	r3, #4
 8006630:	d10c      	bne.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006634:	2b00      	cmp	r3, #0
 8006636:	d109      	bne.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006638:	4b67      	ldr	r3, [pc, #412]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	08db      	lsrs	r3, r3, #3
 800663e:	f003 0303 	and.w	r3, r3, #3
 8006642:	4a66      	ldr	r2, [pc, #408]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006644:	fa22 f303 	lsr.w	r3, r2, r3
 8006648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800664a:	e01f      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800664c:	4b62      	ldr	r3, [pc, #392]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006658:	d106      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800665a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006660:	d102      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006662:	4b5f      	ldr	r3, [pc, #380]	; (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006666:	e011      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006668:	4b5b      	ldr	r3, [pc, #364]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006670:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006674:	d106      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800667c:	d102      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800667e:	4b59      	ldr	r3, [pc, #356]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006682:	e003      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006684:	2300      	movs	r3, #0
 8006686:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006688:	f000 bc33 	b.w	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800668c:	f000 bc31 	b.w	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006690:	4b55      	ldr	r3, [pc, #340]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006692:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006694:	f000 bc2d 	b.w	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006698:	2300      	movs	r3, #0
 800669a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800669c:	f000 bc29 	b.w	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80066a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066a4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80066a8:	430b      	orrs	r3, r1
 80066aa:	f040 809f 	bne.w	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 80066ae:	4b4a      	ldr	r3, [pc, #296]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80066b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80066b6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066be:	d04d      	beq.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c6:	f200 8084 	bhi.w	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80066ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066cc:	2bc0      	cmp	r3, #192	; 0xc0
 80066ce:	d07d      	beq.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80066d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d2:	2bc0      	cmp	r3, #192	; 0xc0
 80066d4:	d87d      	bhi.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	2b80      	cmp	r3, #128	; 0x80
 80066da:	d02d      	beq.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	2b80      	cmp	r3, #128	; 0x80
 80066e0:	d877      	bhi.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	2b40      	cmp	r3, #64	; 0x40
 80066ec:	d012      	beq.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80066ee:	e070      	b.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80066f0:	4b39      	ldr	r3, [pc, #228]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066fc:	d107      	bne.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fec2 	bl	800748c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800670c:	e3f1      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800670e:	2300      	movs	r3, #0
 8006710:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006712:	e3ee      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006714:	4b30      	ldr	r3, [pc, #192]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800671c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006720:	d107      	bne.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006722:	f107 0318 	add.w	r3, r7, #24
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fc08 	bl	8006f3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006730:	e3df      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006732:	2300      	movs	r3, #0
 8006734:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006736:	e3dc      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006738:	4b27      	ldr	r3, [pc, #156]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006744:	d107      	bne.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006746:	f107 030c 	add.w	r3, r7, #12
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fd4a 	bl	80071e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006754:	e3cd      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800675a:	e3ca      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800675c:	4b1e      	ldr	r3, [pc, #120]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800675e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006760:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006764:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006766:	4b1c      	ldr	r3, [pc, #112]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0304 	and.w	r3, r3, #4
 800676e:	2b04      	cmp	r3, #4
 8006770:	d10c      	bne.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8006772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006774:	2b00      	cmp	r3, #0
 8006776:	d109      	bne.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006778:	4b17      	ldr	r3, [pc, #92]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	08db      	lsrs	r3, r3, #3
 800677e:	f003 0303 	and.w	r3, r3, #3
 8006782:	4a16      	ldr	r2, [pc, #88]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006784:	fa22 f303 	lsr.w	r3, r2, r3
 8006788:	63fb      	str	r3, [r7, #60]	; 0x3c
 800678a:	e01e      	b.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800678c:	4b12      	ldr	r3, [pc, #72]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006798:	d106      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800679a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067a0:	d102      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80067a2:	4b0f      	ldr	r3, [pc, #60]	; (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80067a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067a6:	e010      	b.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067a8:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067b4:	d106      	bne.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80067b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067bc:	d102      	bne.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80067be:	4b09      	ldr	r3, [pc, #36]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80067c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067c2:	e002      	b.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80067c4:	2300      	movs	r3, #0
 80067c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80067c8:	e393      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80067ca:	e392      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80067cc:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80067ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067d0:	e38f      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80067d2:	2300      	movs	r3, #0
 80067d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067d6:	e38c      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80067d8:	58024400 	.word	0x58024400
 80067dc:	03d09000 	.word	0x03d09000
 80067e0:	003d0900 	.word	0x003d0900
 80067e4:	007a1200 	.word	0x007a1200
 80067e8:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80067ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067f0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80067f4:	430b      	orrs	r3, r1
 80067f6:	f040 809c 	bne.w	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 80067fa:	4b9e      	ldr	r3, [pc, #632]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80067fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067fe:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006802:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800680a:	d054      	beq.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800680c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006812:	f200 808b 	bhi.w	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006818:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800681c:	f000 8083 	beq.w	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8006820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006822:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006826:	f200 8081 	bhi.w	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006830:	d02f      	beq.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8006832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006838:	d878      	bhi.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	2b00      	cmp	r3, #0
 800683e:	d004      	beq.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006846:	d012      	beq.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8006848:	e070      	b.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800684a:	4b8a      	ldr	r3, [pc, #552]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006856:	d107      	bne.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800685c:	4618      	mov	r0, r3
 800685e:	f000 fe15 	bl	800748c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006864:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006866:	e344      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006868:	2300      	movs	r3, #0
 800686a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800686c:	e341      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800686e:	4b81      	ldr	r3, [pc, #516]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006876:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800687a:	d107      	bne.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800687c:	f107 0318 	add.w	r3, r7, #24
 8006880:	4618      	mov	r0, r3
 8006882:	f000 fb5b 	bl	8006f3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800688a:	e332      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800688c:	2300      	movs	r3, #0
 800688e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006890:	e32f      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006892:	4b78      	ldr	r3, [pc, #480]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800689a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800689e:	d107      	bne.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068a0:	f107 030c 	add.w	r3, r7, #12
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 fc9d 	bl	80071e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068ae:	e320      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80068b0:	2300      	movs	r3, #0
 80068b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068b4:	e31d      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068b6:	4b6f      	ldr	r3, [pc, #444]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80068b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068be:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068c0:	4b6c      	ldr	r3, [pc, #432]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0304 	and.w	r3, r3, #4
 80068c8:	2b04      	cmp	r3, #4
 80068ca:	d10c      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80068cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d109      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068d2:	4b68      	ldr	r3, [pc, #416]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	08db      	lsrs	r3, r3, #3
 80068d8:	f003 0303 	and.w	r3, r3, #3
 80068dc:	4a66      	ldr	r2, [pc, #408]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80068de:	fa22 f303 	lsr.w	r3, r2, r3
 80068e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068e4:	e01e      	b.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068e6:	4b63      	ldr	r3, [pc, #396]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068f2:	d106      	bne.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80068f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068fa:	d102      	bne.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80068fc:	4b5f      	ldr	r3, [pc, #380]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80068fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006900:	e010      	b.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006902:	4b5c      	ldr	r3, [pc, #368]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800690e:	d106      	bne.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006916:	d102      	bne.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006918:	4b59      	ldr	r3, [pc, #356]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800691a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800691c:	e002      	b.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800691e:	2300      	movs	r3, #0
 8006920:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8006922:	e2e6      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006924:	e2e5      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006926:	4b57      	ldr	r3, [pc, #348]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006928:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800692a:	e2e2      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800692c:	2300      	movs	r3, #0
 800692e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006930:	e2df      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006932:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006936:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800693a:	430b      	orrs	r3, r1
 800693c:	f040 80a7 	bne.w	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006940:	4b4c      	ldr	r3, [pc, #304]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006944:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006948:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800694a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006950:	d055      	beq.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8006952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006954:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006958:	f200 8096 	bhi.w	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800695c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006962:	f000 8084 	beq.w	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8006966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006968:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800696c:	f200 808c 	bhi.w	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006976:	d030      	beq.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8006978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800697e:	f200 8083 	bhi.w	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006984:	2b00      	cmp	r3, #0
 8006986:	d004      	beq.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8006988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800698e:	d012      	beq.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8006990:	e07a      	b.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006992:	4b38      	ldr	r3, [pc, #224]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800699a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800699e:	d107      	bne.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 fd71 	bl	800748c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069ae:	e2a0      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80069b0:	2300      	movs	r3, #0
 80069b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069b4:	e29d      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069b6:	4b2f      	ldr	r3, [pc, #188]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069c2:	d107      	bne.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069c4:	f107 0318 	add.w	r3, r7, #24
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 fab7 	bl	8006f3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069d2:	e28e      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80069d4:	2300      	movs	r3, #0
 80069d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069d8:	e28b      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069da:	4b26      	ldr	r3, [pc, #152]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069e6:	d107      	bne.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069e8:	f107 030c 	add.w	r3, r7, #12
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 fbf9 	bl	80071e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069f6:	e27c      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069fc:	e279      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80069fe:	4b1d      	ldr	r3, [pc, #116]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a06:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a08:	4b1a      	ldr	r3, [pc, #104]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0304 	and.w	r3, r3, #4
 8006a10:	2b04      	cmp	r3, #4
 8006a12:	d10c      	bne.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8006a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d109      	bne.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a1a:	4b16      	ldr	r3, [pc, #88]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	08db      	lsrs	r3, r3, #3
 8006a20:	f003 0303 	and.w	r3, r3, #3
 8006a24:	4a14      	ldr	r2, [pc, #80]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006a26:	fa22 f303 	lsr.w	r3, r2, r3
 8006a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a2c:	e01e      	b.n	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a2e:	4b11      	ldr	r3, [pc, #68]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a3a:	d106      	bne.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a42:	d102      	bne.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a44:	4b0d      	ldr	r3, [pc, #52]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a48:	e010      	b.n	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a4a:	4b0a      	ldr	r3, [pc, #40]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a56:	d106      	bne.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a5e:	d102      	bne.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a60:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a64:	e002      	b.n	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a66:	2300      	movs	r3, #0
 8006a68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006a6a:	e242      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006a6c:	e241      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a6e:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006a70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a72:	e23e      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006a74:	58024400 	.word	0x58024400
 8006a78:	03d09000 	.word	0x03d09000
 8006a7c:	003d0900 	.word	0x003d0900
 8006a80:	007a1200 	.word	0x007a1200
 8006a84:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a8c:	e231      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006a8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a92:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006a96:	430b      	orrs	r3, r1
 8006a98:	f040 8085 	bne.w	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006a9c:	4b9c      	ldr	r3, [pc, #624]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006aa4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006aac:	d06b      	beq.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ab4:	d874      	bhi.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006abc:	d056      	beq.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ac4:	d86c      	bhi.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006acc:	d03b      	beq.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8006ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ad4:	d864      	bhi.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006adc:	d021      	beq.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8006ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ae4:	d85c      	bhi.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d004      	beq.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8006aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006af2:	d004      	beq.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8006af4:	e054      	b.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006af6:	f7fe fb49 	bl	800518c <HAL_RCC_GetPCLK1Freq>
 8006afa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006afc:	e1f9      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006afe:	4b84      	ldr	r3, [pc, #528]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b0a:	d107      	bne.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b0c:	f107 0318 	add.w	r3, r7, #24
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 fa13 	bl	8006f3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b1a:	e1ea      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b20:	e1e7      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b22:	4b7b      	ldr	r3, [pc, #492]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b2e:	d107      	bne.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b30:	f107 030c 	add.w	r3, r7, #12
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 fb55 	bl	80071e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b3e:	e1d8      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b44:	e1d5      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b46:	4b72      	ldr	r3, [pc, #456]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0304 	and.w	r3, r3, #4
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d109      	bne.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b52:	4b6f      	ldr	r3, [pc, #444]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	08db      	lsrs	r3, r3, #3
 8006b58:	f003 0303 	and.w	r3, r3, #3
 8006b5c:	4a6d      	ldr	r2, [pc, #436]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b64:	e1c5      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006b66:	2300      	movs	r3, #0
 8006b68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b6a:	e1c2      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006b6c:	4b68      	ldr	r3, [pc, #416]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b78:	d102      	bne.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8006b7a:	4b67      	ldr	r3, [pc, #412]	; (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b7e:	e1b8      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006b80:	2300      	movs	r3, #0
 8006b82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b84:	e1b5      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b86:	4b62      	ldr	r3, [pc, #392]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b92:	d102      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8006b94:	4b61      	ldr	r3, [pc, #388]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b98:	e1ab      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b9e:	e1a8      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ba4:	e1a5      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006ba6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006baa:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	d173      	bne.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006bb2:	4b57      	ldr	r3, [pc, #348]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006bba:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bc2:	d02f      	beq.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bca:	d863      	bhi.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d004      	beq.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd8:	d012      	beq.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8006bda:	e05b      	b.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bdc:	4b4c      	ldr	r3, [pc, #304]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006be4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006be8:	d107      	bne.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bea:	f107 0318 	add.w	r3, r7, #24
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 f9a4 	bl	8006f3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bf8:	e17b      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bfe:	e178      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c00:	4b43      	ldr	r3, [pc, #268]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c0c:	d107      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c0e:	f107 030c 	add.w	r3, r7, #12
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 fae6 	bl	80071e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c1c:	e169      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c22:	e166      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c24:	4b3a      	ldr	r3, [pc, #232]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c2c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c2e:	4b38      	ldr	r3, [pc, #224]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0304 	and.w	r3, r3, #4
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d10c      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8006c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d109      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c40:	4b33      	ldr	r3, [pc, #204]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	08db      	lsrs	r3, r3, #3
 8006c46:	f003 0303 	and.w	r3, r3, #3
 8006c4a:	4a32      	ldr	r2, [pc, #200]	; (8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c52:	e01e      	b.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c54:	4b2e      	ldr	r3, [pc, #184]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c60:	d106      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8006c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c68:	d102      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c6a:	4b2b      	ldr	r3, [pc, #172]	; (8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c6e:	e010      	b.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c70:	4b27      	ldr	r3, [pc, #156]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c7c:	d106      	bne.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8006c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c84:	d102      	bne.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c86:	4b25      	ldr	r3, [pc, #148]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c8a:	e002      	b.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006c90:	e12f      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006c92:	e12e      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006c94:	2300      	movs	r3, #0
 8006c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c98:	e12b      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006c9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c9e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006ca2:	430b      	orrs	r3, r1
 8006ca4:	d13c      	bne.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006ca6:	4b1a      	ldr	r3, [pc, #104]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cae:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d004      	beq.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8006cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cbc:	d012      	beq.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8006cbe:	e023      	b.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006cc0:	4b13      	ldr	r3, [pc, #76]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ccc:	d107      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 fbda 	bl	800748c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cdc:	e109      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ce2:	e106      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ce4:	4b0a      	ldr	r3, [pc, #40]	; (8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cf0:	d107      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cf2:	f107 0318 	add.w	r3, r7, #24
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 f920 	bl	8006f3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d00:	e0f7      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d02:	2300      	movs	r3, #0
 8006d04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d06:	e0f4      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d0c:	e0f1      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006d0e:	bf00      	nop
 8006d10:	58024400 	.word	0x58024400
 8006d14:	03d09000 	.word	0x03d09000
 8006d18:	003d0900 	.word	0x003d0900
 8006d1c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d24:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	f040 8091 	bne.w	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006d2e:	4b73      	ldr	r3, [pc, #460]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d32:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006d36:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006d3e:	f000 8081 	beq.w	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d44:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006d48:	d87f      	bhi.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d50:	d06b      	beq.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8006d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d58:	d877      	bhi.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d60:	d056      	beq.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8006d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d68:	d86f      	bhi.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d70:	d03b      	beq.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8006d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d78:	d867      	bhi.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d80:	d021      	beq.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8006d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d88:	d85f      	bhi.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d004      	beq.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d96:	d004      	beq.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8006d98:	e057      	b.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006d9a:	f000 f8b9 	bl	8006f10 <HAL_RCCEx_GetD3PCLK1Freq>
 8006d9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006da0:	e0a7      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006da2:	4b56      	ldr	r3, [pc, #344]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006daa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dae:	d107      	bne.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006db0:	f107 0318 	add.w	r3, r7, #24
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 f8c1 	bl	8006f3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dbe:	e098      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dc4:	e095      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006dc6:	4b4d      	ldr	r3, [pc, #308]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dd2:	d107      	bne.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dd4:	f107 030c 	add.w	r3, r7, #12
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fa03 	bl	80071e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006de2:	e086      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006de8:	e083      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006dea:	4b44      	ldr	r3, [pc, #272]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0304 	and.w	r3, r3, #4
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d109      	bne.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006df6:	4b41      	ldr	r3, [pc, #260]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	08db      	lsrs	r3, r3, #3
 8006dfc:	f003 0303 	and.w	r3, r3, #3
 8006e00:	4a3f      	ldr	r2, [pc, #252]	; (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006e02:	fa22 f303 	lsr.w	r3, r2, r3
 8006e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e08:	e073      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e0e:	e070      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006e10:	4b3a      	ldr	r3, [pc, #232]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e1c:	d102      	bne.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8006e1e:	4b39      	ldr	r3, [pc, #228]	; (8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8006e20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e22:	e066      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006e24:	2300      	movs	r3, #0
 8006e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e28:	e063      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e2a:	4b34      	ldr	r3, [pc, #208]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e36:	d102      	bne.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8006e38:	4b33      	ldr	r3, [pc, #204]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e3c:	e059      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e42:	e056      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e44:	4b31      	ldr	r3, [pc, #196]	; (8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8006e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e48:	e053      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e4e:	e050      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006e50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e54:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006e58:	430b      	orrs	r3, r1
 8006e5a:	d148      	bne.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006e5c:	4b27      	ldr	r3, [pc, #156]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e64:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e6c:	d02a      	beq.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e74:	d838      	bhi.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d004      	beq.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e82:	d00d      	beq.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8006e84:	e030      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e86:	4b1d      	ldr	r3, [pc, #116]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e92:	d102      	bne.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8006e94:	4b1c      	ldr	r3, [pc, #112]	; (8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e98:	e02b      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e9e:	e028      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ea0:	4b16      	ldr	r3, [pc, #88]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ea8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006eac:	d107      	bne.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 faea 	bl	800748c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ebc:	e019      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ec2:	e016      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ec4:	4b0d      	ldr	r3, [pc, #52]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ecc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ed0:	d107      	bne.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ed2:	f107 0318 	add.w	r3, r7, #24
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 f830 	bl	8006f3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ee0:	e007      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ee6:	e004      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eec:	e001      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3740      	adds	r7, #64	; 0x40
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	58024400 	.word	0x58024400
 8006f00:	03d09000 	.word	0x03d09000
 8006f04:	003d0900 	.word	0x003d0900
 8006f08:	007a1200 	.word	0x007a1200
 8006f0c:	00bb8000 	.word	0x00bb8000

08006f10 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006f14:	f7fe f90a 	bl	800512c <HAL_RCC_GetHCLKFreq>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	4b06      	ldr	r3, [pc, #24]	; (8006f34 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	091b      	lsrs	r3, r3, #4
 8006f20:	f003 0307 	and.w	r3, r3, #7
 8006f24:	4904      	ldr	r1, [pc, #16]	; (8006f38 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006f26:	5ccb      	ldrb	r3, [r1, r3]
 8006f28:	f003 031f 	and.w	r3, r3, #31
 8006f2c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	58024400 	.word	0x58024400
 8006f38:	0800ca50 	.word	0x0800ca50

08006f3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b089      	sub	sp, #36	; 0x24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f44:	4ba1      	ldr	r3, [pc, #644]	; (80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f48:	f003 0303 	and.w	r3, r3, #3
 8006f4c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006f4e:	4b9f      	ldr	r3, [pc, #636]	; (80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f52:	0b1b      	lsrs	r3, r3, #12
 8006f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f58:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f5a:	4b9c      	ldr	r3, [pc, #624]	; (80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5e:	091b      	lsrs	r3, r3, #4
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006f66:	4b99      	ldr	r3, [pc, #612]	; (80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6a:	08db      	lsrs	r3, r3, #3
 8006f6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	fb02 f303 	mul.w	r3, r2, r3
 8006f76:	ee07 3a90 	vmov	s15, r3
 8006f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 8111 	beq.w	80071ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	f000 8083 	beq.w	8007098 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	f200 80a1 	bhi.w	80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d003      	beq.n	8006fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d056      	beq.n	8007054 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006fa6:	e099      	b.n	80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fa8:	4b88      	ldr	r3, [pc, #544]	; (80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0320 	and.w	r3, r3, #32
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d02d      	beq.n	8007010 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fb4:	4b85      	ldr	r3, [pc, #532]	; (80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	08db      	lsrs	r3, r3, #3
 8006fba:	f003 0303 	and.w	r3, r3, #3
 8006fbe:	4a84      	ldr	r2, [pc, #528]	; (80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	ee07 3a90 	vmov	s15, r3
 8006fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	ee07 3a90 	vmov	s15, r3
 8006fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fde:	4b7b      	ldr	r3, [pc, #492]	; (80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe6:	ee07 3a90 	vmov	s15, r3
 8006fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ff2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800700a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800700e:	e087      	b.n	8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	ee07 3a90 	vmov	s15, r3
 8007016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800701a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80071d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800701e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007022:	4b6a      	ldr	r3, [pc, #424]	; (80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800702a:	ee07 3a90 	vmov	s15, r3
 800702e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007032:	ed97 6a03 	vldr	s12, [r7, #12]
 8007036:	eddf 5a67 	vldr	s11, [pc, #412]	; 80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800703a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800703e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800704a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800704e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007052:	e065      	b.n	8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	ee07 3a90 	vmov	s15, r3
 800705a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80071dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007066:	4b59      	ldr	r3, [pc, #356]	; (80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800706e:	ee07 3a90 	vmov	s15, r3
 8007072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007076:	ed97 6a03 	vldr	s12, [r7, #12]
 800707a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800707e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800708a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800708e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007092:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007096:	e043      	b.n	8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	ee07 3a90 	vmov	s15, r3
 800709e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80071e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80070a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070aa:	4b48      	ldr	r3, [pc, #288]	; (80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b2:	ee07 3a90 	vmov	s15, r3
 80070b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80070be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070da:	e021      	b.n	8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	ee07 3a90 	vmov	s15, r3
 80070e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80071dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ee:	4b37      	ldr	r3, [pc, #220]	; (80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007102:	eddf 5a34 	vldr	s11, [pc, #208]	; 80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800710a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800710e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800711a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800711e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007120:	4b2a      	ldr	r3, [pc, #168]	; (80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007124:	0a5b      	lsrs	r3, r3, #9
 8007126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007136:	ee37 7a87 	vadd.f32	s14, s15, s14
 800713a:	edd7 6a07 	vldr	s13, [r7, #28]
 800713e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007146:	ee17 2a90 	vmov	r2, s15
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800714e:	4b1f      	ldr	r3, [pc, #124]	; (80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007152:	0c1b      	lsrs	r3, r3, #16
 8007154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007158:	ee07 3a90 	vmov	s15, r3
 800715c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007160:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007164:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007168:	edd7 6a07 	vldr	s13, [r7, #28]
 800716c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007174:	ee17 2a90 	vmov	r2, s15
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800717c:	4b13      	ldr	r3, [pc, #76]	; (80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800717e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007180:	0e1b      	lsrs	r3, r3, #24
 8007182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007192:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007196:	edd7 6a07 	vldr	s13, [r7, #28]
 800719a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800719e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071a2:	ee17 2a90 	vmov	r2, s15
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80071aa:	e008      	b.n	80071be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	609a      	str	r2, [r3, #8]
}
 80071be:	bf00      	nop
 80071c0:	3724      	adds	r7, #36	; 0x24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	58024400 	.word	0x58024400
 80071d0:	03d09000 	.word	0x03d09000
 80071d4:	46000000 	.word	0x46000000
 80071d8:	4c742400 	.word	0x4c742400
 80071dc:	4a742400 	.word	0x4a742400
 80071e0:	4af42400 	.word	0x4af42400

080071e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b089      	sub	sp, #36	; 0x24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071ec:	4ba1      	ldr	r3, [pc, #644]	; (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f0:	f003 0303 	and.w	r3, r3, #3
 80071f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80071f6:	4b9f      	ldr	r3, [pc, #636]	; (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fa:	0d1b      	lsrs	r3, r3, #20
 80071fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007200:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007202:	4b9c      	ldr	r3, [pc, #624]	; (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007206:	0a1b      	lsrs	r3, r3, #8
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800720e:	4b99      	ldr	r3, [pc, #612]	; (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007212:	08db      	lsrs	r3, r3, #3
 8007214:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	fb02 f303 	mul.w	r3, r2, r3
 800721e:	ee07 3a90 	vmov	s15, r3
 8007222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007226:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 8111 	beq.w	8007454 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	2b02      	cmp	r3, #2
 8007236:	f000 8083 	beq.w	8007340 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	2b02      	cmp	r3, #2
 800723e:	f200 80a1 	bhi.w	8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d003      	beq.n	8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d056      	beq.n	80072fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800724e:	e099      	b.n	8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007250:	4b88      	ldr	r3, [pc, #544]	; (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0320 	and.w	r3, r3, #32
 8007258:	2b00      	cmp	r3, #0
 800725a:	d02d      	beq.n	80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800725c:	4b85      	ldr	r3, [pc, #532]	; (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	08db      	lsrs	r3, r3, #3
 8007262:	f003 0303 	and.w	r3, r3, #3
 8007266:	4a84      	ldr	r2, [pc, #528]	; (8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007268:	fa22 f303 	lsr.w	r3, r2, r3
 800726c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	ee07 3a90 	vmov	s15, r3
 8007274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007286:	4b7b      	ldr	r3, [pc, #492]	; (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728e:	ee07 3a90 	vmov	s15, r3
 8007292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007296:	ed97 6a03 	vldr	s12, [r7, #12]
 800729a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800747c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800729e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80072b6:	e087      	b.n	80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80072c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ca:	4b6a      	ldr	r3, [pc, #424]	; (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072da:	ed97 6a03 	vldr	s12, [r7, #12]
 80072de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800747c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072fa:	e065      	b.n	80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007306:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007484 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800730a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800730e:	4b59      	ldr	r3, [pc, #356]	; (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800731e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007322:	eddf 5a56 	vldr	s11, [pc, #344]	; 800747c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800732a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800732e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800733a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800733e:	e043      	b.n	80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007488 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800734e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007352:	4b48      	ldr	r3, [pc, #288]	; (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007362:	ed97 6a03 	vldr	s12, [r7, #12]
 8007366:	eddf 5a45 	vldr	s11, [pc, #276]	; 800747c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800736a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800736e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800737a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800737e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007382:	e021      	b.n	80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	ee07 3a90 	vmov	s15, r3
 800738a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007484 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007396:	4b37      	ldr	r3, [pc, #220]	; (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800739e:	ee07 3a90 	vmov	s15, r3
 80073a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800747c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80073c8:	4b2a      	ldr	r3, [pc, #168]	; (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073cc:	0a5b      	lsrs	r3, r3, #9
 80073ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073d2:	ee07 3a90 	vmov	s15, r3
 80073d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80073e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073ee:	ee17 2a90 	vmov	r2, s15
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80073f6:	4b1f      	ldr	r3, [pc, #124]	; (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fa:	0c1b      	lsrs	r3, r3, #16
 80073fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007400:	ee07 3a90 	vmov	s15, r3
 8007404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007408:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800740c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007410:	edd7 6a07 	vldr	s13, [r7, #28]
 8007414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800741c:	ee17 2a90 	vmov	r2, s15
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007424:	4b13      	ldr	r3, [pc, #76]	; (8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007428:	0e1b      	lsrs	r3, r3, #24
 800742a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800742e:	ee07 3a90 	vmov	s15, r3
 8007432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007436:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800743a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800743e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800744a:	ee17 2a90 	vmov	r2, s15
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007452:	e008      	b.n	8007466 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	609a      	str	r2, [r3, #8]
}
 8007466:	bf00      	nop
 8007468:	3724      	adds	r7, #36	; 0x24
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	58024400 	.word	0x58024400
 8007478:	03d09000 	.word	0x03d09000
 800747c:	46000000 	.word	0x46000000
 8007480:	4c742400 	.word	0x4c742400
 8007484:	4a742400 	.word	0x4a742400
 8007488:	4af42400 	.word	0x4af42400

0800748c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800748c:	b480      	push	{r7}
 800748e:	b089      	sub	sp, #36	; 0x24
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007494:	4ba0      	ldr	r3, [pc, #640]	; (8007718 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007498:	f003 0303 	and.w	r3, r3, #3
 800749c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800749e:	4b9e      	ldr	r3, [pc, #632]	; (8007718 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a2:	091b      	lsrs	r3, r3, #4
 80074a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074a8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80074aa:	4b9b      	ldr	r3, [pc, #620]	; (8007718 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80074b4:	4b98      	ldr	r3, [pc, #608]	; (8007718 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b8:	08db      	lsrs	r3, r3, #3
 80074ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	fb02 f303 	mul.w	r3, r2, r3
 80074c4:	ee07 3a90 	vmov	s15, r3
 80074c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074cc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f000 8111 	beq.w	80076fa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	2b02      	cmp	r3, #2
 80074dc:	f000 8083 	beq.w	80075e6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	f200 80a1 	bhi.w	800762a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d056      	beq.n	80075a2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80074f4:	e099      	b.n	800762a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074f6:	4b88      	ldr	r3, [pc, #544]	; (8007718 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0320 	and.w	r3, r3, #32
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d02d      	beq.n	800755e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007502:	4b85      	ldr	r3, [pc, #532]	; (8007718 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	08db      	lsrs	r3, r3, #3
 8007508:	f003 0303 	and.w	r3, r3, #3
 800750c:	4a83      	ldr	r2, [pc, #524]	; (800771c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800750e:	fa22 f303 	lsr.w	r3, r2, r3
 8007512:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	ee07 3a90 	vmov	s15, r3
 8007524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007528:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800752c:	4b7a      	ldr	r3, [pc, #488]	; (8007718 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800752e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007534:	ee07 3a90 	vmov	s15, r3
 8007538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800753c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007540:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007720 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007544:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007548:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800754c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007550:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007558:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800755c:	e087      	b.n	800766e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	ee07 3a90 	vmov	s15, r3
 8007564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007568:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007724 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800756c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007570:	4b69      	ldr	r3, [pc, #420]	; (8007718 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007578:	ee07 3a90 	vmov	s15, r3
 800757c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007580:	ed97 6a03 	vldr	s12, [r7, #12]
 8007584:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007720 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007588:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800758c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007590:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007594:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800759c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075a0:	e065      	b.n	800766e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	ee07 3a90 	vmov	s15, r3
 80075a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ac:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007728 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80075b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075b4:	4b58      	ldr	r3, [pc, #352]	; (8007718 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075bc:	ee07 3a90 	vmov	s15, r3
 80075c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80075c8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007720 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075e4:	e043      	b.n	800766e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	ee07 3a90 	vmov	s15, r3
 80075ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800772c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80075f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075f8:	4b47      	ldr	r3, [pc, #284]	; (8007718 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007600:	ee07 3a90 	vmov	s15, r3
 8007604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007608:	ed97 6a03 	vldr	s12, [r7, #12]
 800760c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007720 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007610:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007614:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007618:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800761c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007624:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007628:	e021      	b.n	800766e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	ee07 3a90 	vmov	s15, r3
 8007630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007634:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007724 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007638:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800763c:	4b36      	ldr	r3, [pc, #216]	; (8007718 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800763e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007644:	ee07 3a90 	vmov	s15, r3
 8007648:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800764c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007650:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007720 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007654:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007658:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800765c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007660:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007668:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800766c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800766e:	4b2a      	ldr	r3, [pc, #168]	; (8007718 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007672:	0a5b      	lsrs	r3, r3, #9
 8007674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007678:	ee07 3a90 	vmov	s15, r3
 800767c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007680:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007684:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007688:	edd7 6a07 	vldr	s13, [r7, #28]
 800768c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007694:	ee17 2a90 	vmov	r2, s15
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800769c:	4b1e      	ldr	r3, [pc, #120]	; (8007718 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800769e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a0:	0c1b      	lsrs	r3, r3, #16
 80076a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80076ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076c2:	ee17 2a90 	vmov	r2, s15
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80076ca:	4b13      	ldr	r3, [pc, #76]	; (8007718 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ce:	0e1b      	lsrs	r3, r3, #24
 80076d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076d4:	ee07 3a90 	vmov	s15, r3
 80076d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80076e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076f0:	ee17 2a90 	vmov	r2, s15
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80076f8:	e008      	b.n	800770c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	609a      	str	r2, [r3, #8]
}
 800770c:	bf00      	nop
 800770e:	3724      	adds	r7, #36	; 0x24
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr
 8007718:	58024400 	.word	0x58024400
 800771c:	03d09000 	.word	0x03d09000
 8007720:	46000000 	.word	0x46000000
 8007724:	4c742400 	.word	0x4c742400
 8007728:	4a742400 	.word	0x4a742400
 800772c:	4af42400 	.word	0x4af42400

08007730 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800773e:	4b53      	ldr	r3, [pc, #332]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	2b03      	cmp	r3, #3
 8007748:	d101      	bne.n	800774e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e099      	b.n	8007882 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800774e:	4b4f      	ldr	r3, [pc, #316]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a4e      	ldr	r2, [pc, #312]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007754:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007758:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800775a:	f7f9 fda1 	bl	80012a0 <HAL_GetTick>
 800775e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007760:	e008      	b.n	8007774 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007762:	f7f9 fd9d 	bl	80012a0 <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	2b02      	cmp	r3, #2
 800776e:	d901      	bls.n	8007774 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e086      	b.n	8007882 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007774:	4b45      	ldr	r3, [pc, #276]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1f0      	bne.n	8007762 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007780:	4b42      	ldr	r3, [pc, #264]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007784:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	031b      	lsls	r3, r3, #12
 800778e:	493f      	ldr	r1, [pc, #252]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007790:	4313      	orrs	r3, r2
 8007792:	628b      	str	r3, [r1, #40]	; 0x28
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	3b01      	subs	r3, #1
 800779a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	025b      	lsls	r3, r3, #9
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	431a      	orrs	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	3b01      	subs	r3, #1
 80077b0:	041b      	lsls	r3, r3, #16
 80077b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80077b6:	431a      	orrs	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	3b01      	subs	r3, #1
 80077be:	061b      	lsls	r3, r3, #24
 80077c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80077c4:	4931      	ldr	r1, [pc, #196]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80077ca:	4b30      	ldr	r3, [pc, #192]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 80077cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	492d      	ldr	r1, [pc, #180]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80077dc:	4b2b      	ldr	r3, [pc, #172]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 80077de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e0:	f023 0220 	bic.w	r2, r3, #32
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	4928      	ldr	r1, [pc, #160]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80077ee:	4b27      	ldr	r3, [pc, #156]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 80077f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f2:	4a26      	ldr	r2, [pc, #152]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 80077f4:	f023 0310 	bic.w	r3, r3, #16
 80077f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80077fa:	4b24      	ldr	r3, [pc, #144]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 80077fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077fe:	4b24      	ldr	r3, [pc, #144]	; (8007890 <RCCEx_PLL2_Config+0x160>)
 8007800:	4013      	ands	r3, r2
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	69d2      	ldr	r2, [r2, #28]
 8007806:	00d2      	lsls	r2, r2, #3
 8007808:	4920      	ldr	r1, [pc, #128]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 800780a:	4313      	orrs	r3, r2
 800780c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800780e:	4b1f      	ldr	r3, [pc, #124]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007812:	4a1e      	ldr	r2, [pc, #120]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007814:	f043 0310 	orr.w	r3, r3, #16
 8007818:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d106      	bne.n	800782e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007820:	4b1a      	ldr	r3, [pc, #104]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	4a19      	ldr	r2, [pc, #100]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007826:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800782a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800782c:	e00f      	b.n	800784e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d106      	bne.n	8007842 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007834:	4b15      	ldr	r3, [pc, #84]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007838:	4a14      	ldr	r2, [pc, #80]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 800783a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800783e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007840:	e005      	b.n	800784e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007842:	4b12      	ldr	r3, [pc, #72]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007846:	4a11      	ldr	r2, [pc, #68]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007848:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800784c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800784e:	4b0f      	ldr	r3, [pc, #60]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a0e      	ldr	r2, [pc, #56]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007854:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007858:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800785a:	f7f9 fd21 	bl	80012a0 <HAL_GetTick>
 800785e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007860:	e008      	b.n	8007874 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007862:	f7f9 fd1d 	bl	80012a0 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	2b02      	cmp	r3, #2
 800786e:	d901      	bls.n	8007874 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e006      	b.n	8007882 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007874:	4b05      	ldr	r3, [pc, #20]	; (800788c <RCCEx_PLL2_Config+0x15c>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d0f0      	beq.n	8007862 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007880:	7bfb      	ldrb	r3, [r7, #15]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	58024400 	.word	0x58024400
 8007890:	ffff0007 	.word	0xffff0007

08007894 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078a2:	4b53      	ldr	r3, [pc, #332]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 80078a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a6:	f003 0303 	and.w	r3, r3, #3
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	d101      	bne.n	80078b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e099      	b.n	80079e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80078b2:	4b4f      	ldr	r3, [pc, #316]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a4e      	ldr	r2, [pc, #312]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 80078b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078be:	f7f9 fcef 	bl	80012a0 <HAL_GetTick>
 80078c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078c4:	e008      	b.n	80078d8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80078c6:	f7f9 fceb 	bl	80012a0 <HAL_GetTick>
 80078ca:	4602      	mov	r2, r0
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d901      	bls.n	80078d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e086      	b.n	80079e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078d8:	4b45      	ldr	r3, [pc, #276]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1f0      	bne.n	80078c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80078e4:	4b42      	ldr	r3, [pc, #264]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 80078e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	051b      	lsls	r3, r3, #20
 80078f2:	493f      	ldr	r1, [pc, #252]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	628b      	str	r3, [r1, #40]	; 0x28
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	3b01      	subs	r3, #1
 8007908:	025b      	lsls	r3, r3, #9
 800790a:	b29b      	uxth	r3, r3
 800790c:	431a      	orrs	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	3b01      	subs	r3, #1
 8007914:	041b      	lsls	r3, r3, #16
 8007916:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800791a:	431a      	orrs	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	3b01      	subs	r3, #1
 8007922:	061b      	lsls	r3, r3, #24
 8007924:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007928:	4931      	ldr	r1, [pc, #196]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 800792a:	4313      	orrs	r3, r2
 800792c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800792e:	4b30      	ldr	r3, [pc, #192]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 8007930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007932:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	492d      	ldr	r1, [pc, #180]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 800793c:	4313      	orrs	r3, r2
 800793e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007940:	4b2b      	ldr	r3, [pc, #172]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	4928      	ldr	r1, [pc, #160]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 800794e:	4313      	orrs	r3, r2
 8007950:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007952:	4b27      	ldr	r3, [pc, #156]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	4a26      	ldr	r2, [pc, #152]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 8007958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800795c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800795e:	4b24      	ldr	r3, [pc, #144]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 8007960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007962:	4b24      	ldr	r3, [pc, #144]	; (80079f4 <RCCEx_PLL3_Config+0x160>)
 8007964:	4013      	ands	r3, r2
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	69d2      	ldr	r2, [r2, #28]
 800796a:	00d2      	lsls	r2, r2, #3
 800796c:	4920      	ldr	r1, [pc, #128]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 800796e:	4313      	orrs	r3, r2
 8007970:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007972:	4b1f      	ldr	r3, [pc, #124]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 8007974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007976:	4a1e      	ldr	r2, [pc, #120]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 8007978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800797c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d106      	bne.n	8007992 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007984:	4b1a      	ldr	r3, [pc, #104]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007988:	4a19      	ldr	r2, [pc, #100]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 800798a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800798e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007990:	e00f      	b.n	80079b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d106      	bne.n	80079a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007998:	4b15      	ldr	r3, [pc, #84]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 800799a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799c:	4a14      	ldr	r2, [pc, #80]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 800799e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80079a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079a4:	e005      	b.n	80079b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80079a6:	4b12      	ldr	r3, [pc, #72]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 80079a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079aa:	4a11      	ldr	r2, [pc, #68]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 80079ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80079b2:	4b0f      	ldr	r3, [pc, #60]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a0e      	ldr	r2, [pc, #56]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 80079b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079be:	f7f9 fc6f 	bl	80012a0 <HAL_GetTick>
 80079c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079c4:	e008      	b.n	80079d8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80079c6:	f7f9 fc6b 	bl	80012a0 <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d901      	bls.n	80079d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e006      	b.n	80079e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079d8:	4b05      	ldr	r3, [pc, #20]	; (80079f0 <RCCEx_PLL3_Config+0x15c>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d0f0      	beq.n	80079c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	58024400 	.word	0x58024400
 80079f4:	ffff0007 	.word	0xffff0007

080079f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e049      	b.n	8007a9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d106      	bne.n	8007a24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7f9 fa20 	bl	8000e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	3304      	adds	r3, #4
 8007a34:	4619      	mov	r1, r3
 8007a36:	4610      	mov	r0, r2
 8007a38:	f000 fa08 	bl	8007e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b082      	sub	sp, #8
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e049      	b.n	8007b4c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d106      	bne.n	8007ad2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f841 	bl	8007b54 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	3304      	adds	r3, #4
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	f000 f9b1 	bl	8007e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d101      	bne.n	8007b86 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007b82:	2302      	movs	r3, #2
 8007b84:	e066      	b.n	8007c54 <HAL_TIM_OC_ConfigChannel+0xec>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b14      	cmp	r3, #20
 8007b92:	d857      	bhi.n	8007c44 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007b94:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9a:	bf00      	nop
 8007b9c:	08007bf1 	.word	0x08007bf1
 8007ba0:	08007c45 	.word	0x08007c45
 8007ba4:	08007c45 	.word	0x08007c45
 8007ba8:	08007c45 	.word	0x08007c45
 8007bac:	08007bff 	.word	0x08007bff
 8007bb0:	08007c45 	.word	0x08007c45
 8007bb4:	08007c45 	.word	0x08007c45
 8007bb8:	08007c45 	.word	0x08007c45
 8007bbc:	08007c0d 	.word	0x08007c0d
 8007bc0:	08007c45 	.word	0x08007c45
 8007bc4:	08007c45 	.word	0x08007c45
 8007bc8:	08007c45 	.word	0x08007c45
 8007bcc:	08007c1b 	.word	0x08007c1b
 8007bd0:	08007c45 	.word	0x08007c45
 8007bd4:	08007c45 	.word	0x08007c45
 8007bd8:	08007c45 	.word	0x08007c45
 8007bdc:	08007c29 	.word	0x08007c29
 8007be0:	08007c45 	.word	0x08007c45
 8007be4:	08007c45 	.word	0x08007c45
 8007be8:	08007c45 	.word	0x08007c45
 8007bec:	08007c37 	.word	0x08007c37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68b9      	ldr	r1, [r7, #8]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 f9c2 	bl	8007f80 <TIM_OC1_SetConfig>
      break;
 8007bfc:	e025      	b.n	8007c4a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68b9      	ldr	r1, [r7, #8]
 8007c04:	4618      	mov	r0, r3
 8007c06:	f000 fa4b 	bl	80080a0 <TIM_OC2_SetConfig>
      break;
 8007c0a:	e01e      	b.n	8007c4a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68b9      	ldr	r1, [r7, #8]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 face 	bl	80081b4 <TIM_OC3_SetConfig>
      break;
 8007c18:	e017      	b.n	8007c4a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68b9      	ldr	r1, [r7, #8]
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 fb4f 	bl	80082c4 <TIM_OC4_SetConfig>
      break;
 8007c26:	e010      	b.n	8007c4a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68b9      	ldr	r1, [r7, #8]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 fbb2 	bl	8008398 <TIM_OC5_SetConfig>
      break;
 8007c34:	e009      	b.n	8007c4a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68b9      	ldr	r1, [r7, #8]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 fc0f 	bl	8008460 <TIM_OC6_SetConfig>
      break;
 8007c42:	e002      	b.n	8007c4a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	75fb      	strb	r3, [r7, #23]
      break;
 8007c48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3718      	adds	r7, #24
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d101      	bne.n	8007c78 <HAL_TIM_ConfigClockSource+0x1c>
 8007c74:	2302      	movs	r3, #2
 8007c76:	e0dc      	b.n	8007e32 <HAL_TIM_ConfigClockSource+0x1d6>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2202      	movs	r2, #2
 8007c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	4b6a      	ldr	r3, [pc, #424]	; (8007e3c <HAL_TIM_ConfigClockSource+0x1e0>)
 8007c94:	4013      	ands	r3, r2
 8007c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a64      	ldr	r2, [pc, #400]	; (8007e40 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	f000 80a9 	beq.w	8007e06 <HAL_TIM_ConfigClockSource+0x1aa>
 8007cb4:	4a62      	ldr	r2, [pc, #392]	; (8007e40 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	f200 80ae 	bhi.w	8007e18 <HAL_TIM_ConfigClockSource+0x1bc>
 8007cbc:	4a61      	ldr	r2, [pc, #388]	; (8007e44 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	f000 80a1 	beq.w	8007e06 <HAL_TIM_ConfigClockSource+0x1aa>
 8007cc4:	4a5f      	ldr	r2, [pc, #380]	; (8007e44 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	f200 80a6 	bhi.w	8007e18 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ccc:	4a5e      	ldr	r2, [pc, #376]	; (8007e48 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	f000 8099 	beq.w	8007e06 <HAL_TIM_ConfigClockSource+0x1aa>
 8007cd4:	4a5c      	ldr	r2, [pc, #368]	; (8007e48 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	f200 809e 	bhi.w	8007e18 <HAL_TIM_ConfigClockSource+0x1bc>
 8007cdc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007ce0:	f000 8091 	beq.w	8007e06 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ce4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007ce8:	f200 8096 	bhi.w	8007e18 <HAL_TIM_ConfigClockSource+0x1bc>
 8007cec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cf0:	f000 8089 	beq.w	8007e06 <HAL_TIM_ConfigClockSource+0x1aa>
 8007cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cf8:	f200 808e 	bhi.w	8007e18 <HAL_TIM_ConfigClockSource+0x1bc>
 8007cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d00:	d03e      	beq.n	8007d80 <HAL_TIM_ConfigClockSource+0x124>
 8007d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d06:	f200 8087 	bhi.w	8007e18 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d0e:	f000 8086 	beq.w	8007e1e <HAL_TIM_ConfigClockSource+0x1c2>
 8007d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d16:	d87f      	bhi.n	8007e18 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d18:	2b70      	cmp	r3, #112	; 0x70
 8007d1a:	d01a      	beq.n	8007d52 <HAL_TIM_ConfigClockSource+0xf6>
 8007d1c:	2b70      	cmp	r3, #112	; 0x70
 8007d1e:	d87b      	bhi.n	8007e18 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d20:	2b60      	cmp	r3, #96	; 0x60
 8007d22:	d050      	beq.n	8007dc6 <HAL_TIM_ConfigClockSource+0x16a>
 8007d24:	2b60      	cmp	r3, #96	; 0x60
 8007d26:	d877      	bhi.n	8007e18 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d28:	2b50      	cmp	r3, #80	; 0x50
 8007d2a:	d03c      	beq.n	8007da6 <HAL_TIM_ConfigClockSource+0x14a>
 8007d2c:	2b50      	cmp	r3, #80	; 0x50
 8007d2e:	d873      	bhi.n	8007e18 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d30:	2b40      	cmp	r3, #64	; 0x40
 8007d32:	d058      	beq.n	8007de6 <HAL_TIM_ConfigClockSource+0x18a>
 8007d34:	2b40      	cmp	r3, #64	; 0x40
 8007d36:	d86f      	bhi.n	8007e18 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d38:	2b30      	cmp	r3, #48	; 0x30
 8007d3a:	d064      	beq.n	8007e06 <HAL_TIM_ConfigClockSource+0x1aa>
 8007d3c:	2b30      	cmp	r3, #48	; 0x30
 8007d3e:	d86b      	bhi.n	8007e18 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d40:	2b20      	cmp	r3, #32
 8007d42:	d060      	beq.n	8007e06 <HAL_TIM_ConfigClockSource+0x1aa>
 8007d44:	2b20      	cmp	r3, #32
 8007d46:	d867      	bhi.n	8007e18 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d05c      	beq.n	8007e06 <HAL_TIM_ConfigClockSource+0x1aa>
 8007d4c:	2b10      	cmp	r3, #16
 8007d4e:	d05a      	beq.n	8007e06 <HAL_TIM_ConfigClockSource+0x1aa>
 8007d50:	e062      	b.n	8007e18 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6818      	ldr	r0, [r3, #0]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	6899      	ldr	r1, [r3, #8]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	685a      	ldr	r2, [r3, #4]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	f000 fc61 	bl	8008628 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	609a      	str	r2, [r3, #8]
      break;
 8007d7e:	e04f      	b.n	8007e20 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6818      	ldr	r0, [r3, #0]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	6899      	ldr	r1, [r3, #8]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	f000 fc4a 	bl	8008628 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	689a      	ldr	r2, [r3, #8]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007da2:	609a      	str	r2, [r3, #8]
      break;
 8007da4:	e03c      	b.n	8007e20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6818      	ldr	r0, [r3, #0]
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	6859      	ldr	r1, [r3, #4]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	461a      	mov	r2, r3
 8007db4:	f000 fbba 	bl	800852c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2150      	movs	r1, #80	; 0x50
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 fc14 	bl	80085ec <TIM_ITRx_SetConfig>
      break;
 8007dc4:	e02c      	b.n	8007e20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	6859      	ldr	r1, [r3, #4]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	f000 fbd9 	bl	800858a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2160      	movs	r1, #96	; 0x60
 8007dde:	4618      	mov	r0, r3
 8007de0:	f000 fc04 	bl	80085ec <TIM_ITRx_SetConfig>
      break;
 8007de4:	e01c      	b.n	8007e20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6818      	ldr	r0, [r3, #0]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	6859      	ldr	r1, [r3, #4]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	461a      	mov	r2, r3
 8007df4:	f000 fb9a 	bl	800852c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2140      	movs	r1, #64	; 0x40
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 fbf4 	bl	80085ec <TIM_ITRx_SetConfig>
      break;
 8007e04:	e00c      	b.n	8007e20 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4619      	mov	r1, r3
 8007e10:	4610      	mov	r0, r2
 8007e12:	f000 fbeb 	bl	80085ec <TIM_ITRx_SetConfig>
      break;
 8007e16:	e003      	b.n	8007e20 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e1c:	e000      	b.n	8007e20 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007e1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	ffceff88 	.word	0xffceff88
 8007e40:	00100040 	.word	0x00100040
 8007e44:	00100030 	.word	0x00100030
 8007e48:	00100020 	.word	0x00100020

08007e4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a40      	ldr	r2, [pc, #256]	; (8007f60 <TIM_Base_SetConfig+0x114>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d013      	beq.n	8007e8c <TIM_Base_SetConfig+0x40>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e6a:	d00f      	beq.n	8007e8c <TIM_Base_SetConfig+0x40>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a3d      	ldr	r2, [pc, #244]	; (8007f64 <TIM_Base_SetConfig+0x118>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d00b      	beq.n	8007e8c <TIM_Base_SetConfig+0x40>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a3c      	ldr	r2, [pc, #240]	; (8007f68 <TIM_Base_SetConfig+0x11c>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d007      	beq.n	8007e8c <TIM_Base_SetConfig+0x40>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a3b      	ldr	r2, [pc, #236]	; (8007f6c <TIM_Base_SetConfig+0x120>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d003      	beq.n	8007e8c <TIM_Base_SetConfig+0x40>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a3a      	ldr	r2, [pc, #232]	; (8007f70 <TIM_Base_SetConfig+0x124>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d108      	bne.n	8007e9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a2f      	ldr	r2, [pc, #188]	; (8007f60 <TIM_Base_SetConfig+0x114>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d01f      	beq.n	8007ee6 <TIM_Base_SetConfig+0x9a>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eac:	d01b      	beq.n	8007ee6 <TIM_Base_SetConfig+0x9a>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a2c      	ldr	r2, [pc, #176]	; (8007f64 <TIM_Base_SetConfig+0x118>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d017      	beq.n	8007ee6 <TIM_Base_SetConfig+0x9a>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a2b      	ldr	r2, [pc, #172]	; (8007f68 <TIM_Base_SetConfig+0x11c>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d013      	beq.n	8007ee6 <TIM_Base_SetConfig+0x9a>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a2a      	ldr	r2, [pc, #168]	; (8007f6c <TIM_Base_SetConfig+0x120>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d00f      	beq.n	8007ee6 <TIM_Base_SetConfig+0x9a>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a29      	ldr	r2, [pc, #164]	; (8007f70 <TIM_Base_SetConfig+0x124>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d00b      	beq.n	8007ee6 <TIM_Base_SetConfig+0x9a>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a28      	ldr	r2, [pc, #160]	; (8007f74 <TIM_Base_SetConfig+0x128>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d007      	beq.n	8007ee6 <TIM_Base_SetConfig+0x9a>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a27      	ldr	r2, [pc, #156]	; (8007f78 <TIM_Base_SetConfig+0x12c>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d003      	beq.n	8007ee6 <TIM_Base_SetConfig+0x9a>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a26      	ldr	r2, [pc, #152]	; (8007f7c <TIM_Base_SetConfig+0x130>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d108      	bne.n	8007ef8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	689a      	ldr	r2, [r3, #8]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a10      	ldr	r2, [pc, #64]	; (8007f60 <TIM_Base_SetConfig+0x114>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d00f      	beq.n	8007f44 <TIM_Base_SetConfig+0xf8>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a12      	ldr	r2, [pc, #72]	; (8007f70 <TIM_Base_SetConfig+0x124>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d00b      	beq.n	8007f44 <TIM_Base_SetConfig+0xf8>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a11      	ldr	r2, [pc, #68]	; (8007f74 <TIM_Base_SetConfig+0x128>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d007      	beq.n	8007f44 <TIM_Base_SetConfig+0xf8>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a10      	ldr	r2, [pc, #64]	; (8007f78 <TIM_Base_SetConfig+0x12c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d003      	beq.n	8007f44 <TIM_Base_SetConfig+0xf8>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a0f      	ldr	r2, [pc, #60]	; (8007f7c <TIM_Base_SetConfig+0x130>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d103      	bne.n	8007f4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	691a      	ldr	r2, [r3, #16]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	615a      	str	r2, [r3, #20]
}
 8007f52:	bf00      	nop
 8007f54:	3714      	adds	r7, #20
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	40010000 	.word	0x40010000
 8007f64:	40000400 	.word	0x40000400
 8007f68:	40000800 	.word	0x40000800
 8007f6c:	40000c00 	.word	0x40000c00
 8007f70:	40010400 	.word	0x40010400
 8007f74:	40014000 	.word	0x40014000
 8007f78:	40014400 	.word	0x40014400
 8007f7c:	40014800 	.word	0x40014800

08007f80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b087      	sub	sp, #28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	f023 0201 	bic.w	r2, r3, #1
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	4b37      	ldr	r3, [pc, #220]	; (8008088 <TIM_OC1_SetConfig+0x108>)
 8007fac:	4013      	ands	r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f023 0303 	bic.w	r3, r3, #3
 8007fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f023 0302 	bic.w	r3, r3, #2
 8007fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a2d      	ldr	r2, [pc, #180]	; (800808c <TIM_OC1_SetConfig+0x10c>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d00f      	beq.n	8007ffc <TIM_OC1_SetConfig+0x7c>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a2c      	ldr	r2, [pc, #176]	; (8008090 <TIM_OC1_SetConfig+0x110>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d00b      	beq.n	8007ffc <TIM_OC1_SetConfig+0x7c>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a2b      	ldr	r2, [pc, #172]	; (8008094 <TIM_OC1_SetConfig+0x114>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d007      	beq.n	8007ffc <TIM_OC1_SetConfig+0x7c>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a2a      	ldr	r2, [pc, #168]	; (8008098 <TIM_OC1_SetConfig+0x118>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d003      	beq.n	8007ffc <TIM_OC1_SetConfig+0x7c>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a29      	ldr	r2, [pc, #164]	; (800809c <TIM_OC1_SetConfig+0x11c>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d10c      	bne.n	8008016 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	f023 0308 	bic.w	r3, r3, #8
 8008002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	4313      	orrs	r3, r2
 800800c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	f023 0304 	bic.w	r3, r3, #4
 8008014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a1c      	ldr	r2, [pc, #112]	; (800808c <TIM_OC1_SetConfig+0x10c>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d00f      	beq.n	800803e <TIM_OC1_SetConfig+0xbe>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a1b      	ldr	r2, [pc, #108]	; (8008090 <TIM_OC1_SetConfig+0x110>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d00b      	beq.n	800803e <TIM_OC1_SetConfig+0xbe>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a1a      	ldr	r2, [pc, #104]	; (8008094 <TIM_OC1_SetConfig+0x114>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d007      	beq.n	800803e <TIM_OC1_SetConfig+0xbe>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a19      	ldr	r2, [pc, #100]	; (8008098 <TIM_OC1_SetConfig+0x118>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d003      	beq.n	800803e <TIM_OC1_SetConfig+0xbe>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a18      	ldr	r2, [pc, #96]	; (800809c <TIM_OC1_SetConfig+0x11c>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d111      	bne.n	8008062 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800804c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	4313      	orrs	r3, r2
 8008056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	4313      	orrs	r3, r2
 8008060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	621a      	str	r2, [r3, #32]
}
 800807c:	bf00      	nop
 800807e:	371c      	adds	r7, #28
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	fffeff8f 	.word	0xfffeff8f
 800808c:	40010000 	.word	0x40010000
 8008090:	40010400 	.word	0x40010400
 8008094:	40014000 	.word	0x40014000
 8008098:	40014400 	.word	0x40014400
 800809c:	40014800 	.word	0x40014800

080080a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b087      	sub	sp, #28
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	f023 0210 	bic.w	r2, r3, #16
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	4b34      	ldr	r3, [pc, #208]	; (800819c <TIM_OC2_SetConfig+0xfc>)
 80080cc:	4013      	ands	r3, r2
 80080ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	021b      	lsls	r3, r3, #8
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	f023 0320 	bic.w	r3, r3, #32
 80080ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	011b      	lsls	r3, r3, #4
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a29      	ldr	r2, [pc, #164]	; (80081a0 <TIM_OC2_SetConfig+0x100>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d003      	beq.n	8008108 <TIM_OC2_SetConfig+0x68>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a28      	ldr	r2, [pc, #160]	; (80081a4 <TIM_OC2_SetConfig+0x104>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d10d      	bne.n	8008124 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800810e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	011b      	lsls	r3, r3, #4
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	4313      	orrs	r3, r2
 800811a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008122:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a1e      	ldr	r2, [pc, #120]	; (80081a0 <TIM_OC2_SetConfig+0x100>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d00f      	beq.n	800814c <TIM_OC2_SetConfig+0xac>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a1d      	ldr	r2, [pc, #116]	; (80081a4 <TIM_OC2_SetConfig+0x104>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d00b      	beq.n	800814c <TIM_OC2_SetConfig+0xac>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a1c      	ldr	r2, [pc, #112]	; (80081a8 <TIM_OC2_SetConfig+0x108>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d007      	beq.n	800814c <TIM_OC2_SetConfig+0xac>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a1b      	ldr	r2, [pc, #108]	; (80081ac <TIM_OC2_SetConfig+0x10c>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d003      	beq.n	800814c <TIM_OC2_SetConfig+0xac>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a1a      	ldr	r2, [pc, #104]	; (80081b0 <TIM_OC2_SetConfig+0x110>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d113      	bne.n	8008174 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008152:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800815a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	4313      	orrs	r3, r2
 8008166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	693a      	ldr	r2, [r7, #16]
 8008170:	4313      	orrs	r3, r2
 8008172:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	621a      	str	r2, [r3, #32]
}
 800818e:	bf00      	nop
 8008190:	371c      	adds	r7, #28
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	feff8fff 	.word	0xfeff8fff
 80081a0:	40010000 	.word	0x40010000
 80081a4:	40010400 	.word	0x40010400
 80081a8:	40014000 	.word	0x40014000
 80081ac:	40014400 	.word	0x40014400
 80081b0:	40014800 	.word	0x40014800

080081b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b087      	sub	sp, #28
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	69db      	ldr	r3, [r3, #28]
 80081da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	4b33      	ldr	r3, [pc, #204]	; (80082ac <TIM_OC3_SetConfig+0xf8>)
 80081e0:	4013      	ands	r3, r2
 80081e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f023 0303 	bic.w	r3, r3, #3
 80081ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	021b      	lsls	r3, r3, #8
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	4313      	orrs	r3, r2
 8008208:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a28      	ldr	r2, [pc, #160]	; (80082b0 <TIM_OC3_SetConfig+0xfc>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d003      	beq.n	800821a <TIM_OC3_SetConfig+0x66>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a27      	ldr	r2, [pc, #156]	; (80082b4 <TIM_OC3_SetConfig+0x100>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d10d      	bne.n	8008236 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008220:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	021b      	lsls	r3, r3, #8
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	4313      	orrs	r3, r2
 800822c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a1d      	ldr	r2, [pc, #116]	; (80082b0 <TIM_OC3_SetConfig+0xfc>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d00f      	beq.n	800825e <TIM_OC3_SetConfig+0xaa>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a1c      	ldr	r2, [pc, #112]	; (80082b4 <TIM_OC3_SetConfig+0x100>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d00b      	beq.n	800825e <TIM_OC3_SetConfig+0xaa>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a1b      	ldr	r2, [pc, #108]	; (80082b8 <TIM_OC3_SetConfig+0x104>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d007      	beq.n	800825e <TIM_OC3_SetConfig+0xaa>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a1a      	ldr	r2, [pc, #104]	; (80082bc <TIM_OC3_SetConfig+0x108>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d003      	beq.n	800825e <TIM_OC3_SetConfig+0xaa>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a19      	ldr	r2, [pc, #100]	; (80082c0 <TIM_OC3_SetConfig+0x10c>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d113      	bne.n	8008286 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800826c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	011b      	lsls	r3, r3, #4
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	4313      	orrs	r3, r2
 8008278:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	011b      	lsls	r3, r3, #4
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	4313      	orrs	r3, r2
 8008284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	685a      	ldr	r2, [r3, #4]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	697a      	ldr	r2, [r7, #20]
 800829e:	621a      	str	r2, [r3, #32]
}
 80082a0:	bf00      	nop
 80082a2:	371c      	adds	r7, #28
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	fffeff8f 	.word	0xfffeff8f
 80082b0:	40010000 	.word	0x40010000
 80082b4:	40010400 	.word	0x40010400
 80082b8:	40014000 	.word	0x40014000
 80082bc:	40014400 	.word	0x40014400
 80082c0:	40014800 	.word	0x40014800

080082c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b087      	sub	sp, #28
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	69db      	ldr	r3, [r3, #28]
 80082ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	4b24      	ldr	r3, [pc, #144]	; (8008380 <TIM_OC4_SetConfig+0xbc>)
 80082f0:	4013      	ands	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	021b      	lsls	r3, r3, #8
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	4313      	orrs	r3, r2
 8008306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800830e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	031b      	lsls	r3, r3, #12
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	4313      	orrs	r3, r2
 800831a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a19      	ldr	r2, [pc, #100]	; (8008384 <TIM_OC4_SetConfig+0xc0>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d00f      	beq.n	8008344 <TIM_OC4_SetConfig+0x80>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a18      	ldr	r2, [pc, #96]	; (8008388 <TIM_OC4_SetConfig+0xc4>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d00b      	beq.n	8008344 <TIM_OC4_SetConfig+0x80>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a17      	ldr	r2, [pc, #92]	; (800838c <TIM_OC4_SetConfig+0xc8>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d007      	beq.n	8008344 <TIM_OC4_SetConfig+0x80>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a16      	ldr	r2, [pc, #88]	; (8008390 <TIM_OC4_SetConfig+0xcc>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d003      	beq.n	8008344 <TIM_OC4_SetConfig+0x80>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a15      	ldr	r2, [pc, #84]	; (8008394 <TIM_OC4_SetConfig+0xd0>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d109      	bne.n	8008358 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800834a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	695b      	ldr	r3, [r3, #20]
 8008350:	019b      	lsls	r3, r3, #6
 8008352:	697a      	ldr	r2, [r7, #20]
 8008354:	4313      	orrs	r3, r2
 8008356:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	685a      	ldr	r2, [r3, #4]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	693a      	ldr	r2, [r7, #16]
 8008370:	621a      	str	r2, [r3, #32]
}
 8008372:	bf00      	nop
 8008374:	371c      	adds	r7, #28
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	feff8fff 	.word	0xfeff8fff
 8008384:	40010000 	.word	0x40010000
 8008388:	40010400 	.word	0x40010400
 800838c:	40014000 	.word	0x40014000
 8008390:	40014400 	.word	0x40014400
 8008394:	40014800 	.word	0x40014800

08008398 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008398:	b480      	push	{r7}
 800839a:	b087      	sub	sp, #28
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	4b21      	ldr	r3, [pc, #132]	; (8008448 <TIM_OC5_SetConfig+0xb0>)
 80083c4:	4013      	ands	r3, r2
 80083c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80083d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	041b      	lsls	r3, r3, #16
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a18      	ldr	r2, [pc, #96]	; (800844c <TIM_OC5_SetConfig+0xb4>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d00f      	beq.n	800840e <TIM_OC5_SetConfig+0x76>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a17      	ldr	r2, [pc, #92]	; (8008450 <TIM_OC5_SetConfig+0xb8>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d00b      	beq.n	800840e <TIM_OC5_SetConfig+0x76>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a16      	ldr	r2, [pc, #88]	; (8008454 <TIM_OC5_SetConfig+0xbc>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d007      	beq.n	800840e <TIM_OC5_SetConfig+0x76>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a15      	ldr	r2, [pc, #84]	; (8008458 <TIM_OC5_SetConfig+0xc0>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d003      	beq.n	800840e <TIM_OC5_SetConfig+0x76>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a14      	ldr	r2, [pc, #80]	; (800845c <TIM_OC5_SetConfig+0xc4>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d109      	bne.n	8008422 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008414:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	021b      	lsls	r3, r3, #8
 800841c:	697a      	ldr	r2, [r7, #20]
 800841e:	4313      	orrs	r3, r2
 8008420:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	685a      	ldr	r2, [r3, #4]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	621a      	str	r2, [r3, #32]
}
 800843c:	bf00      	nop
 800843e:	371c      	adds	r7, #28
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr
 8008448:	fffeff8f 	.word	0xfffeff8f
 800844c:	40010000 	.word	0x40010000
 8008450:	40010400 	.word	0x40010400
 8008454:	40014000 	.word	0x40014000
 8008458:	40014400 	.word	0x40014400
 800845c:	40014800 	.word	0x40014800

08008460 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008460:	b480      	push	{r7}
 8008462:	b087      	sub	sp, #28
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	4b22      	ldr	r3, [pc, #136]	; (8008514 <TIM_OC6_SetConfig+0xb4>)
 800848c:	4013      	ands	r3, r2
 800848e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	021b      	lsls	r3, r3, #8
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	4313      	orrs	r3, r2
 800849a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	051b      	lsls	r3, r3, #20
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a19      	ldr	r2, [pc, #100]	; (8008518 <TIM_OC6_SetConfig+0xb8>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d00f      	beq.n	80084d8 <TIM_OC6_SetConfig+0x78>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a18      	ldr	r2, [pc, #96]	; (800851c <TIM_OC6_SetConfig+0xbc>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d00b      	beq.n	80084d8 <TIM_OC6_SetConfig+0x78>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a17      	ldr	r2, [pc, #92]	; (8008520 <TIM_OC6_SetConfig+0xc0>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d007      	beq.n	80084d8 <TIM_OC6_SetConfig+0x78>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a16      	ldr	r2, [pc, #88]	; (8008524 <TIM_OC6_SetConfig+0xc4>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d003      	beq.n	80084d8 <TIM_OC6_SetConfig+0x78>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a15      	ldr	r2, [pc, #84]	; (8008528 <TIM_OC6_SetConfig+0xc8>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d109      	bne.n	80084ec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	695b      	ldr	r3, [r3, #20]
 80084e4:	029b      	lsls	r3, r3, #10
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	697a      	ldr	r2, [r7, #20]
 80084f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	693a      	ldr	r2, [r7, #16]
 8008504:	621a      	str	r2, [r3, #32]
}
 8008506:	bf00      	nop
 8008508:	371c      	adds	r7, #28
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	feff8fff 	.word	0xfeff8fff
 8008518:	40010000 	.word	0x40010000
 800851c:	40010400 	.word	0x40010400
 8008520:	40014000 	.word	0x40014000
 8008524:	40014400 	.word	0x40014400
 8008528:	40014800 	.word	0x40014800

0800852c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800852c:	b480      	push	{r7}
 800852e:	b087      	sub	sp, #28
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	f023 0201 	bic.w	r2, r3, #1
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	011b      	lsls	r3, r3, #4
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	4313      	orrs	r3, r2
 8008560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	f023 030a 	bic.w	r3, r3, #10
 8008568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	4313      	orrs	r3, r2
 8008570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	621a      	str	r2, [r3, #32]
}
 800857e:	bf00      	nop
 8008580:	371c      	adds	r7, #28
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800858a:	b480      	push	{r7}
 800858c:	b087      	sub	sp, #28
 800858e:	af00      	add	r7, sp, #0
 8008590:	60f8      	str	r0, [r7, #12]
 8008592:	60b9      	str	r1, [r7, #8]
 8008594:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	f023 0210 	bic.w	r2, r3, #16
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6a1b      	ldr	r3, [r3, #32]
 80085ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	031b      	lsls	r3, r3, #12
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	4313      	orrs	r3, r2
 80085be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	011b      	lsls	r3, r3, #4
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	697a      	ldr	r2, [r7, #20]
 80085d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	693a      	ldr	r2, [r7, #16]
 80085dc:	621a      	str	r2, [r3, #32]
}
 80085de:	bf00      	nop
 80085e0:	371c      	adds	r7, #28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
	...

080085ec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	4b09      	ldr	r3, [pc, #36]	; (8008624 <TIM_ITRx_SetConfig+0x38>)
 8008600:	4013      	ands	r3, r2
 8008602:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008604:	683a      	ldr	r2, [r7, #0]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	4313      	orrs	r3, r2
 800860a:	f043 0307 	orr.w	r3, r3, #7
 800860e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	609a      	str	r2, [r3, #8]
}
 8008616:	bf00      	nop
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	ffcfff8f 	.word	0xffcfff8f

08008628 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008628:	b480      	push	{r7}
 800862a:	b087      	sub	sp, #28
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
 8008634:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008642:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	021a      	lsls	r2, r3, #8
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	431a      	orrs	r2, r3
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	4313      	orrs	r3, r2
 8008650:	697a      	ldr	r2, [r7, #20]
 8008652:	4313      	orrs	r3, r2
 8008654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	609a      	str	r2, [r3, #8]
}
 800865c:	bf00      	nop
 800865e:	371c      	adds	r7, #28
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008678:	2b01      	cmp	r3, #1
 800867a:	d101      	bne.n	8008680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800867c:	2302      	movs	r3, #2
 800867e:	e06d      	b.n	800875c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2202      	movs	r2, #2
 800868c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a30      	ldr	r2, [pc, #192]	; (8008768 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d004      	beq.n	80086b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a2f      	ldr	r2, [pc, #188]	; (800876c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d108      	bne.n	80086c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80086ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a20      	ldr	r2, [pc, #128]	; (8008768 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d022      	beq.n	8008730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086f2:	d01d      	beq.n	8008730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a1d      	ldr	r2, [pc, #116]	; (8008770 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d018      	beq.n	8008730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a1c      	ldr	r2, [pc, #112]	; (8008774 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d013      	beq.n	8008730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a1a      	ldr	r2, [pc, #104]	; (8008778 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d00e      	beq.n	8008730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a15      	ldr	r2, [pc, #84]	; (800876c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d009      	beq.n	8008730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a16      	ldr	r2, [pc, #88]	; (800877c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d004      	beq.n	8008730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a15      	ldr	r2, [pc, #84]	; (8008780 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d10c      	bne.n	800874a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008736:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	4313      	orrs	r3, r2
 8008740:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr
 8008768:	40010000 	.word	0x40010000
 800876c:	40010400 	.word	0x40010400
 8008770:	40000400 	.word	0x40000400
 8008774:	40000800 	.word	0x40000800
 8008778:	40000c00 	.word	0x40000c00
 800877c:	40001800 	.word	0x40001800
 8008780:	40014000 	.word	0x40014000

08008784 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800878e:	2300      	movs	r3, #0
 8008790:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008798:	2b01      	cmp	r3, #1
 800879a:	d101      	bne.n	80087a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800879c:	2302      	movs	r3, #2
 800879e:	e087      	b.n	80088b0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4313      	orrs	r3, r2
 80087de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	695b      	ldr	r3, [r3, #20]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008806:	4313      	orrs	r3, r2
 8008808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	041b      	lsls	r3, r3, #16
 8008816:	4313      	orrs	r3, r2
 8008818:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a27      	ldr	r2, [pc, #156]	; (80088bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d004      	beq.n	800882e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a25      	ldr	r2, [pc, #148]	; (80088c0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d106      	bne.n	800883c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	69db      	ldr	r3, [r3, #28]
 8008838:	4313      	orrs	r3, r2
 800883a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a1e      	ldr	r2, [pc, #120]	; (80088bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d004      	beq.n	8008850 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a1d      	ldr	r2, [pc, #116]	; (80088c0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d126      	bne.n	800889e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885a:	051b      	lsls	r3, r3, #20
 800885c:	4313      	orrs	r3, r2
 800885e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	6a1b      	ldr	r3, [r3, #32]
 800886a:	4313      	orrs	r3, r2
 800886c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	4313      	orrs	r3, r2
 800887a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a0e      	ldr	r2, [pc, #56]	; (80088bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d004      	beq.n	8008890 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a0d      	ldr	r2, [pc, #52]	; (80088c0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d106      	bne.n	800889e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889a:	4313      	orrs	r3, r2
 800889c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	40010000 	.word	0x40010000
 80088c0:	40010400 	.word	0x40010400

080088c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d101      	bne.n	80088d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e042      	b.n	800895c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d106      	bne.n	80088ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7f8 fb19 	bl	8000f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2224      	movs	r2, #36	; 0x24
 80088f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f022 0201 	bic.w	r2, r2, #1
 8008904:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f82c 	bl	8008964 <UART_SetConfig>
 800890c:	4603      	mov	r3, r0
 800890e:	2b01      	cmp	r3, #1
 8008910:	d101      	bne.n	8008916 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e022      	b.n	800895c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891a:	2b00      	cmp	r3, #0
 800891c:	d002      	beq.n	8008924 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fe8c 	bl	800963c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	685a      	ldr	r2, [r3, #4]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008932:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	689a      	ldr	r2, [r3, #8]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008942:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f042 0201 	orr.w	r2, r2, #1
 8008952:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 ff13 	bl	8009780 <UART_CheckIdleState>
 800895a:	4603      	mov	r3, r0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008968:	b092      	sub	sp, #72	; 0x48
 800896a:	af00      	add	r7, sp, #0
 800896c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	689a      	ldr	r2, [r3, #8]
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	431a      	orrs	r2, r3
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	431a      	orrs	r2, r3
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	4313      	orrs	r3, r2
 800898a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	4bbe      	ldr	r3, [pc, #760]	; (8008c8c <UART_SetConfig+0x328>)
 8008994:	4013      	ands	r3, r2
 8008996:	697a      	ldr	r2, [r7, #20]
 8008998:	6812      	ldr	r2, [r2, #0]
 800899a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800899c:	430b      	orrs	r3, r1
 800899e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	68da      	ldr	r2, [r3, #12]
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	430a      	orrs	r2, r1
 80089b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4ab3      	ldr	r2, [pc, #716]	; (8008c90 <UART_SetConfig+0x32c>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d004      	beq.n	80089d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089cc:	4313      	orrs	r3, r2
 80089ce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	689a      	ldr	r2, [r3, #8]
 80089d6:	4baf      	ldr	r3, [pc, #700]	; (8008c94 <UART_SetConfig+0x330>)
 80089d8:	4013      	ands	r3, r2
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	6812      	ldr	r2, [r2, #0]
 80089de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089e0:	430b      	orrs	r3, r1
 80089e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ea:	f023 010f 	bic.w	r1, r3, #15
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	430a      	orrs	r2, r1
 80089f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4aa6      	ldr	r2, [pc, #664]	; (8008c98 <UART_SetConfig+0x334>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d177      	bne.n	8008af4 <UART_SetConfig+0x190>
 8008a04:	4ba5      	ldr	r3, [pc, #660]	; (8008c9c <UART_SetConfig+0x338>)
 8008a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a0c:	2b28      	cmp	r3, #40	; 0x28
 8008a0e:	d86d      	bhi.n	8008aec <UART_SetConfig+0x188>
 8008a10:	a201      	add	r2, pc, #4	; (adr r2, 8008a18 <UART_SetConfig+0xb4>)
 8008a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a16:	bf00      	nop
 8008a18:	08008abd 	.word	0x08008abd
 8008a1c:	08008aed 	.word	0x08008aed
 8008a20:	08008aed 	.word	0x08008aed
 8008a24:	08008aed 	.word	0x08008aed
 8008a28:	08008aed 	.word	0x08008aed
 8008a2c:	08008aed 	.word	0x08008aed
 8008a30:	08008aed 	.word	0x08008aed
 8008a34:	08008aed 	.word	0x08008aed
 8008a38:	08008ac5 	.word	0x08008ac5
 8008a3c:	08008aed 	.word	0x08008aed
 8008a40:	08008aed 	.word	0x08008aed
 8008a44:	08008aed 	.word	0x08008aed
 8008a48:	08008aed 	.word	0x08008aed
 8008a4c:	08008aed 	.word	0x08008aed
 8008a50:	08008aed 	.word	0x08008aed
 8008a54:	08008aed 	.word	0x08008aed
 8008a58:	08008acd 	.word	0x08008acd
 8008a5c:	08008aed 	.word	0x08008aed
 8008a60:	08008aed 	.word	0x08008aed
 8008a64:	08008aed 	.word	0x08008aed
 8008a68:	08008aed 	.word	0x08008aed
 8008a6c:	08008aed 	.word	0x08008aed
 8008a70:	08008aed 	.word	0x08008aed
 8008a74:	08008aed 	.word	0x08008aed
 8008a78:	08008ad5 	.word	0x08008ad5
 8008a7c:	08008aed 	.word	0x08008aed
 8008a80:	08008aed 	.word	0x08008aed
 8008a84:	08008aed 	.word	0x08008aed
 8008a88:	08008aed 	.word	0x08008aed
 8008a8c:	08008aed 	.word	0x08008aed
 8008a90:	08008aed 	.word	0x08008aed
 8008a94:	08008aed 	.word	0x08008aed
 8008a98:	08008add 	.word	0x08008add
 8008a9c:	08008aed 	.word	0x08008aed
 8008aa0:	08008aed 	.word	0x08008aed
 8008aa4:	08008aed 	.word	0x08008aed
 8008aa8:	08008aed 	.word	0x08008aed
 8008aac:	08008aed 	.word	0x08008aed
 8008ab0:	08008aed 	.word	0x08008aed
 8008ab4:	08008aed 	.word	0x08008aed
 8008ab8:	08008ae5 	.word	0x08008ae5
 8008abc:	2301      	movs	r3, #1
 8008abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ac2:	e326      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008ac4:	2304      	movs	r3, #4
 8008ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aca:	e322      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008acc:	2308      	movs	r3, #8
 8008ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ad2:	e31e      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008ad4:	2310      	movs	r3, #16
 8008ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ada:	e31a      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008adc:	2320      	movs	r3, #32
 8008ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ae2:	e316      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008ae4:	2340      	movs	r3, #64	; 0x40
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aea:	e312      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008aec:	2380      	movs	r3, #128	; 0x80
 8008aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008af2:	e30e      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a69      	ldr	r2, [pc, #420]	; (8008ca0 <UART_SetConfig+0x33c>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d130      	bne.n	8008b60 <UART_SetConfig+0x1fc>
 8008afe:	4b67      	ldr	r3, [pc, #412]	; (8008c9c <UART_SetConfig+0x338>)
 8008b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b02:	f003 0307 	and.w	r3, r3, #7
 8008b06:	2b05      	cmp	r3, #5
 8008b08:	d826      	bhi.n	8008b58 <UART_SetConfig+0x1f4>
 8008b0a:	a201      	add	r2, pc, #4	; (adr r2, 8008b10 <UART_SetConfig+0x1ac>)
 8008b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b10:	08008b29 	.word	0x08008b29
 8008b14:	08008b31 	.word	0x08008b31
 8008b18:	08008b39 	.word	0x08008b39
 8008b1c:	08008b41 	.word	0x08008b41
 8008b20:	08008b49 	.word	0x08008b49
 8008b24:	08008b51 	.word	0x08008b51
 8008b28:	2300      	movs	r3, #0
 8008b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b2e:	e2f0      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008b30:	2304      	movs	r3, #4
 8008b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b36:	e2ec      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008b38:	2308      	movs	r3, #8
 8008b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b3e:	e2e8      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008b40:	2310      	movs	r3, #16
 8008b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b46:	e2e4      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008b48:	2320      	movs	r3, #32
 8008b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b4e:	e2e0      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008b50:	2340      	movs	r3, #64	; 0x40
 8008b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b56:	e2dc      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008b58:	2380      	movs	r3, #128	; 0x80
 8008b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b5e:	e2d8      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a4f      	ldr	r2, [pc, #316]	; (8008ca4 <UART_SetConfig+0x340>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d130      	bne.n	8008bcc <UART_SetConfig+0x268>
 8008b6a:	4b4c      	ldr	r3, [pc, #304]	; (8008c9c <UART_SetConfig+0x338>)
 8008b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b6e:	f003 0307 	and.w	r3, r3, #7
 8008b72:	2b05      	cmp	r3, #5
 8008b74:	d826      	bhi.n	8008bc4 <UART_SetConfig+0x260>
 8008b76:	a201      	add	r2, pc, #4	; (adr r2, 8008b7c <UART_SetConfig+0x218>)
 8008b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7c:	08008b95 	.word	0x08008b95
 8008b80:	08008b9d 	.word	0x08008b9d
 8008b84:	08008ba5 	.word	0x08008ba5
 8008b88:	08008bad 	.word	0x08008bad
 8008b8c:	08008bb5 	.word	0x08008bb5
 8008b90:	08008bbd 	.word	0x08008bbd
 8008b94:	2300      	movs	r3, #0
 8008b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b9a:	e2ba      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008b9c:	2304      	movs	r3, #4
 8008b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ba2:	e2b6      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008ba4:	2308      	movs	r3, #8
 8008ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008baa:	e2b2      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008bac:	2310      	movs	r3, #16
 8008bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bb2:	e2ae      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008bb4:	2320      	movs	r3, #32
 8008bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bba:	e2aa      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008bbc:	2340      	movs	r3, #64	; 0x40
 8008bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bc2:	e2a6      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008bc4:	2380      	movs	r3, #128	; 0x80
 8008bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bca:	e2a2      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a35      	ldr	r2, [pc, #212]	; (8008ca8 <UART_SetConfig+0x344>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d130      	bne.n	8008c38 <UART_SetConfig+0x2d4>
 8008bd6:	4b31      	ldr	r3, [pc, #196]	; (8008c9c <UART_SetConfig+0x338>)
 8008bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bda:	f003 0307 	and.w	r3, r3, #7
 8008bde:	2b05      	cmp	r3, #5
 8008be0:	d826      	bhi.n	8008c30 <UART_SetConfig+0x2cc>
 8008be2:	a201      	add	r2, pc, #4	; (adr r2, 8008be8 <UART_SetConfig+0x284>)
 8008be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be8:	08008c01 	.word	0x08008c01
 8008bec:	08008c09 	.word	0x08008c09
 8008bf0:	08008c11 	.word	0x08008c11
 8008bf4:	08008c19 	.word	0x08008c19
 8008bf8:	08008c21 	.word	0x08008c21
 8008bfc:	08008c29 	.word	0x08008c29
 8008c00:	2300      	movs	r3, #0
 8008c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c06:	e284      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008c08:	2304      	movs	r3, #4
 8008c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c0e:	e280      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008c10:	2308      	movs	r3, #8
 8008c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c16:	e27c      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008c18:	2310      	movs	r3, #16
 8008c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c1e:	e278      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008c20:	2320      	movs	r3, #32
 8008c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c26:	e274      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008c28:	2340      	movs	r3, #64	; 0x40
 8008c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c2e:	e270      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008c30:	2380      	movs	r3, #128	; 0x80
 8008c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c36:	e26c      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a1b      	ldr	r2, [pc, #108]	; (8008cac <UART_SetConfig+0x348>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d142      	bne.n	8008cc8 <UART_SetConfig+0x364>
 8008c42:	4b16      	ldr	r3, [pc, #88]	; (8008c9c <UART_SetConfig+0x338>)
 8008c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c46:	f003 0307 	and.w	r3, r3, #7
 8008c4a:	2b05      	cmp	r3, #5
 8008c4c:	d838      	bhi.n	8008cc0 <UART_SetConfig+0x35c>
 8008c4e:	a201      	add	r2, pc, #4	; (adr r2, 8008c54 <UART_SetConfig+0x2f0>)
 8008c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c54:	08008c6d 	.word	0x08008c6d
 8008c58:	08008c75 	.word	0x08008c75
 8008c5c:	08008c7d 	.word	0x08008c7d
 8008c60:	08008c85 	.word	0x08008c85
 8008c64:	08008cb1 	.word	0x08008cb1
 8008c68:	08008cb9 	.word	0x08008cb9
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c72:	e24e      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008c74:	2304      	movs	r3, #4
 8008c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c7a:	e24a      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008c7c:	2308      	movs	r3, #8
 8008c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c82:	e246      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008c84:	2310      	movs	r3, #16
 8008c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c8a:	e242      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008c8c:	cfff69f3 	.word	0xcfff69f3
 8008c90:	58000c00 	.word	0x58000c00
 8008c94:	11fff4ff 	.word	0x11fff4ff
 8008c98:	40011000 	.word	0x40011000
 8008c9c:	58024400 	.word	0x58024400
 8008ca0:	40004400 	.word	0x40004400
 8008ca4:	40004800 	.word	0x40004800
 8008ca8:	40004c00 	.word	0x40004c00
 8008cac:	40005000 	.word	0x40005000
 8008cb0:	2320      	movs	r3, #32
 8008cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cb6:	e22c      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008cb8:	2340      	movs	r3, #64	; 0x40
 8008cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cbe:	e228      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008cc0:	2380      	movs	r3, #128	; 0x80
 8008cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cc6:	e224      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4ab1      	ldr	r2, [pc, #708]	; (8008f94 <UART_SetConfig+0x630>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d176      	bne.n	8008dc0 <UART_SetConfig+0x45c>
 8008cd2:	4bb1      	ldr	r3, [pc, #708]	; (8008f98 <UART_SetConfig+0x634>)
 8008cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cda:	2b28      	cmp	r3, #40	; 0x28
 8008cdc:	d86c      	bhi.n	8008db8 <UART_SetConfig+0x454>
 8008cde:	a201      	add	r2, pc, #4	; (adr r2, 8008ce4 <UART_SetConfig+0x380>)
 8008ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce4:	08008d89 	.word	0x08008d89
 8008ce8:	08008db9 	.word	0x08008db9
 8008cec:	08008db9 	.word	0x08008db9
 8008cf0:	08008db9 	.word	0x08008db9
 8008cf4:	08008db9 	.word	0x08008db9
 8008cf8:	08008db9 	.word	0x08008db9
 8008cfc:	08008db9 	.word	0x08008db9
 8008d00:	08008db9 	.word	0x08008db9
 8008d04:	08008d91 	.word	0x08008d91
 8008d08:	08008db9 	.word	0x08008db9
 8008d0c:	08008db9 	.word	0x08008db9
 8008d10:	08008db9 	.word	0x08008db9
 8008d14:	08008db9 	.word	0x08008db9
 8008d18:	08008db9 	.word	0x08008db9
 8008d1c:	08008db9 	.word	0x08008db9
 8008d20:	08008db9 	.word	0x08008db9
 8008d24:	08008d99 	.word	0x08008d99
 8008d28:	08008db9 	.word	0x08008db9
 8008d2c:	08008db9 	.word	0x08008db9
 8008d30:	08008db9 	.word	0x08008db9
 8008d34:	08008db9 	.word	0x08008db9
 8008d38:	08008db9 	.word	0x08008db9
 8008d3c:	08008db9 	.word	0x08008db9
 8008d40:	08008db9 	.word	0x08008db9
 8008d44:	08008da1 	.word	0x08008da1
 8008d48:	08008db9 	.word	0x08008db9
 8008d4c:	08008db9 	.word	0x08008db9
 8008d50:	08008db9 	.word	0x08008db9
 8008d54:	08008db9 	.word	0x08008db9
 8008d58:	08008db9 	.word	0x08008db9
 8008d5c:	08008db9 	.word	0x08008db9
 8008d60:	08008db9 	.word	0x08008db9
 8008d64:	08008da9 	.word	0x08008da9
 8008d68:	08008db9 	.word	0x08008db9
 8008d6c:	08008db9 	.word	0x08008db9
 8008d70:	08008db9 	.word	0x08008db9
 8008d74:	08008db9 	.word	0x08008db9
 8008d78:	08008db9 	.word	0x08008db9
 8008d7c:	08008db9 	.word	0x08008db9
 8008d80:	08008db9 	.word	0x08008db9
 8008d84:	08008db1 	.word	0x08008db1
 8008d88:	2301      	movs	r3, #1
 8008d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d8e:	e1c0      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008d90:	2304      	movs	r3, #4
 8008d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d96:	e1bc      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008d98:	2308      	movs	r3, #8
 8008d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d9e:	e1b8      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008da0:	2310      	movs	r3, #16
 8008da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008da6:	e1b4      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008da8:	2320      	movs	r3, #32
 8008daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dae:	e1b0      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008db0:	2340      	movs	r3, #64	; 0x40
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008db6:	e1ac      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008db8:	2380      	movs	r3, #128	; 0x80
 8008dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dbe:	e1a8      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a75      	ldr	r2, [pc, #468]	; (8008f9c <UART_SetConfig+0x638>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d130      	bne.n	8008e2c <UART_SetConfig+0x4c8>
 8008dca:	4b73      	ldr	r3, [pc, #460]	; (8008f98 <UART_SetConfig+0x634>)
 8008dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dce:	f003 0307 	and.w	r3, r3, #7
 8008dd2:	2b05      	cmp	r3, #5
 8008dd4:	d826      	bhi.n	8008e24 <UART_SetConfig+0x4c0>
 8008dd6:	a201      	add	r2, pc, #4	; (adr r2, 8008ddc <UART_SetConfig+0x478>)
 8008dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ddc:	08008df5 	.word	0x08008df5
 8008de0:	08008dfd 	.word	0x08008dfd
 8008de4:	08008e05 	.word	0x08008e05
 8008de8:	08008e0d 	.word	0x08008e0d
 8008dec:	08008e15 	.word	0x08008e15
 8008df0:	08008e1d 	.word	0x08008e1d
 8008df4:	2300      	movs	r3, #0
 8008df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dfa:	e18a      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008dfc:	2304      	movs	r3, #4
 8008dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e02:	e186      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008e04:	2308      	movs	r3, #8
 8008e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e0a:	e182      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008e0c:	2310      	movs	r3, #16
 8008e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e12:	e17e      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008e14:	2320      	movs	r3, #32
 8008e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e1a:	e17a      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008e1c:	2340      	movs	r3, #64	; 0x40
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e22:	e176      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008e24:	2380      	movs	r3, #128	; 0x80
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e2a:	e172      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a5b      	ldr	r2, [pc, #364]	; (8008fa0 <UART_SetConfig+0x63c>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d130      	bne.n	8008e98 <UART_SetConfig+0x534>
 8008e36:	4b58      	ldr	r3, [pc, #352]	; (8008f98 <UART_SetConfig+0x634>)
 8008e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e3a:	f003 0307 	and.w	r3, r3, #7
 8008e3e:	2b05      	cmp	r3, #5
 8008e40:	d826      	bhi.n	8008e90 <UART_SetConfig+0x52c>
 8008e42:	a201      	add	r2, pc, #4	; (adr r2, 8008e48 <UART_SetConfig+0x4e4>)
 8008e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e48:	08008e61 	.word	0x08008e61
 8008e4c:	08008e69 	.word	0x08008e69
 8008e50:	08008e71 	.word	0x08008e71
 8008e54:	08008e79 	.word	0x08008e79
 8008e58:	08008e81 	.word	0x08008e81
 8008e5c:	08008e89 	.word	0x08008e89
 8008e60:	2300      	movs	r3, #0
 8008e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e66:	e154      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008e68:	2304      	movs	r3, #4
 8008e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e6e:	e150      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008e70:	2308      	movs	r3, #8
 8008e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e76:	e14c      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008e78:	2310      	movs	r3, #16
 8008e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e7e:	e148      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008e80:	2320      	movs	r3, #32
 8008e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e86:	e144      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008e88:	2340      	movs	r3, #64	; 0x40
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e8e:	e140      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008e90:	2380      	movs	r3, #128	; 0x80
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e96:	e13c      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a41      	ldr	r2, [pc, #260]	; (8008fa4 <UART_SetConfig+0x640>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	f040 8082 	bne.w	8008fa8 <UART_SetConfig+0x644>
 8008ea4:	4b3c      	ldr	r3, [pc, #240]	; (8008f98 <UART_SetConfig+0x634>)
 8008ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ea8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008eac:	2b28      	cmp	r3, #40	; 0x28
 8008eae:	d86d      	bhi.n	8008f8c <UART_SetConfig+0x628>
 8008eb0:	a201      	add	r2, pc, #4	; (adr r2, 8008eb8 <UART_SetConfig+0x554>)
 8008eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb6:	bf00      	nop
 8008eb8:	08008f5d 	.word	0x08008f5d
 8008ebc:	08008f8d 	.word	0x08008f8d
 8008ec0:	08008f8d 	.word	0x08008f8d
 8008ec4:	08008f8d 	.word	0x08008f8d
 8008ec8:	08008f8d 	.word	0x08008f8d
 8008ecc:	08008f8d 	.word	0x08008f8d
 8008ed0:	08008f8d 	.word	0x08008f8d
 8008ed4:	08008f8d 	.word	0x08008f8d
 8008ed8:	08008f65 	.word	0x08008f65
 8008edc:	08008f8d 	.word	0x08008f8d
 8008ee0:	08008f8d 	.word	0x08008f8d
 8008ee4:	08008f8d 	.word	0x08008f8d
 8008ee8:	08008f8d 	.word	0x08008f8d
 8008eec:	08008f8d 	.word	0x08008f8d
 8008ef0:	08008f8d 	.word	0x08008f8d
 8008ef4:	08008f8d 	.word	0x08008f8d
 8008ef8:	08008f6d 	.word	0x08008f6d
 8008efc:	08008f8d 	.word	0x08008f8d
 8008f00:	08008f8d 	.word	0x08008f8d
 8008f04:	08008f8d 	.word	0x08008f8d
 8008f08:	08008f8d 	.word	0x08008f8d
 8008f0c:	08008f8d 	.word	0x08008f8d
 8008f10:	08008f8d 	.word	0x08008f8d
 8008f14:	08008f8d 	.word	0x08008f8d
 8008f18:	08008f75 	.word	0x08008f75
 8008f1c:	08008f8d 	.word	0x08008f8d
 8008f20:	08008f8d 	.word	0x08008f8d
 8008f24:	08008f8d 	.word	0x08008f8d
 8008f28:	08008f8d 	.word	0x08008f8d
 8008f2c:	08008f8d 	.word	0x08008f8d
 8008f30:	08008f8d 	.word	0x08008f8d
 8008f34:	08008f8d 	.word	0x08008f8d
 8008f38:	08008f7d 	.word	0x08008f7d
 8008f3c:	08008f8d 	.word	0x08008f8d
 8008f40:	08008f8d 	.word	0x08008f8d
 8008f44:	08008f8d 	.word	0x08008f8d
 8008f48:	08008f8d 	.word	0x08008f8d
 8008f4c:	08008f8d 	.word	0x08008f8d
 8008f50:	08008f8d 	.word	0x08008f8d
 8008f54:	08008f8d 	.word	0x08008f8d
 8008f58:	08008f85 	.word	0x08008f85
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f62:	e0d6      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008f64:	2304      	movs	r3, #4
 8008f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f6a:	e0d2      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008f6c:	2308      	movs	r3, #8
 8008f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f72:	e0ce      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008f74:	2310      	movs	r3, #16
 8008f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f7a:	e0ca      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008f7c:	2320      	movs	r3, #32
 8008f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f82:	e0c6      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008f84:	2340      	movs	r3, #64	; 0x40
 8008f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f8a:	e0c2      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008f8c:	2380      	movs	r3, #128	; 0x80
 8008f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f92:	e0be      	b.n	8009112 <UART_SetConfig+0x7ae>
 8008f94:	40011400 	.word	0x40011400
 8008f98:	58024400 	.word	0x58024400
 8008f9c:	40007800 	.word	0x40007800
 8008fa0:	40007c00 	.word	0x40007c00
 8008fa4:	40011800 	.word	0x40011800
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4aad      	ldr	r2, [pc, #692]	; (8009264 <UART_SetConfig+0x900>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d176      	bne.n	80090a0 <UART_SetConfig+0x73c>
 8008fb2:	4bad      	ldr	r3, [pc, #692]	; (8009268 <UART_SetConfig+0x904>)
 8008fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fba:	2b28      	cmp	r3, #40	; 0x28
 8008fbc:	d86c      	bhi.n	8009098 <UART_SetConfig+0x734>
 8008fbe:	a201      	add	r2, pc, #4	; (adr r2, 8008fc4 <UART_SetConfig+0x660>)
 8008fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc4:	08009069 	.word	0x08009069
 8008fc8:	08009099 	.word	0x08009099
 8008fcc:	08009099 	.word	0x08009099
 8008fd0:	08009099 	.word	0x08009099
 8008fd4:	08009099 	.word	0x08009099
 8008fd8:	08009099 	.word	0x08009099
 8008fdc:	08009099 	.word	0x08009099
 8008fe0:	08009099 	.word	0x08009099
 8008fe4:	08009071 	.word	0x08009071
 8008fe8:	08009099 	.word	0x08009099
 8008fec:	08009099 	.word	0x08009099
 8008ff0:	08009099 	.word	0x08009099
 8008ff4:	08009099 	.word	0x08009099
 8008ff8:	08009099 	.word	0x08009099
 8008ffc:	08009099 	.word	0x08009099
 8009000:	08009099 	.word	0x08009099
 8009004:	08009079 	.word	0x08009079
 8009008:	08009099 	.word	0x08009099
 800900c:	08009099 	.word	0x08009099
 8009010:	08009099 	.word	0x08009099
 8009014:	08009099 	.word	0x08009099
 8009018:	08009099 	.word	0x08009099
 800901c:	08009099 	.word	0x08009099
 8009020:	08009099 	.word	0x08009099
 8009024:	08009081 	.word	0x08009081
 8009028:	08009099 	.word	0x08009099
 800902c:	08009099 	.word	0x08009099
 8009030:	08009099 	.word	0x08009099
 8009034:	08009099 	.word	0x08009099
 8009038:	08009099 	.word	0x08009099
 800903c:	08009099 	.word	0x08009099
 8009040:	08009099 	.word	0x08009099
 8009044:	08009089 	.word	0x08009089
 8009048:	08009099 	.word	0x08009099
 800904c:	08009099 	.word	0x08009099
 8009050:	08009099 	.word	0x08009099
 8009054:	08009099 	.word	0x08009099
 8009058:	08009099 	.word	0x08009099
 800905c:	08009099 	.word	0x08009099
 8009060:	08009099 	.word	0x08009099
 8009064:	08009091 	.word	0x08009091
 8009068:	2301      	movs	r3, #1
 800906a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800906e:	e050      	b.n	8009112 <UART_SetConfig+0x7ae>
 8009070:	2304      	movs	r3, #4
 8009072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009076:	e04c      	b.n	8009112 <UART_SetConfig+0x7ae>
 8009078:	2308      	movs	r3, #8
 800907a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800907e:	e048      	b.n	8009112 <UART_SetConfig+0x7ae>
 8009080:	2310      	movs	r3, #16
 8009082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009086:	e044      	b.n	8009112 <UART_SetConfig+0x7ae>
 8009088:	2320      	movs	r3, #32
 800908a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800908e:	e040      	b.n	8009112 <UART_SetConfig+0x7ae>
 8009090:	2340      	movs	r3, #64	; 0x40
 8009092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009096:	e03c      	b.n	8009112 <UART_SetConfig+0x7ae>
 8009098:	2380      	movs	r3, #128	; 0x80
 800909a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800909e:	e038      	b.n	8009112 <UART_SetConfig+0x7ae>
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a71      	ldr	r2, [pc, #452]	; (800926c <UART_SetConfig+0x908>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d130      	bne.n	800910c <UART_SetConfig+0x7a8>
 80090aa:	4b6f      	ldr	r3, [pc, #444]	; (8009268 <UART_SetConfig+0x904>)
 80090ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ae:	f003 0307 	and.w	r3, r3, #7
 80090b2:	2b05      	cmp	r3, #5
 80090b4:	d826      	bhi.n	8009104 <UART_SetConfig+0x7a0>
 80090b6:	a201      	add	r2, pc, #4	; (adr r2, 80090bc <UART_SetConfig+0x758>)
 80090b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090bc:	080090d5 	.word	0x080090d5
 80090c0:	080090dd 	.word	0x080090dd
 80090c4:	080090e5 	.word	0x080090e5
 80090c8:	080090ed 	.word	0x080090ed
 80090cc:	080090f5 	.word	0x080090f5
 80090d0:	080090fd 	.word	0x080090fd
 80090d4:	2302      	movs	r3, #2
 80090d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090da:	e01a      	b.n	8009112 <UART_SetConfig+0x7ae>
 80090dc:	2304      	movs	r3, #4
 80090de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090e2:	e016      	b.n	8009112 <UART_SetConfig+0x7ae>
 80090e4:	2308      	movs	r3, #8
 80090e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ea:	e012      	b.n	8009112 <UART_SetConfig+0x7ae>
 80090ec:	2310      	movs	r3, #16
 80090ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090f2:	e00e      	b.n	8009112 <UART_SetConfig+0x7ae>
 80090f4:	2320      	movs	r3, #32
 80090f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090fa:	e00a      	b.n	8009112 <UART_SetConfig+0x7ae>
 80090fc:	2340      	movs	r3, #64	; 0x40
 80090fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009102:	e006      	b.n	8009112 <UART_SetConfig+0x7ae>
 8009104:	2380      	movs	r3, #128	; 0x80
 8009106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800910a:	e002      	b.n	8009112 <UART_SetConfig+0x7ae>
 800910c:	2380      	movs	r3, #128	; 0x80
 800910e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a55      	ldr	r2, [pc, #340]	; (800926c <UART_SetConfig+0x908>)
 8009118:	4293      	cmp	r3, r2
 800911a:	f040 80f8 	bne.w	800930e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800911e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009122:	2b20      	cmp	r3, #32
 8009124:	dc46      	bgt.n	80091b4 <UART_SetConfig+0x850>
 8009126:	2b02      	cmp	r3, #2
 8009128:	db75      	blt.n	8009216 <UART_SetConfig+0x8b2>
 800912a:	3b02      	subs	r3, #2
 800912c:	2b1e      	cmp	r3, #30
 800912e:	d872      	bhi.n	8009216 <UART_SetConfig+0x8b2>
 8009130:	a201      	add	r2, pc, #4	; (adr r2, 8009138 <UART_SetConfig+0x7d4>)
 8009132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009136:	bf00      	nop
 8009138:	080091bb 	.word	0x080091bb
 800913c:	08009217 	.word	0x08009217
 8009140:	080091c3 	.word	0x080091c3
 8009144:	08009217 	.word	0x08009217
 8009148:	08009217 	.word	0x08009217
 800914c:	08009217 	.word	0x08009217
 8009150:	080091d3 	.word	0x080091d3
 8009154:	08009217 	.word	0x08009217
 8009158:	08009217 	.word	0x08009217
 800915c:	08009217 	.word	0x08009217
 8009160:	08009217 	.word	0x08009217
 8009164:	08009217 	.word	0x08009217
 8009168:	08009217 	.word	0x08009217
 800916c:	08009217 	.word	0x08009217
 8009170:	080091e3 	.word	0x080091e3
 8009174:	08009217 	.word	0x08009217
 8009178:	08009217 	.word	0x08009217
 800917c:	08009217 	.word	0x08009217
 8009180:	08009217 	.word	0x08009217
 8009184:	08009217 	.word	0x08009217
 8009188:	08009217 	.word	0x08009217
 800918c:	08009217 	.word	0x08009217
 8009190:	08009217 	.word	0x08009217
 8009194:	08009217 	.word	0x08009217
 8009198:	08009217 	.word	0x08009217
 800919c:	08009217 	.word	0x08009217
 80091a0:	08009217 	.word	0x08009217
 80091a4:	08009217 	.word	0x08009217
 80091a8:	08009217 	.word	0x08009217
 80091ac:	08009217 	.word	0x08009217
 80091b0:	08009209 	.word	0x08009209
 80091b4:	2b40      	cmp	r3, #64	; 0x40
 80091b6:	d02a      	beq.n	800920e <UART_SetConfig+0x8aa>
 80091b8:	e02d      	b.n	8009216 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80091ba:	f7fd fea9 	bl	8006f10 <HAL_RCCEx_GetD3PCLK1Freq>
 80091be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80091c0:	e02f      	b.n	8009222 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7fd feb8 	bl	8006f3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091d0:	e027      	b.n	8009222 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091d2:	f107 0318 	add.w	r3, r7, #24
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fe f804 	bl	80071e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091e0:	e01f      	b.n	8009222 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091e2:	4b21      	ldr	r3, [pc, #132]	; (8009268 <UART_SetConfig+0x904>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 0320 	and.w	r3, r3, #32
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d009      	beq.n	8009202 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091ee:	4b1e      	ldr	r3, [pc, #120]	; (8009268 <UART_SetConfig+0x904>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	08db      	lsrs	r3, r3, #3
 80091f4:	f003 0303 	and.w	r3, r3, #3
 80091f8:	4a1d      	ldr	r2, [pc, #116]	; (8009270 <UART_SetConfig+0x90c>)
 80091fa:	fa22 f303 	lsr.w	r3, r2, r3
 80091fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009200:	e00f      	b.n	8009222 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009202:	4b1b      	ldr	r3, [pc, #108]	; (8009270 <UART_SetConfig+0x90c>)
 8009204:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009206:	e00c      	b.n	8009222 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009208:	4b1a      	ldr	r3, [pc, #104]	; (8009274 <UART_SetConfig+0x910>)
 800920a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800920c:	e009      	b.n	8009222 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800920e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009214:	e005      	b.n	8009222 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009216:	2300      	movs	r3, #0
 8009218:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009220:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009224:	2b00      	cmp	r3, #0
 8009226:	f000 81ee 	beq.w	8009606 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922e:	4a12      	ldr	r2, [pc, #72]	; (8009278 <UART_SetConfig+0x914>)
 8009230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009234:	461a      	mov	r2, r3
 8009236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009238:	fbb3 f3f2 	udiv	r3, r3, r2
 800923c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	685a      	ldr	r2, [r3, #4]
 8009242:	4613      	mov	r3, r2
 8009244:	005b      	lsls	r3, r3, #1
 8009246:	4413      	add	r3, r2
 8009248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800924a:	429a      	cmp	r2, r3
 800924c:	d305      	bcc.n	800925a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009256:	429a      	cmp	r2, r3
 8009258:	d910      	bls.n	800927c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009260:	e1d1      	b.n	8009606 <UART_SetConfig+0xca2>
 8009262:	bf00      	nop
 8009264:	40011c00 	.word	0x40011c00
 8009268:	58024400 	.word	0x58024400
 800926c:	58000c00 	.word	0x58000c00
 8009270:	03d09000 	.word	0x03d09000
 8009274:	003d0900 	.word	0x003d0900
 8009278:	0800ca68 	.word	0x0800ca68
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800927c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800927e:	2200      	movs	r2, #0
 8009280:	60bb      	str	r3, [r7, #8]
 8009282:	60fa      	str	r2, [r7, #12]
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009288:	4ac0      	ldr	r2, [pc, #768]	; (800958c <UART_SetConfig+0xc28>)
 800928a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800928e:	b29b      	uxth	r3, r3
 8009290:	2200      	movs	r2, #0
 8009292:	603b      	str	r3, [r7, #0]
 8009294:	607a      	str	r2, [r7, #4]
 8009296:	e9d7 2300 	ldrd	r2, r3, [r7]
 800929a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800929e:	f7f7 f827 	bl	80002f0 <__aeabi_uldivmod>
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	4610      	mov	r0, r2
 80092a8:	4619      	mov	r1, r3
 80092aa:	f04f 0200 	mov.w	r2, #0
 80092ae:	f04f 0300 	mov.w	r3, #0
 80092b2:	020b      	lsls	r3, r1, #8
 80092b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80092b8:	0202      	lsls	r2, r0, #8
 80092ba:	6979      	ldr	r1, [r7, #20]
 80092bc:	6849      	ldr	r1, [r1, #4]
 80092be:	0849      	lsrs	r1, r1, #1
 80092c0:	2000      	movs	r0, #0
 80092c2:	460c      	mov	r4, r1
 80092c4:	4605      	mov	r5, r0
 80092c6:	eb12 0804 	adds.w	r8, r2, r4
 80092ca:	eb43 0905 	adc.w	r9, r3, r5
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	469a      	mov	sl, r3
 80092d6:	4693      	mov	fp, r2
 80092d8:	4652      	mov	r2, sl
 80092da:	465b      	mov	r3, fp
 80092dc:	4640      	mov	r0, r8
 80092de:	4649      	mov	r1, r9
 80092e0:	f7f7 f806 	bl	80002f0 <__aeabi_uldivmod>
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	4613      	mov	r3, r2
 80092ea:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80092ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092f2:	d308      	bcc.n	8009306 <UART_SetConfig+0x9a2>
 80092f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092fa:	d204      	bcs.n	8009306 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009302:	60da      	str	r2, [r3, #12]
 8009304:	e17f      	b.n	8009606 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800930c:	e17b      	b.n	8009606 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	69db      	ldr	r3, [r3, #28]
 8009312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009316:	f040 80bd 	bne.w	8009494 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800931a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800931e:	2b20      	cmp	r3, #32
 8009320:	dc48      	bgt.n	80093b4 <UART_SetConfig+0xa50>
 8009322:	2b00      	cmp	r3, #0
 8009324:	db7b      	blt.n	800941e <UART_SetConfig+0xaba>
 8009326:	2b20      	cmp	r3, #32
 8009328:	d879      	bhi.n	800941e <UART_SetConfig+0xaba>
 800932a:	a201      	add	r2, pc, #4	; (adr r2, 8009330 <UART_SetConfig+0x9cc>)
 800932c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009330:	080093bb 	.word	0x080093bb
 8009334:	080093c3 	.word	0x080093c3
 8009338:	0800941f 	.word	0x0800941f
 800933c:	0800941f 	.word	0x0800941f
 8009340:	080093cb 	.word	0x080093cb
 8009344:	0800941f 	.word	0x0800941f
 8009348:	0800941f 	.word	0x0800941f
 800934c:	0800941f 	.word	0x0800941f
 8009350:	080093db 	.word	0x080093db
 8009354:	0800941f 	.word	0x0800941f
 8009358:	0800941f 	.word	0x0800941f
 800935c:	0800941f 	.word	0x0800941f
 8009360:	0800941f 	.word	0x0800941f
 8009364:	0800941f 	.word	0x0800941f
 8009368:	0800941f 	.word	0x0800941f
 800936c:	0800941f 	.word	0x0800941f
 8009370:	080093eb 	.word	0x080093eb
 8009374:	0800941f 	.word	0x0800941f
 8009378:	0800941f 	.word	0x0800941f
 800937c:	0800941f 	.word	0x0800941f
 8009380:	0800941f 	.word	0x0800941f
 8009384:	0800941f 	.word	0x0800941f
 8009388:	0800941f 	.word	0x0800941f
 800938c:	0800941f 	.word	0x0800941f
 8009390:	0800941f 	.word	0x0800941f
 8009394:	0800941f 	.word	0x0800941f
 8009398:	0800941f 	.word	0x0800941f
 800939c:	0800941f 	.word	0x0800941f
 80093a0:	0800941f 	.word	0x0800941f
 80093a4:	0800941f 	.word	0x0800941f
 80093a8:	0800941f 	.word	0x0800941f
 80093ac:	0800941f 	.word	0x0800941f
 80093b0:	08009411 	.word	0x08009411
 80093b4:	2b40      	cmp	r3, #64	; 0x40
 80093b6:	d02e      	beq.n	8009416 <UART_SetConfig+0xab2>
 80093b8:	e031      	b.n	800941e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093ba:	f7fb fee7 	bl	800518c <HAL_RCC_GetPCLK1Freq>
 80093be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80093c0:	e033      	b.n	800942a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093c2:	f7fb fef9 	bl	80051b8 <HAL_RCC_GetPCLK2Freq>
 80093c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80093c8:	e02f      	b.n	800942a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fd fdb4 	bl	8006f3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093d8:	e027      	b.n	800942a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093da:	f107 0318 	add.w	r3, r7, #24
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fd ff00 	bl	80071e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093e8:	e01f      	b.n	800942a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093ea:	4b69      	ldr	r3, [pc, #420]	; (8009590 <UART_SetConfig+0xc2c>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 0320 	and.w	r3, r3, #32
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d009      	beq.n	800940a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093f6:	4b66      	ldr	r3, [pc, #408]	; (8009590 <UART_SetConfig+0xc2c>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	08db      	lsrs	r3, r3, #3
 80093fc:	f003 0303 	and.w	r3, r3, #3
 8009400:	4a64      	ldr	r2, [pc, #400]	; (8009594 <UART_SetConfig+0xc30>)
 8009402:	fa22 f303 	lsr.w	r3, r2, r3
 8009406:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009408:	e00f      	b.n	800942a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800940a:	4b62      	ldr	r3, [pc, #392]	; (8009594 <UART_SetConfig+0xc30>)
 800940c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800940e:	e00c      	b.n	800942a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009410:	4b61      	ldr	r3, [pc, #388]	; (8009598 <UART_SetConfig+0xc34>)
 8009412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009414:	e009      	b.n	800942a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800941a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800941c:	e005      	b.n	800942a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800941e:	2300      	movs	r3, #0
 8009420:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009428:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800942a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 80ea 	beq.w	8009606 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009436:	4a55      	ldr	r2, [pc, #340]	; (800958c <UART_SetConfig+0xc28>)
 8009438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800943c:	461a      	mov	r2, r3
 800943e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009440:	fbb3 f3f2 	udiv	r3, r3, r2
 8009444:	005a      	lsls	r2, r3, #1
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	085b      	lsrs	r3, r3, #1
 800944c:	441a      	add	r2, r3
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	fbb2 f3f3 	udiv	r3, r2, r3
 8009456:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945a:	2b0f      	cmp	r3, #15
 800945c:	d916      	bls.n	800948c <UART_SetConfig+0xb28>
 800945e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009464:	d212      	bcs.n	800948c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009468:	b29b      	uxth	r3, r3
 800946a:	f023 030f 	bic.w	r3, r3, #15
 800946e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009472:	085b      	lsrs	r3, r3, #1
 8009474:	b29b      	uxth	r3, r3
 8009476:	f003 0307 	and.w	r3, r3, #7
 800947a:	b29a      	uxth	r2, r3
 800947c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800947e:	4313      	orrs	r3, r2
 8009480:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009488:	60da      	str	r2, [r3, #12]
 800948a:	e0bc      	b.n	8009606 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009492:	e0b8      	b.n	8009606 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009494:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009498:	2b20      	cmp	r3, #32
 800949a:	dc4b      	bgt.n	8009534 <UART_SetConfig+0xbd0>
 800949c:	2b00      	cmp	r3, #0
 800949e:	f2c0 8087 	blt.w	80095b0 <UART_SetConfig+0xc4c>
 80094a2:	2b20      	cmp	r3, #32
 80094a4:	f200 8084 	bhi.w	80095b0 <UART_SetConfig+0xc4c>
 80094a8:	a201      	add	r2, pc, #4	; (adr r2, 80094b0 <UART_SetConfig+0xb4c>)
 80094aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ae:	bf00      	nop
 80094b0:	0800953b 	.word	0x0800953b
 80094b4:	08009543 	.word	0x08009543
 80094b8:	080095b1 	.word	0x080095b1
 80094bc:	080095b1 	.word	0x080095b1
 80094c0:	0800954b 	.word	0x0800954b
 80094c4:	080095b1 	.word	0x080095b1
 80094c8:	080095b1 	.word	0x080095b1
 80094cc:	080095b1 	.word	0x080095b1
 80094d0:	0800955b 	.word	0x0800955b
 80094d4:	080095b1 	.word	0x080095b1
 80094d8:	080095b1 	.word	0x080095b1
 80094dc:	080095b1 	.word	0x080095b1
 80094e0:	080095b1 	.word	0x080095b1
 80094e4:	080095b1 	.word	0x080095b1
 80094e8:	080095b1 	.word	0x080095b1
 80094ec:	080095b1 	.word	0x080095b1
 80094f0:	0800956b 	.word	0x0800956b
 80094f4:	080095b1 	.word	0x080095b1
 80094f8:	080095b1 	.word	0x080095b1
 80094fc:	080095b1 	.word	0x080095b1
 8009500:	080095b1 	.word	0x080095b1
 8009504:	080095b1 	.word	0x080095b1
 8009508:	080095b1 	.word	0x080095b1
 800950c:	080095b1 	.word	0x080095b1
 8009510:	080095b1 	.word	0x080095b1
 8009514:	080095b1 	.word	0x080095b1
 8009518:	080095b1 	.word	0x080095b1
 800951c:	080095b1 	.word	0x080095b1
 8009520:	080095b1 	.word	0x080095b1
 8009524:	080095b1 	.word	0x080095b1
 8009528:	080095b1 	.word	0x080095b1
 800952c:	080095b1 	.word	0x080095b1
 8009530:	080095a3 	.word	0x080095a3
 8009534:	2b40      	cmp	r3, #64	; 0x40
 8009536:	d037      	beq.n	80095a8 <UART_SetConfig+0xc44>
 8009538:	e03a      	b.n	80095b0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800953a:	f7fb fe27 	bl	800518c <HAL_RCC_GetPCLK1Freq>
 800953e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009540:	e03c      	b.n	80095bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009542:	f7fb fe39 	bl	80051b8 <HAL_RCC_GetPCLK2Freq>
 8009546:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009548:	e038      	b.n	80095bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800954a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800954e:	4618      	mov	r0, r3
 8009550:	f7fd fcf4 	bl	8006f3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009558:	e030      	b.n	80095bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800955a:	f107 0318 	add.w	r3, r7, #24
 800955e:	4618      	mov	r0, r3
 8009560:	f7fd fe40 	bl	80071e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009568:	e028      	b.n	80095bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800956a:	4b09      	ldr	r3, [pc, #36]	; (8009590 <UART_SetConfig+0xc2c>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 0320 	and.w	r3, r3, #32
 8009572:	2b00      	cmp	r3, #0
 8009574:	d012      	beq.n	800959c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009576:	4b06      	ldr	r3, [pc, #24]	; (8009590 <UART_SetConfig+0xc2c>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	08db      	lsrs	r3, r3, #3
 800957c:	f003 0303 	and.w	r3, r3, #3
 8009580:	4a04      	ldr	r2, [pc, #16]	; (8009594 <UART_SetConfig+0xc30>)
 8009582:	fa22 f303 	lsr.w	r3, r2, r3
 8009586:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009588:	e018      	b.n	80095bc <UART_SetConfig+0xc58>
 800958a:	bf00      	nop
 800958c:	0800ca68 	.word	0x0800ca68
 8009590:	58024400 	.word	0x58024400
 8009594:	03d09000 	.word	0x03d09000
 8009598:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800959c:	4b24      	ldr	r3, [pc, #144]	; (8009630 <UART_SetConfig+0xccc>)
 800959e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095a0:	e00c      	b.n	80095bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80095a2:	4b24      	ldr	r3, [pc, #144]	; (8009634 <UART_SetConfig+0xcd0>)
 80095a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095a6:	e009      	b.n	80095bc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095ae:	e005      	b.n	80095bc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80095b0:	2300      	movs	r3, #0
 80095b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80095ba:	bf00      	nop
    }

    if (pclk != 0U)
 80095bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d021      	beq.n	8009606 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c6:	4a1c      	ldr	r2, [pc, #112]	; (8009638 <UART_SetConfig+0xcd4>)
 80095c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095cc:	461a      	mov	r2, r3
 80095ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	085b      	lsrs	r3, r3, #1
 80095da:	441a      	add	r2, r3
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80095e4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e8:	2b0f      	cmp	r3, #15
 80095ea:	d909      	bls.n	8009600 <UART_SetConfig+0xc9c>
 80095ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095f2:	d205      	bcs.n	8009600 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80095f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	60da      	str	r2, [r3, #12]
 80095fe:	e002      	b.n	8009606 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2201      	movs	r2, #1
 800960a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	2201      	movs	r2, #1
 8009612:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	2200      	movs	r2, #0
 800961a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	2200      	movs	r2, #0
 8009620:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009622:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009626:	4618      	mov	r0, r3
 8009628:	3748      	adds	r7, #72	; 0x48
 800962a:	46bd      	mov	sp, r7
 800962c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009630:	03d09000 	.word	0x03d09000
 8009634:	003d0900 	.word	0x003d0900
 8009638:	0800ca68 	.word	0x0800ca68

0800963c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009648:	f003 0301 	and.w	r3, r3, #1
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00a      	beq.n	8009666 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	430a      	orrs	r2, r1
 8009664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800966a:	f003 0302 	and.w	r3, r3, #2
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00a      	beq.n	8009688 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	430a      	orrs	r2, r1
 8009686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968c:	f003 0304 	and.w	r3, r3, #4
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00a      	beq.n	80096aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	430a      	orrs	r2, r1
 80096a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ae:	f003 0308 	and.w	r3, r3, #8
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00a      	beq.n	80096cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	430a      	orrs	r2, r1
 80096ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d0:	f003 0310 	and.w	r3, r3, #16
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00a      	beq.n	80096ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	430a      	orrs	r2, r1
 80096ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f2:	f003 0320 	and.w	r3, r3, #32
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00a      	beq.n	8009710 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	430a      	orrs	r2, r1
 800970e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009718:	2b00      	cmp	r3, #0
 800971a:	d01a      	beq.n	8009752 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	430a      	orrs	r2, r1
 8009730:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800973a:	d10a      	bne.n	8009752 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	430a      	orrs	r2, r1
 8009750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00a      	beq.n	8009774 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	430a      	orrs	r2, r1
 8009772:	605a      	str	r2, [r3, #4]
  }
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b098      	sub	sp, #96	; 0x60
 8009784:	af02      	add	r7, sp, #8
 8009786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009790:	f7f7 fd86 	bl	80012a0 <HAL_GetTick>
 8009794:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 0308 	and.w	r3, r3, #8
 80097a0:	2b08      	cmp	r3, #8
 80097a2:	d12f      	bne.n	8009804 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097a8:	9300      	str	r3, [sp, #0]
 80097aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097ac:	2200      	movs	r2, #0
 80097ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f88e 	bl	80098d4 <UART_WaitOnFlagUntilTimeout>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d022      	beq.n	8009804 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c6:	e853 3f00 	ldrex	r3, [r3]
 80097ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097d2:	653b      	str	r3, [r7, #80]	; 0x50
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	461a      	mov	r2, r3
 80097da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097dc:	647b      	str	r3, [r7, #68]	; 0x44
 80097de:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097e4:	e841 2300 	strex	r3, r2, [r1]
 80097e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d1e6      	bne.n	80097be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2220      	movs	r2, #32
 80097f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009800:	2303      	movs	r3, #3
 8009802:	e063      	b.n	80098cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f003 0304 	and.w	r3, r3, #4
 800980e:	2b04      	cmp	r3, #4
 8009810:	d149      	bne.n	80098a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009812:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800981a:	2200      	movs	r2, #0
 800981c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 f857 	bl	80098d4 <UART_WaitOnFlagUntilTimeout>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d03c      	beq.n	80098a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009834:	e853 3f00 	ldrex	r3, [r3]
 8009838:	623b      	str	r3, [r7, #32]
   return(result);
 800983a:	6a3b      	ldr	r3, [r7, #32]
 800983c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009840:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	461a      	mov	r2, r3
 8009848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800984a:	633b      	str	r3, [r7, #48]	; 0x30
 800984c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009852:	e841 2300 	strex	r3, r2, [r1]
 8009856:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1e6      	bne.n	800982c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3308      	adds	r3, #8
 8009864:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	e853 3f00 	ldrex	r3, [r3]
 800986c:	60fb      	str	r3, [r7, #12]
   return(result);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f023 0301 	bic.w	r3, r3, #1
 8009874:	64bb      	str	r3, [r7, #72]	; 0x48
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	3308      	adds	r3, #8
 800987c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800987e:	61fa      	str	r2, [r7, #28]
 8009880:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009882:	69b9      	ldr	r1, [r7, #24]
 8009884:	69fa      	ldr	r2, [r7, #28]
 8009886:	e841 2300 	strex	r3, r2, [r1]
 800988a:	617b      	str	r3, [r7, #20]
   return(result);
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1e5      	bne.n	800985e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2220      	movs	r2, #32
 8009896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098a2:	2303      	movs	r3, #3
 80098a4:	e012      	b.n	80098cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2220      	movs	r2, #32
 80098aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2220      	movs	r2, #32
 80098b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3758      	adds	r7, #88	; 0x58
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	603b      	str	r3, [r7, #0]
 80098e0:	4613      	mov	r3, r2
 80098e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098e4:	e049      	b.n	800997a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ec:	d045      	beq.n	800997a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098ee:	f7f7 fcd7 	bl	80012a0 <HAL_GetTick>
 80098f2:	4602      	mov	r2, r0
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	1ad3      	subs	r3, r2, r3
 80098f8:	69ba      	ldr	r2, [r7, #24]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d302      	bcc.n	8009904 <UART_WaitOnFlagUntilTimeout+0x30>
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d101      	bne.n	8009908 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009904:	2303      	movs	r3, #3
 8009906:	e048      	b.n	800999a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 0304 	and.w	r3, r3, #4
 8009912:	2b00      	cmp	r3, #0
 8009914:	d031      	beq.n	800997a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	69db      	ldr	r3, [r3, #28]
 800991c:	f003 0308 	and.w	r3, r3, #8
 8009920:	2b08      	cmp	r3, #8
 8009922:	d110      	bne.n	8009946 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2208      	movs	r2, #8
 800992a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f000 f839 	bl	80099a4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2208      	movs	r2, #8
 8009936:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e029      	b.n	800999a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	69db      	ldr	r3, [r3, #28]
 800994c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009954:	d111      	bne.n	800997a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800995e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f000 f81f 	bl	80099a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2220      	movs	r2, #32
 800996a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009976:	2303      	movs	r3, #3
 8009978:	e00f      	b.n	800999a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	69da      	ldr	r2, [r3, #28]
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	4013      	ands	r3, r2
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	429a      	cmp	r2, r3
 8009988:	bf0c      	ite	eq
 800998a:	2301      	moveq	r3, #1
 800998c:	2300      	movne	r3, #0
 800998e:	b2db      	uxtb	r3, r3
 8009990:	461a      	mov	r2, r3
 8009992:	79fb      	ldrb	r3, [r7, #7]
 8009994:	429a      	cmp	r2, r3
 8009996:	d0a6      	beq.n	80098e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
	...

080099a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b095      	sub	sp, #84	; 0x54
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b4:	e853 3f00 	ldrex	r3, [r3]
 80099b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80099ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	461a      	mov	r2, r3
 80099c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099ca:	643b      	str	r3, [r7, #64]	; 0x40
 80099cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80099d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099d2:	e841 2300 	strex	r3, r2, [r1]
 80099d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1e6      	bne.n	80099ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	3308      	adds	r3, #8
 80099e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e6:	6a3b      	ldr	r3, [r7, #32]
 80099e8:	e853 3f00 	ldrex	r3, [r3]
 80099ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80099ee:	69fa      	ldr	r2, [r7, #28]
 80099f0:	4b1e      	ldr	r3, [pc, #120]	; (8009a6c <UART_EndRxTransfer+0xc8>)
 80099f2:	4013      	ands	r3, r2
 80099f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	3308      	adds	r3, #8
 80099fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a06:	e841 2300 	strex	r3, r2, [r1]
 8009a0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1e5      	bne.n	80099de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d118      	bne.n	8009a4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	e853 3f00 	ldrex	r3, [r3]
 8009a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	f023 0310 	bic.w	r3, r3, #16
 8009a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	461a      	mov	r2, r3
 8009a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a38:	61bb      	str	r3, [r7, #24]
 8009a3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3c:	6979      	ldr	r1, [r7, #20]
 8009a3e:	69ba      	ldr	r2, [r7, #24]
 8009a40:	e841 2300 	strex	r3, r2, [r1]
 8009a44:	613b      	str	r3, [r7, #16]
   return(result);
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1e6      	bne.n	8009a1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2220      	movs	r2, #32
 8009a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009a60:	bf00      	nop
 8009a62:	3754      	adds	r7, #84	; 0x54
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr
 8009a6c:	effffffe 	.word	0xeffffffe

08009a70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d101      	bne.n	8009a86 <HAL_UARTEx_DisableFifoMode+0x16>
 8009a82:	2302      	movs	r3, #2
 8009a84:	e027      	b.n	8009ad6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2224      	movs	r2, #36	; 0x24
 8009a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f022 0201 	bic.w	r2, r2, #1
 8009aac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009ab4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2220      	movs	r2, #32
 8009ac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3714      	adds	r7, #20
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr

08009ae2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b084      	sub	sp, #16
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d101      	bne.n	8009afa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009af6:	2302      	movs	r3, #2
 8009af8:	e02d      	b.n	8009b56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2201      	movs	r2, #1
 8009afe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2224      	movs	r2, #36	; 0x24
 8009b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f022 0201 	bic.w	r2, r2, #1
 8009b20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	430a      	orrs	r2, r1
 8009b34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 f850 	bl	8009bdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2220      	movs	r2, #32
 8009b48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b084      	sub	sp, #16
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
 8009b66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d101      	bne.n	8009b76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b72:	2302      	movs	r3, #2
 8009b74:	e02d      	b.n	8009bd2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2224      	movs	r2, #36	; 0x24
 8009b82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f022 0201 	bic.w	r2, r2, #1
 8009b9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	683a      	ldr	r2, [r7, #0]
 8009bae:	430a      	orrs	r2, r1
 8009bb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f812 	bl	8009bdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2220      	movs	r2, #32
 8009bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
	...

08009bdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d108      	bne.n	8009bfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009bfc:	e031      	b.n	8009c62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009bfe:	2310      	movs	r3, #16
 8009c00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c02:	2310      	movs	r3, #16
 8009c04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	0e5b      	lsrs	r3, r3, #25
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	f003 0307 	and.w	r3, r3, #7
 8009c14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	0f5b      	lsrs	r3, r3, #29
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	f003 0307 	and.w	r3, r3, #7
 8009c24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c26:	7bbb      	ldrb	r3, [r7, #14]
 8009c28:	7b3a      	ldrb	r2, [r7, #12]
 8009c2a:	4911      	ldr	r1, [pc, #68]	; (8009c70 <UARTEx_SetNbDataToProcess+0x94>)
 8009c2c:	5c8a      	ldrb	r2, [r1, r2]
 8009c2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c32:	7b3a      	ldrb	r2, [r7, #12]
 8009c34:	490f      	ldr	r1, [pc, #60]	; (8009c74 <UARTEx_SetNbDataToProcess+0x98>)
 8009c36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c38:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c3c:	b29a      	uxth	r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c44:	7bfb      	ldrb	r3, [r7, #15]
 8009c46:	7b7a      	ldrb	r2, [r7, #13]
 8009c48:	4909      	ldr	r1, [pc, #36]	; (8009c70 <UARTEx_SetNbDataToProcess+0x94>)
 8009c4a:	5c8a      	ldrb	r2, [r1, r2]
 8009c4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c50:	7b7a      	ldrb	r2, [r7, #13]
 8009c52:	4908      	ldr	r1, [pc, #32]	; (8009c74 <UARTEx_SetNbDataToProcess+0x98>)
 8009c54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c56:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c5a:	b29a      	uxth	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009c62:	bf00      	nop
 8009c64:	3714      	adds	r7, #20
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	0800ca80 	.word	0x0800ca80
 8009c74:	0800ca88 	.word	0x0800ca88

08009c78 <__NVIC_SetPriority>:
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	4603      	mov	r3, r0
 8009c80:	6039      	str	r1, [r7, #0]
 8009c82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009c84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	db0a      	blt.n	8009ca2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	b2da      	uxtb	r2, r3
 8009c90:	490c      	ldr	r1, [pc, #48]	; (8009cc4 <__NVIC_SetPriority+0x4c>)
 8009c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c96:	0112      	lsls	r2, r2, #4
 8009c98:	b2d2      	uxtb	r2, r2
 8009c9a:	440b      	add	r3, r1
 8009c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009ca0:	e00a      	b.n	8009cb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	b2da      	uxtb	r2, r3
 8009ca6:	4908      	ldr	r1, [pc, #32]	; (8009cc8 <__NVIC_SetPriority+0x50>)
 8009ca8:	88fb      	ldrh	r3, [r7, #6]
 8009caa:	f003 030f 	and.w	r3, r3, #15
 8009cae:	3b04      	subs	r3, #4
 8009cb0:	0112      	lsls	r2, r2, #4
 8009cb2:	b2d2      	uxtb	r2, r2
 8009cb4:	440b      	add	r3, r1
 8009cb6:	761a      	strb	r2, [r3, #24]
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr
 8009cc4:	e000e100 	.word	0xe000e100
 8009cc8:	e000ed00 	.word	0xe000ed00

08009ccc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	f06f 0004 	mvn.w	r0, #4
 8009cd6:	f7ff ffcf 	bl	8009c78 <__NVIC_SetPriority>
#endif
}
 8009cda:	bf00      	nop
 8009cdc:	bd80      	pop	{r7, pc}
	...

08009ce0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ce6:	f3ef 8305 	mrs	r3, IPSR
 8009cea:	603b      	str	r3, [r7, #0]
  return(result);
 8009cec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d003      	beq.n	8009cfa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009cf2:	f06f 0305 	mvn.w	r3, #5
 8009cf6:	607b      	str	r3, [r7, #4]
 8009cf8:	e00c      	b.n	8009d14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009cfa:	4b0a      	ldr	r3, [pc, #40]	; (8009d24 <osKernelInitialize+0x44>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d105      	bne.n	8009d0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009d02:	4b08      	ldr	r3, [pc, #32]	; (8009d24 <osKernelInitialize+0x44>)
 8009d04:	2201      	movs	r2, #1
 8009d06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	607b      	str	r3, [r7, #4]
 8009d0c:	e002      	b.n	8009d14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d14:	687b      	ldr	r3, [r7, #4]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	370c      	adds	r7, #12
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr
 8009d22:	bf00      	nop
 8009d24:	2400020c 	.word	0x2400020c

08009d28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d2e:	f3ef 8305 	mrs	r3, IPSR
 8009d32:	603b      	str	r3, [r7, #0]
  return(result);
 8009d34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d003      	beq.n	8009d42 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009d3a:	f06f 0305 	mvn.w	r3, #5
 8009d3e:	607b      	str	r3, [r7, #4]
 8009d40:	e010      	b.n	8009d64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009d42:	4b0b      	ldr	r3, [pc, #44]	; (8009d70 <osKernelStart+0x48>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d109      	bne.n	8009d5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009d4a:	f7ff ffbf 	bl	8009ccc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009d4e:	4b08      	ldr	r3, [pc, #32]	; (8009d70 <osKernelStart+0x48>)
 8009d50:	2202      	movs	r2, #2
 8009d52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009d54:	f001 f866 	bl	800ae24 <vTaskStartScheduler>
      stat = osOK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	607b      	str	r3, [r7, #4]
 8009d5c:	e002      	b.n	8009d64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d64:	687b      	ldr	r3, [r7, #4]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	2400020c 	.word	0x2400020c

08009d74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b08e      	sub	sp, #56	; 0x38
 8009d78:	af04      	add	r7, sp, #16
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009d80:	2300      	movs	r3, #0
 8009d82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d84:	f3ef 8305 	mrs	r3, IPSR
 8009d88:	617b      	str	r3, [r7, #20]
  return(result);
 8009d8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d17e      	bne.n	8009e8e <osThreadNew+0x11a>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d07b      	beq.n	8009e8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009d96:	2380      	movs	r3, #128	; 0x80
 8009d98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009d9a:	2318      	movs	r3, #24
 8009d9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009da2:	f04f 33ff 	mov.w	r3, #4294967295
 8009da6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d045      	beq.n	8009e3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d002      	beq.n	8009dbc <osThreadNew+0x48>
        name = attr->name;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	699b      	ldr	r3, [r3, #24]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d002      	beq.n	8009dca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	699b      	ldr	r3, [r3, #24]
 8009dc8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d008      	beq.n	8009de2 <osThreadNew+0x6e>
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	2b38      	cmp	r3, #56	; 0x38
 8009dd4:	d805      	bhi.n	8009de2 <osThreadNew+0x6e>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	f003 0301 	and.w	r3, r3, #1
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d001      	beq.n	8009de6 <osThreadNew+0x72>
        return (NULL);
 8009de2:	2300      	movs	r3, #0
 8009de4:	e054      	b.n	8009e90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d003      	beq.n	8009df6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	695b      	ldr	r3, [r3, #20]
 8009df2:	089b      	lsrs	r3, r3, #2
 8009df4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00e      	beq.n	8009e1c <osThreadNew+0xa8>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	2b5b      	cmp	r3, #91	; 0x5b
 8009e04:	d90a      	bls.n	8009e1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d006      	beq.n	8009e1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	695b      	ldr	r3, [r3, #20]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d002      	beq.n	8009e1c <osThreadNew+0xa8>
        mem = 1;
 8009e16:	2301      	movs	r3, #1
 8009e18:	61bb      	str	r3, [r7, #24]
 8009e1a:	e010      	b.n	8009e3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10c      	bne.n	8009e3e <osThreadNew+0xca>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d108      	bne.n	8009e3e <osThreadNew+0xca>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d104      	bne.n	8009e3e <osThreadNew+0xca>
          mem = 0;
 8009e34:	2300      	movs	r3, #0
 8009e36:	61bb      	str	r3, [r7, #24]
 8009e38:	e001      	b.n	8009e3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d110      	bne.n	8009e66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e4c:	9202      	str	r2, [sp, #8]
 8009e4e:	9301      	str	r3, [sp, #4]
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	6a3a      	ldr	r2, [r7, #32]
 8009e58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f000 fe0c 	bl	800aa78 <xTaskCreateStatic>
 8009e60:	4603      	mov	r3, r0
 8009e62:	613b      	str	r3, [r7, #16]
 8009e64:	e013      	b.n	8009e8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d110      	bne.n	8009e8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009e6c:	6a3b      	ldr	r3, [r7, #32]
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	f107 0310 	add.w	r3, r7, #16
 8009e74:	9301      	str	r3, [sp, #4]
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	9300      	str	r3, [sp, #0]
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e7e:	68f8      	ldr	r0, [r7, #12]
 8009e80:	f000 fe57 	bl	800ab32 <xTaskCreate>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d001      	beq.n	8009e8e <osThreadNew+0x11a>
            hTask = NULL;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009e8e:	693b      	ldr	r3, [r7, #16]
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3728      	adds	r7, #40	; 0x28
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ea0:	f3ef 8305 	mrs	r3, IPSR
 8009ea4:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ea6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d003      	beq.n	8009eb4 <osDelay+0x1c>
    stat = osErrorISR;
 8009eac:	f06f 0305 	mvn.w	r3, #5
 8009eb0:	60fb      	str	r3, [r7, #12]
 8009eb2:	e007      	b.n	8009ec4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d002      	beq.n	8009ec4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 ff7c 	bl	800adbc <vTaskDelay>
    }
  }

  return (stat);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
	...

08009ed0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009ed0:	b480      	push	{r7}
 8009ed2:	b085      	sub	sp, #20
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	4a07      	ldr	r2, [pc, #28]	; (8009efc <vApplicationGetIdleTaskMemory+0x2c>)
 8009ee0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	4a06      	ldr	r2, [pc, #24]	; (8009f00 <vApplicationGetIdleTaskMemory+0x30>)
 8009ee6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2280      	movs	r2, #128	; 0x80
 8009eec:	601a      	str	r2, [r3, #0]
}
 8009eee:	bf00      	nop
 8009ef0:	3714      	adds	r7, #20
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	24000210 	.word	0x24000210
 8009f00:	2400026c 	.word	0x2400026c

08009f04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	4a07      	ldr	r2, [pc, #28]	; (8009f30 <vApplicationGetTimerTaskMemory+0x2c>)
 8009f14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	4a06      	ldr	r2, [pc, #24]	; (8009f34 <vApplicationGetTimerTaskMemory+0x30>)
 8009f1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f22:	601a      	str	r2, [r3, #0]
}
 8009f24:	bf00      	nop
 8009f26:	3714      	adds	r7, #20
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	2400046c 	.word	0x2400046c
 8009f34:	240004c8 	.word	0x240004c8

08009f38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f103 0208 	add.w	r2, r3, #8
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f103 0208 	add.w	r2, r3, #8
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f103 0208 	add.w	r2, r3, #8
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f6c:	bf00      	nop
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f86:	bf00      	nop
 8009f88:	370c      	adds	r7, #12
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr

08009f92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f92:	b480      	push	{r7}
 8009f94:	b085      	sub	sp, #20
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	689a      	ldr	r2, [r3, #8]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	683a      	ldr	r2, [r7, #0]
 8009fb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	683a      	ldr	r2, [r7, #0]
 8009fbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	1c5a      	adds	r2, r3, #1
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	601a      	str	r2, [r3, #0]
}
 8009fce:	bf00      	nop
 8009fd0:	3714      	adds	r7, #20
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr

08009fda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009fda:	b480      	push	{r7}
 8009fdc:	b085      	sub	sp, #20
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
 8009fe2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff0:	d103      	bne.n	8009ffa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	60fb      	str	r3, [r7, #12]
 8009ff8:	e00c      	b.n	800a014 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	3308      	adds	r3, #8
 8009ffe:	60fb      	str	r3, [r7, #12]
 800a000:	e002      	b.n	800a008 <vListInsert+0x2e>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	60fb      	str	r3, [r7, #12]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	68ba      	ldr	r2, [r7, #8]
 800a010:	429a      	cmp	r2, r3
 800a012:	d2f6      	bcs.n	800a002 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	685a      	ldr	r2, [r3, #4]
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	683a      	ldr	r2, [r7, #0]
 800a022:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	683a      	ldr	r2, [r7, #0]
 800a02e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	1c5a      	adds	r2, r3, #1
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	601a      	str	r2, [r3, #0]
}
 800a040:	bf00      	nop
 800a042:	3714      	adds	r7, #20
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	6892      	ldr	r2, [r2, #8]
 800a062:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	6852      	ldr	r2, [r2, #4]
 800a06c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	429a      	cmp	r2, r3
 800a076:	d103      	bne.n	800a080 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	689a      	ldr	r2, [r3, #8]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	1e5a      	subs	r2, r3, #1
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
}
 800a094:	4618      	mov	r0, r3
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10a      	bne.n	800a0ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a0c6:	bf00      	nop
 800a0c8:	e7fe      	b.n	800a0c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a0ca:	f002 f84b 	bl	800c164 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0d6:	68f9      	ldr	r1, [r7, #12]
 800a0d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a0da:	fb01 f303 	mul.w	r3, r1, r3
 800a0de:	441a      	add	r2, r3
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	68f9      	ldr	r1, [r7, #12]
 800a0fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a100:	fb01 f303 	mul.w	r3, r1, r3
 800a104:	441a      	add	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	22ff      	movs	r2, #255	; 0xff
 800a10e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	22ff      	movs	r2, #255	; 0xff
 800a116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d114      	bne.n	800a14a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d01a      	beq.n	800a15e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	3310      	adds	r3, #16
 800a12c:	4618      	mov	r0, r3
 800a12e:	f001 f903 	bl	800b338 <xTaskRemoveFromEventList>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d012      	beq.n	800a15e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a138:	4b0c      	ldr	r3, [pc, #48]	; (800a16c <xQueueGenericReset+0xcc>)
 800a13a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a13e:	601a      	str	r2, [r3, #0]
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	e009      	b.n	800a15e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	3310      	adds	r3, #16
 800a14e:	4618      	mov	r0, r3
 800a150:	f7ff fef2 	bl	8009f38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	3324      	adds	r3, #36	; 0x24
 800a158:	4618      	mov	r0, r3
 800a15a:	f7ff feed 	bl	8009f38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a15e:	f002 f831 	bl	800c1c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a162:	2301      	movs	r3, #1
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	e000ed04 	.word	0xe000ed04

0800a170 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a170:	b580      	push	{r7, lr}
 800a172:	b08e      	sub	sp, #56	; 0x38
 800a174:	af02      	add	r7, sp, #8
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
 800a17c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d10a      	bne.n	800a19a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a188:	f383 8811 	msr	BASEPRI, r3
 800a18c:	f3bf 8f6f 	isb	sy
 800a190:	f3bf 8f4f 	dsb	sy
 800a194:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a196:	bf00      	nop
 800a198:	e7fe      	b.n	800a198 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d10a      	bne.n	800a1b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a4:	f383 8811 	msr	BASEPRI, r3
 800a1a8:	f3bf 8f6f 	isb	sy
 800a1ac:	f3bf 8f4f 	dsb	sy
 800a1b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a1b2:	bf00      	nop
 800a1b4:	e7fe      	b.n	800a1b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d002      	beq.n	800a1c2 <xQueueGenericCreateStatic+0x52>
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <xQueueGenericCreateStatic+0x56>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e000      	b.n	800a1c8 <xQueueGenericCreateStatic+0x58>
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d10a      	bne.n	800a1e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d0:	f383 8811 	msr	BASEPRI, r3
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	623b      	str	r3, [r7, #32]
}
 800a1de:	bf00      	nop
 800a1e0:	e7fe      	b.n	800a1e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d102      	bne.n	800a1ee <xQueueGenericCreateStatic+0x7e>
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d101      	bne.n	800a1f2 <xQueueGenericCreateStatic+0x82>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e000      	b.n	800a1f4 <xQueueGenericCreateStatic+0x84>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d10a      	bne.n	800a20e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fc:	f383 8811 	msr	BASEPRI, r3
 800a200:	f3bf 8f6f 	isb	sy
 800a204:	f3bf 8f4f 	dsb	sy
 800a208:	61fb      	str	r3, [r7, #28]
}
 800a20a:	bf00      	nop
 800a20c:	e7fe      	b.n	800a20c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a20e:	2350      	movs	r3, #80	; 0x50
 800a210:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	2b50      	cmp	r3, #80	; 0x50
 800a216:	d00a      	beq.n	800a22e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21c:	f383 8811 	msr	BASEPRI, r3
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	61bb      	str	r3, [r7, #24]
}
 800a22a:	bf00      	nop
 800a22c:	e7fe      	b.n	800a22c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a22e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00d      	beq.n	800a256 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23c:	2201      	movs	r2, #1
 800a23e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a242:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a248:	9300      	str	r3, [sp, #0]
 800a24a:	4613      	mov	r3, r2
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	68b9      	ldr	r1, [r7, #8]
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f000 f805 	bl	800a260 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a258:	4618      	mov	r0, r3
 800a25a:	3730      	adds	r7, #48	; 0x30
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
 800a26c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d103      	bne.n	800a27c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	69ba      	ldr	r2, [r7, #24]
 800a278:	601a      	str	r2, [r3, #0]
 800a27a:	e002      	b.n	800a282 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	68ba      	ldr	r2, [r7, #8]
 800a28c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a28e:	2101      	movs	r1, #1
 800a290:	69b8      	ldr	r0, [r7, #24]
 800a292:	f7ff ff05 	bl	800a0a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	78fa      	ldrb	r2, [r7, #3]
 800a29a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a29e:	bf00      	nop
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
	...

0800a2a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b08e      	sub	sp, #56	; 0x38
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	607a      	str	r2, [r7, #4]
 800a2b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d10a      	bne.n	800a2da <xQueueGenericSend+0x32>
	__asm volatile
 800a2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c8:	f383 8811 	msr	BASEPRI, r3
 800a2cc:	f3bf 8f6f 	isb	sy
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a2d6:	bf00      	nop
 800a2d8:	e7fe      	b.n	800a2d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d103      	bne.n	800a2e8 <xQueueGenericSend+0x40>
 800a2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d101      	bne.n	800a2ec <xQueueGenericSend+0x44>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e000      	b.n	800a2ee <xQueueGenericSend+0x46>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10a      	bne.n	800a308 <xQueueGenericSend+0x60>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a304:	bf00      	nop
 800a306:	e7fe      	b.n	800a306 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d103      	bne.n	800a316 <xQueueGenericSend+0x6e>
 800a30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a312:	2b01      	cmp	r3, #1
 800a314:	d101      	bne.n	800a31a <xQueueGenericSend+0x72>
 800a316:	2301      	movs	r3, #1
 800a318:	e000      	b.n	800a31c <xQueueGenericSend+0x74>
 800a31a:	2300      	movs	r3, #0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10a      	bne.n	800a336 <xQueueGenericSend+0x8e>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	623b      	str	r3, [r7, #32]
}
 800a332:	bf00      	nop
 800a334:	e7fe      	b.n	800a334 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a336:	f001 f9bd 	bl	800b6b4 <xTaskGetSchedulerState>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d102      	bne.n	800a346 <xQueueGenericSend+0x9e>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d101      	bne.n	800a34a <xQueueGenericSend+0xa2>
 800a346:	2301      	movs	r3, #1
 800a348:	e000      	b.n	800a34c <xQueueGenericSend+0xa4>
 800a34a:	2300      	movs	r3, #0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d10a      	bne.n	800a366 <xQueueGenericSend+0xbe>
	__asm volatile
 800a350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a354:	f383 8811 	msr	BASEPRI, r3
 800a358:	f3bf 8f6f 	isb	sy
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	61fb      	str	r3, [r7, #28]
}
 800a362:	bf00      	nop
 800a364:	e7fe      	b.n	800a364 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a366:	f001 fefd 	bl	800c164 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a372:	429a      	cmp	r2, r3
 800a374:	d302      	bcc.n	800a37c <xQueueGenericSend+0xd4>
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d129      	bne.n	800a3d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	68b9      	ldr	r1, [r7, #8]
 800a380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a382:	f000 fa0b 	bl	800a79c <prvCopyDataToQueue>
 800a386:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d010      	beq.n	800a3b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a392:	3324      	adds	r3, #36	; 0x24
 800a394:	4618      	mov	r0, r3
 800a396:	f000 ffcf 	bl	800b338 <xTaskRemoveFromEventList>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d013      	beq.n	800a3c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a3a0:	4b3f      	ldr	r3, [pc, #252]	; (800a4a0 <xQueueGenericSend+0x1f8>)
 800a3a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3a6:	601a      	str	r2, [r3, #0]
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	f3bf 8f6f 	isb	sy
 800a3b0:	e00a      	b.n	800a3c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d007      	beq.n	800a3c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a3b8:	4b39      	ldr	r3, [pc, #228]	; (800a4a0 <xQueueGenericSend+0x1f8>)
 800a3ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3be:	601a      	str	r2, [r3, #0]
 800a3c0:	f3bf 8f4f 	dsb	sy
 800a3c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a3c8:	f001 fefc 	bl	800c1c4 <vPortExitCritical>
				return pdPASS;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e063      	b.n	800a498 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d103      	bne.n	800a3de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3d6:	f001 fef5 	bl	800c1c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	e05c      	b.n	800a498 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d106      	bne.n	800a3f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3e4:	f107 0314 	add.w	r3, r7, #20
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f001 f809 	bl	800b400 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3f2:	f001 fee7 	bl	800c1c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3f6:	f000 fd7b 	bl	800aef0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3fa:	f001 feb3 	bl	800c164 <vPortEnterCritical>
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a400:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a404:	b25b      	sxtb	r3, r3
 800a406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a40a:	d103      	bne.n	800a414 <xQueueGenericSend+0x16c>
 800a40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a416:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a41a:	b25b      	sxtb	r3, r3
 800a41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a420:	d103      	bne.n	800a42a <xQueueGenericSend+0x182>
 800a422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a424:	2200      	movs	r2, #0
 800a426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a42a:	f001 fecb 	bl	800c1c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a42e:	1d3a      	adds	r2, r7, #4
 800a430:	f107 0314 	add.w	r3, r7, #20
 800a434:	4611      	mov	r1, r2
 800a436:	4618      	mov	r0, r3
 800a438:	f000 fff8 	bl	800b42c <xTaskCheckForTimeOut>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d124      	bne.n	800a48c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a442:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a444:	f000 faa2 	bl	800a98c <prvIsQueueFull>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d018      	beq.n	800a480 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a450:	3310      	adds	r3, #16
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	4611      	mov	r1, r2
 800a456:	4618      	mov	r0, r3
 800a458:	f000 ff1e 	bl	800b298 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a45c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a45e:	f000 fa2d 	bl	800a8bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a462:	f000 fd53 	bl	800af0c <xTaskResumeAll>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f47f af7c 	bne.w	800a366 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a46e:	4b0c      	ldr	r3, [pc, #48]	; (800a4a0 <xQueueGenericSend+0x1f8>)
 800a470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a474:	601a      	str	r2, [r3, #0]
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	f3bf 8f6f 	isb	sy
 800a47e:	e772      	b.n	800a366 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a482:	f000 fa1b 	bl	800a8bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a486:	f000 fd41 	bl	800af0c <xTaskResumeAll>
 800a48a:	e76c      	b.n	800a366 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a48c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a48e:	f000 fa15 	bl	800a8bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a492:	f000 fd3b 	bl	800af0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a496:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3738      	adds	r7, #56	; 0x38
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	e000ed04 	.word	0xe000ed04

0800a4a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b090      	sub	sp, #64	; 0x40
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	607a      	str	r2, [r7, #4]
 800a4b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d10a      	bne.n	800a4d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c0:	f383 8811 	msr	BASEPRI, r3
 800a4c4:	f3bf 8f6f 	isb	sy
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a4ce:	bf00      	nop
 800a4d0:	e7fe      	b.n	800a4d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d103      	bne.n	800a4e0 <xQueueGenericSendFromISR+0x3c>
 800a4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d101      	bne.n	800a4e4 <xQueueGenericSendFromISR+0x40>
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e000      	b.n	800a4e6 <xQueueGenericSendFromISR+0x42>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d10a      	bne.n	800a500 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ee:	f383 8811 	msr	BASEPRI, r3
 800a4f2:	f3bf 8f6f 	isb	sy
 800a4f6:	f3bf 8f4f 	dsb	sy
 800a4fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a4fc:	bf00      	nop
 800a4fe:	e7fe      	b.n	800a4fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	2b02      	cmp	r3, #2
 800a504:	d103      	bne.n	800a50e <xQueueGenericSendFromISR+0x6a>
 800a506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d101      	bne.n	800a512 <xQueueGenericSendFromISR+0x6e>
 800a50e:	2301      	movs	r3, #1
 800a510:	e000      	b.n	800a514 <xQueueGenericSendFromISR+0x70>
 800a512:	2300      	movs	r3, #0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10a      	bne.n	800a52e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51c:	f383 8811 	msr	BASEPRI, r3
 800a520:	f3bf 8f6f 	isb	sy
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	623b      	str	r3, [r7, #32]
}
 800a52a:	bf00      	nop
 800a52c:	e7fe      	b.n	800a52c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a52e:	f001 fefb 	bl	800c328 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a532:	f3ef 8211 	mrs	r2, BASEPRI
 800a536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53a:	f383 8811 	msr	BASEPRI, r3
 800a53e:	f3bf 8f6f 	isb	sy
 800a542:	f3bf 8f4f 	dsb	sy
 800a546:	61fa      	str	r2, [r7, #28]
 800a548:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a54a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a54c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a556:	429a      	cmp	r2, r3
 800a558:	d302      	bcc.n	800a560 <xQueueGenericSendFromISR+0xbc>
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d12f      	bne.n	800a5c0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a570:	683a      	ldr	r2, [r7, #0]
 800a572:	68b9      	ldr	r1, [r7, #8]
 800a574:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a576:	f000 f911 	bl	800a79c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a57a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a582:	d112      	bne.n	800a5aa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d016      	beq.n	800a5ba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58e:	3324      	adds	r3, #36	; 0x24
 800a590:	4618      	mov	r0, r3
 800a592:	f000 fed1 	bl	800b338 <xTaskRemoveFromEventList>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00e      	beq.n	800a5ba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00b      	beq.n	800a5ba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	601a      	str	r2, [r3, #0]
 800a5a8:	e007      	b.n	800a5ba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a5aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	b25a      	sxtb	r2, r3
 800a5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a5be:	e001      	b.n	800a5c4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a5ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3740      	adds	r7, #64	; 0x40
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
	...

0800a5dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b08c      	sub	sp, #48	; 0x30
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d10a      	bne.n	800a60c <xQueueReceive+0x30>
	__asm volatile
 800a5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fa:	f383 8811 	msr	BASEPRI, r3
 800a5fe:	f3bf 8f6f 	isb	sy
 800a602:	f3bf 8f4f 	dsb	sy
 800a606:	623b      	str	r3, [r7, #32]
}
 800a608:	bf00      	nop
 800a60a:	e7fe      	b.n	800a60a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d103      	bne.n	800a61a <xQueueReceive+0x3e>
 800a612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a616:	2b00      	cmp	r3, #0
 800a618:	d101      	bne.n	800a61e <xQueueReceive+0x42>
 800a61a:	2301      	movs	r3, #1
 800a61c:	e000      	b.n	800a620 <xQueueReceive+0x44>
 800a61e:	2300      	movs	r3, #0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d10a      	bne.n	800a63a <xQueueReceive+0x5e>
	__asm volatile
 800a624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a628:	f383 8811 	msr	BASEPRI, r3
 800a62c:	f3bf 8f6f 	isb	sy
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	61fb      	str	r3, [r7, #28]
}
 800a636:	bf00      	nop
 800a638:	e7fe      	b.n	800a638 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a63a:	f001 f83b 	bl	800b6b4 <xTaskGetSchedulerState>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d102      	bne.n	800a64a <xQueueReceive+0x6e>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d101      	bne.n	800a64e <xQueueReceive+0x72>
 800a64a:	2301      	movs	r3, #1
 800a64c:	e000      	b.n	800a650 <xQueueReceive+0x74>
 800a64e:	2300      	movs	r3, #0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10a      	bne.n	800a66a <xQueueReceive+0x8e>
	__asm volatile
 800a654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a658:	f383 8811 	msr	BASEPRI, r3
 800a65c:	f3bf 8f6f 	isb	sy
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	61bb      	str	r3, [r7, #24]
}
 800a666:	bf00      	nop
 800a668:	e7fe      	b.n	800a668 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a66a:	f001 fd7b 	bl	800c164 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a672:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a676:	2b00      	cmp	r3, #0
 800a678:	d01f      	beq.n	800a6ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a67a:	68b9      	ldr	r1, [r7, #8]
 800a67c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a67e:	f000 f8f7 	bl	800a870 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a684:	1e5a      	subs	r2, r3, #1
 800a686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a688:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68c:	691b      	ldr	r3, [r3, #16]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00f      	beq.n	800a6b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a694:	3310      	adds	r3, #16
 800a696:	4618      	mov	r0, r3
 800a698:	f000 fe4e 	bl	800b338 <xTaskRemoveFromEventList>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d007      	beq.n	800a6b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6a2:	4b3d      	ldr	r3, [pc, #244]	; (800a798 <xQueueReceive+0x1bc>)
 800a6a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6a8:	601a      	str	r2, [r3, #0]
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a6b2:	f001 fd87 	bl	800c1c4 <vPortExitCritical>
				return pdPASS;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e069      	b.n	800a78e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d103      	bne.n	800a6c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6c0:	f001 fd80 	bl	800c1c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	e062      	b.n	800a78e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d106      	bne.n	800a6dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6ce:	f107 0310 	add.w	r3, r7, #16
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f000 fe94 	bl	800b400 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6dc:	f001 fd72 	bl	800c1c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6e0:	f000 fc06 	bl	800aef0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6e4:	f001 fd3e 	bl	800c164 <vPortEnterCritical>
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6ee:	b25b      	sxtb	r3, r3
 800a6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f4:	d103      	bne.n	800a6fe <xQueueReceive+0x122>
 800a6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a704:	b25b      	sxtb	r3, r3
 800a706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a70a:	d103      	bne.n	800a714 <xQueueReceive+0x138>
 800a70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a714:	f001 fd56 	bl	800c1c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a718:	1d3a      	adds	r2, r7, #4
 800a71a:	f107 0310 	add.w	r3, r7, #16
 800a71e:	4611      	mov	r1, r2
 800a720:	4618      	mov	r0, r3
 800a722:	f000 fe83 	bl	800b42c <xTaskCheckForTimeOut>
 800a726:	4603      	mov	r3, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d123      	bne.n	800a774 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a72c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a72e:	f000 f917 	bl	800a960 <prvIsQueueEmpty>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d017      	beq.n	800a768 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73a:	3324      	adds	r3, #36	; 0x24
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	4611      	mov	r1, r2
 800a740:	4618      	mov	r0, r3
 800a742:	f000 fda9 	bl	800b298 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a748:	f000 f8b8 	bl	800a8bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a74c:	f000 fbde 	bl	800af0c <xTaskResumeAll>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d189      	bne.n	800a66a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a756:	4b10      	ldr	r3, [pc, #64]	; (800a798 <xQueueReceive+0x1bc>)
 800a758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a75c:	601a      	str	r2, [r3, #0]
 800a75e:	f3bf 8f4f 	dsb	sy
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	e780      	b.n	800a66a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a76a:	f000 f8a7 	bl	800a8bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a76e:	f000 fbcd 	bl	800af0c <xTaskResumeAll>
 800a772:	e77a      	b.n	800a66a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a776:	f000 f8a1 	bl	800a8bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a77a:	f000 fbc7 	bl	800af0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a77e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a780:	f000 f8ee 	bl	800a960 <prvIsQueueEmpty>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	f43f af6f 	beq.w	800a66a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a78c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3730      	adds	r7, #48	; 0x30
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	e000ed04 	.word	0xe000ed04

0800a79c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b086      	sub	sp, #24
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10d      	bne.n	800a7d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d14d      	bne.n	800a85e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f000 ff92 	bl	800b6f0 <xTaskPriorityDisinherit>
 800a7cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	609a      	str	r2, [r3, #8]
 800a7d4:	e043      	b.n	800a85e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d119      	bne.n	800a810 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6858      	ldr	r0, [r3, #4]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	68b9      	ldr	r1, [r7, #8]
 800a7e8:	f002 f8ec 	bl	800c9c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	685a      	ldr	r2, [r3, #4]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f4:	441a      	add	r2, r3
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	685a      	ldr	r2, [r3, #4]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	429a      	cmp	r2, r3
 800a804:	d32b      	bcc.n	800a85e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	605a      	str	r2, [r3, #4]
 800a80e:	e026      	b.n	800a85e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	68d8      	ldr	r0, [r3, #12]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a818:	461a      	mov	r2, r3
 800a81a:	68b9      	ldr	r1, [r7, #8]
 800a81c:	f002 f8d2 	bl	800c9c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	68da      	ldr	r2, [r3, #12]
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a828:	425b      	negs	r3, r3
 800a82a:	441a      	add	r2, r3
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	68da      	ldr	r2, [r3, #12]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d207      	bcs.n	800a84c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	689a      	ldr	r2, [r3, #8]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a844:	425b      	negs	r3, r3
 800a846:	441a      	add	r2, r3
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b02      	cmp	r3, #2
 800a850:	d105      	bne.n	800a85e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d002      	beq.n	800a85e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	3b01      	subs	r3, #1
 800a85c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	1c5a      	adds	r2, r3, #1
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a866:	697b      	ldr	r3, [r7, #20]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3718      	adds	r7, #24
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d018      	beq.n	800a8b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	68da      	ldr	r2, [r3, #12]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88a:	441a      	add	r2, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	68da      	ldr	r2, [r3, #12]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	689b      	ldr	r3, [r3, #8]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d303      	bcc.n	800a8a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	68d9      	ldr	r1, [r3, #12]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	6838      	ldr	r0, [r7, #0]
 800a8b0:	f002 f888 	bl	800c9c4 <memcpy>
	}
}
 800a8b4:	bf00      	nop
 800a8b6:	3708      	adds	r7, #8
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a8c4:	f001 fc4e 	bl	800c164 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8d0:	e011      	b.n	800a8f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d012      	beq.n	800a900 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	3324      	adds	r3, #36	; 0x24
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f000 fd2a 	bl	800b338 <xTaskRemoveFromEventList>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d001      	beq.n	800a8ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a8ea:	f000 fe01 	bl	800b4f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a8ee:	7bfb      	ldrb	r3, [r7, #15]
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	dce9      	bgt.n	800a8d2 <prvUnlockQueue+0x16>
 800a8fe:	e000      	b.n	800a902 <prvUnlockQueue+0x46>
					break;
 800a900:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	22ff      	movs	r2, #255	; 0xff
 800a906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a90a:	f001 fc5b 	bl	800c1c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a90e:	f001 fc29 	bl	800c164 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a918:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a91a:	e011      	b.n	800a940 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	691b      	ldr	r3, [r3, #16]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d012      	beq.n	800a94a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	3310      	adds	r3, #16
 800a928:	4618      	mov	r0, r3
 800a92a:	f000 fd05 	bl	800b338 <xTaskRemoveFromEventList>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d001      	beq.n	800a938 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a934:	f000 fddc 	bl	800b4f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a938:	7bbb      	ldrb	r3, [r7, #14]
 800a93a:	3b01      	subs	r3, #1
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a940:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a944:	2b00      	cmp	r3, #0
 800a946:	dce9      	bgt.n	800a91c <prvUnlockQueue+0x60>
 800a948:	e000      	b.n	800a94c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a94a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	22ff      	movs	r2, #255	; 0xff
 800a950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a954:	f001 fc36 	bl	800c1c4 <vPortExitCritical>
}
 800a958:	bf00      	nop
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a968:	f001 fbfc 	bl	800c164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a970:	2b00      	cmp	r3, #0
 800a972:	d102      	bne.n	800a97a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a974:	2301      	movs	r3, #1
 800a976:	60fb      	str	r3, [r7, #12]
 800a978:	e001      	b.n	800a97e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a97a:	2300      	movs	r3, #0
 800a97c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a97e:	f001 fc21 	bl	800c1c4 <vPortExitCritical>

	return xReturn;
 800a982:	68fb      	ldr	r3, [r7, #12]
}
 800a984:	4618      	mov	r0, r3
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a994:	f001 fbe6 	bl	800c164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d102      	bne.n	800a9aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	60fb      	str	r3, [r7, #12]
 800a9a8:	e001      	b.n	800a9ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9ae:	f001 fc09 	bl	800c1c4 <vPortExitCritical>

	return xReturn;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	60fb      	str	r3, [r7, #12]
 800a9ca:	e014      	b.n	800a9f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a9cc:	4a0f      	ldr	r2, [pc, #60]	; (800aa0c <vQueueAddToRegistry+0x50>)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10b      	bne.n	800a9f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a9d8:	490c      	ldr	r1, [pc, #48]	; (800aa0c <vQueueAddToRegistry+0x50>)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	683a      	ldr	r2, [r7, #0]
 800a9de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a9e2:	4a0a      	ldr	r2, [pc, #40]	; (800aa0c <vQueueAddToRegistry+0x50>)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	00db      	lsls	r3, r3, #3
 800a9e8:	4413      	add	r3, r2
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a9ee:	e006      	b.n	800a9fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	60fb      	str	r3, [r7, #12]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2b07      	cmp	r3, #7
 800a9fa:	d9e7      	bls.n	800a9cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a9fc:	bf00      	nop
 800a9fe:	bf00      	nop
 800aa00:	3714      	adds	r7, #20
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	240008c8 	.word	0x240008c8

0800aa10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b086      	sub	sp, #24
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aa20:	f001 fba0 	bl	800c164 <vPortEnterCritical>
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa2a:	b25b      	sxtb	r3, r3
 800aa2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa30:	d103      	bne.n	800aa3a <vQueueWaitForMessageRestricted+0x2a>
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa40:	b25b      	sxtb	r3, r3
 800aa42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa46:	d103      	bne.n	800aa50 <vQueueWaitForMessageRestricted+0x40>
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa50:	f001 fbb8 	bl	800c1c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d106      	bne.n	800aa6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	3324      	adds	r3, #36	; 0x24
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	68b9      	ldr	r1, [r7, #8]
 800aa64:	4618      	mov	r0, r3
 800aa66:	f000 fc3b 	bl	800b2e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aa6a:	6978      	ldr	r0, [r7, #20]
 800aa6c:	f7ff ff26 	bl	800a8bc <prvUnlockQueue>
	}
 800aa70:	bf00      	nop
 800aa72:	3718      	adds	r7, #24
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b08e      	sub	sp, #56	; 0x38
 800aa7c:	af04      	add	r7, sp, #16
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
 800aa84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aa86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10a      	bne.n	800aaa2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800aa8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa90:	f383 8811 	msr	BASEPRI, r3
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	623b      	str	r3, [r7, #32]
}
 800aa9e:	bf00      	nop
 800aaa0:	e7fe      	b.n	800aaa0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aaa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d10a      	bne.n	800aabe <xTaskCreateStatic+0x46>
	__asm volatile
 800aaa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaac:	f383 8811 	msr	BASEPRI, r3
 800aab0:	f3bf 8f6f 	isb	sy
 800aab4:	f3bf 8f4f 	dsb	sy
 800aab8:	61fb      	str	r3, [r7, #28]
}
 800aaba:	bf00      	nop
 800aabc:	e7fe      	b.n	800aabc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aabe:	235c      	movs	r3, #92	; 0x5c
 800aac0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	2b5c      	cmp	r3, #92	; 0x5c
 800aac6:	d00a      	beq.n	800aade <xTaskCreateStatic+0x66>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aacc:	f383 8811 	msr	BASEPRI, r3
 800aad0:	f3bf 8f6f 	isb	sy
 800aad4:	f3bf 8f4f 	dsb	sy
 800aad8:	61bb      	str	r3, [r7, #24]
}
 800aada:	bf00      	nop
 800aadc:	e7fe      	b.n	800aadc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aade:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d01e      	beq.n	800ab24 <xTaskCreateStatic+0xac>
 800aae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d01b      	beq.n	800ab24 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aaec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aaf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aaf4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf8:	2202      	movs	r2, #2
 800aafa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aafe:	2300      	movs	r3, #0
 800ab00:	9303      	str	r3, [sp, #12]
 800ab02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab04:	9302      	str	r3, [sp, #8]
 800ab06:	f107 0314 	add.w	r3, r7, #20
 800ab0a:	9301      	str	r3, [sp, #4]
 800ab0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	68b9      	ldr	r1, [r7, #8]
 800ab16:	68f8      	ldr	r0, [r7, #12]
 800ab18:	f000 f850 	bl	800abbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab1e:	f000 f8dd 	bl	800acdc <prvAddNewTaskToReadyList>
 800ab22:	e001      	b.n	800ab28 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ab24:	2300      	movs	r3, #0
 800ab26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab28:	697b      	ldr	r3, [r7, #20]
	}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3728      	adds	r7, #40	; 0x28
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b08c      	sub	sp, #48	; 0x30
 800ab36:	af04      	add	r7, sp, #16
 800ab38:	60f8      	str	r0, [r7, #12]
 800ab3a:	60b9      	str	r1, [r7, #8]
 800ab3c:	603b      	str	r3, [r7, #0]
 800ab3e:	4613      	mov	r3, r2
 800ab40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab42:	88fb      	ldrh	r3, [r7, #6]
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	4618      	mov	r0, r3
 800ab48:	f001 fc2e 	bl	800c3a8 <pvPortMalloc>
 800ab4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00e      	beq.n	800ab72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ab54:	205c      	movs	r0, #92	; 0x5c
 800ab56:	f001 fc27 	bl	800c3a8 <pvPortMalloc>
 800ab5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d003      	beq.n	800ab6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ab62:	69fb      	ldr	r3, [r7, #28]
 800ab64:	697a      	ldr	r2, [r7, #20]
 800ab66:	631a      	str	r2, [r3, #48]	; 0x30
 800ab68:	e005      	b.n	800ab76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ab6a:	6978      	ldr	r0, [r7, #20]
 800ab6c:	f001 fce8 	bl	800c540 <vPortFree>
 800ab70:	e001      	b.n	800ab76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ab72:	2300      	movs	r3, #0
 800ab74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ab76:	69fb      	ldr	r3, [r7, #28]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d017      	beq.n	800abac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ab84:	88fa      	ldrh	r2, [r7, #6]
 800ab86:	2300      	movs	r3, #0
 800ab88:	9303      	str	r3, [sp, #12]
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	9302      	str	r3, [sp, #8]
 800ab8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab90:	9301      	str	r3, [sp, #4]
 800ab92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab94:	9300      	str	r3, [sp, #0]
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	68b9      	ldr	r1, [r7, #8]
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	f000 f80e 	bl	800abbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aba0:	69f8      	ldr	r0, [r7, #28]
 800aba2:	f000 f89b 	bl	800acdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aba6:	2301      	movs	r3, #1
 800aba8:	61bb      	str	r3, [r7, #24]
 800abaa:	e002      	b.n	800abb2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800abac:	f04f 33ff 	mov.w	r3, #4294967295
 800abb0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800abb2:	69bb      	ldr	r3, [r7, #24]
	}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3720      	adds	r7, #32
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b088      	sub	sp, #32
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	607a      	str	r2, [r7, #4]
 800abc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800abca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abcc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	461a      	mov	r2, r3
 800abd4:	21a5      	movs	r1, #165	; 0xa5
 800abd6:	f001 ff03 	bl	800c9e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800abda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abde:	6879      	ldr	r1, [r7, #4]
 800abe0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800abe4:	440b      	add	r3, r1
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	4413      	add	r3, r2
 800abea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800abec:	69bb      	ldr	r3, [r7, #24]
 800abee:	f023 0307 	bic.w	r3, r3, #7
 800abf2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	f003 0307 	and.w	r3, r3, #7
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00a      	beq.n	800ac14 <prvInitialiseNewTask+0x58>
	__asm volatile
 800abfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac02:	f383 8811 	msr	BASEPRI, r3
 800ac06:	f3bf 8f6f 	isb	sy
 800ac0a:	f3bf 8f4f 	dsb	sy
 800ac0e:	617b      	str	r3, [r7, #20]
}
 800ac10:	bf00      	nop
 800ac12:	e7fe      	b.n	800ac12 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d01f      	beq.n	800ac5a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	61fb      	str	r3, [r7, #28]
 800ac1e:	e012      	b.n	800ac46 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac20:	68ba      	ldr	r2, [r7, #8]
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	4413      	add	r3, r2
 800ac26:	7819      	ldrb	r1, [r3, #0]
 800ac28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	3334      	adds	r3, #52	; 0x34
 800ac30:	460a      	mov	r2, r1
 800ac32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac34:	68ba      	ldr	r2, [r7, #8]
 800ac36:	69fb      	ldr	r3, [r7, #28]
 800ac38:	4413      	add	r3, r2
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d006      	beq.n	800ac4e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	3301      	adds	r3, #1
 800ac44:	61fb      	str	r3, [r7, #28]
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	2b0f      	cmp	r3, #15
 800ac4a:	d9e9      	bls.n	800ac20 <prvInitialiseNewTask+0x64>
 800ac4c:	e000      	b.n	800ac50 <prvInitialiseNewTask+0x94>
			{
				break;
 800ac4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac52:	2200      	movs	r2, #0
 800ac54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac58:	e003      	b.n	800ac62 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ac5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ac62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac64:	2b37      	cmp	r3, #55	; 0x37
 800ac66:	d901      	bls.n	800ac6c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ac68:	2337      	movs	r3, #55	; 0x37
 800ac6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ac6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ac72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ac78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ac7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac80:	3304      	adds	r3, #4
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7ff f978 	bl	8009f78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ac88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8a:	3318      	adds	r3, #24
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7ff f973 	bl	8009f78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ac92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aca6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acaa:	2200      	movs	r2, #0
 800acac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800acae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800acb6:	683a      	ldr	r2, [r7, #0]
 800acb8:	68f9      	ldr	r1, [r7, #12]
 800acba:	69b8      	ldr	r0, [r7, #24]
 800acbc:	f001 f928 	bl	800bf10 <pxPortInitialiseStack>
 800acc0:	4602      	mov	r2, r0
 800acc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800acc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d002      	beq.n	800acd2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800accc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acd2:	bf00      	nop
 800acd4:	3720      	adds	r7, #32
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
	...

0800acdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ace4:	f001 fa3e 	bl	800c164 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ace8:	4b2d      	ldr	r3, [pc, #180]	; (800ada0 <prvAddNewTaskToReadyList+0xc4>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	3301      	adds	r3, #1
 800acee:	4a2c      	ldr	r2, [pc, #176]	; (800ada0 <prvAddNewTaskToReadyList+0xc4>)
 800acf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800acf2:	4b2c      	ldr	r3, [pc, #176]	; (800ada4 <prvAddNewTaskToReadyList+0xc8>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d109      	bne.n	800ad0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800acfa:	4a2a      	ldr	r2, [pc, #168]	; (800ada4 <prvAddNewTaskToReadyList+0xc8>)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad00:	4b27      	ldr	r3, [pc, #156]	; (800ada0 <prvAddNewTaskToReadyList+0xc4>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d110      	bne.n	800ad2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad08:	f000 fc16 	bl	800b538 <prvInitialiseTaskLists>
 800ad0c:	e00d      	b.n	800ad2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad0e:	4b26      	ldr	r3, [pc, #152]	; (800ada8 <prvAddNewTaskToReadyList+0xcc>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d109      	bne.n	800ad2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad16:	4b23      	ldr	r3, [pc, #140]	; (800ada4 <prvAddNewTaskToReadyList+0xc8>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d802      	bhi.n	800ad2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad24:	4a1f      	ldr	r2, [pc, #124]	; (800ada4 <prvAddNewTaskToReadyList+0xc8>)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ad2a:	4b20      	ldr	r3, [pc, #128]	; (800adac <prvAddNewTaskToReadyList+0xd0>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	4a1e      	ldr	r2, [pc, #120]	; (800adac <prvAddNewTaskToReadyList+0xd0>)
 800ad32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ad34:	4b1d      	ldr	r3, [pc, #116]	; (800adac <prvAddNewTaskToReadyList+0xd0>)
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad40:	4b1b      	ldr	r3, [pc, #108]	; (800adb0 <prvAddNewTaskToReadyList+0xd4>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d903      	bls.n	800ad50 <prvAddNewTaskToReadyList+0x74>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad4c:	4a18      	ldr	r2, [pc, #96]	; (800adb0 <prvAddNewTaskToReadyList+0xd4>)
 800ad4e:	6013      	str	r3, [r2, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad54:	4613      	mov	r3, r2
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	4413      	add	r3, r2
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	4a15      	ldr	r2, [pc, #84]	; (800adb4 <prvAddNewTaskToReadyList+0xd8>)
 800ad5e:	441a      	add	r2, r3
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	3304      	adds	r3, #4
 800ad64:	4619      	mov	r1, r3
 800ad66:	4610      	mov	r0, r2
 800ad68:	f7ff f913 	bl	8009f92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ad6c:	f001 fa2a 	bl	800c1c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ad70:	4b0d      	ldr	r3, [pc, #52]	; (800ada8 <prvAddNewTaskToReadyList+0xcc>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00e      	beq.n	800ad96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ad78:	4b0a      	ldr	r3, [pc, #40]	; (800ada4 <prvAddNewTaskToReadyList+0xc8>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d207      	bcs.n	800ad96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ad86:	4b0c      	ldr	r3, [pc, #48]	; (800adb8 <prvAddNewTaskToReadyList+0xdc>)
 800ad88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad8c:	601a      	str	r2, [r3, #0]
 800ad8e:	f3bf 8f4f 	dsb	sy
 800ad92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad96:	bf00      	nop
 800ad98:	3708      	adds	r7, #8
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	24000ddc 	.word	0x24000ddc
 800ada4:	24000908 	.word	0x24000908
 800ada8:	24000de8 	.word	0x24000de8
 800adac:	24000df8 	.word	0x24000df8
 800adb0:	24000de4 	.word	0x24000de4
 800adb4:	2400090c 	.word	0x2400090c
 800adb8:	e000ed04 	.word	0xe000ed04

0800adbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800adc4:	2300      	movs	r3, #0
 800adc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d017      	beq.n	800adfe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800adce:	4b13      	ldr	r3, [pc, #76]	; (800ae1c <vTaskDelay+0x60>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00a      	beq.n	800adec <vTaskDelay+0x30>
	__asm volatile
 800add6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adda:	f383 8811 	msr	BASEPRI, r3
 800adde:	f3bf 8f6f 	isb	sy
 800ade2:	f3bf 8f4f 	dsb	sy
 800ade6:	60bb      	str	r3, [r7, #8]
}
 800ade8:	bf00      	nop
 800adea:	e7fe      	b.n	800adea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800adec:	f000 f880 	bl	800aef0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800adf0:	2100      	movs	r1, #0
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fcea 	bl	800b7cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800adf8:	f000 f888 	bl	800af0c <xTaskResumeAll>
 800adfc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d107      	bne.n	800ae14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ae04:	4b06      	ldr	r3, [pc, #24]	; (800ae20 <vTaskDelay+0x64>)
 800ae06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae0a:	601a      	str	r2, [r3, #0]
 800ae0c:	f3bf 8f4f 	dsb	sy
 800ae10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae14:	bf00      	nop
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	24000e04 	.word	0x24000e04
 800ae20:	e000ed04 	.word	0xe000ed04

0800ae24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b08a      	sub	sp, #40	; 0x28
 800ae28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae32:	463a      	mov	r2, r7
 800ae34:	1d39      	adds	r1, r7, #4
 800ae36:	f107 0308 	add.w	r3, r7, #8
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7ff f848 	bl	8009ed0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae40:	6839      	ldr	r1, [r7, #0]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	68ba      	ldr	r2, [r7, #8]
 800ae46:	9202      	str	r2, [sp, #8]
 800ae48:	9301      	str	r3, [sp, #4]
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	2300      	movs	r3, #0
 800ae50:	460a      	mov	r2, r1
 800ae52:	4921      	ldr	r1, [pc, #132]	; (800aed8 <vTaskStartScheduler+0xb4>)
 800ae54:	4821      	ldr	r0, [pc, #132]	; (800aedc <vTaskStartScheduler+0xb8>)
 800ae56:	f7ff fe0f 	bl	800aa78 <xTaskCreateStatic>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	4a20      	ldr	r2, [pc, #128]	; (800aee0 <vTaskStartScheduler+0xbc>)
 800ae5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae60:	4b1f      	ldr	r3, [pc, #124]	; (800aee0 <vTaskStartScheduler+0xbc>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d002      	beq.n	800ae6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	617b      	str	r3, [r7, #20]
 800ae6c:	e001      	b.n	800ae72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d102      	bne.n	800ae7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ae78:	f000 fcfc 	bl	800b874 <xTimerCreateTimerTask>
 800ae7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d116      	bne.n	800aeb2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800ae84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae88:	f383 8811 	msr	BASEPRI, r3
 800ae8c:	f3bf 8f6f 	isb	sy
 800ae90:	f3bf 8f4f 	dsb	sy
 800ae94:	613b      	str	r3, [r7, #16]
}
 800ae96:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ae98:	4b12      	ldr	r3, [pc, #72]	; (800aee4 <vTaskStartScheduler+0xc0>)
 800ae9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aea0:	4b11      	ldr	r3, [pc, #68]	; (800aee8 <vTaskStartScheduler+0xc4>)
 800aea2:	2201      	movs	r2, #1
 800aea4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aea6:	4b11      	ldr	r3, [pc, #68]	; (800aeec <vTaskStartScheduler+0xc8>)
 800aea8:	2200      	movs	r2, #0
 800aeaa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aeac:	f001 f8b8 	bl	800c020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aeb0:	e00e      	b.n	800aed0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb8:	d10a      	bne.n	800aed0 <vTaskStartScheduler+0xac>
	__asm volatile
 800aeba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebe:	f383 8811 	msr	BASEPRI, r3
 800aec2:	f3bf 8f6f 	isb	sy
 800aec6:	f3bf 8f4f 	dsb	sy
 800aeca:	60fb      	str	r3, [r7, #12]
}
 800aecc:	bf00      	nop
 800aece:	e7fe      	b.n	800aece <vTaskStartScheduler+0xaa>
}
 800aed0:	bf00      	nop
 800aed2:	3718      	adds	r7, #24
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	0800ca14 	.word	0x0800ca14
 800aedc:	0800b509 	.word	0x0800b509
 800aee0:	24000e00 	.word	0x24000e00
 800aee4:	24000dfc 	.word	0x24000dfc
 800aee8:	24000de8 	.word	0x24000de8
 800aeec:	24000de0 	.word	0x24000de0

0800aef0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aef0:	b480      	push	{r7}
 800aef2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aef4:	4b04      	ldr	r3, [pc, #16]	; (800af08 <vTaskSuspendAll+0x18>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	3301      	adds	r3, #1
 800aefa:	4a03      	ldr	r2, [pc, #12]	; (800af08 <vTaskSuspendAll+0x18>)
 800aefc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aefe:	bf00      	nop
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr
 800af08:	24000e04 	.word	0x24000e04

0800af0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af12:	2300      	movs	r3, #0
 800af14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af16:	2300      	movs	r3, #0
 800af18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af1a:	4b42      	ldr	r3, [pc, #264]	; (800b024 <xTaskResumeAll+0x118>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d10a      	bne.n	800af38 <xTaskResumeAll+0x2c>
	__asm volatile
 800af22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af26:	f383 8811 	msr	BASEPRI, r3
 800af2a:	f3bf 8f6f 	isb	sy
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	603b      	str	r3, [r7, #0]
}
 800af34:	bf00      	nop
 800af36:	e7fe      	b.n	800af36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af38:	f001 f914 	bl	800c164 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af3c:	4b39      	ldr	r3, [pc, #228]	; (800b024 <xTaskResumeAll+0x118>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	3b01      	subs	r3, #1
 800af42:	4a38      	ldr	r2, [pc, #224]	; (800b024 <xTaskResumeAll+0x118>)
 800af44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af46:	4b37      	ldr	r3, [pc, #220]	; (800b024 <xTaskResumeAll+0x118>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d162      	bne.n	800b014 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af4e:	4b36      	ldr	r3, [pc, #216]	; (800b028 <xTaskResumeAll+0x11c>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d05e      	beq.n	800b014 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af56:	e02f      	b.n	800afb8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af58:	4b34      	ldr	r3, [pc, #208]	; (800b02c <xTaskResumeAll+0x120>)
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	3318      	adds	r3, #24
 800af64:	4618      	mov	r0, r3
 800af66:	f7ff f871 	bl	800a04c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	3304      	adds	r3, #4
 800af6e:	4618      	mov	r0, r3
 800af70:	f7ff f86c 	bl	800a04c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af78:	4b2d      	ldr	r3, [pc, #180]	; (800b030 <xTaskResumeAll+0x124>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d903      	bls.n	800af88 <xTaskResumeAll+0x7c>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af84:	4a2a      	ldr	r2, [pc, #168]	; (800b030 <xTaskResumeAll+0x124>)
 800af86:	6013      	str	r3, [r2, #0]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af8c:	4613      	mov	r3, r2
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	4413      	add	r3, r2
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	4a27      	ldr	r2, [pc, #156]	; (800b034 <xTaskResumeAll+0x128>)
 800af96:	441a      	add	r2, r3
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	3304      	adds	r3, #4
 800af9c:	4619      	mov	r1, r3
 800af9e:	4610      	mov	r0, r2
 800afa0:	f7fe fff7 	bl	8009f92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afa8:	4b23      	ldr	r3, [pc, #140]	; (800b038 <xTaskResumeAll+0x12c>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afae:	429a      	cmp	r2, r3
 800afb0:	d302      	bcc.n	800afb8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800afb2:	4b22      	ldr	r3, [pc, #136]	; (800b03c <xTaskResumeAll+0x130>)
 800afb4:	2201      	movs	r2, #1
 800afb6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afb8:	4b1c      	ldr	r3, [pc, #112]	; (800b02c <xTaskResumeAll+0x120>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d1cb      	bne.n	800af58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d001      	beq.n	800afca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800afc6:	f000 fb55 	bl	800b674 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800afca:	4b1d      	ldr	r3, [pc, #116]	; (800b040 <xTaskResumeAll+0x134>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d010      	beq.n	800aff8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800afd6:	f000 f847 	bl	800b068 <xTaskIncrementTick>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d002      	beq.n	800afe6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800afe0:	4b16      	ldr	r3, [pc, #88]	; (800b03c <xTaskResumeAll+0x130>)
 800afe2:	2201      	movs	r2, #1
 800afe4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	3b01      	subs	r3, #1
 800afea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1f1      	bne.n	800afd6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800aff2:	4b13      	ldr	r3, [pc, #76]	; (800b040 <xTaskResumeAll+0x134>)
 800aff4:	2200      	movs	r2, #0
 800aff6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aff8:	4b10      	ldr	r3, [pc, #64]	; (800b03c <xTaskResumeAll+0x130>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d009      	beq.n	800b014 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b000:	2301      	movs	r3, #1
 800b002:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b004:	4b0f      	ldr	r3, [pc, #60]	; (800b044 <xTaskResumeAll+0x138>)
 800b006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b00a:	601a      	str	r2, [r3, #0]
 800b00c:	f3bf 8f4f 	dsb	sy
 800b010:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b014:	f001 f8d6 	bl	800c1c4 <vPortExitCritical>

	return xAlreadyYielded;
 800b018:	68bb      	ldr	r3, [r7, #8]
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	24000e04 	.word	0x24000e04
 800b028:	24000ddc 	.word	0x24000ddc
 800b02c:	24000d9c 	.word	0x24000d9c
 800b030:	24000de4 	.word	0x24000de4
 800b034:	2400090c 	.word	0x2400090c
 800b038:	24000908 	.word	0x24000908
 800b03c:	24000df0 	.word	0x24000df0
 800b040:	24000dec 	.word	0x24000dec
 800b044:	e000ed04 	.word	0xe000ed04

0800b048 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b04e:	4b05      	ldr	r3, [pc, #20]	; (800b064 <xTaskGetTickCount+0x1c>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b054:	687b      	ldr	r3, [r7, #4]
}
 800b056:	4618      	mov	r0, r3
 800b058:	370c      	adds	r7, #12
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	24000de0 	.word	0x24000de0

0800b068 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b086      	sub	sp, #24
 800b06c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b06e:	2300      	movs	r3, #0
 800b070:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b072:	4b4f      	ldr	r3, [pc, #316]	; (800b1b0 <xTaskIncrementTick+0x148>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	f040 808f 	bne.w	800b19a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b07c:	4b4d      	ldr	r3, [pc, #308]	; (800b1b4 <xTaskIncrementTick+0x14c>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	3301      	adds	r3, #1
 800b082:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b084:	4a4b      	ldr	r2, [pc, #300]	; (800b1b4 <xTaskIncrementTick+0x14c>)
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d120      	bne.n	800b0d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b090:	4b49      	ldr	r3, [pc, #292]	; (800b1b8 <xTaskIncrementTick+0x150>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00a      	beq.n	800b0b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800b09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09e:	f383 8811 	msr	BASEPRI, r3
 800b0a2:	f3bf 8f6f 	isb	sy
 800b0a6:	f3bf 8f4f 	dsb	sy
 800b0aa:	603b      	str	r3, [r7, #0]
}
 800b0ac:	bf00      	nop
 800b0ae:	e7fe      	b.n	800b0ae <xTaskIncrementTick+0x46>
 800b0b0:	4b41      	ldr	r3, [pc, #260]	; (800b1b8 <xTaskIncrementTick+0x150>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	60fb      	str	r3, [r7, #12]
 800b0b6:	4b41      	ldr	r3, [pc, #260]	; (800b1bc <xTaskIncrementTick+0x154>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a3f      	ldr	r2, [pc, #252]	; (800b1b8 <xTaskIncrementTick+0x150>)
 800b0bc:	6013      	str	r3, [r2, #0]
 800b0be:	4a3f      	ldr	r2, [pc, #252]	; (800b1bc <xTaskIncrementTick+0x154>)
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6013      	str	r3, [r2, #0]
 800b0c4:	4b3e      	ldr	r3, [pc, #248]	; (800b1c0 <xTaskIncrementTick+0x158>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	4a3d      	ldr	r2, [pc, #244]	; (800b1c0 <xTaskIncrementTick+0x158>)
 800b0cc:	6013      	str	r3, [r2, #0]
 800b0ce:	f000 fad1 	bl	800b674 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b0d2:	4b3c      	ldr	r3, [pc, #240]	; (800b1c4 <xTaskIncrementTick+0x15c>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	693a      	ldr	r2, [r7, #16]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d349      	bcc.n	800b170 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0dc:	4b36      	ldr	r3, [pc, #216]	; (800b1b8 <xTaskIncrementTick+0x150>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d104      	bne.n	800b0f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0e6:	4b37      	ldr	r3, [pc, #220]	; (800b1c4 <xTaskIncrementTick+0x15c>)
 800b0e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ec:	601a      	str	r2, [r3, #0]
					break;
 800b0ee:	e03f      	b.n	800b170 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0f0:	4b31      	ldr	r3, [pc, #196]	; (800b1b8 <xTaskIncrementTick+0x150>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b100:	693a      	ldr	r2, [r7, #16]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	429a      	cmp	r2, r3
 800b106:	d203      	bcs.n	800b110 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b108:	4a2e      	ldr	r2, [pc, #184]	; (800b1c4 <xTaskIncrementTick+0x15c>)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b10e:	e02f      	b.n	800b170 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	3304      	adds	r3, #4
 800b114:	4618      	mov	r0, r3
 800b116:	f7fe ff99 	bl	800a04c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d004      	beq.n	800b12c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	3318      	adds	r3, #24
 800b126:	4618      	mov	r0, r3
 800b128:	f7fe ff90 	bl	800a04c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b130:	4b25      	ldr	r3, [pc, #148]	; (800b1c8 <xTaskIncrementTick+0x160>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	429a      	cmp	r2, r3
 800b136:	d903      	bls.n	800b140 <xTaskIncrementTick+0xd8>
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13c:	4a22      	ldr	r2, [pc, #136]	; (800b1c8 <xTaskIncrementTick+0x160>)
 800b13e:	6013      	str	r3, [r2, #0]
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b144:	4613      	mov	r3, r2
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	4413      	add	r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	4a1f      	ldr	r2, [pc, #124]	; (800b1cc <xTaskIncrementTick+0x164>)
 800b14e:	441a      	add	r2, r3
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	3304      	adds	r3, #4
 800b154:	4619      	mov	r1, r3
 800b156:	4610      	mov	r0, r2
 800b158:	f7fe ff1b 	bl	8009f92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b160:	4b1b      	ldr	r3, [pc, #108]	; (800b1d0 <xTaskIncrementTick+0x168>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b166:	429a      	cmp	r2, r3
 800b168:	d3b8      	bcc.n	800b0dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b16a:	2301      	movs	r3, #1
 800b16c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b16e:	e7b5      	b.n	800b0dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b170:	4b17      	ldr	r3, [pc, #92]	; (800b1d0 <xTaskIncrementTick+0x168>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b176:	4915      	ldr	r1, [pc, #84]	; (800b1cc <xTaskIncrementTick+0x164>)
 800b178:	4613      	mov	r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	4413      	add	r3, r2
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	440b      	add	r3, r1
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2b01      	cmp	r3, #1
 800b186:	d901      	bls.n	800b18c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b188:	2301      	movs	r3, #1
 800b18a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b18c:	4b11      	ldr	r3, [pc, #68]	; (800b1d4 <xTaskIncrementTick+0x16c>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d007      	beq.n	800b1a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b194:	2301      	movs	r3, #1
 800b196:	617b      	str	r3, [r7, #20]
 800b198:	e004      	b.n	800b1a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b19a:	4b0f      	ldr	r3, [pc, #60]	; (800b1d8 <xTaskIncrementTick+0x170>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	4a0d      	ldr	r2, [pc, #52]	; (800b1d8 <xTaskIncrementTick+0x170>)
 800b1a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b1a4:	697b      	ldr	r3, [r7, #20]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3718      	adds	r7, #24
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	24000e04 	.word	0x24000e04
 800b1b4:	24000de0 	.word	0x24000de0
 800b1b8:	24000d94 	.word	0x24000d94
 800b1bc:	24000d98 	.word	0x24000d98
 800b1c0:	24000df4 	.word	0x24000df4
 800b1c4:	24000dfc 	.word	0x24000dfc
 800b1c8:	24000de4 	.word	0x24000de4
 800b1cc:	2400090c 	.word	0x2400090c
 800b1d0:	24000908 	.word	0x24000908
 800b1d4:	24000df0 	.word	0x24000df0
 800b1d8:	24000dec 	.word	0x24000dec

0800b1dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b085      	sub	sp, #20
 800b1e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b1e2:	4b28      	ldr	r3, [pc, #160]	; (800b284 <vTaskSwitchContext+0xa8>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d003      	beq.n	800b1f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b1ea:	4b27      	ldr	r3, [pc, #156]	; (800b288 <vTaskSwitchContext+0xac>)
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b1f0:	e041      	b.n	800b276 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b1f2:	4b25      	ldr	r3, [pc, #148]	; (800b288 <vTaskSwitchContext+0xac>)
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1f8:	4b24      	ldr	r3, [pc, #144]	; (800b28c <vTaskSwitchContext+0xb0>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	60fb      	str	r3, [r7, #12]
 800b1fe:	e010      	b.n	800b222 <vTaskSwitchContext+0x46>
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d10a      	bne.n	800b21c <vTaskSwitchContext+0x40>
	__asm volatile
 800b206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20a:	f383 8811 	msr	BASEPRI, r3
 800b20e:	f3bf 8f6f 	isb	sy
 800b212:	f3bf 8f4f 	dsb	sy
 800b216:	607b      	str	r3, [r7, #4]
}
 800b218:	bf00      	nop
 800b21a:	e7fe      	b.n	800b21a <vTaskSwitchContext+0x3e>
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	3b01      	subs	r3, #1
 800b220:	60fb      	str	r3, [r7, #12]
 800b222:	491b      	ldr	r1, [pc, #108]	; (800b290 <vTaskSwitchContext+0xb4>)
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	4613      	mov	r3, r2
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	4413      	add	r3, r2
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	440b      	add	r3, r1
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d0e4      	beq.n	800b200 <vTaskSwitchContext+0x24>
 800b236:	68fa      	ldr	r2, [r7, #12]
 800b238:	4613      	mov	r3, r2
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	4413      	add	r3, r2
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	4a13      	ldr	r2, [pc, #76]	; (800b290 <vTaskSwitchContext+0xb4>)
 800b242:	4413      	add	r3, r2
 800b244:	60bb      	str	r3, [r7, #8]
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	685a      	ldr	r2, [r3, #4]
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	605a      	str	r2, [r3, #4]
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	685a      	ldr	r2, [r3, #4]
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	3308      	adds	r3, #8
 800b258:	429a      	cmp	r2, r3
 800b25a:	d104      	bne.n	800b266 <vTaskSwitchContext+0x8a>
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	685a      	ldr	r2, [r3, #4]
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	605a      	str	r2, [r3, #4]
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	4a09      	ldr	r2, [pc, #36]	; (800b294 <vTaskSwitchContext+0xb8>)
 800b26e:	6013      	str	r3, [r2, #0]
 800b270:	4a06      	ldr	r2, [pc, #24]	; (800b28c <vTaskSwitchContext+0xb0>)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	6013      	str	r3, [r2, #0]
}
 800b276:	bf00      	nop
 800b278:	3714      	adds	r7, #20
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	24000e04 	.word	0x24000e04
 800b288:	24000df0 	.word	0x24000df0
 800b28c:	24000de4 	.word	0x24000de4
 800b290:	2400090c 	.word	0x2400090c
 800b294:	24000908 	.word	0x24000908

0800b298 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d10a      	bne.n	800b2be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ac:	f383 8811 	msr	BASEPRI, r3
 800b2b0:	f3bf 8f6f 	isb	sy
 800b2b4:	f3bf 8f4f 	dsb	sy
 800b2b8:	60fb      	str	r3, [r7, #12]
}
 800b2ba:	bf00      	nop
 800b2bc:	e7fe      	b.n	800b2bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2be:	4b07      	ldr	r3, [pc, #28]	; (800b2dc <vTaskPlaceOnEventList+0x44>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	3318      	adds	r3, #24
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f7fe fe87 	bl	8009fda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b2cc:	2101      	movs	r1, #1
 800b2ce:	6838      	ldr	r0, [r7, #0]
 800b2d0:	f000 fa7c 	bl	800b7cc <prvAddCurrentTaskToDelayedList>
}
 800b2d4:	bf00      	nop
 800b2d6:	3710      	adds	r7, #16
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	24000908 	.word	0x24000908

0800b2e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b086      	sub	sp, #24
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d10a      	bne.n	800b308 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f6:	f383 8811 	msr	BASEPRI, r3
 800b2fa:	f3bf 8f6f 	isb	sy
 800b2fe:	f3bf 8f4f 	dsb	sy
 800b302:	617b      	str	r3, [r7, #20]
}
 800b304:	bf00      	nop
 800b306:	e7fe      	b.n	800b306 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b308:	4b0a      	ldr	r3, [pc, #40]	; (800b334 <vTaskPlaceOnEventListRestricted+0x54>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	3318      	adds	r3, #24
 800b30e:	4619      	mov	r1, r3
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f7fe fe3e 	bl	8009f92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d002      	beq.n	800b322 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b31c:	f04f 33ff 	mov.w	r3, #4294967295
 800b320:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b322:	6879      	ldr	r1, [r7, #4]
 800b324:	68b8      	ldr	r0, [r7, #8]
 800b326:	f000 fa51 	bl	800b7cc <prvAddCurrentTaskToDelayedList>
	}
 800b32a:	bf00      	nop
 800b32c:	3718      	adds	r7, #24
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	24000908 	.word	0x24000908

0800b338 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b086      	sub	sp, #24
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	68db      	ldr	r3, [r3, #12]
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d10a      	bne.n	800b364 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b352:	f383 8811 	msr	BASEPRI, r3
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	f3bf 8f4f 	dsb	sy
 800b35e:	60fb      	str	r3, [r7, #12]
}
 800b360:	bf00      	nop
 800b362:	e7fe      	b.n	800b362 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	3318      	adds	r3, #24
 800b368:	4618      	mov	r0, r3
 800b36a:	f7fe fe6f 	bl	800a04c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b36e:	4b1e      	ldr	r3, [pc, #120]	; (800b3e8 <xTaskRemoveFromEventList+0xb0>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d11d      	bne.n	800b3b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	3304      	adds	r3, #4
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7fe fe66 	bl	800a04c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b384:	4b19      	ldr	r3, [pc, #100]	; (800b3ec <xTaskRemoveFromEventList+0xb4>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d903      	bls.n	800b394 <xTaskRemoveFromEventList+0x5c>
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b390:	4a16      	ldr	r2, [pc, #88]	; (800b3ec <xTaskRemoveFromEventList+0xb4>)
 800b392:	6013      	str	r3, [r2, #0]
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b398:	4613      	mov	r3, r2
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	4413      	add	r3, r2
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	4a13      	ldr	r2, [pc, #76]	; (800b3f0 <xTaskRemoveFromEventList+0xb8>)
 800b3a2:	441a      	add	r2, r3
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	3304      	adds	r3, #4
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	4610      	mov	r0, r2
 800b3ac:	f7fe fdf1 	bl	8009f92 <vListInsertEnd>
 800b3b0:	e005      	b.n	800b3be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	3318      	adds	r3, #24
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	480e      	ldr	r0, [pc, #56]	; (800b3f4 <xTaskRemoveFromEventList+0xbc>)
 800b3ba:	f7fe fdea 	bl	8009f92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c2:	4b0d      	ldr	r3, [pc, #52]	; (800b3f8 <xTaskRemoveFromEventList+0xc0>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d905      	bls.n	800b3d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b3d0:	4b0a      	ldr	r3, [pc, #40]	; (800b3fc <xTaskRemoveFromEventList+0xc4>)
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	601a      	str	r2, [r3, #0]
 800b3d6:	e001      	b.n	800b3dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b3dc:	697b      	ldr	r3, [r7, #20]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3718      	adds	r7, #24
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	24000e04 	.word	0x24000e04
 800b3ec:	24000de4 	.word	0x24000de4
 800b3f0:	2400090c 	.word	0x2400090c
 800b3f4:	24000d9c 	.word	0x24000d9c
 800b3f8:	24000908 	.word	0x24000908
 800b3fc:	24000df0 	.word	0x24000df0

0800b400 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b408:	4b06      	ldr	r3, [pc, #24]	; (800b424 <vTaskInternalSetTimeOutState+0x24>)
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b410:	4b05      	ldr	r3, [pc, #20]	; (800b428 <vTaskInternalSetTimeOutState+0x28>)
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	605a      	str	r2, [r3, #4]
}
 800b418:	bf00      	nop
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr
 800b424:	24000df4 	.word	0x24000df4
 800b428:	24000de0 	.word	0x24000de0

0800b42c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b088      	sub	sp, #32
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d10a      	bne.n	800b452 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b440:	f383 8811 	msr	BASEPRI, r3
 800b444:	f3bf 8f6f 	isb	sy
 800b448:	f3bf 8f4f 	dsb	sy
 800b44c:	613b      	str	r3, [r7, #16]
}
 800b44e:	bf00      	nop
 800b450:	e7fe      	b.n	800b450 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d10a      	bne.n	800b46e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45c:	f383 8811 	msr	BASEPRI, r3
 800b460:	f3bf 8f6f 	isb	sy
 800b464:	f3bf 8f4f 	dsb	sy
 800b468:	60fb      	str	r3, [r7, #12]
}
 800b46a:	bf00      	nop
 800b46c:	e7fe      	b.n	800b46c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b46e:	f000 fe79 	bl	800c164 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b472:	4b1d      	ldr	r3, [pc, #116]	; (800b4e8 <xTaskCheckForTimeOut+0xbc>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	685b      	ldr	r3, [r3, #4]
 800b47c:	69ba      	ldr	r2, [r7, #24]
 800b47e:	1ad3      	subs	r3, r2, r3
 800b480:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b48a:	d102      	bne.n	800b492 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b48c:	2300      	movs	r3, #0
 800b48e:	61fb      	str	r3, [r7, #28]
 800b490:	e023      	b.n	800b4da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	4b15      	ldr	r3, [pc, #84]	; (800b4ec <xTaskCheckForTimeOut+0xc0>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d007      	beq.n	800b4ae <xTaskCheckForTimeOut+0x82>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	69ba      	ldr	r2, [r7, #24]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d302      	bcc.n	800b4ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	61fb      	str	r3, [r7, #28]
 800b4ac:	e015      	b.n	800b4da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	697a      	ldr	r2, [r7, #20]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d20b      	bcs.n	800b4d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	1ad2      	subs	r2, r2, r3
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f7ff ff9b 	bl	800b400 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	61fb      	str	r3, [r7, #28]
 800b4ce:	e004      	b.n	800b4da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b4da:	f000 fe73 	bl	800c1c4 <vPortExitCritical>

	return xReturn;
 800b4de:	69fb      	ldr	r3, [r7, #28]
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3720      	adds	r7, #32
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	24000de0 	.word	0x24000de0
 800b4ec:	24000df4 	.word	0x24000df4

0800b4f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b4f4:	4b03      	ldr	r3, [pc, #12]	; (800b504 <vTaskMissedYield+0x14>)
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	601a      	str	r2, [r3, #0]
}
 800b4fa:	bf00      	nop
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr
 800b504:	24000df0 	.word	0x24000df0

0800b508 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b510:	f000 f852 	bl	800b5b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b514:	4b06      	ldr	r3, [pc, #24]	; (800b530 <prvIdleTask+0x28>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d9f9      	bls.n	800b510 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b51c:	4b05      	ldr	r3, [pc, #20]	; (800b534 <prvIdleTask+0x2c>)
 800b51e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b522:	601a      	str	r2, [r3, #0]
 800b524:	f3bf 8f4f 	dsb	sy
 800b528:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b52c:	e7f0      	b.n	800b510 <prvIdleTask+0x8>
 800b52e:	bf00      	nop
 800b530:	2400090c 	.word	0x2400090c
 800b534:	e000ed04 	.word	0xe000ed04

0800b538 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b53e:	2300      	movs	r3, #0
 800b540:	607b      	str	r3, [r7, #4]
 800b542:	e00c      	b.n	800b55e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	4613      	mov	r3, r2
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	4413      	add	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4a12      	ldr	r2, [pc, #72]	; (800b598 <prvInitialiseTaskLists+0x60>)
 800b550:	4413      	add	r3, r2
 800b552:	4618      	mov	r0, r3
 800b554:	f7fe fcf0 	bl	8009f38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	3301      	adds	r3, #1
 800b55c:	607b      	str	r3, [r7, #4]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2b37      	cmp	r3, #55	; 0x37
 800b562:	d9ef      	bls.n	800b544 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b564:	480d      	ldr	r0, [pc, #52]	; (800b59c <prvInitialiseTaskLists+0x64>)
 800b566:	f7fe fce7 	bl	8009f38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b56a:	480d      	ldr	r0, [pc, #52]	; (800b5a0 <prvInitialiseTaskLists+0x68>)
 800b56c:	f7fe fce4 	bl	8009f38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b570:	480c      	ldr	r0, [pc, #48]	; (800b5a4 <prvInitialiseTaskLists+0x6c>)
 800b572:	f7fe fce1 	bl	8009f38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b576:	480c      	ldr	r0, [pc, #48]	; (800b5a8 <prvInitialiseTaskLists+0x70>)
 800b578:	f7fe fcde 	bl	8009f38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b57c:	480b      	ldr	r0, [pc, #44]	; (800b5ac <prvInitialiseTaskLists+0x74>)
 800b57e:	f7fe fcdb 	bl	8009f38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b582:	4b0b      	ldr	r3, [pc, #44]	; (800b5b0 <prvInitialiseTaskLists+0x78>)
 800b584:	4a05      	ldr	r2, [pc, #20]	; (800b59c <prvInitialiseTaskLists+0x64>)
 800b586:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b588:	4b0a      	ldr	r3, [pc, #40]	; (800b5b4 <prvInitialiseTaskLists+0x7c>)
 800b58a:	4a05      	ldr	r2, [pc, #20]	; (800b5a0 <prvInitialiseTaskLists+0x68>)
 800b58c:	601a      	str	r2, [r3, #0]
}
 800b58e:	bf00      	nop
 800b590:	3708      	adds	r7, #8
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	2400090c 	.word	0x2400090c
 800b59c:	24000d6c 	.word	0x24000d6c
 800b5a0:	24000d80 	.word	0x24000d80
 800b5a4:	24000d9c 	.word	0x24000d9c
 800b5a8:	24000db0 	.word	0x24000db0
 800b5ac:	24000dc8 	.word	0x24000dc8
 800b5b0:	24000d94 	.word	0x24000d94
 800b5b4:	24000d98 	.word	0x24000d98

0800b5b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5be:	e019      	b.n	800b5f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b5c0:	f000 fdd0 	bl	800c164 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5c4:	4b10      	ldr	r3, [pc, #64]	; (800b608 <prvCheckTasksWaitingTermination+0x50>)
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	3304      	adds	r3, #4
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7fe fd3b 	bl	800a04c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b5d6:	4b0d      	ldr	r3, [pc, #52]	; (800b60c <prvCheckTasksWaitingTermination+0x54>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	3b01      	subs	r3, #1
 800b5dc:	4a0b      	ldr	r2, [pc, #44]	; (800b60c <prvCheckTasksWaitingTermination+0x54>)
 800b5de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b5e0:	4b0b      	ldr	r3, [pc, #44]	; (800b610 <prvCheckTasksWaitingTermination+0x58>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	3b01      	subs	r3, #1
 800b5e6:	4a0a      	ldr	r2, [pc, #40]	; (800b610 <prvCheckTasksWaitingTermination+0x58>)
 800b5e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b5ea:	f000 fdeb 	bl	800c1c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 f810 	bl	800b614 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5f4:	4b06      	ldr	r3, [pc, #24]	; (800b610 <prvCheckTasksWaitingTermination+0x58>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1e1      	bne.n	800b5c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b5fc:	bf00      	nop
 800b5fe:	bf00      	nop
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	24000db0 	.word	0x24000db0
 800b60c:	24000ddc 	.word	0x24000ddc
 800b610:	24000dc4 	.word	0x24000dc4

0800b614 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b622:	2b00      	cmp	r3, #0
 800b624:	d108      	bne.n	800b638 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b62a:	4618      	mov	r0, r3
 800b62c:	f000 ff88 	bl	800c540 <vPortFree>
				vPortFree( pxTCB );
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 ff85 	bl	800c540 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b636:	e018      	b.n	800b66a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d103      	bne.n	800b64a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 ff7c 	bl	800c540 <vPortFree>
	}
 800b648:	e00f      	b.n	800b66a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b650:	2b02      	cmp	r3, #2
 800b652:	d00a      	beq.n	800b66a <prvDeleteTCB+0x56>
	__asm volatile
 800b654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b658:	f383 8811 	msr	BASEPRI, r3
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	60fb      	str	r3, [r7, #12]
}
 800b666:	bf00      	nop
 800b668:	e7fe      	b.n	800b668 <prvDeleteTCB+0x54>
	}
 800b66a:	bf00      	nop
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
	...

0800b674 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b67a:	4b0c      	ldr	r3, [pc, #48]	; (800b6ac <prvResetNextTaskUnblockTime+0x38>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d104      	bne.n	800b68e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b684:	4b0a      	ldr	r3, [pc, #40]	; (800b6b0 <prvResetNextTaskUnblockTime+0x3c>)
 800b686:	f04f 32ff 	mov.w	r2, #4294967295
 800b68a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b68c:	e008      	b.n	800b6a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b68e:	4b07      	ldr	r3, [pc, #28]	; (800b6ac <prvResetNextTaskUnblockTime+0x38>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	4a04      	ldr	r2, [pc, #16]	; (800b6b0 <prvResetNextTaskUnblockTime+0x3c>)
 800b69e:	6013      	str	r3, [r2, #0]
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr
 800b6ac:	24000d94 	.word	0x24000d94
 800b6b0:	24000dfc 	.word	0x24000dfc

0800b6b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b6ba:	4b0b      	ldr	r3, [pc, #44]	; (800b6e8 <xTaskGetSchedulerState+0x34>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d102      	bne.n	800b6c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	607b      	str	r3, [r7, #4]
 800b6c6:	e008      	b.n	800b6da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6c8:	4b08      	ldr	r3, [pc, #32]	; (800b6ec <xTaskGetSchedulerState+0x38>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d102      	bne.n	800b6d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b6d0:	2302      	movs	r3, #2
 800b6d2:	607b      	str	r3, [r7, #4]
 800b6d4:	e001      	b.n	800b6da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b6da:	687b      	ldr	r3, [r7, #4]
	}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	370c      	adds	r7, #12
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr
 800b6e8:	24000de8 	.word	0x24000de8
 800b6ec:	24000e04 	.word	0x24000e04

0800b6f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d056      	beq.n	800b7b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b706:	4b2e      	ldr	r3, [pc, #184]	; (800b7c0 <xTaskPriorityDisinherit+0xd0>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	693a      	ldr	r2, [r7, #16]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d00a      	beq.n	800b726 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b714:	f383 8811 	msr	BASEPRI, r3
 800b718:	f3bf 8f6f 	isb	sy
 800b71c:	f3bf 8f4f 	dsb	sy
 800b720:	60fb      	str	r3, [r7, #12]
}
 800b722:	bf00      	nop
 800b724:	e7fe      	b.n	800b724 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d10a      	bne.n	800b744 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b732:	f383 8811 	msr	BASEPRI, r3
 800b736:	f3bf 8f6f 	isb	sy
 800b73a:	f3bf 8f4f 	dsb	sy
 800b73e:	60bb      	str	r3, [r7, #8]
}
 800b740:	bf00      	nop
 800b742:	e7fe      	b.n	800b742 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b748:	1e5a      	subs	r2, r3, #1
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b756:	429a      	cmp	r2, r3
 800b758:	d02c      	beq.n	800b7b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d128      	bne.n	800b7b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	3304      	adds	r3, #4
 800b766:	4618      	mov	r0, r3
 800b768:	f7fe fc70 	bl	800a04c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b778:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b784:	4b0f      	ldr	r3, [pc, #60]	; (800b7c4 <xTaskPriorityDisinherit+0xd4>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d903      	bls.n	800b794 <xTaskPriorityDisinherit+0xa4>
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b790:	4a0c      	ldr	r2, [pc, #48]	; (800b7c4 <xTaskPriorityDisinherit+0xd4>)
 800b792:	6013      	str	r3, [r2, #0]
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b798:	4613      	mov	r3, r2
 800b79a:	009b      	lsls	r3, r3, #2
 800b79c:	4413      	add	r3, r2
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	4a09      	ldr	r2, [pc, #36]	; (800b7c8 <xTaskPriorityDisinherit+0xd8>)
 800b7a2:	441a      	add	r2, r3
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	3304      	adds	r3, #4
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	4610      	mov	r0, r2
 800b7ac:	f7fe fbf1 	bl	8009f92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7b4:	697b      	ldr	r3, [r7, #20]
	}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3718      	adds	r7, #24
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	24000908 	.word	0x24000908
 800b7c4:	24000de4 	.word	0x24000de4
 800b7c8:	2400090c 	.word	0x2400090c

0800b7cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b7d6:	4b21      	ldr	r3, [pc, #132]	; (800b85c <prvAddCurrentTaskToDelayedList+0x90>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7dc:	4b20      	ldr	r3, [pc, #128]	; (800b860 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7fe fc32 	bl	800a04c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ee:	d10a      	bne.n	800b806 <prvAddCurrentTaskToDelayedList+0x3a>
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d007      	beq.n	800b806 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7f6:	4b1a      	ldr	r3, [pc, #104]	; (800b860 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	3304      	adds	r3, #4
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	4819      	ldr	r0, [pc, #100]	; (800b864 <prvAddCurrentTaskToDelayedList+0x98>)
 800b800:	f7fe fbc7 	bl	8009f92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b804:	e026      	b.n	800b854 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	4413      	add	r3, r2
 800b80c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b80e:	4b14      	ldr	r3, [pc, #80]	; (800b860 <prvAddCurrentTaskToDelayedList+0x94>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	68ba      	ldr	r2, [r7, #8]
 800b814:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b816:	68ba      	ldr	r2, [r7, #8]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d209      	bcs.n	800b832 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b81e:	4b12      	ldr	r3, [pc, #72]	; (800b868 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	4b0f      	ldr	r3, [pc, #60]	; (800b860 <prvAddCurrentTaskToDelayedList+0x94>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	3304      	adds	r3, #4
 800b828:	4619      	mov	r1, r3
 800b82a:	4610      	mov	r0, r2
 800b82c:	f7fe fbd5 	bl	8009fda <vListInsert>
}
 800b830:	e010      	b.n	800b854 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b832:	4b0e      	ldr	r3, [pc, #56]	; (800b86c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	4b0a      	ldr	r3, [pc, #40]	; (800b860 <prvAddCurrentTaskToDelayedList+0x94>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	3304      	adds	r3, #4
 800b83c:	4619      	mov	r1, r3
 800b83e:	4610      	mov	r0, r2
 800b840:	f7fe fbcb 	bl	8009fda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b844:	4b0a      	ldr	r3, [pc, #40]	; (800b870 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	68ba      	ldr	r2, [r7, #8]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d202      	bcs.n	800b854 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b84e:	4a08      	ldr	r2, [pc, #32]	; (800b870 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	6013      	str	r3, [r2, #0]
}
 800b854:	bf00      	nop
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	24000de0 	.word	0x24000de0
 800b860:	24000908 	.word	0x24000908
 800b864:	24000dc8 	.word	0x24000dc8
 800b868:	24000d98 	.word	0x24000d98
 800b86c:	24000d94 	.word	0x24000d94
 800b870:	24000dfc 	.word	0x24000dfc

0800b874 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b08a      	sub	sp, #40	; 0x28
 800b878:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b87a:	2300      	movs	r3, #0
 800b87c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b87e:	f000 fb07 	bl	800be90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b882:	4b1c      	ldr	r3, [pc, #112]	; (800b8f4 <xTimerCreateTimerTask+0x80>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d021      	beq.n	800b8ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b88a:	2300      	movs	r3, #0
 800b88c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b88e:	2300      	movs	r3, #0
 800b890:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b892:	1d3a      	adds	r2, r7, #4
 800b894:	f107 0108 	add.w	r1, r7, #8
 800b898:	f107 030c 	add.w	r3, r7, #12
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7fe fb31 	bl	8009f04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b8a2:	6879      	ldr	r1, [r7, #4]
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	68fa      	ldr	r2, [r7, #12]
 800b8a8:	9202      	str	r2, [sp, #8]
 800b8aa:	9301      	str	r3, [sp, #4]
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	460a      	mov	r2, r1
 800b8b4:	4910      	ldr	r1, [pc, #64]	; (800b8f8 <xTimerCreateTimerTask+0x84>)
 800b8b6:	4811      	ldr	r0, [pc, #68]	; (800b8fc <xTimerCreateTimerTask+0x88>)
 800b8b8:	f7ff f8de 	bl	800aa78 <xTaskCreateStatic>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	4a10      	ldr	r2, [pc, #64]	; (800b900 <xTimerCreateTimerTask+0x8c>)
 800b8c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b8c2:	4b0f      	ldr	r3, [pc, #60]	; (800b900 <xTimerCreateTimerTask+0x8c>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d001      	beq.n	800b8ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d10a      	bne.n	800b8ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d8:	f383 8811 	msr	BASEPRI, r3
 800b8dc:	f3bf 8f6f 	isb	sy
 800b8e0:	f3bf 8f4f 	dsb	sy
 800b8e4:	613b      	str	r3, [r7, #16]
}
 800b8e6:	bf00      	nop
 800b8e8:	e7fe      	b.n	800b8e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b8ea:	697b      	ldr	r3, [r7, #20]
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3718      	adds	r7, #24
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	24000e38 	.word	0x24000e38
 800b8f8:	0800ca1c 	.word	0x0800ca1c
 800b8fc:	0800ba39 	.word	0x0800ba39
 800b900:	24000e3c 	.word	0x24000e3c

0800b904 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b08a      	sub	sp, #40	; 0x28
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	607a      	str	r2, [r7, #4]
 800b910:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b912:	2300      	movs	r3, #0
 800b914:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d10a      	bne.n	800b932 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b920:	f383 8811 	msr	BASEPRI, r3
 800b924:	f3bf 8f6f 	isb	sy
 800b928:	f3bf 8f4f 	dsb	sy
 800b92c:	623b      	str	r3, [r7, #32]
}
 800b92e:	bf00      	nop
 800b930:	e7fe      	b.n	800b930 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b932:	4b1a      	ldr	r3, [pc, #104]	; (800b99c <xTimerGenericCommand+0x98>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d02a      	beq.n	800b990 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	2b05      	cmp	r3, #5
 800b94a:	dc18      	bgt.n	800b97e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b94c:	f7ff feb2 	bl	800b6b4 <xTaskGetSchedulerState>
 800b950:	4603      	mov	r3, r0
 800b952:	2b02      	cmp	r3, #2
 800b954:	d109      	bne.n	800b96a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b956:	4b11      	ldr	r3, [pc, #68]	; (800b99c <xTimerGenericCommand+0x98>)
 800b958:	6818      	ldr	r0, [r3, #0]
 800b95a:	f107 0110 	add.w	r1, r7, #16
 800b95e:	2300      	movs	r3, #0
 800b960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b962:	f7fe fca1 	bl	800a2a8 <xQueueGenericSend>
 800b966:	6278      	str	r0, [r7, #36]	; 0x24
 800b968:	e012      	b.n	800b990 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b96a:	4b0c      	ldr	r3, [pc, #48]	; (800b99c <xTimerGenericCommand+0x98>)
 800b96c:	6818      	ldr	r0, [r3, #0]
 800b96e:	f107 0110 	add.w	r1, r7, #16
 800b972:	2300      	movs	r3, #0
 800b974:	2200      	movs	r2, #0
 800b976:	f7fe fc97 	bl	800a2a8 <xQueueGenericSend>
 800b97a:	6278      	str	r0, [r7, #36]	; 0x24
 800b97c:	e008      	b.n	800b990 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b97e:	4b07      	ldr	r3, [pc, #28]	; (800b99c <xTimerGenericCommand+0x98>)
 800b980:	6818      	ldr	r0, [r3, #0]
 800b982:	f107 0110 	add.w	r1, r7, #16
 800b986:	2300      	movs	r3, #0
 800b988:	683a      	ldr	r2, [r7, #0]
 800b98a:	f7fe fd8b 	bl	800a4a4 <xQueueGenericSendFromISR>
 800b98e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b992:	4618      	mov	r0, r3
 800b994:	3728      	adds	r7, #40	; 0x28
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	24000e38 	.word	0x24000e38

0800b9a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b088      	sub	sp, #32
 800b9a4:	af02      	add	r7, sp, #8
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9aa:	4b22      	ldr	r3, [pc, #136]	; (800ba34 <prvProcessExpiredTimer+0x94>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	68db      	ldr	r3, [r3, #12]
 800b9b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	3304      	adds	r3, #4
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7fe fb47 	bl	800a04c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9c4:	f003 0304 	and.w	r3, r3, #4
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d022      	beq.n	800ba12 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	699a      	ldr	r2, [r3, #24]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	18d1      	adds	r1, r2, r3
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	683a      	ldr	r2, [r7, #0]
 800b9d8:	6978      	ldr	r0, [r7, #20]
 800b9da:	f000 f8d1 	bl	800bb80 <prvInsertTimerInActiveList>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d01f      	beq.n	800ba24 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	6978      	ldr	r0, [r7, #20]
 800b9f0:	f7ff ff88 	bl	800b904 <xTimerGenericCommand>
 800b9f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d113      	bne.n	800ba24 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba00:	f383 8811 	msr	BASEPRI, r3
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	60fb      	str	r3, [r7, #12]
}
 800ba0e:	bf00      	nop
 800ba10:	e7fe      	b.n	800ba10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba18:	f023 0301 	bic.w	r3, r3, #1
 800ba1c:	b2da      	uxtb	r2, r3
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	6a1b      	ldr	r3, [r3, #32]
 800ba28:	6978      	ldr	r0, [r7, #20]
 800ba2a:	4798      	blx	r3
}
 800ba2c:	bf00      	nop
 800ba2e:	3718      	adds	r7, #24
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	24000e30 	.word	0x24000e30

0800ba38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba40:	f107 0308 	add.w	r3, r7, #8
 800ba44:	4618      	mov	r0, r3
 800ba46:	f000 f857 	bl	800baf8 <prvGetNextExpireTime>
 800ba4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	4619      	mov	r1, r3
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	f000 f803 	bl	800ba5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ba56:	f000 f8d5 	bl	800bc04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba5a:	e7f1      	b.n	800ba40 <prvTimerTask+0x8>

0800ba5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ba66:	f7ff fa43 	bl	800aef0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba6a:	f107 0308 	add.w	r3, r7, #8
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f000 f866 	bl	800bb40 <prvSampleTimeNow>
 800ba74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d130      	bne.n	800bade <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d10a      	bne.n	800ba98 <prvProcessTimerOrBlockTask+0x3c>
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d806      	bhi.n	800ba98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ba8a:	f7ff fa3f 	bl	800af0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ba8e:	68f9      	ldr	r1, [r7, #12]
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f7ff ff85 	bl	800b9a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ba96:	e024      	b.n	800bae2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d008      	beq.n	800bab0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ba9e:	4b13      	ldr	r3, [pc, #76]	; (800baec <prvProcessTimerOrBlockTask+0x90>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d101      	bne.n	800baac <prvProcessTimerOrBlockTask+0x50>
 800baa8:	2301      	movs	r3, #1
 800baaa:	e000      	b.n	800baae <prvProcessTimerOrBlockTask+0x52>
 800baac:	2300      	movs	r3, #0
 800baae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bab0:	4b0f      	ldr	r3, [pc, #60]	; (800baf0 <prvProcessTimerOrBlockTask+0x94>)
 800bab2:	6818      	ldr	r0, [r3, #0]
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	1ad3      	subs	r3, r2, r3
 800baba:	683a      	ldr	r2, [r7, #0]
 800babc:	4619      	mov	r1, r3
 800babe:	f7fe ffa7 	bl	800aa10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bac2:	f7ff fa23 	bl	800af0c <xTaskResumeAll>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d10a      	bne.n	800bae2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bacc:	4b09      	ldr	r3, [pc, #36]	; (800baf4 <prvProcessTimerOrBlockTask+0x98>)
 800bace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bad2:	601a      	str	r2, [r3, #0]
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	f3bf 8f6f 	isb	sy
}
 800badc:	e001      	b.n	800bae2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bade:	f7ff fa15 	bl	800af0c <xTaskResumeAll>
}
 800bae2:	bf00      	nop
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	24000e34 	.word	0x24000e34
 800baf0:	24000e38 	.word	0x24000e38
 800baf4:	e000ed04 	.word	0xe000ed04

0800baf8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800baf8:	b480      	push	{r7}
 800bafa:	b085      	sub	sp, #20
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bb00:	4b0e      	ldr	r3, [pc, #56]	; (800bb3c <prvGetNextExpireTime+0x44>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d101      	bne.n	800bb0e <prvGetNextExpireTime+0x16>
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	e000      	b.n	800bb10 <prvGetNextExpireTime+0x18>
 800bb0e:	2200      	movs	r2, #0
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d105      	bne.n	800bb28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb1c:	4b07      	ldr	r3, [pc, #28]	; (800bb3c <prvGetNextExpireTime+0x44>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	60fb      	str	r3, [r7, #12]
 800bb26:	e001      	b.n	800bb2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3714      	adds	r7, #20
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	24000e30 	.word	0x24000e30

0800bb40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bb48:	f7ff fa7e 	bl	800b048 <xTaskGetTickCount>
 800bb4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bb4e:	4b0b      	ldr	r3, [pc, #44]	; (800bb7c <prvSampleTimeNow+0x3c>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d205      	bcs.n	800bb64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bb58:	f000 f936 	bl	800bdc8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	601a      	str	r2, [r3, #0]
 800bb62:	e002      	b.n	800bb6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bb6a:	4a04      	ldr	r2, [pc, #16]	; (800bb7c <prvSampleTimeNow+0x3c>)
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bb70:	68fb      	ldr	r3, [r7, #12]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3710      	adds	r7, #16
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	24000e40 	.word	0x24000e40

0800bb80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b086      	sub	sp, #24
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	607a      	str	r2, [r7, #4]
 800bb8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	68ba      	ldr	r2, [r7, #8]
 800bb96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bb9e:	68ba      	ldr	r2, [r7, #8]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d812      	bhi.n	800bbcc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	1ad2      	subs	r2, r2, r3
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	699b      	ldr	r3, [r3, #24]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d302      	bcc.n	800bbba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	617b      	str	r3, [r7, #20]
 800bbb8:	e01b      	b.n	800bbf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bbba:	4b10      	ldr	r3, [pc, #64]	; (800bbfc <prvInsertTimerInActiveList+0x7c>)
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	3304      	adds	r3, #4
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	4610      	mov	r0, r2
 800bbc6:	f7fe fa08 	bl	8009fda <vListInsert>
 800bbca:	e012      	b.n	800bbf2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d206      	bcs.n	800bbe2 <prvInsertTimerInActiveList+0x62>
 800bbd4:	68ba      	ldr	r2, [r7, #8]
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d302      	bcc.n	800bbe2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	617b      	str	r3, [r7, #20]
 800bbe0:	e007      	b.n	800bbf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bbe2:	4b07      	ldr	r3, [pc, #28]	; (800bc00 <prvInsertTimerInActiveList+0x80>)
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	3304      	adds	r3, #4
 800bbea:	4619      	mov	r1, r3
 800bbec:	4610      	mov	r0, r2
 800bbee:	f7fe f9f4 	bl	8009fda <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bbf2:	697b      	ldr	r3, [r7, #20]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3718      	adds	r7, #24
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	24000e34 	.word	0x24000e34
 800bc00:	24000e30 	.word	0x24000e30

0800bc04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b08e      	sub	sp, #56	; 0x38
 800bc08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc0a:	e0ca      	b.n	800bda2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	da18      	bge.n	800bc44 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bc12:	1d3b      	adds	r3, r7, #4
 800bc14:	3304      	adds	r3, #4
 800bc16:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d10a      	bne.n	800bc34 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc22:	f383 8811 	msr	BASEPRI, r3
 800bc26:	f3bf 8f6f 	isb	sy
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	61fb      	str	r3, [r7, #28]
}
 800bc30:	bf00      	nop
 800bc32:	e7fe      	b.n	800bc32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc3a:	6850      	ldr	r0, [r2, #4]
 800bc3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc3e:	6892      	ldr	r2, [r2, #8]
 800bc40:	4611      	mov	r1, r2
 800bc42:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f2c0 80aa 	blt.w	800bda0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc52:	695b      	ldr	r3, [r3, #20]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d004      	beq.n	800bc62 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5a:	3304      	adds	r3, #4
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7fe f9f5 	bl	800a04c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc62:	463b      	mov	r3, r7
 800bc64:	4618      	mov	r0, r3
 800bc66:	f7ff ff6b 	bl	800bb40 <prvSampleTimeNow>
 800bc6a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b09      	cmp	r3, #9
 800bc70:	f200 8097 	bhi.w	800bda2 <prvProcessReceivedCommands+0x19e>
 800bc74:	a201      	add	r2, pc, #4	; (adr r2, 800bc7c <prvProcessReceivedCommands+0x78>)
 800bc76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7a:	bf00      	nop
 800bc7c:	0800bca5 	.word	0x0800bca5
 800bc80:	0800bca5 	.word	0x0800bca5
 800bc84:	0800bca5 	.word	0x0800bca5
 800bc88:	0800bd19 	.word	0x0800bd19
 800bc8c:	0800bd2d 	.word	0x0800bd2d
 800bc90:	0800bd77 	.word	0x0800bd77
 800bc94:	0800bca5 	.word	0x0800bca5
 800bc98:	0800bca5 	.word	0x0800bca5
 800bc9c:	0800bd19 	.word	0x0800bd19
 800bca0:	0800bd2d 	.word	0x0800bd2d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcaa:	f043 0301 	orr.w	r3, r3, #1
 800bcae:	b2da      	uxtb	r2, r3
 800bcb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bcb6:	68ba      	ldr	r2, [r7, #8]
 800bcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcba:	699b      	ldr	r3, [r3, #24]
 800bcbc:	18d1      	adds	r1, r2, r3
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcc4:	f7ff ff5c 	bl	800bb80 <prvInsertTimerInActiveList>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d069      	beq.n	800bda2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd0:	6a1b      	ldr	r3, [r3, #32]
 800bcd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcd4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcdc:	f003 0304 	and.w	r3, r3, #4
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d05e      	beq.n	800bda2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bce4:	68ba      	ldr	r2, [r7, #8]
 800bce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce8:	699b      	ldr	r3, [r3, #24]
 800bcea:	441a      	add	r2, r3
 800bcec:	2300      	movs	r3, #0
 800bcee:	9300      	str	r3, [sp, #0]
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	2100      	movs	r1, #0
 800bcf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcf6:	f7ff fe05 	bl	800b904 <xTimerGenericCommand>
 800bcfa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bcfc:	6a3b      	ldr	r3, [r7, #32]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d14f      	bne.n	800bda2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd06:	f383 8811 	msr	BASEPRI, r3
 800bd0a:	f3bf 8f6f 	isb	sy
 800bd0e:	f3bf 8f4f 	dsb	sy
 800bd12:	61bb      	str	r3, [r7, #24]
}
 800bd14:	bf00      	nop
 800bd16:	e7fe      	b.n	800bd16 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd1e:	f023 0301 	bic.w	r3, r3, #1
 800bd22:	b2da      	uxtb	r2, r3
 800bd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bd2a:	e03a      	b.n	800bda2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd32:	f043 0301 	orr.w	r3, r3, #1
 800bd36:	b2da      	uxtb	r2, r3
 800bd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd42:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd46:	699b      	ldr	r3, [r3, #24]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d10a      	bne.n	800bd62 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd50:	f383 8811 	msr	BASEPRI, r3
 800bd54:	f3bf 8f6f 	isb	sy
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	617b      	str	r3, [r7, #20]
}
 800bd5e:	bf00      	nop
 800bd60:	e7fe      	b.n	800bd60 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd64:	699a      	ldr	r2, [r3, #24]
 800bd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd68:	18d1      	adds	r1, r2, r3
 800bd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd70:	f7ff ff06 	bl	800bb80 <prvInsertTimerInActiveList>
					break;
 800bd74:	e015      	b.n	800bda2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd7c:	f003 0302 	and.w	r3, r3, #2
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d103      	bne.n	800bd8c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bd84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd86:	f000 fbdb 	bl	800c540 <vPortFree>
 800bd8a:	e00a      	b.n	800bda2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd92:	f023 0301 	bic.w	r3, r3, #1
 800bd96:	b2da      	uxtb	r2, r3
 800bd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bd9e:	e000      	b.n	800bda2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bda0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bda2:	4b08      	ldr	r3, [pc, #32]	; (800bdc4 <prvProcessReceivedCommands+0x1c0>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	1d39      	adds	r1, r7, #4
 800bda8:	2200      	movs	r2, #0
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7fe fc16 	bl	800a5dc <xQueueReceive>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f47f af2a 	bne.w	800bc0c <prvProcessReceivedCommands+0x8>
	}
}
 800bdb8:	bf00      	nop
 800bdba:	bf00      	nop
 800bdbc:	3730      	adds	r7, #48	; 0x30
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	24000e38 	.word	0x24000e38

0800bdc8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b088      	sub	sp, #32
 800bdcc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bdce:	e048      	b.n	800be62 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bdd0:	4b2d      	ldr	r3, [pc, #180]	; (800be88 <prvSwitchTimerLists+0xc0>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdda:	4b2b      	ldr	r3, [pc, #172]	; (800be88 <prvSwitchTimerLists+0xc0>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	3304      	adds	r3, #4
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7fe f92f 	bl	800a04c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6a1b      	ldr	r3, [r3, #32]
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdfc:	f003 0304 	and.w	r3, r3, #4
 800be00:	2b00      	cmp	r3, #0
 800be02:	d02e      	beq.n	800be62 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	699b      	ldr	r3, [r3, #24]
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	4413      	add	r3, r2
 800be0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800be0e:	68ba      	ldr	r2, [r7, #8]
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	429a      	cmp	r2, r3
 800be14:	d90e      	bls.n	800be34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	68ba      	ldr	r2, [r7, #8]
 800be1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be22:	4b19      	ldr	r3, [pc, #100]	; (800be88 <prvSwitchTimerLists+0xc0>)
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	3304      	adds	r3, #4
 800be2a:	4619      	mov	r1, r3
 800be2c:	4610      	mov	r0, r2
 800be2e:	f7fe f8d4 	bl	8009fda <vListInsert>
 800be32:	e016      	b.n	800be62 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be34:	2300      	movs	r3, #0
 800be36:	9300      	str	r3, [sp, #0]
 800be38:	2300      	movs	r3, #0
 800be3a:	693a      	ldr	r2, [r7, #16]
 800be3c:	2100      	movs	r1, #0
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	f7ff fd60 	bl	800b904 <xTimerGenericCommand>
 800be44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d10a      	bne.n	800be62 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800be4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be50:	f383 8811 	msr	BASEPRI, r3
 800be54:	f3bf 8f6f 	isb	sy
 800be58:	f3bf 8f4f 	dsb	sy
 800be5c:	603b      	str	r3, [r7, #0]
}
 800be5e:	bf00      	nop
 800be60:	e7fe      	b.n	800be60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be62:	4b09      	ldr	r3, [pc, #36]	; (800be88 <prvSwitchTimerLists+0xc0>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d1b1      	bne.n	800bdd0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800be6c:	4b06      	ldr	r3, [pc, #24]	; (800be88 <prvSwitchTimerLists+0xc0>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800be72:	4b06      	ldr	r3, [pc, #24]	; (800be8c <prvSwitchTimerLists+0xc4>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4a04      	ldr	r2, [pc, #16]	; (800be88 <prvSwitchTimerLists+0xc0>)
 800be78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800be7a:	4a04      	ldr	r2, [pc, #16]	; (800be8c <prvSwitchTimerLists+0xc4>)
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	6013      	str	r3, [r2, #0]
}
 800be80:	bf00      	nop
 800be82:	3718      	adds	r7, #24
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	24000e30 	.word	0x24000e30
 800be8c:	24000e34 	.word	0x24000e34

0800be90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800be96:	f000 f965 	bl	800c164 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800be9a:	4b15      	ldr	r3, [pc, #84]	; (800bef0 <prvCheckForValidListAndQueue+0x60>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d120      	bne.n	800bee4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bea2:	4814      	ldr	r0, [pc, #80]	; (800bef4 <prvCheckForValidListAndQueue+0x64>)
 800bea4:	f7fe f848 	bl	8009f38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bea8:	4813      	ldr	r0, [pc, #76]	; (800bef8 <prvCheckForValidListAndQueue+0x68>)
 800beaa:	f7fe f845 	bl	8009f38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800beae:	4b13      	ldr	r3, [pc, #76]	; (800befc <prvCheckForValidListAndQueue+0x6c>)
 800beb0:	4a10      	ldr	r2, [pc, #64]	; (800bef4 <prvCheckForValidListAndQueue+0x64>)
 800beb2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800beb4:	4b12      	ldr	r3, [pc, #72]	; (800bf00 <prvCheckForValidListAndQueue+0x70>)
 800beb6:	4a10      	ldr	r2, [pc, #64]	; (800bef8 <prvCheckForValidListAndQueue+0x68>)
 800beb8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800beba:	2300      	movs	r3, #0
 800bebc:	9300      	str	r3, [sp, #0]
 800bebe:	4b11      	ldr	r3, [pc, #68]	; (800bf04 <prvCheckForValidListAndQueue+0x74>)
 800bec0:	4a11      	ldr	r2, [pc, #68]	; (800bf08 <prvCheckForValidListAndQueue+0x78>)
 800bec2:	2110      	movs	r1, #16
 800bec4:	200a      	movs	r0, #10
 800bec6:	f7fe f953 	bl	800a170 <xQueueGenericCreateStatic>
 800beca:	4603      	mov	r3, r0
 800becc:	4a08      	ldr	r2, [pc, #32]	; (800bef0 <prvCheckForValidListAndQueue+0x60>)
 800bece:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bed0:	4b07      	ldr	r3, [pc, #28]	; (800bef0 <prvCheckForValidListAndQueue+0x60>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d005      	beq.n	800bee4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bed8:	4b05      	ldr	r3, [pc, #20]	; (800bef0 <prvCheckForValidListAndQueue+0x60>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	490b      	ldr	r1, [pc, #44]	; (800bf0c <prvCheckForValidListAndQueue+0x7c>)
 800bede:	4618      	mov	r0, r3
 800bee0:	f7fe fd6c 	bl	800a9bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bee4:	f000 f96e 	bl	800c1c4 <vPortExitCritical>
}
 800bee8:	bf00      	nop
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	24000e38 	.word	0x24000e38
 800bef4:	24000e08 	.word	0x24000e08
 800bef8:	24000e1c 	.word	0x24000e1c
 800befc:	24000e30 	.word	0x24000e30
 800bf00:	24000e34 	.word	0x24000e34
 800bf04:	24000ee4 	.word	0x24000ee4
 800bf08:	24000e44 	.word	0x24000e44
 800bf0c:	0800ca24 	.word	0x0800ca24

0800bf10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bf10:	b480      	push	{r7}
 800bf12:	b085      	sub	sp, #20
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	60b9      	str	r1, [r7, #8]
 800bf1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	3b04      	subs	r3, #4
 800bf20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bf28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	3b04      	subs	r3, #4
 800bf2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	f023 0201 	bic.w	r2, r3, #1
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	3b04      	subs	r3, #4
 800bf3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf40:	4a0c      	ldr	r2, [pc, #48]	; (800bf74 <pxPortInitialiseStack+0x64>)
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	3b14      	subs	r3, #20
 800bf4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	3b04      	subs	r3, #4
 800bf56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f06f 0202 	mvn.w	r2, #2
 800bf5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	3b20      	subs	r3, #32
 800bf64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf66:	68fb      	ldr	r3, [r7, #12]
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3714      	adds	r7, #20
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr
 800bf74:	0800bf79 	.word	0x0800bf79

0800bf78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b085      	sub	sp, #20
 800bf7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf82:	4b12      	ldr	r3, [pc, #72]	; (800bfcc <prvTaskExitError+0x54>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf8a:	d00a      	beq.n	800bfa2 <prvTaskExitError+0x2a>
	__asm volatile
 800bf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf90:	f383 8811 	msr	BASEPRI, r3
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	f3bf 8f4f 	dsb	sy
 800bf9c:	60fb      	str	r3, [r7, #12]
}
 800bf9e:	bf00      	nop
 800bfa0:	e7fe      	b.n	800bfa0 <prvTaskExitError+0x28>
	__asm volatile
 800bfa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa6:	f383 8811 	msr	BASEPRI, r3
 800bfaa:	f3bf 8f6f 	isb	sy
 800bfae:	f3bf 8f4f 	dsb	sy
 800bfb2:	60bb      	str	r3, [r7, #8]
}
 800bfb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bfb6:	bf00      	nop
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d0fc      	beq.n	800bfb8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bfbe:	bf00      	nop
 800bfc0:	bf00      	nop
 800bfc2:	3714      	adds	r7, #20
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr
 800bfcc:	24000010 	.word	0x24000010

0800bfd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bfd0:	4b07      	ldr	r3, [pc, #28]	; (800bff0 <pxCurrentTCBConst2>)
 800bfd2:	6819      	ldr	r1, [r3, #0]
 800bfd4:	6808      	ldr	r0, [r1, #0]
 800bfd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfda:	f380 8809 	msr	PSP, r0
 800bfde:	f3bf 8f6f 	isb	sy
 800bfe2:	f04f 0000 	mov.w	r0, #0
 800bfe6:	f380 8811 	msr	BASEPRI, r0
 800bfea:	4770      	bx	lr
 800bfec:	f3af 8000 	nop.w

0800bff0 <pxCurrentTCBConst2>:
 800bff0:	24000908 	.word	0x24000908
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bff4:	bf00      	nop
 800bff6:	bf00      	nop

0800bff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bff8:	4808      	ldr	r0, [pc, #32]	; (800c01c <prvPortStartFirstTask+0x24>)
 800bffa:	6800      	ldr	r0, [r0, #0]
 800bffc:	6800      	ldr	r0, [r0, #0]
 800bffe:	f380 8808 	msr	MSP, r0
 800c002:	f04f 0000 	mov.w	r0, #0
 800c006:	f380 8814 	msr	CONTROL, r0
 800c00a:	b662      	cpsie	i
 800c00c:	b661      	cpsie	f
 800c00e:	f3bf 8f4f 	dsb	sy
 800c012:	f3bf 8f6f 	isb	sy
 800c016:	df00      	svc	0
 800c018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c01a:	bf00      	nop
 800c01c:	e000ed08 	.word	0xe000ed08

0800c020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b086      	sub	sp, #24
 800c024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c026:	4b46      	ldr	r3, [pc, #280]	; (800c140 <xPortStartScheduler+0x120>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4a46      	ldr	r2, [pc, #280]	; (800c144 <xPortStartScheduler+0x124>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d10a      	bne.n	800c046 <xPortStartScheduler+0x26>
	__asm volatile
 800c030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	613b      	str	r3, [r7, #16]
}
 800c042:	bf00      	nop
 800c044:	e7fe      	b.n	800c044 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c046:	4b3e      	ldr	r3, [pc, #248]	; (800c140 <xPortStartScheduler+0x120>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4a3f      	ldr	r2, [pc, #252]	; (800c148 <xPortStartScheduler+0x128>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d10a      	bne.n	800c066 <xPortStartScheduler+0x46>
	__asm volatile
 800c050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c054:	f383 8811 	msr	BASEPRI, r3
 800c058:	f3bf 8f6f 	isb	sy
 800c05c:	f3bf 8f4f 	dsb	sy
 800c060:	60fb      	str	r3, [r7, #12]
}
 800c062:	bf00      	nop
 800c064:	e7fe      	b.n	800c064 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c066:	4b39      	ldr	r3, [pc, #228]	; (800c14c <xPortStartScheduler+0x12c>)
 800c068:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	22ff      	movs	r2, #255	; 0xff
 800c076:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c080:	78fb      	ldrb	r3, [r7, #3]
 800c082:	b2db      	uxtb	r3, r3
 800c084:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c088:	b2da      	uxtb	r2, r3
 800c08a:	4b31      	ldr	r3, [pc, #196]	; (800c150 <xPortStartScheduler+0x130>)
 800c08c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c08e:	4b31      	ldr	r3, [pc, #196]	; (800c154 <xPortStartScheduler+0x134>)
 800c090:	2207      	movs	r2, #7
 800c092:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c094:	e009      	b.n	800c0aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c096:	4b2f      	ldr	r3, [pc, #188]	; (800c154 <xPortStartScheduler+0x134>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	3b01      	subs	r3, #1
 800c09c:	4a2d      	ldr	r2, [pc, #180]	; (800c154 <xPortStartScheduler+0x134>)
 800c09e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c0a0:	78fb      	ldrb	r3, [r7, #3]
 800c0a2:	b2db      	uxtb	r3, r3
 800c0a4:	005b      	lsls	r3, r3, #1
 800c0a6:	b2db      	uxtb	r3, r3
 800c0a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0aa:	78fb      	ldrb	r3, [r7, #3]
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0b2:	2b80      	cmp	r3, #128	; 0x80
 800c0b4:	d0ef      	beq.n	800c096 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c0b6:	4b27      	ldr	r3, [pc, #156]	; (800c154 <xPortStartScheduler+0x134>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f1c3 0307 	rsb	r3, r3, #7
 800c0be:	2b04      	cmp	r3, #4
 800c0c0:	d00a      	beq.n	800c0d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c6:	f383 8811 	msr	BASEPRI, r3
 800c0ca:	f3bf 8f6f 	isb	sy
 800c0ce:	f3bf 8f4f 	dsb	sy
 800c0d2:	60bb      	str	r3, [r7, #8]
}
 800c0d4:	bf00      	nop
 800c0d6:	e7fe      	b.n	800c0d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c0d8:	4b1e      	ldr	r3, [pc, #120]	; (800c154 <xPortStartScheduler+0x134>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	021b      	lsls	r3, r3, #8
 800c0de:	4a1d      	ldr	r2, [pc, #116]	; (800c154 <xPortStartScheduler+0x134>)
 800c0e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c0e2:	4b1c      	ldr	r3, [pc, #112]	; (800c154 <xPortStartScheduler+0x134>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c0ea:	4a1a      	ldr	r2, [pc, #104]	; (800c154 <xPortStartScheduler+0x134>)
 800c0ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	b2da      	uxtb	r2, r3
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c0f6:	4b18      	ldr	r3, [pc, #96]	; (800c158 <xPortStartScheduler+0x138>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a17      	ldr	r2, [pc, #92]	; (800c158 <xPortStartScheduler+0x138>)
 800c0fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c100:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c102:	4b15      	ldr	r3, [pc, #84]	; (800c158 <xPortStartScheduler+0x138>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4a14      	ldr	r2, [pc, #80]	; (800c158 <xPortStartScheduler+0x138>)
 800c108:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c10c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c10e:	f000 f8dd 	bl	800c2cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c112:	4b12      	ldr	r3, [pc, #72]	; (800c15c <xPortStartScheduler+0x13c>)
 800c114:	2200      	movs	r2, #0
 800c116:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c118:	f000 f8fc 	bl	800c314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c11c:	4b10      	ldr	r3, [pc, #64]	; (800c160 <xPortStartScheduler+0x140>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a0f      	ldr	r2, [pc, #60]	; (800c160 <xPortStartScheduler+0x140>)
 800c122:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c126:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c128:	f7ff ff66 	bl	800bff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c12c:	f7ff f856 	bl	800b1dc <vTaskSwitchContext>
	prvTaskExitError();
 800c130:	f7ff ff22 	bl	800bf78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c134:	2300      	movs	r3, #0
}
 800c136:	4618      	mov	r0, r3
 800c138:	3718      	adds	r7, #24
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	e000ed00 	.word	0xe000ed00
 800c144:	410fc271 	.word	0x410fc271
 800c148:	410fc270 	.word	0x410fc270
 800c14c:	e000e400 	.word	0xe000e400
 800c150:	24000f34 	.word	0x24000f34
 800c154:	24000f38 	.word	0x24000f38
 800c158:	e000ed20 	.word	0xe000ed20
 800c15c:	24000010 	.word	0x24000010
 800c160:	e000ef34 	.word	0xe000ef34

0800c164 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c164:	b480      	push	{r7}
 800c166:	b083      	sub	sp, #12
 800c168:	af00      	add	r7, sp, #0
	__asm volatile
 800c16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16e:	f383 8811 	msr	BASEPRI, r3
 800c172:	f3bf 8f6f 	isb	sy
 800c176:	f3bf 8f4f 	dsb	sy
 800c17a:	607b      	str	r3, [r7, #4]
}
 800c17c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c17e:	4b0f      	ldr	r3, [pc, #60]	; (800c1bc <vPortEnterCritical+0x58>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	3301      	adds	r3, #1
 800c184:	4a0d      	ldr	r2, [pc, #52]	; (800c1bc <vPortEnterCritical+0x58>)
 800c186:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c188:	4b0c      	ldr	r3, [pc, #48]	; (800c1bc <vPortEnterCritical+0x58>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d10f      	bne.n	800c1b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c190:	4b0b      	ldr	r3, [pc, #44]	; (800c1c0 <vPortEnterCritical+0x5c>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	b2db      	uxtb	r3, r3
 800c196:	2b00      	cmp	r3, #0
 800c198:	d00a      	beq.n	800c1b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19e:	f383 8811 	msr	BASEPRI, r3
 800c1a2:	f3bf 8f6f 	isb	sy
 800c1a6:	f3bf 8f4f 	dsb	sy
 800c1aa:	603b      	str	r3, [r7, #0]
}
 800c1ac:	bf00      	nop
 800c1ae:	e7fe      	b.n	800c1ae <vPortEnterCritical+0x4a>
	}
}
 800c1b0:	bf00      	nop
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr
 800c1bc:	24000010 	.word	0x24000010
 800c1c0:	e000ed04 	.word	0xe000ed04

0800c1c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c1ca:	4b12      	ldr	r3, [pc, #72]	; (800c214 <vPortExitCritical+0x50>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d10a      	bne.n	800c1e8 <vPortExitCritical+0x24>
	__asm volatile
 800c1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d6:	f383 8811 	msr	BASEPRI, r3
 800c1da:	f3bf 8f6f 	isb	sy
 800c1de:	f3bf 8f4f 	dsb	sy
 800c1e2:	607b      	str	r3, [r7, #4]
}
 800c1e4:	bf00      	nop
 800c1e6:	e7fe      	b.n	800c1e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c1e8:	4b0a      	ldr	r3, [pc, #40]	; (800c214 <vPortExitCritical+0x50>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	3b01      	subs	r3, #1
 800c1ee:	4a09      	ldr	r2, [pc, #36]	; (800c214 <vPortExitCritical+0x50>)
 800c1f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c1f2:	4b08      	ldr	r3, [pc, #32]	; (800c214 <vPortExitCritical+0x50>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d105      	bne.n	800c206 <vPortExitCritical+0x42>
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	f383 8811 	msr	BASEPRI, r3
}
 800c204:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c206:	bf00      	nop
 800c208:	370c      	adds	r7, #12
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	24000010 	.word	0x24000010
	...

0800c220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c220:	f3ef 8009 	mrs	r0, PSP
 800c224:	f3bf 8f6f 	isb	sy
 800c228:	4b15      	ldr	r3, [pc, #84]	; (800c280 <pxCurrentTCBConst>)
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	f01e 0f10 	tst.w	lr, #16
 800c230:	bf08      	it	eq
 800c232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c23a:	6010      	str	r0, [r2, #0]
 800c23c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c240:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c244:	f380 8811 	msr	BASEPRI, r0
 800c248:	f3bf 8f4f 	dsb	sy
 800c24c:	f3bf 8f6f 	isb	sy
 800c250:	f7fe ffc4 	bl	800b1dc <vTaskSwitchContext>
 800c254:	f04f 0000 	mov.w	r0, #0
 800c258:	f380 8811 	msr	BASEPRI, r0
 800c25c:	bc09      	pop	{r0, r3}
 800c25e:	6819      	ldr	r1, [r3, #0]
 800c260:	6808      	ldr	r0, [r1, #0]
 800c262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c266:	f01e 0f10 	tst.w	lr, #16
 800c26a:	bf08      	it	eq
 800c26c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c270:	f380 8809 	msr	PSP, r0
 800c274:	f3bf 8f6f 	isb	sy
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	f3af 8000 	nop.w

0800c280 <pxCurrentTCBConst>:
 800c280:	24000908 	.word	0x24000908
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c284:	bf00      	nop
 800c286:	bf00      	nop

0800c288 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
	__asm volatile
 800c28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c292:	f383 8811 	msr	BASEPRI, r3
 800c296:	f3bf 8f6f 	isb	sy
 800c29a:	f3bf 8f4f 	dsb	sy
 800c29e:	607b      	str	r3, [r7, #4]
}
 800c2a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c2a2:	f7fe fee1 	bl	800b068 <xTaskIncrementTick>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d003      	beq.n	800c2b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c2ac:	4b06      	ldr	r3, [pc, #24]	; (800c2c8 <xPortSysTickHandler+0x40>)
 800c2ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2b2:	601a      	str	r2, [r3, #0]
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	f383 8811 	msr	BASEPRI, r3
}
 800c2be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c2c0:	bf00      	nop
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	e000ed04 	.word	0xe000ed04

0800c2cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c2d0:	4b0b      	ldr	r3, [pc, #44]	; (800c300 <vPortSetupTimerInterrupt+0x34>)
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c2d6:	4b0b      	ldr	r3, [pc, #44]	; (800c304 <vPortSetupTimerInterrupt+0x38>)
 800c2d8:	2200      	movs	r2, #0
 800c2da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c2dc:	4b0a      	ldr	r3, [pc, #40]	; (800c308 <vPortSetupTimerInterrupt+0x3c>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a0a      	ldr	r2, [pc, #40]	; (800c30c <vPortSetupTimerInterrupt+0x40>)
 800c2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2e6:	099b      	lsrs	r3, r3, #6
 800c2e8:	4a09      	ldr	r2, [pc, #36]	; (800c310 <vPortSetupTimerInterrupt+0x44>)
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c2ee:	4b04      	ldr	r3, [pc, #16]	; (800c300 <vPortSetupTimerInterrupt+0x34>)
 800c2f0:	2207      	movs	r2, #7
 800c2f2:	601a      	str	r2, [r3, #0]
}
 800c2f4:	bf00      	nop
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop
 800c300:	e000e010 	.word	0xe000e010
 800c304:	e000e018 	.word	0xe000e018
 800c308:	24000000 	.word	0x24000000
 800c30c:	10624dd3 	.word	0x10624dd3
 800c310:	e000e014 	.word	0xe000e014

0800c314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c314:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c324 <vPortEnableVFP+0x10>
 800c318:	6801      	ldr	r1, [r0, #0]
 800c31a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c31e:	6001      	str	r1, [r0, #0]
 800c320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c322:	bf00      	nop
 800c324:	e000ed88 	.word	0xe000ed88

0800c328 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c32e:	f3ef 8305 	mrs	r3, IPSR
 800c332:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2b0f      	cmp	r3, #15
 800c338:	d914      	bls.n	800c364 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c33a:	4a17      	ldr	r2, [pc, #92]	; (800c398 <vPortValidateInterruptPriority+0x70>)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	4413      	add	r3, r2
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c344:	4b15      	ldr	r3, [pc, #84]	; (800c39c <vPortValidateInterruptPriority+0x74>)
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	7afa      	ldrb	r2, [r7, #11]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d20a      	bcs.n	800c364 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	607b      	str	r3, [r7, #4]
}
 800c360:	bf00      	nop
 800c362:	e7fe      	b.n	800c362 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c364:	4b0e      	ldr	r3, [pc, #56]	; (800c3a0 <vPortValidateInterruptPriority+0x78>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c36c:	4b0d      	ldr	r3, [pc, #52]	; (800c3a4 <vPortValidateInterruptPriority+0x7c>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	429a      	cmp	r2, r3
 800c372:	d90a      	bls.n	800c38a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c378:	f383 8811 	msr	BASEPRI, r3
 800c37c:	f3bf 8f6f 	isb	sy
 800c380:	f3bf 8f4f 	dsb	sy
 800c384:	603b      	str	r3, [r7, #0]
}
 800c386:	bf00      	nop
 800c388:	e7fe      	b.n	800c388 <vPortValidateInterruptPriority+0x60>
	}
 800c38a:	bf00      	nop
 800c38c:	3714      	adds	r7, #20
 800c38e:	46bd      	mov	sp, r7
 800c390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c394:	4770      	bx	lr
 800c396:	bf00      	nop
 800c398:	e000e3f0 	.word	0xe000e3f0
 800c39c:	24000f34 	.word	0x24000f34
 800c3a0:	e000ed0c 	.word	0xe000ed0c
 800c3a4:	24000f38 	.word	0x24000f38

0800c3a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b08a      	sub	sp, #40	; 0x28
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c3b4:	f7fe fd9c 	bl	800aef0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c3b8:	4b5b      	ldr	r3, [pc, #364]	; (800c528 <pvPortMalloc+0x180>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d101      	bne.n	800c3c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c3c0:	f000 f920 	bl	800c604 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c3c4:	4b59      	ldr	r3, [pc, #356]	; (800c52c <pvPortMalloc+0x184>)
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	4013      	ands	r3, r2
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	f040 8093 	bne.w	800c4f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d01d      	beq.n	800c414 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c3d8:	2208      	movs	r2, #8
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	4413      	add	r3, r2
 800c3de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f003 0307 	and.w	r3, r3, #7
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d014      	beq.n	800c414 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f023 0307 	bic.w	r3, r3, #7
 800c3f0:	3308      	adds	r3, #8
 800c3f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f003 0307 	and.w	r3, r3, #7
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00a      	beq.n	800c414 <pvPortMalloc+0x6c>
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	617b      	str	r3, [r7, #20]
}
 800c410:	bf00      	nop
 800c412:	e7fe      	b.n	800c412 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d06e      	beq.n	800c4f8 <pvPortMalloc+0x150>
 800c41a:	4b45      	ldr	r3, [pc, #276]	; (800c530 <pvPortMalloc+0x188>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	429a      	cmp	r2, r3
 800c422:	d869      	bhi.n	800c4f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c424:	4b43      	ldr	r3, [pc, #268]	; (800c534 <pvPortMalloc+0x18c>)
 800c426:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c428:	4b42      	ldr	r3, [pc, #264]	; (800c534 <pvPortMalloc+0x18c>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c42e:	e004      	b.n	800c43a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c432:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	429a      	cmp	r2, r3
 800c442:	d903      	bls.n	800c44c <pvPortMalloc+0xa4>
 800c444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1f1      	bne.n	800c430 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c44c:	4b36      	ldr	r3, [pc, #216]	; (800c528 <pvPortMalloc+0x180>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c452:	429a      	cmp	r2, r3
 800c454:	d050      	beq.n	800c4f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c456:	6a3b      	ldr	r3, [r7, #32]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2208      	movs	r2, #8
 800c45c:	4413      	add	r3, r2
 800c45e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c462:	681a      	ldr	r2, [r3, #0]
 800c464:	6a3b      	ldr	r3, [r7, #32]
 800c466:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46a:	685a      	ldr	r2, [r3, #4]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	1ad2      	subs	r2, r2, r3
 800c470:	2308      	movs	r3, #8
 800c472:	005b      	lsls	r3, r3, #1
 800c474:	429a      	cmp	r2, r3
 800c476:	d91f      	bls.n	800c4b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	4413      	add	r3, r2
 800c47e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c480:	69bb      	ldr	r3, [r7, #24]
 800c482:	f003 0307 	and.w	r3, r3, #7
 800c486:	2b00      	cmp	r3, #0
 800c488:	d00a      	beq.n	800c4a0 <pvPortMalloc+0xf8>
	__asm volatile
 800c48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c48e:	f383 8811 	msr	BASEPRI, r3
 800c492:	f3bf 8f6f 	isb	sy
 800c496:	f3bf 8f4f 	dsb	sy
 800c49a:	613b      	str	r3, [r7, #16]
}
 800c49c:	bf00      	nop
 800c49e:	e7fe      	b.n	800c49e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a2:	685a      	ldr	r2, [r3, #4]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	1ad2      	subs	r2, r2, r3
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c4b2:	69b8      	ldr	r0, [r7, #24]
 800c4b4:	f000 f908 	bl	800c6c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c4b8:	4b1d      	ldr	r3, [pc, #116]	; (800c530 <pvPortMalloc+0x188>)
 800c4ba:	681a      	ldr	r2, [r3, #0]
 800c4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	1ad3      	subs	r3, r2, r3
 800c4c2:	4a1b      	ldr	r2, [pc, #108]	; (800c530 <pvPortMalloc+0x188>)
 800c4c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c4c6:	4b1a      	ldr	r3, [pc, #104]	; (800c530 <pvPortMalloc+0x188>)
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	4b1b      	ldr	r3, [pc, #108]	; (800c538 <pvPortMalloc+0x190>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d203      	bcs.n	800c4da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c4d2:	4b17      	ldr	r3, [pc, #92]	; (800c530 <pvPortMalloc+0x188>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a18      	ldr	r2, [pc, #96]	; (800c538 <pvPortMalloc+0x190>)
 800c4d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4dc:	685a      	ldr	r2, [r3, #4]
 800c4de:	4b13      	ldr	r3, [pc, #76]	; (800c52c <pvPortMalloc+0x184>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	431a      	orrs	r2, r3
 800c4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c4ee:	4b13      	ldr	r3, [pc, #76]	; (800c53c <pvPortMalloc+0x194>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	4a11      	ldr	r2, [pc, #68]	; (800c53c <pvPortMalloc+0x194>)
 800c4f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c4f8:	f7fe fd08 	bl	800af0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	f003 0307 	and.w	r3, r3, #7
 800c502:	2b00      	cmp	r3, #0
 800c504:	d00a      	beq.n	800c51c <pvPortMalloc+0x174>
	__asm volatile
 800c506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c50a:	f383 8811 	msr	BASEPRI, r3
 800c50e:	f3bf 8f6f 	isb	sy
 800c512:	f3bf 8f4f 	dsb	sy
 800c516:	60fb      	str	r3, [r7, #12]
}
 800c518:	bf00      	nop
 800c51a:	e7fe      	b.n	800c51a <pvPortMalloc+0x172>
	return pvReturn;
 800c51c:	69fb      	ldr	r3, [r7, #28]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3728      	adds	r7, #40	; 0x28
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	24004b44 	.word	0x24004b44
 800c52c:	24004b58 	.word	0x24004b58
 800c530:	24004b48 	.word	0x24004b48
 800c534:	24004b3c 	.word	0x24004b3c
 800c538:	24004b4c 	.word	0x24004b4c
 800c53c:	24004b50 	.word	0x24004b50

0800c540 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b086      	sub	sp, #24
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d04d      	beq.n	800c5ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c552:	2308      	movs	r3, #8
 800c554:	425b      	negs	r3, r3
 800c556:	697a      	ldr	r2, [r7, #20]
 800c558:	4413      	add	r3, r2
 800c55a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	685a      	ldr	r2, [r3, #4]
 800c564:	4b24      	ldr	r3, [pc, #144]	; (800c5f8 <vPortFree+0xb8>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4013      	ands	r3, r2
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d10a      	bne.n	800c584 <vPortFree+0x44>
	__asm volatile
 800c56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c572:	f383 8811 	msr	BASEPRI, r3
 800c576:	f3bf 8f6f 	isb	sy
 800c57a:	f3bf 8f4f 	dsb	sy
 800c57e:	60fb      	str	r3, [r7, #12]
}
 800c580:	bf00      	nop
 800c582:	e7fe      	b.n	800c582 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d00a      	beq.n	800c5a2 <vPortFree+0x62>
	__asm volatile
 800c58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c590:	f383 8811 	msr	BASEPRI, r3
 800c594:	f3bf 8f6f 	isb	sy
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	60bb      	str	r3, [r7, #8]
}
 800c59e:	bf00      	nop
 800c5a0:	e7fe      	b.n	800c5a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	685a      	ldr	r2, [r3, #4]
 800c5a6:	4b14      	ldr	r3, [pc, #80]	; (800c5f8 <vPortFree+0xb8>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4013      	ands	r3, r2
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d01e      	beq.n	800c5ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d11a      	bne.n	800c5ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	685a      	ldr	r2, [r3, #4]
 800c5bc:	4b0e      	ldr	r3, [pc, #56]	; (800c5f8 <vPortFree+0xb8>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	43db      	mvns	r3, r3
 800c5c2:	401a      	ands	r2, r3
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c5c8:	f7fe fc92 	bl	800aef0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	685a      	ldr	r2, [r3, #4]
 800c5d0:	4b0a      	ldr	r3, [pc, #40]	; (800c5fc <vPortFree+0xbc>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	4a09      	ldr	r2, [pc, #36]	; (800c5fc <vPortFree+0xbc>)
 800c5d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c5da:	6938      	ldr	r0, [r7, #16]
 800c5dc:	f000 f874 	bl	800c6c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c5e0:	4b07      	ldr	r3, [pc, #28]	; (800c600 <vPortFree+0xc0>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	4a06      	ldr	r2, [pc, #24]	; (800c600 <vPortFree+0xc0>)
 800c5e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c5ea:	f7fe fc8f 	bl	800af0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c5ee:	bf00      	nop
 800c5f0:	3718      	adds	r7, #24
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	24004b58 	.word	0x24004b58
 800c5fc:	24004b48 	.word	0x24004b48
 800c600:	24004b54 	.word	0x24004b54

0800c604 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c60a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c60e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c610:	4b27      	ldr	r3, [pc, #156]	; (800c6b0 <prvHeapInit+0xac>)
 800c612:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f003 0307 	and.w	r3, r3, #7
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d00c      	beq.n	800c638 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	3307      	adds	r3, #7
 800c622:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f023 0307 	bic.w	r3, r3, #7
 800c62a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c62c:	68ba      	ldr	r2, [r7, #8]
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	1ad3      	subs	r3, r2, r3
 800c632:	4a1f      	ldr	r2, [pc, #124]	; (800c6b0 <prvHeapInit+0xac>)
 800c634:	4413      	add	r3, r2
 800c636:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c63c:	4a1d      	ldr	r2, [pc, #116]	; (800c6b4 <prvHeapInit+0xb0>)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c642:	4b1c      	ldr	r3, [pc, #112]	; (800c6b4 <prvHeapInit+0xb0>)
 800c644:	2200      	movs	r2, #0
 800c646:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	68ba      	ldr	r2, [r7, #8]
 800c64c:	4413      	add	r3, r2
 800c64e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c650:	2208      	movs	r2, #8
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	1a9b      	subs	r3, r3, r2
 800c656:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f023 0307 	bic.w	r3, r3, #7
 800c65e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	4a15      	ldr	r2, [pc, #84]	; (800c6b8 <prvHeapInit+0xb4>)
 800c664:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c666:	4b14      	ldr	r3, [pc, #80]	; (800c6b8 <prvHeapInit+0xb4>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2200      	movs	r2, #0
 800c66c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c66e:	4b12      	ldr	r3, [pc, #72]	; (800c6b8 <prvHeapInit+0xb4>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	2200      	movs	r2, #0
 800c674:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	68fa      	ldr	r2, [r7, #12]
 800c67e:	1ad2      	subs	r2, r2, r3
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c684:	4b0c      	ldr	r3, [pc, #48]	; (800c6b8 <prvHeapInit+0xb4>)
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	4a0a      	ldr	r2, [pc, #40]	; (800c6bc <prvHeapInit+0xb8>)
 800c692:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	4a09      	ldr	r2, [pc, #36]	; (800c6c0 <prvHeapInit+0xbc>)
 800c69a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c69c:	4b09      	ldr	r3, [pc, #36]	; (800c6c4 <prvHeapInit+0xc0>)
 800c69e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c6a2:	601a      	str	r2, [r3, #0]
}
 800c6a4:	bf00      	nop
 800c6a6:	3714      	adds	r7, #20
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr
 800c6b0:	24000f3c 	.word	0x24000f3c
 800c6b4:	24004b3c 	.word	0x24004b3c
 800c6b8:	24004b44 	.word	0x24004b44
 800c6bc:	24004b4c 	.word	0x24004b4c
 800c6c0:	24004b48 	.word	0x24004b48
 800c6c4:	24004b58 	.word	0x24004b58

0800c6c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b085      	sub	sp, #20
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c6d0:	4b28      	ldr	r3, [pc, #160]	; (800c774 <prvInsertBlockIntoFreeList+0xac>)
 800c6d2:	60fb      	str	r3, [r7, #12]
 800c6d4:	e002      	b.n	800c6dc <prvInsertBlockIntoFreeList+0x14>
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	60fb      	str	r3, [r7, #12]
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d8f7      	bhi.n	800c6d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	68ba      	ldr	r2, [r7, #8]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d108      	bne.n	800c70a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	685a      	ldr	r2, [r3, #4]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	441a      	add	r2, r3
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	68ba      	ldr	r2, [r7, #8]
 800c714:	441a      	add	r2, r3
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d118      	bne.n	800c750 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	4b15      	ldr	r3, [pc, #84]	; (800c778 <prvInsertBlockIntoFreeList+0xb0>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	429a      	cmp	r2, r3
 800c728:	d00d      	beq.n	800c746 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	685a      	ldr	r2, [r3, #4]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	441a      	add	r2, r3
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	681a      	ldr	r2, [r3, #0]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	601a      	str	r2, [r3, #0]
 800c744:	e008      	b.n	800c758 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c746:	4b0c      	ldr	r3, [pc, #48]	; (800c778 <prvInsertBlockIntoFreeList+0xb0>)
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	601a      	str	r2, [r3, #0]
 800c74e:	e003      	b.n	800c758 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c758:	68fa      	ldr	r2, [r7, #12]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d002      	beq.n	800c766 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c766:	bf00      	nop
 800c768:	3714      	adds	r7, #20
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr
 800c772:	bf00      	nop
 800c774:	24004b3c 	.word	0x24004b3c
 800c778:	24004b44 	.word	0x24004b44

0800c77c <arm_rfft_32_fast_init_f32>:
 800c77c:	b180      	cbz	r0, 800c7a0 <arm_rfft_32_fast_init_f32+0x24>
 800c77e:	4603      	mov	r3, r0
 800c780:	2220      	movs	r2, #32
 800c782:	2010      	movs	r0, #16
 800c784:	4908      	ldr	r1, [pc, #32]	; (800c7a8 <arm_rfft_32_fast_init_f32+0x2c>)
 800c786:	b430      	push	{r4, r5}
 800c788:	2514      	movs	r5, #20
 800c78a:	4c08      	ldr	r4, [pc, #32]	; (800c7ac <arm_rfft_32_fast_init_f32+0x30>)
 800c78c:	821a      	strh	r2, [r3, #16]
 800c78e:	4a08      	ldr	r2, [pc, #32]	; (800c7b0 <arm_rfft_32_fast_init_f32+0x34>)
 800c790:	8018      	strh	r0, [r3, #0]
 800c792:	2000      	movs	r0, #0
 800c794:	819d      	strh	r5, [r3, #12]
 800c796:	615a      	str	r2, [r3, #20]
 800c798:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800c79c:	bc30      	pop	{r4, r5}
 800c79e:	4770      	bx	lr
 800c7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7a4:	4770      	bx	lr
 800c7a6:	bf00      	nop
 800c7a8:	08012378 	.word	0x08012378
 800c7ac:	0800da40 	.word	0x0800da40
 800c7b0:	0801b0f8 	.word	0x0801b0f8

0800c7b4 <arm_rfft_64_fast_init_f32>:
 800c7b4:	b180      	cbz	r0, 800c7d8 <arm_rfft_64_fast_init_f32+0x24>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2240      	movs	r2, #64	; 0x40
 800c7ba:	2020      	movs	r0, #32
 800c7bc:	4908      	ldr	r1, [pc, #32]	; (800c7e0 <arm_rfft_64_fast_init_f32+0x2c>)
 800c7be:	b430      	push	{r4, r5}
 800c7c0:	2530      	movs	r5, #48	; 0x30
 800c7c2:	4c08      	ldr	r4, [pc, #32]	; (800c7e4 <arm_rfft_64_fast_init_f32+0x30>)
 800c7c4:	821a      	strh	r2, [r3, #16]
 800c7c6:	4a08      	ldr	r2, [pc, #32]	; (800c7e8 <arm_rfft_64_fast_init_f32+0x34>)
 800c7c8:	8018      	strh	r0, [r3, #0]
 800c7ca:	2000      	movs	r0, #0
 800c7cc:	819d      	strh	r5, [r3, #12]
 800c7ce:	615a      	str	r2, [r3, #20]
 800c7d0:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800c7d4:	bc30      	pop	{r4, r5}
 800c7d6:	4770      	bx	lr
 800c7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop
 800c7e0:	08016bf8 	.word	0x08016bf8
 800c7e4:	0800fb98 	.word	0x0800fb98
 800c7e8:	0801f978 	.word	0x0801f978

0800c7ec <arm_rfft_256_fast_init_f32>:
 800c7ec:	b188      	cbz	r0, 800c812 <arm_rfft_256_fast_init_f32+0x26>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c7f4:	2080      	movs	r0, #128	; 0x80
 800c7f6:	4908      	ldr	r1, [pc, #32]	; (800c818 <arm_rfft_256_fast_init_f32+0x2c>)
 800c7f8:	b430      	push	{r4, r5}
 800c7fa:	25d0      	movs	r5, #208	; 0xd0
 800c7fc:	4c07      	ldr	r4, [pc, #28]	; (800c81c <arm_rfft_256_fast_init_f32+0x30>)
 800c7fe:	821a      	strh	r2, [r3, #16]
 800c800:	4a07      	ldr	r2, [pc, #28]	; (800c820 <arm_rfft_256_fast_init_f32+0x34>)
 800c802:	8018      	strh	r0, [r3, #0]
 800c804:	2000      	movs	r0, #0
 800c806:	819d      	strh	r5, [r3, #12]
 800c808:	615a      	str	r2, [r3, #20]
 800c80a:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800c80e:	bc30      	pop	{r4, r5}
 800c810:	4770      	bx	lr
 800c812:	f04f 30ff 	mov.w	r0, #4294967295
 800c816:	4770      	bx	lr
 800c818:	08011f78 	.word	0x08011f78
 800c81c:	0800d8a0 	.word	0x0800d8a0
 800c820:	0801acf8 	.word	0x0801acf8

0800c824 <arm_rfft_512_fast_init_f32>:
 800c824:	b198      	cbz	r0, 800c84e <arm_rfft_512_fast_init_f32+0x2a>
 800c826:	4603      	mov	r3, r0
 800c828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c82c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c830:	4908      	ldr	r1, [pc, #32]	; (800c854 <arm_rfft_512_fast_init_f32+0x30>)
 800c832:	b430      	push	{r4, r5}
 800c834:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 800c838:	4c07      	ldr	r4, [pc, #28]	; (800c858 <arm_rfft_512_fast_init_f32+0x34>)
 800c83a:	821a      	strh	r2, [r3, #16]
 800c83c:	4a07      	ldr	r2, [pc, #28]	; (800c85c <arm_rfft_512_fast_init_f32+0x38>)
 800c83e:	8018      	strh	r0, [r3, #0]
 800c840:	2000      	movs	r0, #0
 800c842:	819d      	strh	r5, [r3, #12]
 800c844:	615a      	str	r2, [r3, #20]
 800c846:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800c84a:	bc30      	pop	{r4, r5}
 800c84c:	4770      	bx	lr
 800c84e:	f04f 30ff 	mov.w	r0, #4294967295
 800c852:	4770      	bx	lr
 800c854:	080163f8 	.word	0x080163f8
 800c858:	0800f828 	.word	0x0800f828
 800c85c:	0801f178 	.word	0x0801f178

0800c860 <arm_rfft_1024_fast_init_f32>:
 800c860:	b198      	cbz	r0, 800c88a <arm_rfft_1024_fast_init_f32+0x2a>
 800c862:	4603      	mov	r3, r0
 800c864:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c868:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c86c:	4908      	ldr	r1, [pc, #32]	; (800c890 <arm_rfft_1024_fast_init_f32+0x30>)
 800c86e:	b430      	push	{r4, r5}
 800c870:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 800c874:	4c07      	ldr	r4, [pc, #28]	; (800c894 <arm_rfft_1024_fast_init_f32+0x34>)
 800c876:	821a      	strh	r2, [r3, #16]
 800c878:	4a07      	ldr	r2, [pc, #28]	; (800c898 <arm_rfft_1024_fast_init_f32+0x38>)
 800c87a:	8018      	strh	r0, [r3, #0]
 800c87c:	2000      	movs	r0, #0
 800c87e:	819d      	strh	r5, [r3, #12]
 800c880:	615a      	str	r2, [r3, #20]
 800c882:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800c886:	bc30      	pop	{r4, r5}
 800c888:	4770      	bx	lr
 800c88a:	f04f 30ff 	mov.w	r0, #4294967295
 800c88e:	4770      	bx	lr
 800c890:	08016cf8 	.word	0x08016cf8
 800c894:	0800fbf8 	.word	0x0800fbf8
 800c898:	08017cf8 	.word	0x08017cf8

0800c89c <arm_rfft_2048_fast_init_f32>:
 800c89c:	b198      	cbz	r0, 800c8c6 <arm_rfft_2048_fast_init_f32+0x2a>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c8a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c8a8:	4908      	ldr	r1, [pc, #32]	; (800c8cc <arm_rfft_2048_fast_init_f32+0x30>)
 800c8aa:	b430      	push	{r4, r5}
 800c8ac:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 800c8b0:	4c07      	ldr	r4, [pc, #28]	; (800c8d0 <arm_rfft_2048_fast_init_f32+0x34>)
 800c8b2:	821a      	strh	r2, [r3, #16]
 800c8b4:	4a07      	ldr	r2, [pc, #28]	; (800c8d4 <arm_rfft_2048_fast_init_f32+0x38>)
 800c8b6:	8018      	strh	r0, [r3, #0]
 800c8b8:	2000      	movs	r0, #0
 800c8ba:	819d      	strh	r5, [r3, #12]
 800c8bc:	615a      	str	r2, [r3, #20]
 800c8be:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800c8c2:	bc30      	pop	{r4, r5}
 800c8c4:	4770      	bx	lr
 800c8c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ca:	4770      	bx	lr
 800c8cc:	0800ff78 	.word	0x0800ff78
 800c8d0:	0800ca90 	.word	0x0800ca90
 800c8d4:	08018cf8 	.word	0x08018cf8

0800c8d8 <arm_rfft_4096_fast_init_f32>:
 800c8d8:	b198      	cbz	r0, 800c902 <arm_rfft_4096_fast_init_f32+0x2a>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c8e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c8e4:	4908      	ldr	r1, [pc, #32]	; (800c908 <arm_rfft_4096_fast_init_f32+0x30>)
 800c8e6:	b430      	push	{r4, r5}
 800c8e8:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 800c8ec:	4c07      	ldr	r4, [pc, #28]	; (800c90c <arm_rfft_4096_fast_init_f32+0x34>)
 800c8ee:	821a      	strh	r2, [r3, #16]
 800c8f0:	4a07      	ldr	r2, [pc, #28]	; (800c910 <arm_rfft_4096_fast_init_f32+0x38>)
 800c8f2:	8018      	strh	r0, [r3, #0]
 800c8f4:	2000      	movs	r0, #0
 800c8f6:	819d      	strh	r5, [r3, #12]
 800c8f8:	615a      	str	r2, [r3, #20]
 800c8fa:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800c8fe:	bc30      	pop	{r4, r5}
 800c900:	4770      	bx	lr
 800c902:	f04f 30ff 	mov.w	r0, #4294967295
 800c906:	4770      	bx	lr
 800c908:	080123f8 	.word	0x080123f8
 800c90c:	0800da68 	.word	0x0800da68
 800c910:	0801b178 	.word	0x0801b178

0800c914 <arm_rfft_fast_init_f32>:
 800c914:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c918:	d01f      	beq.n	800c95a <arm_rfft_fast_init_f32+0x46>
 800c91a:	d90b      	bls.n	800c934 <arm_rfft_fast_init_f32+0x20>
 800c91c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800c920:	d019      	beq.n	800c956 <arm_rfft_fast_init_f32+0x42>
 800c922:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800c926:	d012      	beq.n	800c94e <arm_rfft_fast_init_f32+0x3a>
 800c928:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c92c:	d00d      	beq.n	800c94a <arm_rfft_fast_init_f32+0x36>
 800c92e:	f04f 30ff 	mov.w	r0, #4294967295
 800c932:	4770      	bx	lr
 800c934:	2940      	cmp	r1, #64	; 0x40
 800c936:	d00c      	beq.n	800c952 <arm_rfft_fast_init_f32+0x3e>
 800c938:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c93c:	d003      	beq.n	800c946 <arm_rfft_fast_init_f32+0x32>
 800c93e:	2920      	cmp	r1, #32
 800c940:	d1f5      	bne.n	800c92e <arm_rfft_fast_init_f32+0x1a>
 800c942:	4b07      	ldr	r3, [pc, #28]	; (800c960 <arm_rfft_fast_init_f32+0x4c>)
 800c944:	4718      	bx	r3
 800c946:	4b07      	ldr	r3, [pc, #28]	; (800c964 <arm_rfft_fast_init_f32+0x50>)
 800c948:	4718      	bx	r3
 800c94a:	4b07      	ldr	r3, [pc, #28]	; (800c968 <arm_rfft_fast_init_f32+0x54>)
 800c94c:	4718      	bx	r3
 800c94e:	4b07      	ldr	r3, [pc, #28]	; (800c96c <arm_rfft_fast_init_f32+0x58>)
 800c950:	4718      	bx	r3
 800c952:	4b07      	ldr	r3, [pc, #28]	; (800c970 <arm_rfft_fast_init_f32+0x5c>)
 800c954:	e7f6      	b.n	800c944 <arm_rfft_fast_init_f32+0x30>
 800c956:	4b07      	ldr	r3, [pc, #28]	; (800c974 <arm_rfft_fast_init_f32+0x60>)
 800c958:	e7f4      	b.n	800c944 <arm_rfft_fast_init_f32+0x30>
 800c95a:	4b07      	ldr	r3, [pc, #28]	; (800c978 <arm_rfft_fast_init_f32+0x64>)
 800c95c:	e7f2      	b.n	800c944 <arm_rfft_fast_init_f32+0x30>
 800c95e:	bf00      	nop
 800c960:	0800c77d 	.word	0x0800c77d
 800c964:	0800c7ed 	.word	0x0800c7ed
 800c968:	0800c861 	.word	0x0800c861
 800c96c:	0800c8d9 	.word	0x0800c8d9
 800c970:	0800c7b5 	.word	0x0800c7b5
 800c974:	0800c89d 	.word	0x0800c89d
 800c978:	0800c825 	.word	0x0800c825

0800c97c <__libc_init_array>:
 800c97c:	b570      	push	{r4, r5, r6, lr}
 800c97e:	4d0d      	ldr	r5, [pc, #52]	; (800c9b4 <__libc_init_array+0x38>)
 800c980:	4c0d      	ldr	r4, [pc, #52]	; (800c9b8 <__libc_init_array+0x3c>)
 800c982:	1b64      	subs	r4, r4, r5
 800c984:	10a4      	asrs	r4, r4, #2
 800c986:	2600      	movs	r6, #0
 800c988:	42a6      	cmp	r6, r4
 800c98a:	d109      	bne.n	800c9a0 <__libc_init_array+0x24>
 800c98c:	4d0b      	ldr	r5, [pc, #44]	; (800c9bc <__libc_init_array+0x40>)
 800c98e:	4c0c      	ldr	r4, [pc, #48]	; (800c9c0 <__libc_init_array+0x44>)
 800c990:	f000 f82e 	bl	800c9f0 <_init>
 800c994:	1b64      	subs	r4, r4, r5
 800c996:	10a4      	asrs	r4, r4, #2
 800c998:	2600      	movs	r6, #0
 800c99a:	42a6      	cmp	r6, r4
 800c99c:	d105      	bne.n	800c9aa <__libc_init_array+0x2e>
 800c99e:	bd70      	pop	{r4, r5, r6, pc}
 800c9a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9a4:	4798      	blx	r3
 800c9a6:	3601      	adds	r6, #1
 800c9a8:	e7ee      	b.n	800c988 <__libc_init_array+0xc>
 800c9aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9ae:	4798      	blx	r3
 800c9b0:	3601      	adds	r6, #1
 800c9b2:	e7f2      	b.n	800c99a <__libc_init_array+0x1e>
 800c9b4:	0801fa80 	.word	0x0801fa80
 800c9b8:	0801fa80 	.word	0x0801fa80
 800c9bc:	0801fa80 	.word	0x0801fa80
 800c9c0:	0801fa84 	.word	0x0801fa84

0800c9c4 <memcpy>:
 800c9c4:	440a      	add	r2, r1
 800c9c6:	4291      	cmp	r1, r2
 800c9c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c9cc:	d100      	bne.n	800c9d0 <memcpy+0xc>
 800c9ce:	4770      	bx	lr
 800c9d0:	b510      	push	{r4, lr}
 800c9d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9da:	4291      	cmp	r1, r2
 800c9dc:	d1f9      	bne.n	800c9d2 <memcpy+0xe>
 800c9de:	bd10      	pop	{r4, pc}

0800c9e0 <memset>:
 800c9e0:	4402      	add	r2, r0
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d100      	bne.n	800c9ea <memset+0xa>
 800c9e8:	4770      	bx	lr
 800c9ea:	f803 1b01 	strb.w	r1, [r3], #1
 800c9ee:	e7f9      	b.n	800c9e4 <memset+0x4>

0800c9f0 <_init>:
 800c9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f2:	bf00      	nop
 800c9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9f6:	bc08      	pop	{r3}
 800c9f8:	469e      	mov	lr, r3
 800c9fa:	4770      	bx	lr

0800c9fc <_fini>:
 800c9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9fe:	bf00      	nop
 800ca00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca02:	bc08      	pop	{r3}
 800ca04:	469e      	mov	lr, r3
 800ca06:	4770      	bx	lr

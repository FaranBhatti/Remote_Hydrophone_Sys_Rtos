
RTOS_Hydrophone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001052c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013230  080107e0  080107e0  000207e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08023a10  08023a10  00033a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08023a18  08023a18  00033a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08023a1c  08023a1c  00033a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  08023a20  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00012bbc  2400007c  08023a9c  0004007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24012c38  08023a9c  00042c38  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0004007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f886  00000000  00000000  000400aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005267  00000000  00000000  0006f930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e40  00000000  00000000  00074b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001c60  00000000  00000000  000769d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005417  00000000  00000000  00078638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000263ae  00000000  00000000  0007da4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016093f  00000000  00000000  000a3dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000c5  00000000  00000000  0020473c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000081fc  00000000  00000000  00204804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    000038ec  00000000  00000000  0020ca00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400007c 	.word	0x2400007c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080107c4 	.word	0x080107c4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000080 	.word	0x24000080
 80002ec:	080107c4 	.word	0x080107c4

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f001 f81a 	bl	8001630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f86a 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 fa80 	bl	8000b04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000604:	f000 fa5e 	bl	8000ac4 <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 8000608:	f000 fa54 	bl	8000ab4 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 800060c:	f000 f8e0 	bl	80007d0 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000610:	f000 fa04 	bl	8000a1c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000614:	f000 f956 	bl	80008c4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000618:	481f      	ldr	r0, [pc, #124]	; (8000698 <main+0xa4>)
 800061a:	f008 ffdd 	bl	80095d8 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 800061e:	2100      	movs	r1, #0
 8000620:	481d      	ldr	r0, [pc, #116]	; (8000698 <main+0xa4>)
 8000622:	f009 f923 	bl	800986c <HAL_TIM_OC_Start>

  float32_t maxValue;

  // Initialize RFFT
  arm_rfft_fast_init_f32(&fft_handler, adc_buff_size);
 8000626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062a:	481c      	ldr	r0, [pc, #112]	; (800069c <main+0xa8>)
 800062c:	f00f f84a 	bl	800f6c4 <arm_rfft_fast_init_f32>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000630:	f00b fc82 	bl	800bf38 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of AudioCapSem01 */
  AudioCapSem01Handle = osSemaphoreNew(1, 1, &AudioCapSem01_attributes);
 8000634:	4a1a      	ldr	r2, [pc, #104]	; (80006a0 <main+0xac>)
 8000636:	2101      	movs	r1, #1
 8000638:	2001      	movs	r0, #1
 800063a:	f00b fd74 	bl	800c126 <osSemaphoreNew>
 800063e:	4603      	mov	r3, r0
 8000640:	4a18      	ldr	r2, [pc, #96]	; (80006a4 <main+0xb0>)
 8000642:	6013      	str	r3, [r2, #0]

  /* creation of FFTSem02 */
  FFTSem02Handle = osSemaphoreNew(1, 1, &FFTSem02_attributes);
 8000644:	4a18      	ldr	r2, [pc, #96]	; (80006a8 <main+0xb4>)
 8000646:	2101      	movs	r1, #1
 8000648:	2001      	movs	r0, #1
 800064a:	f00b fd6c 	bl	800c126 <osSemaphoreNew>
 800064e:	4603      	mov	r3, r0
 8000650:	4a16      	ldr	r2, [pc, #88]	; (80006ac <main+0xb8>)
 8000652:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  // Initialize FFTSem value to 0 before starting code
  osSemaphoreAcquire(FFTSem02Handle, osWaitForever);
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <main+0xb8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f04f 31ff 	mov.w	r1, #4294967295
 800065c:	4618      	mov	r0, r3
 800065e:	f00b fdeb 	bl	800c238 <osSemaphoreAcquire>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000662:	4a13      	ldr	r2, [pc, #76]	; (80006b0 <main+0xbc>)
 8000664:	2100      	movs	r1, #0
 8000666:	4813      	ldr	r0, [pc, #76]	; (80006b4 <main+0xc0>)
 8000668:	f00b fcb0 	bl	800bfcc <osThreadNew>
 800066c:	4603      	mov	r3, r0
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <main+0xc4>)
 8000670:	6013      	str	r3, [r2, #0]

  /* creation of AudioCapTask */
  AudioCapTaskHandle = osThreadNew(StartAudioCapTask, NULL, &AudioCapTask_attributes);
 8000672:	4a12      	ldr	r2, [pc, #72]	; (80006bc <main+0xc8>)
 8000674:	2100      	movs	r1, #0
 8000676:	4812      	ldr	r0, [pc, #72]	; (80006c0 <main+0xcc>)
 8000678:	f00b fca8 	bl	800bfcc <osThreadNew>
 800067c:	4603      	mov	r3, r0
 800067e:	4a11      	ldr	r2, [pc, #68]	; (80006c4 <main+0xd0>)
 8000680:	6013      	str	r3, [r2, #0]

  /* creation of FFTTask */
  FFTTaskHandle = osThreadNew(StartFFTTask, NULL, &FFTTask_attributes);
 8000682:	4a11      	ldr	r2, [pc, #68]	; (80006c8 <main+0xd4>)
 8000684:	2100      	movs	r1, #0
 8000686:	4811      	ldr	r0, [pc, #68]	; (80006cc <main+0xd8>)
 8000688:	f00b fca0 	bl	800bfcc <osThreadNew>
 800068c:	4603      	mov	r3, r0
 800068e:	4a10      	ldr	r2, [pc, #64]	; (80006d0 <main+0xdc>)
 8000690:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000692:	f00b fc75 	bl	800bf80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000696:	e7fe      	b.n	8000696 <main+0xa2>
 8000698:	24000174 	.word	0x24000174
 800069c:	2400e280 	.word	0x2400e280
 80006a0:	080108a4 	.word	0x080108a4
 80006a4:	24000260 	.word	0x24000260
 80006a8:	080108b4 	.word	0x080108b4
 80006ac:	24000264 	.word	0x24000264
 80006b0:	08010838 	.word	0x08010838
 80006b4:	08000f71 	.word	0x08000f71
 80006b8:	24000254 	.word	0x24000254
 80006bc:	0801085c 	.word	0x0801085c
 80006c0:	08000f91 	.word	0x08000f91
 80006c4:	24000258 	.word	0x24000258
 80006c8:	08010880 	.word	0x08010880
 80006cc:	08001031 	.word	0x08001031
 80006d0:	2400025c 	.word	0x2400025c

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b09c      	sub	sp, #112	; 0x70
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006de:	224c      	movs	r2, #76	; 0x4c
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f00f ffb4 	bl	8010650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2220      	movs	r2, #32
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f00f ffae 	bl	8010650 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80006f4:	4b34      	ldr	r3, [pc, #208]	; (80007c8 <SystemClock_Config+0xf4>)
 80006f6:	f04f 32ff 	mov.w	r2, #4294967295
 80006fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006fe:	2004      	movs	r0, #4
 8000700:	f005 faae 	bl	8005c60 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000704:	2300      	movs	r3, #0
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	4b30      	ldr	r3, [pc, #192]	; (80007cc <SystemClock_Config+0xf8>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a2f      	ldr	r2, [pc, #188]	; (80007cc <SystemClock_Config+0xf8>)
 800070e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b2d      	ldr	r3, [pc, #180]	; (80007cc <SystemClock_Config+0xf8>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000720:	bf00      	nop
 8000722:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <SystemClock_Config+0xf8>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800072a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800072e:	d1f8      	bne.n	8000722 <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <SystemClock_Config+0xf4>)
 8000732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000734:	f023 0303 	bic.w	r3, r3, #3
 8000738:	4a23      	ldr	r2, [pc, #140]	; (80007c8 <SystemClock_Config+0xf4>)
 800073a:	f043 0302 	orr.w	r3, r3, #2
 800073e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000740:	2321      	movs	r3, #33	; 0x21
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000744:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800074a:	2301      	movs	r3, #1
 800074c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000752:	2302      	movs	r3, #2
 8000754:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000756:	2301      	movs	r3, #1
 8000758:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800075a:	2318      	movs	r3, #24
 800075c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800075e:	2302      	movs	r3, #2
 8000760:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000762:	2304      	movs	r3, #4
 8000764:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800076a:	230c      	movs	r3, #12
 800076c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800076e:	2300      	movs	r3, #0
 8000770:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077a:	4618      	mov	r0, r3
 800077c:	f005 faca 	bl	8005d14 <HAL_RCC_OscConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000786:	f000 fc8c 	bl	80010a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	233f      	movs	r3, #63	; 0x3f
 800078c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078e:	2303      	movs	r3, #3
 8000790:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800079a:	2340      	movs	r3, #64	; 0x40
 800079c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800079e:	2340      	movs	r3, #64	; 0x40
 80007a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007a8:	2340      	movs	r3, #64	; 0x40
 80007aa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2102      	movs	r1, #2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f005 fee1 	bl	8006578 <HAL_RCC_ClockConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80007bc:	f000 fc71 	bl	80010a2 <Error_Handler>
  }
}
 80007c0:	bf00      	nop
 80007c2:	3770      	adds	r7, #112	; 0x70
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	58024400 	.word	0x58024400
 80007cc:	58024800 	.word	0x58024800

080007d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007e2:	463b      	mov	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
 80007f0:	615a      	str	r2, [r3, #20]
 80007f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007f4:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <MX_ADC1_Init+0xe8>)
 80007f6:	4a31      	ldr	r2, [pc, #196]	; (80008bc <MX_ADC1_Init+0xec>)
 80007f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007fa:	4b2f      	ldr	r3, [pc, #188]	; (80008b8 <MX_ADC1_Init+0xe8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000800:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <MX_ADC1_Init+0xe8>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000806:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <MX_ADC1_Init+0xe8>)
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080c:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <MX_ADC1_Init+0xe8>)
 800080e:	2204      	movs	r2, #4
 8000810:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000812:	4b29      	ldr	r3, [pc, #164]	; (80008b8 <MX_ADC1_Init+0xe8>)
 8000814:	2200      	movs	r2, #0
 8000816:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000818:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <MX_ADC1_Init+0xe8>)
 800081a:	2200      	movs	r2, #0
 800081c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800081e:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <MX_ADC1_Init+0xe8>)
 8000820:	2201      	movs	r2, #1
 8000822:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000824:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <MX_ADC1_Init+0xe8>)
 8000826:	2200      	movs	r2, #0
 8000828:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <MX_ADC1_Init+0xe8>)
 800082c:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000832:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_ADC1_Init+0xe8>)
 8000834:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000838:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 800083a:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_ADC1_Init+0xe8>)
 800083c:	2201      	movs	r2, #1
 800083e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <MX_ADC1_Init+0xe8>)
 8000842:	2200      	movs	r2, #0
 8000844:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_ADC1_Init+0xe8>)
 8000848:	2200      	movs	r2, #0
 800084a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_ADC1_Init+0xe8>)
 800084e:	2200      	movs	r2, #0
 8000850:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000854:	4818      	ldr	r0, [pc, #96]	; (80008b8 <MX_ADC1_Init+0xe8>)
 8000856:	f001 f97f 	bl	8001b58 <HAL_ADC_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000860:	f000 fc1f 	bl	80010a2 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	4812      	ldr	r0, [pc, #72]	; (80008b8 <MX_ADC1_Init+0xe8>)
 8000870:	f002 f9fc 	bl	8002c6c <HAL_ADCEx_MultiModeConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800087a:	f000 fc12 	bl	80010a2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_ADC1_Init+0xf0>)
 8000880:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000882:	2306      	movs	r3, #6
 8000884:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800088a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800088e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000890:	2304      	movs	r3, #4
 8000892:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089c:	463b      	mov	r3, r7
 800089e:	4619      	mov	r1, r3
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_ADC1_Init+0xe8>)
 80008a2:	f001 fbdd 	bl	8002060 <HAL_ADC_ConfigChannel>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80008ac:	f000 fbf9 	bl	80010a2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	; 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	24000098 	.word	0x24000098
 80008bc:	40022000 	.word	0x40022000
 80008c0:	3ef08000 	.word	0x3ef08000

080008c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b09c      	sub	sp, #112	; 0x70
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
 80008f4:	615a      	str	r2, [r3, #20]
 80008f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2234      	movs	r2, #52	; 0x34
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f00f fea6 	bl	8010650 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000904:	4b43      	ldr	r3, [pc, #268]	; (8000a14 <MX_TIM1_Init+0x150>)
 8000906:	4a44      	ldr	r2, [pc, #272]	; (8000a18 <MX_TIM1_Init+0x154>)
 8000908:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800090a:	4b42      	ldr	r3, [pc, #264]	; (8000a14 <MX_TIM1_Init+0x150>)
 800090c:	2200      	movs	r2, #0
 800090e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000910:	4b40      	ldr	r3, [pc, #256]	; (8000a14 <MX_TIM1_Init+0x150>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6000-1;
 8000916:	4b3f      	ldr	r3, [pc, #252]	; (8000a14 <MX_TIM1_Init+0x150>)
 8000918:	f241 726f 	movw	r2, #5999	; 0x176f
 800091c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091e:	4b3d      	ldr	r3, [pc, #244]	; (8000a14 <MX_TIM1_Init+0x150>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000924:	4b3b      	ldr	r3, [pc, #236]	; (8000a14 <MX_TIM1_Init+0x150>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092a:	4b3a      	ldr	r3, [pc, #232]	; (8000a14 <MX_TIM1_Init+0x150>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000930:	4838      	ldr	r0, [pc, #224]	; (8000a14 <MX_TIM1_Init+0x150>)
 8000932:	f008 fdf9 	bl	8009528 <HAL_TIM_Base_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800093c:	f000 fbb1 	bl	80010a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000944:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000946:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800094a:	4619      	mov	r1, r3
 800094c:	4831      	ldr	r0, [pc, #196]	; (8000a14 <MX_TIM1_Init+0x150>)
 800094e:	f009 fa35 	bl	8009dbc <HAL_TIM_ConfigClockSource>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000958:	f000 fba3 	bl	80010a2 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800095c:	482d      	ldr	r0, [pc, #180]	; (8000a14 <MX_TIM1_Init+0x150>)
 800095e:	f008 ff23 	bl	80097a8 <HAL_TIM_OC_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000968:	f000 fb9b 	bl	80010a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800096c:	2320      	movs	r3, #32
 800096e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000978:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800097c:	4619      	mov	r1, r3
 800097e:	4825      	ldr	r0, [pc, #148]	; (8000a14 <MX_TIM1_Init+0x150>)
 8000980:	f009 ff70 	bl	800a864 <HAL_TIMEx_MasterConfigSynchronization>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800098a:	f000 fb8a 	bl	80010a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800098e:	2330      	movs	r3, #48	; 0x30
 8000990:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000996:	2300      	movs	r3, #0
 8000998:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800099a:	2300      	movs	r3, #0
 800099c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ae:	2200      	movs	r2, #0
 80009b0:	4619      	mov	r1, r3
 80009b2:	4818      	ldr	r0, [pc, #96]	; (8000a14 <MX_TIM1_Init+0x150>)
 80009b4:	f009 f988 	bl	8009cc8 <HAL_TIM_OC_ConfigChannel>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80009be:	f000 fb70 	bl	80010a2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	4619      	mov	r1, r3
 80009f6:	4807      	ldr	r0, [pc, #28]	; (8000a14 <MX_TIM1_Init+0x150>)
 80009f8:	f009 ffc2 	bl	800a980 <HAL_TIMEx_ConfigBreakDeadTime>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000a02:	f000 fb4e 	bl	80010a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a06:	4803      	ldr	r0, [pc, #12]	; (8000a14 <MX_TIM1_Init+0x150>)
 8000a08:	f000 fc36 	bl	8001278 <HAL_TIM_MspPostInit>

}
 8000a0c:	bf00      	nop
 8000a0e:	3770      	adds	r7, #112	; 0x70
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	24000174 	.word	0x24000174
 8000a18:	40010000 	.word	0x40010000

08000a1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a22:	4a23      	ldr	r2, [pc, #140]	; (8000ab0 <MX_USART3_UART_Init+0x94>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a64:	4811      	ldr	r0, [pc, #68]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a66:	f00a f849 	bl	800aafc <HAL_UART_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a70:	f000 fb17 	bl	80010a2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a74:	2100      	movs	r1, #0
 8000a76:	480d      	ldr	r0, [pc, #52]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a78:	f00b f94f 	bl	800bd1a <HAL_UARTEx_SetTxFifoThreshold>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a82:	f000 fb0e 	bl	80010a2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a86:	2100      	movs	r1, #0
 8000a88:	4808      	ldr	r0, [pc, #32]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a8a:	f00b f984 	bl	800bd96 <HAL_UARTEx_SetRxFifoThreshold>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a94:	f000 fb05 	bl	80010a2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_USART3_UART_Init+0x90>)
 8000a9a:	f00b f905 	bl	800bca8 <HAL_UARTEx_DisableFifoMode>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000aa4:	f000 fafd 	bl	80010a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	240001c0 	.word	0x240001c0
 8000ab0:	40004800 	.word	0x40004800

08000ab4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <MX_DMA_Init+0x3c>)
 8000acc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000ad0:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <MX_DMA_Init+0x3c>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_DMA_Init+0x3c>)
 8000adc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2105      	movs	r1, #5
 8000aec:	200b      	movs	r0, #11
 8000aee:	f002 fa11 	bl	8002f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000af2:	200b      	movs	r0, #11
 8000af4:	f002 fa28 	bl	8002f48 <HAL_NVIC_EnableIRQ>

}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	58024400 	.word	0x58024400

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	4b80      	ldr	r3, [pc, #512]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000b1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b20:	4a7e      	ldr	r2, [pc, #504]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b2a:	4b7c      	ldr	r3, [pc, #496]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000b2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b30:	f003 0304 	and.w	r3, r3, #4
 8000b34:	623b      	str	r3, [r7, #32]
 8000b36:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b38:	4b78      	ldr	r3, [pc, #480]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000b3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b3e:	4a77      	ldr	r2, [pc, #476]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000b40:	f043 0320 	orr.w	r3, r3, #32
 8000b44:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b48:	4b74      	ldr	r3, [pc, #464]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000b4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b4e:	f003 0320 	and.w	r3, r3, #32
 8000b52:	61fb      	str	r3, [r7, #28]
 8000b54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b56:	4b71      	ldr	r3, [pc, #452]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000b58:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b5c:	4a6f      	ldr	r2, [pc, #444]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b62:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b66:	4b6d      	ldr	r3, [pc, #436]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000b68:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b70:	61bb      	str	r3, [r7, #24]
 8000b72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	4b69      	ldr	r3, [pc, #420]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000b76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b7a:	4a68      	ldr	r2, [pc, #416]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b84:	4b65      	ldr	r3, [pc, #404]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000b86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b92:	4b62      	ldr	r3, [pc, #392]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000b94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b98:	4a60      	ldr	r2, [pc, #384]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000b9a:	f043 0310 	orr.w	r3, r3, #16
 8000b9e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ba2:	4b5e      	ldr	r3, [pc, #376]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000ba4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba8:	f003 0310 	and.w	r3, r3, #16
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb0:	4b5a      	ldr	r3, [pc, #360]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000bb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bb6:	4a59      	ldr	r2, [pc, #356]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bc0:	4b56      	ldr	r3, [pc, #344]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000bc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bce:	4b53      	ldr	r3, [pc, #332]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000bd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bd4:	4a51      	ldr	r2, [pc, #324]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000bd6:	f043 0308 	orr.w	r3, r3, #8
 8000bda:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bde:	4b4f      	ldr	r3, [pc, #316]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000be0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000be4:	f003 0308 	and.w	r3, r3, #8
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bec:	4b4b      	ldr	r3, [pc, #300]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000bee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bf2:	4a4a      	ldr	r2, [pc, #296]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bfc:	4b47      	ldr	r3, [pc, #284]	; (8000d1c <MX_GPIO_Init+0x218>)
 8000bfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c10:	4843      	ldr	r0, [pc, #268]	; (8000d20 <MX_GPIO_Init+0x21c>)
 8000c12:	f004 fff1 	bl	8005bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c1c:	4841      	ldr	r0, [pc, #260]	; (8000d24 <MX_GPIO_Init+0x220>)
 8000c1e:	f004 ffeb 	bl	8005bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2102      	movs	r1, #2
 8000c26:	4840      	ldr	r0, [pc, #256]	; (8000d28 <MX_GPIO_Init+0x224>)
 8000c28:	f004 ffe6 	bl	8005bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	483a      	ldr	r0, [pc, #232]	; (8000d2c <MX_GPIO_Init+0x228>)
 8000c42:	f004 fe29 	bl	8005898 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4830      	ldr	r0, [pc, #192]	; (8000d20 <MX_GPIO_Init+0x21c>)
 8000c60:	f004 fe1a 	bl	8005898 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000c64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4829      	ldr	r0, [pc, #164]	; (8000d24 <MX_GPIO_Init+0x220>)
 8000c7e:	f004 fe0b 	bl	8005898 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c82:	2380      	movs	r3, #128	; 0x80
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4826      	ldr	r0, [pc, #152]	; (8000d30 <MX_GPIO_Init+0x22c>)
 8000c98:	f004 fdfe 	bl	8005898 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4820      	ldr	r0, [pc, #128]	; (8000d34 <MX_GPIO_Init+0x230>)
 8000cb2:	f004 fdf1 	bl	8005898 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000cc8:	230a      	movs	r3, #10
 8000cca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4818      	ldr	r0, [pc, #96]	; (8000d34 <MX_GPIO_Init+0x230>)
 8000cd4:	f004 fde0 	bl	8005898 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000cd8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4810      	ldr	r0, [pc, #64]	; (8000d34 <MX_GPIO_Init+0x230>)
 8000cf2:	f004 fdd1 	bl	8005898 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4806      	ldr	r0, [pc, #24]	; (8000d28 <MX_GPIO_Init+0x224>)
 8000d0e:	f004 fdc3 	bl	8005898 <HAL_GPIO_Init>

}
 8000d12:	bf00      	nop
 8000d14:	3738      	adds	r7, #56	; 0x38
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	58024400 	.word	0x58024400
 8000d20:	58021400 	.word	0x58021400
 8000d24:	58020400 	.word	0x58020400
 8000d28:	58021000 	.word	0x58021000
 8000d2c:	58020800 	.word	0x58020800
 8000d30:	58021800 	.word	0x58021800
 8000d34:	58020000 	.word	0x58020000

08000d38 <FrequencyDetected>:
 * @brief Function detects frequencies between (0 - 8kHz) and returns boolean
 * @param
 * @retval boolean true or false
 */
bool FrequencyDetected(float32_t data[adc_buff_size])
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	// Process the data through the RFFT module. Will output elements that are Real and Imaginary
	// in fft_bufer as a single array same size as data[].
	//arm_rfft_fast_f32(&fft_handler, (float32_t *) data, fft_buffer, ifftFlag);
	arm_rfft_fast_f32(&fft_handler, adc_buffer_float, fft_buffer, ifftFlag);
 8000d40:	4b4e      	ldr	r3, [pc, #312]	; (8000e7c <FrequencyDetected+0x144>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	4a4e      	ldr	r2, [pc, #312]	; (8000e80 <FrequencyDetected+0x148>)
 8000d48:	494e      	ldr	r1, [pc, #312]	; (8000e84 <FrequencyDetected+0x14c>)
 8000d4a:	484f      	ldr	r0, [pc, #316]	; (8000e88 <FrequencyDetected+0x150>)
 8000d4c:	f00e fda0 	bl	800f890 <arm_rfft_fast_f32>

	// Reset bin value and offset
	bin_point = 0;
 8000d50:	4b4e      	ldr	r3, [pc, #312]	; (8000e8c <FrequencyDetected+0x154>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]

	// Calculate magnitude for each bin using real and Imaginary numbers from fft_buffer output
	 for (int i=0; i< adc_buff_size; i=i+2) {
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	e04d      	b.n	8000df8 <FrequencyDetected+0xc0>

		bin[bin_point] =((Magnitude(fft_buffer[i], fft_buffer[i+1])))-offset;
 8000d5c:	4a48      	ldr	r2, [pc, #288]	; (8000e80 <FrequencyDetected+0x148>)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	edd3 7a00 	vldr	s15, [r3]
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	4a44      	ldr	r2, [pc, #272]	; (8000e80 <FrequencyDetected+0x148>)
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	ed93 7a00 	vldr	s14, [r3]
 8000d76:	eef0 0a47 	vmov.f32	s1, s14
 8000d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d7e:	f000 f893 	bl	8000ea8 <Magnitude>
 8000d82:	eeb0 7a40 	vmov.f32	s14, s0
 8000d86:	4b42      	ldr	r3, [pc, #264]	; (8000e90 <FrequencyDetected+0x158>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	ee07 3a90 	vmov	s15, r3
 8000d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d92:	4b3e      	ldr	r3, [pc, #248]	; (8000e8c <FrequencyDetected+0x154>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d9a:	4a3e      	ldr	r2, [pc, #248]	; (8000e94 <FrequencyDetected+0x15c>)
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	edc3 7a00 	vstr	s15, [r3]
		// bin[bin_point has chance of rolling back if magnitude is not greater than offset (165)
		// If bin[point_point] rolls back set to 0
		if ((bin[bin_point] < 0) || (bin[bin_point] > 5000))
 8000da4:	4b39      	ldr	r3, [pc, #228]	; (8000e8c <FrequencyDetected+0x154>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a3a      	ldr	r2, [pc, #232]	; (8000e94 <FrequencyDetected+0x15c>)
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	edd3 7a00 	vldr	s15, [r3]
 8000db2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dba:	d40d      	bmi.n	8000dd8 <FrequencyDetected+0xa0>
 8000dbc:	4b33      	ldr	r3, [pc, #204]	; (8000e8c <FrequencyDetected+0x154>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a34      	ldr	r2, [pc, #208]	; (8000e94 <FrequencyDetected+0x15c>)
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	4413      	add	r3, r2
 8000dc6:	edd3 7a00 	vldr	s15, [r3]
 8000dca:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8000e98 <FrequencyDetected+0x160>
 8000dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd6:	dd07      	ble.n	8000de8 <FrequencyDetected+0xb0>
		{
			bin[bin_point]=0;
 8000dd8:	4b2c      	ldr	r3, [pc, #176]	; (8000e8c <FrequencyDetected+0x154>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a2d      	ldr	r2, [pc, #180]	; (8000e94 <FrequencyDetected+0x15c>)
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4413      	add	r3, r2
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
		}
		bin_point++;
 8000de8:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <FrequencyDetected+0x154>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <FrequencyDetected+0x154>)
 8000df0:	6013      	str	r3, [r2, #0]
	 for (int i=0; i< adc_buff_size; i=i+2) {
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	3302      	adds	r3, #2
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dfe:	dbad      	blt.n	8000d5c <FrequencyDetected+0x24>
	 }
	// Negate DC value
	bin[0] = 0;
 8000e00:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <FrequencyDetected+0x15c>)
 8000e02:	f04f 0200 	mov.w	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]

	// Check highest magnitude in bins
	arm_max_f32(bin, FFT_SIZE, &maxValue, &maxIndex);
 8000e08:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <FrequencyDetected+0x164>)
 8000e0a:	4a25      	ldr	r2, [pc, #148]	; (8000ea0 <FrequencyDetected+0x168>)
 8000e0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e10:	4820      	ldr	r0, [pc, #128]	; (8000e94 <FrequencyDetected+0x15c>)
 8000e12:	f00e fb23 	bl	800f45c <arm_max_f32>

	// Correct index
	maxIndex += 1;
 8000e16:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <FrequencyDetected+0x164>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	4a1f      	ldr	r2, [pc, #124]	; (8000e9c <FrequencyDetected+0x164>)
 8000e1e:	6013      	str	r3, [r2, #0]

	bool threshold_crossed = false;
 8000e20:	2300      	movs	r3, #0
 8000e22:	74fb      	strb	r3, [r7, #19]

	// Going through bin array, checking if a magnitude crosses threshold of 150
	for(int j=0; j < (adc_buff_size/2); j++){
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	e012      	b.n	8000e50 <FrequencyDetected+0x118>

		if(bin[j] >= 170)
 8000e2a:	4a1a      	ldr	r2, [pc, #104]	; (8000e94 <FrequencyDetected+0x15c>)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	edd3 7a00 	vldr	s15, [r3]
 8000e36:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000ea4 <FrequencyDetected+0x16c>
 8000e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e42:	db02      	blt.n	8000e4a <FrequencyDetected+0x112>
		{
			threshold_crossed = true;
 8000e44:	2301      	movs	r3, #1
 8000e46:	74fb      	strb	r3, [r7, #19]
			break;
 8000e48:	e006      	b.n	8000e58 <FrequencyDetected+0x120>
	for(int j=0; j < (adc_buff_size/2); j++){
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e56:	dbe8      	blt.n	8000e2a <FrequencyDetected+0xf2>
		}
	}

	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
	if(threshold_crossed == true)
 8000e58:	7cfb      	ldrb	r3, [r7, #19]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <FrequencyDetected+0x12a>
	{
		   return true;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e007      	b.n	8000e72 <FrequencyDetected+0x13a>
	}
	// if highest magnitude is at desired bin (wanted frequency) return true
	else if(threshold_crossed == false)
 8000e62:	7cfb      	ldrb	r3, [r7, #19]
 8000e64:	f083 0301 	eor.w	r3, r3, #1
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <FrequencyDetected+0x13a>
		{
			return false;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e7ff      	b.n	8000e72 <FrequencyDetected+0x13a>
		}
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2400e278 	.word	0x2400e278
 8000e80:	2400826c 	.word	0x2400826c
 8000e84:	24004268 	.word	0x24004268
 8000e88:	2400e280 	.word	0x2400e280
 8000e8c:	2400e26c 	.word	0x2400e26c
 8000e90:	24000000 	.word	0x24000000
 8000e94:	2400c26c 	.word	0x2400c26c
 8000e98:	459c4000 	.word	0x459c4000
 8000e9c:	2400e274 	.word	0x2400e274
 8000ea0:	2400e270 	.word	0x2400e270
 8000ea4:	432a0000 	.word	0x432a0000

08000ea8 <Magnitude>:
 * @brief Returns magnitude of FFT buffer outputs
 * @param Real & Complex elements of FFT output
 * @retval Magnitude at specific frequency
 */
float32_t Magnitude(float32_t real, float32_t compl)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	ed87 0a01 	vstr	s0, [r7, #4]
 8000eb2:	edc7 0a00 	vstr	s1, [r7]

	float32_t sqrt_input = (real*real + compl*compl);
 8000eb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eba:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ebe:	edd7 7a00 	vldr	s15, [r7]
 8000ec2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eca:	edc7 7a07 	vstr	s15, [r7, #28]
	float32_t sqrt_output = 0;
 8000ece:	f04f 0300 	mov.w	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
	float32_t magnitude = 0;
 8000ed4:	f04f 0300 	mov.w	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
	float32_t log_output = 0;
 8000eda:	f04f 0300 	mov.w	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	f107 0308 	add.w	r3, r7, #8
 8000ee8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000eea:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef6:	db09      	blt.n	8000f0c <Magnitude+0x64>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8000ef8:	ed97 0a04 	vldr	s0, [r7, #16]
 8000efc:	f00f fc16 	bl	801072c <sqrtf>
 8000f00:	eef0 7a40 	vmov.f32	s15, s0
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8000f0a:	e004      	b.n	8000f16 <Magnitude+0x6e>
    }
    else
    {
      *pOut = 0.0f;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000f14:	bf00      	nop

	arm_sqrt_f32(sqrt_input, &sqrt_output);
	log_output = logf(sqrt_output);
 8000f16:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f1e:	f00f fb9f 	bl	8010660 <logf>
 8000f22:	ed87 0a05 	vstr	s0, [r7, #20]
	magnitude = 20* (log_output);
 8000f26:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f2a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000f2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f32:	edc7 7a06 	vstr	s15, [r7, #24]
	return magnitude;
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	ee07 3a90 	vmov	s15, r3
}
 8000f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f40:	3720      	adds	r7, #32
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_ADC_ConvCpltCallback>:
 * @brief This function executes when adc buffer is full setting flag true
 * @param
 * @retval
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000f50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x20>)
 8000f56:	f004 fe68 	bl	8005c2a <HAL_GPIO_TogglePin>
	flag_value = true;			// Set buffer conversion complete flag
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x24>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, adc_buff_size);
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	58020800 	.word	0x58020800
 8000f6c:	24008268 	.word	0x24008268

08000f70 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	// Toggling LD3 (red) to see if it ever enters this default state
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000f78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <StartDefaultTask+0x1c>)
 8000f7e:	f004 fe54 	bl	8005c2a <HAL_GPIO_TogglePin>
    osDelay(500); /* Insert delay of 50ms */
 8000f82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f86:	f00b f8b3 	bl	800c0f0 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000f8a:	e7f5      	b.n	8000f78 <StartDefaultTask+0x8>
 8000f8c:	58020400 	.word	0x58020400

08000f90 <StartAudioCapTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAudioCapTask */
void StartAudioCapTask(void *argument)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAudioCapTask */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(AudioCapSem01Handle, osWaitForever);
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <StartAudioCapTask+0x84>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f00b f949 	bl	800c238 <osSemaphoreAcquire>

	  /* Test Pin */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	481b      	ldr	r0, [pc, #108]	; (8001018 <StartAudioCapTask+0x88>)
 8000faa:	f004 fe3e 	bl	8005c2a <HAL_GPIO_TogglePin>
	  //osDelay(500);

	  // Start ADC
	  HAL_ADC_Start_DMA(&hadc1, adc_buffer, adc_buff_size);
 8000fae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fb2:	491a      	ldr	r1, [pc, #104]	; (800101c <StartAudioCapTask+0x8c>)
 8000fb4:	481a      	ldr	r0, [pc, #104]	; (8001020 <StartAudioCapTask+0x90>)
 8000fb6:	f000 ff29 	bl	8001e0c <HAL_ADC_Start_DMA>

      // HAL_DMA_PollForTransfer(&hadc1, adc_buff_size -1, HAL_MAX_DELAY);

	  // Wait for adc_buffer to fill
	  while(flag_value != true);
 8000fba:	bf00      	nop
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <StartAudioCapTask+0x94>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	f083 0301 	eor.w	r3, r3, #1
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f8      	bne.n	8000fbc <StartAudioCapTask+0x2c>
	  flag_value = false;
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <StartAudioCapTask+0x94>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]

	  // Stop ADC
	  HAL_ADC_Stop_DMA(&hadc1);
 8000fd0:	4813      	ldr	r0, [pc, #76]	; (8001020 <StartAudioCapTask+0x90>)
 8000fd2:	f000 ffcf 	bl	8001f74 <HAL_ADC_Stop_DMA>

	  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);

	  // Call FFT function to detect frequencies
	  for(int i = 0; i < adc_buff_size; i++){
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	e010      	b.n	8000ffe <StartAudioCapTask+0x6e>
		  adc_buffer_float[i] = (float32_t)adc_buffer[i];
 8000fdc:	4a0f      	ldr	r2, [pc, #60]	; (800101c <StartAudioCapTask+0x8c>)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fec:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <StartAudioCapTask+0x98>)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	edc3 7a00 	vstr	s15, [r3]
	  for(int i = 0; i < adc_buff_size; i++){
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001004:	dbea      	blt.n	8000fdc <StartAudioCapTask+0x4c>
	  }
	  osSemaphoreRelease(FFTSem02Handle);
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <StartAudioCapTask+0x9c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f00b f966 	bl	800c2dc <osSemaphoreRelease>
	  osSemaphoreAcquire(AudioCapSem01Handle, osWaitForever);
 8001010:	e7c2      	b.n	8000f98 <StartAudioCapTask+0x8>
 8001012:	bf00      	nop
 8001014:	24000260 	.word	0x24000260
 8001018:	58020400 	.word	0x58020400
 800101c:	24000268 	.word	0x24000268
 8001020:	24000098 	.word	0x24000098
 8001024:	24008268 	.word	0x24008268
 8001028:	24004268 	.word	0x24004268
 800102c:	24000264 	.word	0x24000264

08001030 <StartFFTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFFTTask */
void StartFFTTask(void *argument)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFFTTask */
  /* Infinite loop */
  for(;;)
  {
	 osSemaphoreAcquire(FFTSem02Handle, osWaitForever);
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <StartFFTTask+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	4618      	mov	r0, r3
 8001042:	f00b f8f9 	bl	800c238 <osSemaphoreAcquire>
	 HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8001046:	2102      	movs	r1, #2
 8001048:	480a      	ldr	r0, [pc, #40]	; (8001074 <StartFFTTask+0x44>)
 800104a:	f004 fdee 	bl	8005c2a <HAL_GPIO_TogglePin>
	 //osDelay(500);

	 /* Reset frequency_detected bool */
	 frequency_detected = false;
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <StartFFTTask+0x48>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]

	 /* Call FFT function that returns true if freqs between 0-8kHz are detected */
	 frequency_detected = FrequencyDetected(adc_buffer_float);
 8001054:	4809      	ldr	r0, [pc, #36]	; (800107c <StartFFTTask+0x4c>)
 8001056:	f7ff fe6f 	bl	8000d38 <FrequencyDetected>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <StartFFTTask+0x48>)
 8001060:	701a      	strb	r2, [r3, #0]
	 else {
	 osSemaphoreRelease(AudioCapSem01Handle);
	 }
	 */

	 osSemaphoreRelease(AudioCapSem01Handle);
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <StartFFTTask+0x50>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f00b f938 	bl	800c2dc <osSemaphoreRelease>
	 osSemaphoreAcquire(FFTSem02Handle, osWaitForever);
 800106c:	e7e4      	b.n	8001038 <StartFFTTask+0x8>
 800106e:	bf00      	nop
 8001070:	24000264 	.word	0x24000264
 8001074:	58021000 	.word	0x58021000
 8001078:	2400e27c 	.word	0x2400e27c
 800107c:	24004268 	.word	0x24004268
 8001080:	24000260 	.word	0x24000260

08001084 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001094:	d101      	bne.n	800109a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001096:	f000 fb07 	bl	80016a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a6:	b672      	cpsid	i
}
 80010a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010aa:	e7fe      	b.n	80010aa <Error_Handler+0x8>

080010ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <HAL_MspInit+0x38>)
 80010b4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80010b8:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_MspInit+0x38>)
 80010ba:	f043 0302 	orr.w	r3, r3, #2
 80010be:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <HAL_MspInit+0x38>)
 80010c4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010d0:	2200      	movs	r2, #0
 80010d2:	210f      	movs	r1, #15
 80010d4:	f06f 0001 	mvn.w	r0, #1
 80010d8:	f001 ff1c 	bl	8002f14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	58024400 	.word	0x58024400

080010e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0ba      	sub	sp, #232	; 0xe8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	22c0      	movs	r2, #192	; 0xc0
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f00f faa1 	bl	8010650 <memset>
  if(hadc->Instance==ADC1)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a43      	ldr	r2, [pc, #268]	; (8001220 <HAL_ADC_MspInit+0x138>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d17e      	bne.n	8001216 <HAL_ADC_MspInit+0x12e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001118:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800111c:	f04f 0300 	mov.w	r3, #0
 8001120:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001124:	2301      	movs	r3, #1
 8001126:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001128:	2310      	movs	r3, #16
 800112a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 800112c:	2303      	movs	r3, #3
 800112e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001130:	2302      	movs	r3, #2
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001134:	2302      	movs	r3, #2
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001138:	23c0      	movs	r3, #192	; 0xc0
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800113c:	2300      	movs	r3, #0
 800113e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8001140:	2300      	movs	r3, #0
 8001142:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001144:	2300      	movs	r3, #0
 8001146:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800114a:	f107 0310 	add.w	r3, r7, #16
 800114e:	4618      	mov	r0, r3
 8001150:	f005 fde0 	bl	8006d14 <HAL_RCCEx_PeriphCLKConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 800115a:	f7ff ffa2 	bl	80010a2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800115e:	4b31      	ldr	r3, [pc, #196]	; (8001224 <HAL_ADC_MspInit+0x13c>)
 8001160:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001164:	4a2f      	ldr	r2, [pc, #188]	; (8001224 <HAL_ADC_MspInit+0x13c>)
 8001166:	f043 0320 	orr.w	r3, r3, #32
 800116a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800116e:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <HAL_ADC_MspInit+0x13c>)
 8001170:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001174:	f003 0320 	and.w	r3, r3, #32
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b29      	ldr	r3, [pc, #164]	; (8001224 <HAL_ADC_MspInit+0x13c>)
 800117e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001182:	4a28      	ldr	r2, [pc, #160]	; (8001224 <HAL_ADC_MspInit+0x13c>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <HAL_ADC_MspInit+0x13c>)
 800118e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800119a:	2308      	movs	r3, #8
 800119c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a0:	2303      	movs	r3, #3
 80011a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011b0:	4619      	mov	r1, r3
 80011b2:	481d      	ldr	r0, [pc, #116]	; (8001228 <HAL_ADC_MspInit+0x140>)
 80011b4:	f004 fb70 	bl	8005898 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80011b8:	4b1c      	ldr	r3, [pc, #112]	; (800122c <HAL_ADC_MspInit+0x144>)
 80011ba:	4a1d      	ldr	r2, [pc, #116]	; (8001230 <HAL_ADC_MspInit+0x148>)
 80011bc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_ADC_MspInit+0x144>)
 80011c0:	2209      	movs	r2, #9
 80011c2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c4:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_ADC_MspInit+0x144>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <HAL_ADC_MspInit+0x144>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_ADC_MspInit+0x144>)
 80011d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_ADC_MspInit+0x144>)
 80011da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011de:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_ADC_MspInit+0x144>)
 80011e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011e6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80011e8:	4b10      	ldr	r3, [pc, #64]	; (800122c <HAL_ADC_MspInit+0x144>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_ADC_MspInit+0x144>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011f4:	4b0d      	ldr	r3, [pc, #52]	; (800122c <HAL_ADC_MspInit+0x144>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011fa:	480c      	ldr	r0, [pc, #48]	; (800122c <HAL_ADC_MspInit+0x144>)
 80011fc:	f001 feb2 	bl	8002f64 <HAL_DMA_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_ADC_MspInit+0x122>
    {
      Error_Handler();
 8001206:	f7ff ff4c 	bl	80010a2 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a07      	ldr	r2, [pc, #28]	; (800122c <HAL_ADC_MspInit+0x144>)
 800120e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001210:	4a06      	ldr	r2, [pc, #24]	; (800122c <HAL_ADC_MspInit+0x144>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001216:	bf00      	nop
 8001218:	37e8      	adds	r7, #232	; 0xe8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40022000 	.word	0x40022000
 8001224:	58024400 	.word	0x58024400
 8001228:	58020000 	.word	0x58020000
 800122c:	240000fc 	.word	0x240000fc
 8001230:	40020010 	.word	0x40020010

08001234 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <HAL_TIM_Base_MspInit+0x3c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d10e      	bne.n	8001264 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <HAL_TIM_Base_MspInit+0x40>)
 8001248:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800124c:	4a09      	ldr	r2, [pc, #36]	; (8001274 <HAL_TIM_Base_MspInit+0x40>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <HAL_TIM_Base_MspInit+0x40>)
 8001258:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	40010000 	.word	0x40010000
 8001274:	58024400 	.word	0x58024400

08001278 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <HAL_TIM_MspPostInit+0x6c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d11f      	bne.n	80012da <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_TIM_MspPostInit+0x70>)
 800129c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012a0:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <HAL_TIM_MspPostInit+0x70>)
 80012a2:	f043 0310 	orr.w	r3, r3, #16
 80012a6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_TIM_MspPostInit+0x70>)
 80012ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012b0:	f003 0310 	and.w	r3, r3, #16
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012ca:	2301      	movs	r3, #1
 80012cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	4619      	mov	r1, r3
 80012d4:	4805      	ldr	r0, [pc, #20]	; (80012ec <HAL_TIM_MspPostInit+0x74>)
 80012d6:	f004 fadf 	bl	8005898 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012da:	bf00      	nop
 80012dc:	3720      	adds	r7, #32
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40010000 	.word	0x40010000
 80012e8:	58024400 	.word	0x58024400
 80012ec:	58021000 	.word	0x58021000

080012f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0ba      	sub	sp, #232	; 0xe8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	22c0      	movs	r2, #192	; 0xc0
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f00f f99d 	bl	8010650 <memset>
  if(huart->Instance==USART3)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a27      	ldr	r2, [pc, #156]	; (80013b8 <HAL_UART_MspInit+0xc8>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d146      	bne.n	80013ae <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001320:	f04f 0202 	mov.w	r2, #2
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	4618      	mov	r0, r3
 8001338:	f005 fcec 	bl	8006d14 <HAL_RCCEx_PeriphCLKConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001342:	f7ff feae 	bl	80010a2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <HAL_UART_MspInit+0xcc>)
 8001348:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800134c:	4a1b      	ldr	r2, [pc, #108]	; (80013bc <HAL_UART_MspInit+0xcc>)
 800134e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001352:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <HAL_UART_MspInit+0xcc>)
 8001358:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800135c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001364:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_UART_MspInit+0xcc>)
 8001366:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800136a:	4a14      	ldr	r2, [pc, #80]	; (80013bc <HAL_UART_MspInit+0xcc>)
 800136c:	f043 0308 	orr.w	r3, r3, #8
 8001370:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <HAL_UART_MspInit+0xcc>)
 8001376:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001382:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001386:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800139c:	2307      	movs	r3, #7
 800139e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <HAL_UART_MspInit+0xd0>)
 80013aa:	f004 fa75 	bl	8005898 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013ae:	bf00      	nop
 80013b0:	37e8      	adds	r7, #232	; 0xe8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40004800 	.word	0x40004800
 80013bc:	58024400 	.word	0x58024400
 80013c0:	58020c00 	.word	0x58020c00

080013c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b090      	sub	sp, #64	; 0x40
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b0f      	cmp	r3, #15
 80013d0:	d827      	bhi.n	8001422 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 80013d2:	2200      	movs	r2, #0
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	201c      	movs	r0, #28
 80013d8:	f001 fd9c 	bl	8002f14 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013dc:	201c      	movs	r0, #28
 80013de:	f001 fdb3 	bl	8002f48 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80013e2:	4a29      	ldr	r2, [pc, #164]	; (8001488 <HAL_InitTick+0xc4>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80013e8:	4b28      	ldr	r3, [pc, #160]	; (800148c <HAL_InitTick+0xc8>)
 80013ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013ee:	4a27      	ldr	r2, [pc, #156]	; (800148c <HAL_InitTick+0xc8>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80013f8:	4b24      	ldr	r3, [pc, #144]	; (800148c <HAL_InitTick+0xc8>)
 80013fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001406:	f107 0210 	add.w	r2, r7, #16
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f005 fc3d 	bl	8006c90 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001418:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800141a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d106      	bne.n	800142e <HAL_InitTick+0x6a>
 8001420:	e001      	b.n	8001426 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e02c      	b.n	8001480 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001426:	f005 fc07 	bl	8006c38 <HAL_RCC_GetPCLK1Freq>
 800142a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800142c:	e004      	b.n	8001438 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800142e:	f005 fc03 	bl	8006c38 <HAL_RCC_GetPCLK1Freq>
 8001432:	4603      	mov	r3, r0
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800143a:	4a15      	ldr	r2, [pc, #84]	; (8001490 <HAL_InitTick+0xcc>)
 800143c:	fba2 2303 	umull	r2, r3, r2, r3
 8001440:	0c9b      	lsrs	r3, r3, #18
 8001442:	3b01      	subs	r3, #1
 8001444:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <HAL_InitTick+0xd0>)
 8001448:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800144c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <HAL_InitTick+0xd0>)
 8001450:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001454:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001456:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <HAL_InitTick+0xd0>)
 8001458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800145a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800145c:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <HAL_InitTick+0xd0>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <HAL_InitTick+0xd0>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001468:	480a      	ldr	r0, [pc, #40]	; (8001494 <HAL_InitTick+0xd0>)
 800146a:	f008 f85d 	bl	8009528 <HAL_TIM_Base_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d104      	bne.n	800147e <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001474:	4807      	ldr	r0, [pc, #28]	; (8001494 <HAL_InitTick+0xd0>)
 8001476:	f008 f91f 	bl	80096b8 <HAL_TIM_Base_Start_IT>
 800147a:	4603      	mov	r3, r0
 800147c:	e000      	b.n	8001480 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	3740      	adds	r7, #64	; 0x40
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	2400000c 	.word	0x2400000c
 800148c:	58024400 	.word	0x58024400
 8001490:	431bde83 	.word	0x431bde83
 8001494:	2400e298 	.word	0x2400e298

08001498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800149c:	e7fe      	b.n	800149c <NMI_Handler+0x4>

0800149e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <HardFault_Handler+0x4>

080014a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <MemManage_Handler+0x4>

080014aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <BusFault_Handler+0x4>

080014b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <UsageFault_Handler+0x4>

080014b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <DMA1_Stream0_IRQHandler+0x10>)
 80014ca:	f002 fe63 	bl	8004194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	240000fc 	.word	0x240000fc

080014d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <TIM2_IRQHandler+0x10>)
 80014de:	f008 fad3 	bl	8009a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2400e298 	.word	0x2400e298

080014ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014f0:	4b32      	ldr	r3, [pc, #200]	; (80015bc <SystemInit+0xd0>)
 80014f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014f6:	4a31      	ldr	r2, [pc, #196]	; (80015bc <SystemInit+0xd0>)
 80014f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001500:	4b2f      	ldr	r3, [pc, #188]	; (80015c0 <SystemInit+0xd4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 030f 	and.w	r3, r3, #15
 8001508:	2b02      	cmp	r3, #2
 800150a:	d807      	bhi.n	800151c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800150c:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <SystemInit+0xd4>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f023 030f 	bic.w	r3, r3, #15
 8001514:	4a2a      	ldr	r2, [pc, #168]	; (80015c0 <SystemInit+0xd4>)
 8001516:	f043 0303 	orr.w	r3, r3, #3
 800151a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800151c:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <SystemInit+0xd8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a28      	ldr	r2, [pc, #160]	; (80015c4 <SystemInit+0xd8>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001528:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <SystemInit+0xd8>)
 800152a:	2200      	movs	r2, #0
 800152c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800152e:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <SystemInit+0xd8>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4924      	ldr	r1, [pc, #144]	; (80015c4 <SystemInit+0xd8>)
 8001534:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <SystemInit+0xdc>)
 8001536:	4013      	ands	r3, r2
 8001538:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800153a:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <SystemInit+0xd4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b00      	cmp	r3, #0
 8001544:	d007      	beq.n	8001556 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001546:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <SystemInit+0xd4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 030f 	bic.w	r3, r3, #15
 800154e:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <SystemInit+0xd4>)
 8001550:	f043 0303 	orr.w	r3, r3, #3
 8001554:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <SystemInit+0xd8>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <SystemInit+0xd8>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <SystemInit+0xd8>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001568:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <SystemInit+0xd8>)
 800156a:	4a18      	ldr	r2, [pc, #96]	; (80015cc <SystemInit+0xe0>)
 800156c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <SystemInit+0xd8>)
 8001570:	4a17      	ldr	r2, [pc, #92]	; (80015d0 <SystemInit+0xe4>)
 8001572:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <SystemInit+0xd8>)
 8001576:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <SystemInit+0xe8>)
 8001578:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <SystemInit+0xd8>)
 800157c:	2200      	movs	r2, #0
 800157e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001580:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <SystemInit+0xd8>)
 8001582:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <SystemInit+0xe8>)
 8001584:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001586:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <SystemInit+0xd8>)
 8001588:	2200      	movs	r2, #0
 800158a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800158c:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <SystemInit+0xd8>)
 800158e:	4a11      	ldr	r2, [pc, #68]	; (80015d4 <SystemInit+0xe8>)
 8001590:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <SystemInit+0xd8>)
 8001594:	2200      	movs	r2, #0
 8001596:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <SystemInit+0xd8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <SystemInit+0xd8>)
 800159e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <SystemInit+0xd8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <SystemInit+0xec>)
 80015ac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00
 80015c0:	52002000 	.word	0x52002000
 80015c4:	58024400 	.word	0x58024400
 80015c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80015cc:	02020200 	.word	0x02020200
 80015d0:	01ff0000 	.word	0x01ff0000
 80015d4:	01010280 	.word	0x01010280
 80015d8:	52004000 	.word	0x52004000

080015dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001614 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015e0:	f7ff ff84 	bl	80014ec <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e4:	480c      	ldr	r0, [pc, #48]	; (8001618 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015e6:	490d      	ldr	r1, [pc, #52]	; (800161c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015e8:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ec:	e002      	b.n	80015f4 <LoopCopyDataInit>

080015ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f2:	3304      	adds	r3, #4

080015f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80015f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f8:	d3f9      	bcc.n	80015ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015fc:	4c0a      	ldr	r4, [pc, #40]	; (8001628 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001600:	e001      	b.n	8001606 <LoopFillZerobss>

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001604:	3204      	adds	r2, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800160a:	f00e ffef 	bl	80105ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800160e:	f7fe fff1 	bl	80005f4 <main>
  bx  lr
 8001612:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001614:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001618:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800161c:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8001620:	08023a20 	.word	0x08023a20
  ldr r2, =_sbss
 8001624:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8001628:	24012c38 	.word	0x24012c38

0800162c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC_IRQHandler>
	...

08001630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001636:	2003      	movs	r0, #3
 8001638:	f001 fc61 	bl	8002efe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800163c:	f005 f952 	bl	80068e4 <HAL_RCC_GetSysClockFreq>
 8001640:	4602      	mov	r2, r0
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_Init+0x68>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	0a1b      	lsrs	r3, r3, #8
 8001648:	f003 030f 	and.w	r3, r3, #15
 800164c:	4913      	ldr	r1, [pc, #76]	; (800169c <HAL_Init+0x6c>)
 800164e:	5ccb      	ldrb	r3, [r1, r3]
 8001650:	f003 031f 	and.w	r3, r3, #31
 8001654:	fa22 f303 	lsr.w	r3, r2, r3
 8001658:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_Init+0x68>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	4a0e      	ldr	r2, [pc, #56]	; (800169c <HAL_Init+0x6c>)
 8001664:	5cd3      	ldrb	r3, [r2, r3]
 8001666:	f003 031f 	and.w	r3, r3, #31
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	fa22 f303 	lsr.w	r3, r2, r3
 8001670:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <HAL_Init+0x70>)
 8001672:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001674:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <HAL_Init+0x74>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800167a:	200f      	movs	r0, #15
 800167c:	f7ff fea2 	bl	80013c4 <HAL_InitTick>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e002      	b.n	8001690 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800168a:	f7ff fd0f 	bl	80010ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	58024400 	.word	0x58024400
 800169c:	080108c4 	.word	0x080108c4
 80016a0:	24000008 	.word	0x24000008
 80016a4:	24000004 	.word	0x24000004

080016a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_IncTick+0x20>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_IncTick+0x24>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <HAL_IncTick+0x24>)
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	24000010 	.word	0x24000010
 80016cc:	2400e2e4 	.word	0x2400e2e4

080016d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return uwTick;
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <HAL_GetTick+0x14>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	2400e2e4 	.word	0x2400e2e4

080016e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	609a      	str	r2, [r3, #8]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	609a      	str	r2, [r3, #8]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001750:	b480      	push	{r7}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
 800175c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	3360      	adds	r3, #96	; 0x60
 8001762:	461a      	mov	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	430b      	orrs	r3, r1
 800177e:	431a      	orrs	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001784:	bf00      	nop
 8001786:	371c      	adds	r7, #28
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f003 031f 	and.w	r3, r3, #31
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	fa01 f303 	lsl.w	r3, r1, r3
 80017b0:	431a      	orrs	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	611a      	str	r2, [r3, #16]
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b087      	sub	sp, #28
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	3360      	adds	r3, #96	; 0x60
 80017d2:	461a      	mov	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	601a      	str	r2, [r3, #0]
  }
}
 80017ec:	bf00      	nop
 80017ee:	371c      	adds	r7, #28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800181e:	b480      	push	{r7}
 8001820:	b087      	sub	sp, #28
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3330      	adds	r3, #48	; 0x30
 800182e:	461a      	mov	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	0a1b      	lsrs	r3, r3, #8
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	4413      	add	r3, r2
 800183c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	f003 031f 	and.w	r3, r3, #31
 8001848:	211f      	movs	r1, #31
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	401a      	ands	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	0e9b      	lsrs	r3, r3, #26
 8001856:	f003 011f 	and.w	r1, r3, #31
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	f003 031f 	and.w	r3, r3, #31
 8001860:	fa01 f303 	lsl.w	r3, r1, r3
 8001864:	431a      	orrs	r2, r3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800186a:	bf00      	nop
 800186c:	371c      	adds	r7, #28
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	f023 0203 	bic.w	r2, r3, #3
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	60da      	str	r2, [r3, #12]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	3314      	adds	r3, #20
 80018ac:	461a      	mov	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	0e5b      	lsrs	r3, r3, #25
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	4413      	add	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	0d1b      	lsrs	r3, r3, #20
 80018c4:	f003 031f 	and.w	r3, r3, #31
 80018c8:	2107      	movs	r1, #7
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	401a      	ands	r2, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	0d1b      	lsrs	r3, r3, #20
 80018d6:	f003 031f 	and.w	r3, r3, #31
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	fa01 f303 	lsl.w	r3, r1, r3
 80018e0:	431a      	orrs	r2, r3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018e6:	bf00      	nop
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800190c:	43db      	mvns	r3, r3
 800190e:	401a      	ands	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0318 	and.w	r3, r3, #24
 8001916:	4908      	ldr	r1, [pc, #32]	; (8001938 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001918:	40d9      	lsrs	r1, r3
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	400b      	ands	r3, r1
 800191e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001922:	431a      	orrs	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800192a:	bf00      	nop
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	000fffff 	.word	0x000fffff

0800193c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 031f 	and.w	r3, r3, #31
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001966:	4013      	ands	r3, r2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6093      	str	r3, [r2, #8]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	5fffffc0 	.word	0x5fffffc0

0800197c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800198c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001990:	d101      	bne.n	8001996 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	6fffffc0 	.word	0x6fffffc0

080019cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019e0:	d101      	bne.n	80019e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <LL_ADC_Enable+0x24>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	f043 0201 	orr.w	r2, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	7fffffc0 	.word	0x7fffffc0

08001a1c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <LL_ADC_Disable+0x24>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	f043 0202 	orr.w	r2, r3, #2
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	7fffffc0 	.word	0x7fffffc0

08001a44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <LL_ADC_IsEnabled+0x18>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <LL_ADC_IsEnabled+0x1a>
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d101      	bne.n	8001a82 <LL_ADC_IsDisableOngoing+0x18>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <LL_ADC_IsDisableOngoing+0x1a>
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <LL_ADC_REG_StartConversion+0x24>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	f043 0204 	orr.w	r2, r3, #4
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	7fffffc0 	.word	0x7fffffc0

08001ab8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <LL_ADC_REG_StopConversion+0x24>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	f043 0210 	orr.w	r2, r3, #16
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	7fffffc0 	.word	0x7fffffc0

08001ae0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d101      	bne.n	8001af8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <LL_ADC_INJ_StopConversion+0x24>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	f043 0220 	orr.w	r2, r3, #32
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	7fffffc0 	.word	0x7fffffc0

08001b30 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d101      	bne.n	8001b48 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b089      	sub	sp, #36	; 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e138      	b.n	8001de4 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d109      	bne.n	8001b94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff fab1 	bl	80010e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff feef 	bl	800197c <LL_ADC_IsDeepPowerDownEnabled>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d004      	beq.n	8001bae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fed5 	bl	8001958 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff ff0a 	bl	80019cc <LL_ADC_IsInternalRegulatorEnabled>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d114      	bne.n	8001be8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff feee 	bl	80019a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bc8:	4b88      	ldr	r3, [pc, #544]	; (8001dec <HAL_ADC_Init+0x294>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	099b      	lsrs	r3, r3, #6
 8001bce:	4a88      	ldr	r2, [pc, #544]	; (8001df0 <HAL_ADC_Init+0x298>)
 8001bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd4:	099b      	lsrs	r3, r3, #6
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bda:	e002      	b.n	8001be2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f9      	bne.n	8001bdc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff feed 	bl	80019cc <LL_ADC_IsInternalRegulatorEnabled>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10d      	bne.n	8001c14 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfc:	f043 0210 	orr.w	r2, r3, #16
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c08:	f043 0201 	orr.w	r2, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff61 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 8001c1e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f040 80d2 	bne.w	8001dd2 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f040 80ce 	bne.w	8001dd2 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c3e:	f043 0202 	orr.w	r2, r3, #2
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fefa 	bl	8001a44 <LL_ADC_IsEnabled>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d110      	bne.n	8001c78 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c56:	4867      	ldr	r0, [pc, #412]	; (8001df4 <HAL_ADC_Init+0x29c>)
 8001c58:	f7ff fef4 	bl	8001a44 <LL_ADC_IsEnabled>
 8001c5c:	4604      	mov	r4, r0
 8001c5e:	4866      	ldr	r0, [pc, #408]	; (8001df8 <HAL_ADC_Init+0x2a0>)
 8001c60:	f7ff fef0 	bl	8001a44 <LL_ADC_IsEnabled>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4323      	orrs	r3, r4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d105      	bne.n	8001c78 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	4619      	mov	r1, r3
 8001c72:	4862      	ldr	r0, [pc, #392]	; (8001dfc <HAL_ADC_Init+0x2a4>)
 8001c74:	f7ff fd38 	bl	80016e8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	7d5b      	ldrb	r3, [r3, #21]
 8001c7c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c82:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001c88:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	7f1b      	ldrb	r3, [r3, #28]
 8001c8e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	7f1b      	ldrb	r3, [r3, #28]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d106      	bne.n	8001caa <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	045b      	lsls	r3, r3, #17
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d009      	beq.n	8001cc6 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbe:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	4b4c      	ldr	r3, [pc, #304]	; (8001e00 <HAL_ADC_Init+0x2a8>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	69b9      	ldr	r1, [r7, #24]
 8001cd6:	430b      	orrs	r3, r1
 8001cd8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fefe 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 8001ce4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff20 	bl	8001b30 <LL_ADC_INJ_IsConversionOngoing>
 8001cf0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d14a      	bne.n	8001d8e <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d147      	bne.n	8001d8e <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	7d1b      	ldrb	r3, [r3, #20]
 8001d02:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	4b3c      	ldr	r3, [pc, #240]	; (8001e04 <HAL_ADC_Init+0x2ac>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	69b9      	ldr	r1, [r7, #24]
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d11b      	bne.n	8001d62 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691a      	ldr	r2, [r3, #16]
 8001d36:	4b34      	ldr	r3, [pc, #208]	; (8001e08 <HAL_ADC_Init+0x2b0>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d3e:	3a01      	subs	r2, #1
 8001d40:	0411      	lsls	r1, r2, #16
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d46:	4311      	orrs	r1, r2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d4c:	4311      	orrs	r1, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d52:	430a      	orrs	r2, r1
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	611a      	str	r2, [r3, #16]
 8001d60:	e007      	b.n	8001d72 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0201 	bic.w	r2, r2, #1
 8001d70:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 fe7b 	bl	8002a84 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d10c      	bne.n	8001db0 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9c:	f023 010f 	bic.w	r1, r3, #15
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	1e5a      	subs	r2, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
 8001dae:	e007      	b.n	8001dc0 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 020f 	bic.w	r2, r2, #15
 8001dbe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc4:	f023 0303 	bic.w	r3, r3, #3
 8001dc8:	f043 0201 	orr.w	r2, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	655a      	str	r2, [r3, #84]	; 0x54
 8001dd0:	e007      	b.n	8001de2 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd6:	f043 0210 	orr.w	r2, r3, #16
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001de2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3724      	adds	r7, #36	; 0x24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd90      	pop	{r4, r7, pc}
 8001dec:	24000004 	.word	0x24000004
 8001df0:	053e2d63 	.word	0x053e2d63
 8001df4:	40022000 	.word	0x40022000
 8001df8:	40022100 	.word	0x40022100
 8001dfc:	40022300 	.word	0x40022300
 8001e00:	fff0c003 	.word	0xfff0c003
 8001e04:	ffffbffc 	.word	0xffffbffc
 8001e08:	fc00f81e 	.word	0xfc00f81e

08001e0c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e18:	484f      	ldr	r0, [pc, #316]	; (8001f58 <HAL_ADC_Start_DMA+0x14c>)
 8001e1a:	f7ff fd8f 	bl	800193c <LL_ADC_GetMultimode>
 8001e1e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fe5b 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f040 808c 	bne.w	8001f4a <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_ADC_Start_DMA+0x34>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e087      	b.n	8001f50 <HAL_ADC_Start_DMA+0x144>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d002      	beq.n	8001e5a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	2b09      	cmp	r3, #9
 8001e58:	d170      	bne.n	8001f3c <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 fca2 	bl	80027a4 <ADC_Enable>
 8001e60:	4603      	mov	r3, r0
 8001e62:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d163      	bne.n	8001f32 <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e6e:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <HAL_ADC_Start_DMA+0x150>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a38      	ldr	r2, [pc, #224]	; (8001f60 <HAL_ADC_Start_DMA+0x154>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d002      	beq.n	8001e8a <HAL_ADC_Start_DMA+0x7e>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	e000      	b.n	8001e8c <HAL_ADC_Start_DMA+0x80>
 8001e8a:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <HAL_ADC_Start_DMA+0x158>)
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d002      	beq.n	8001e9a <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d105      	bne.n	8001ea6 <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d006      	beq.n	8001ec0 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb6:	f023 0206 	bic.w	r2, r3, #6
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	659a      	str	r2, [r3, #88]	; 0x58
 8001ebe:	e002      	b.n	8001ec6 <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	4a27      	ldr	r2, [pc, #156]	; (8001f68 <HAL_ADC_Start_DMA+0x15c>)
 8001ecc:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed2:	4a26      	ldr	r2, [pc, #152]	; (8001f6c <HAL_ADC_Start_DMA+0x160>)
 8001ed4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	4a25      	ldr	r2, [pc, #148]	; (8001f70 <HAL_ADC_Start_DMA+0x164>)
 8001edc:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	221c      	movs	r2, #28
 8001ee4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0210 	orr.w	r2, r2, #16
 8001efc:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f06:	4619      	mov	r1, r3
 8001f08:	4610      	mov	r0, r2
 8001f0a:	f7ff fcb4 	bl	8001876 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	3340      	adds	r3, #64	; 0x40
 8001f18:	4619      	mov	r1, r3
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f001 fbb1 	bl	8003684 <HAL_DMA_Start_IT>
 8001f22:	4603      	mov	r3, r0
 8001f24:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fdb0 	bl	8001a90 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001f30:	e00d      	b.n	8001f4e <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001f3a:	e008      	b.n	8001f4e <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001f48:	e001      	b.n	8001f4e <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40022300 	.word	0x40022300
 8001f5c:	fffff0fe 	.word	0xfffff0fe
 8001f60:	40022100 	.word	0x40022100
 8001f64:	40022000 	.word	0x40022000
 8001f68:	0800295b 	.word	0x0800295b
 8001f6c:	08002a33 	.word	0x08002a33
 8001f70:	08002a4f 	.word	0x08002a4f

08001f74 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_ADC_Stop_DMA+0x16>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e04f      	b.n	800202a <HAL_ADC_Stop_DMA+0xb6>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001f92:	2103      	movs	r1, #3
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fb49 	bl	800262c <ADC_ConversionStop>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d13d      	bne.n	8002020 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0203 	bic.w	r2, r2, #3
 8001fb2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d10f      	bne.n	8001fe2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f001 fdc6 	bl	8003b58 <HAL_DMA_Abort>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d005      	beq.n	8001fe2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0210 	bic.w	r2, r2, #16
 8001ff0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d105      	bne.n	8002004 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 fc4f 	bl	800289c <ADC_Disable>
 8001ffe:	4603      	mov	r3, r0
 8002000:	73fb      	strb	r3, [r7, #15]
 8002002:	e002      	b.n	800200a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 fc49 	bl	800289c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d107      	bne.n	8002020 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002014:	4b07      	ldr	r3, [pc, #28]	; (8002034 <HAL_ADC_Stop_DMA+0xc0>)
 8002016:	4013      	ands	r3, r2
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002028:	7bfb      	ldrb	r3, [r7, #15]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	ffffeefe 	.word	0xffffeefe

08002038 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b0a1      	sub	sp, #132	; 0x84
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	4a9a      	ldr	r2, [pc, #616]	; (80022e4 <HAL_ADC_ConfigChannel+0x284>)
 800207a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_ADC_ConfigChannel+0x2a>
 8002086:	2302      	movs	r3, #2
 8002088:	e2bc      	b.n	8002604 <HAL_ADC_ConfigChannel+0x5a4>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fd22 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f040 82a1 	bne.w	80025e6 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d108      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x62>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	0e9b      	lsrs	r3, r3, #26
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	2201      	movs	r2, #1
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	e016      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x90>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020d2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80020da:	2320      	movs	r3, #32
 80020dc:	e003      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80020de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020e0:	fab3 f383 	clz	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f003 031f 	and.w	r3, r3, #31
 80020ea:	2201      	movs	r2, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	69d1      	ldr	r1, [r2, #28]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	430b      	orrs	r3, r1
 80020fc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	6859      	ldr	r1, [r3, #4]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	f7ff fb87 	bl	800181e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fce3 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 800211a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fd05 	bl	8001b30 <LL_ADC_INJ_IsConversionOngoing>
 8002126:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800212a:	2b00      	cmp	r3, #0
 800212c:	f040 80a0 	bne.w	8002270 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002132:	2b00      	cmp	r3, #0
 8002134:	f040 809c 	bne.w	8002270 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	6819      	ldr	r1, [r3, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	461a      	mov	r2, r3
 8002146:	f7ff fba9 	bl	800189c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10b      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x110>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	e00a      	b.n	8002186 <HAL_ADC_ConfigChannel+0x126>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	695a      	ldr	r2, [r3, #20]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	089b      	lsrs	r3, r3, #2
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	2b04      	cmp	r3, #4
 800218e:	d027      	beq.n	80021e0 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	6919      	ldr	r1, [r3, #16]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800219e:	f7ff fad7 	bl	8001750 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	6919      	ldr	r1, [r3, #16]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	7e5b      	ldrb	r3, [r3, #25]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d102      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x158>
 80021b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80021b6:	e000      	b.n	80021ba <HAL_ADC_ConfigChannel+0x15a>
 80021b8:	2300      	movs	r3, #0
 80021ba:	461a      	mov	r2, r3
 80021bc:	f7ff fb01 	bl	80017c2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	6919      	ldr	r1, [r3, #16]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	7e1b      	ldrb	r3, [r3, #24]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d102      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x176>
 80021d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021d4:	e000      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x178>
 80021d6:	2300      	movs	r3, #0
 80021d8:	461a      	mov	r2, r3
 80021da:	f7ff fad9 	bl	8001790 <LL_ADC_SetDataRightShift>
 80021de:	e047      	b.n	8002270 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	069b      	lsls	r3, r3, #26
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d107      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002202:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800220a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	069b      	lsls	r3, r3, #26
 8002214:	429a      	cmp	r2, r3
 8002216:	d107      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002226:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800222e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	069b      	lsls	r3, r3, #26
 8002238:	429a      	cmp	r2, r3
 800223a:	d107      	bne.n	800224c <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800224a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002252:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	069b      	lsls	r3, r3, #26
 800225c:	429a      	cmp	r2, r3
 800225e:	d107      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800226e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fbe5 	bl	8001a44 <LL_ADC_IsEnabled>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	f040 81bb 	bne.w	80025f8 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6819      	ldr	r1, [r3, #0]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	461a      	mov	r2, r3
 8002290:	f7ff fb30 	bl	80018f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <HAL_ADC_ConfigChannel+0x284>)
 800229a:	4293      	cmp	r3, r2
 800229c:	f040 8130 	bne.w	8002500 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10b      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x268>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	0e9b      	lsrs	r3, r3, #26
 80022b6:	3301      	adds	r3, #1
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	2b09      	cmp	r3, #9
 80022be:	bf94      	ite	ls
 80022c0:	2301      	movls	r3, #1
 80022c2:	2300      	movhi	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	e01b      	b.n	8002300 <HAL_ADC_ConfigChannel+0x2a0>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022d0:	fa93 f3a3 	rbit	r3, r3
 80022d4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80022d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80022da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d103      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 80022e0:	2320      	movs	r3, #32
 80022e2:	e005      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x290>
 80022e4:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 80022e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	3301      	adds	r3, #1
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	2b09      	cmp	r3, #9
 80022f8:	bf94      	ite	ls
 80022fa:	2301      	movls	r3, #1
 80022fc:	2300      	movhi	r3, #0
 80022fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002300:	2b00      	cmp	r3, #0
 8002302:	d079      	beq.n	80023f8 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800230c:	2b00      	cmp	r3, #0
 800230e:	d107      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x2c0>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	0e9b      	lsrs	r3, r3, #26
 8002316:	3301      	adds	r3, #1
 8002318:	069b      	lsls	r3, r3, #26
 800231a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800231e:	e015      	b.n	800234c <HAL_ADC_ConfigChannel+0x2ec>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002328:	fa93 f3a3 	rbit	r3, r3
 800232c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800232e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002330:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002338:	2320      	movs	r3, #32
 800233a:	e003      	b.n	8002344 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800233c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	3301      	adds	r3, #1
 8002346:	069b      	lsls	r3, r3, #26
 8002348:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002354:	2b00      	cmp	r3, #0
 8002356:	d109      	bne.n	800236c <HAL_ADC_ConfigChannel+0x30c>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	0e9b      	lsrs	r3, r3, #26
 800235e:	3301      	adds	r3, #1
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	2101      	movs	r1, #1
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	e017      	b.n	800239c <HAL_ADC_ConfigChannel+0x33c>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800237a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800237c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800237e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002384:	2320      	movs	r3, #32
 8002386:	e003      	b.n	8002390 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	3301      	adds	r3, #1
 8002392:	f003 031f 	and.w	r3, r3, #31
 8002396:	2101      	movs	r1, #1
 8002398:	fa01 f303 	lsl.w	r3, r1, r3
 800239c:	ea42 0103 	orr.w	r1, r2, r3
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10a      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x362>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	0e9b      	lsrs	r3, r3, #26
 80023b2:	3301      	adds	r3, #1
 80023b4:	f003 021f 	and.w	r2, r3, #31
 80023b8:	4613      	mov	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4413      	add	r3, r2
 80023be:	051b      	lsls	r3, r3, #20
 80023c0:	e018      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x394>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80023d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80023d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80023da:	2320      	movs	r3, #32
 80023dc:	e003      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 80023de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e0:	fab3 f383 	clz	r3, r3
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	3301      	adds	r3, #1
 80023e8:	f003 021f 	and.w	r2, r3, #31
 80023ec:	4613      	mov	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4413      	add	r3, r2
 80023f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023f4:	430b      	orrs	r3, r1
 80023f6:	e07e      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002400:	2b00      	cmp	r3, #0
 8002402:	d107      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x3b4>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0e9b      	lsrs	r3, r3, #26
 800240a:	3301      	adds	r3, #1
 800240c:	069b      	lsls	r3, r3, #26
 800240e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002412:	e015      	b.n	8002440 <HAL_ADC_ConfigChannel+0x3e0>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800242c:	2320      	movs	r3, #32
 800242e:	e003      	b.n	8002438 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	3301      	adds	r3, #1
 800243a:	069b      	lsls	r3, r3, #26
 800243c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002448:	2b00      	cmp	r3, #0
 800244a:	d109      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x400>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	0e9b      	lsrs	r3, r3, #26
 8002452:	3301      	adds	r3, #1
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	2101      	movs	r1, #1
 800245a:	fa01 f303 	lsl.w	r3, r1, r3
 800245e:	e017      	b.n	8002490 <HAL_ADC_ConfigChannel+0x430>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	61bb      	str	r3, [r7, #24]
  return result;
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002478:	2320      	movs	r3, #32
 800247a:	e003      	b.n	8002484 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	3301      	adds	r3, #1
 8002486:	f003 031f 	and.w	r3, r3, #31
 800248a:	2101      	movs	r1, #1
 800248c:	fa01 f303 	lsl.w	r3, r1, r3
 8002490:	ea42 0103 	orr.w	r1, r2, r3
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10d      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x45c>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0e9b      	lsrs	r3, r3, #26
 80024a6:	3301      	adds	r3, #1
 80024a8:	f003 021f 	and.w	r2, r3, #31
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	3b1e      	subs	r3, #30
 80024b4:	051b      	lsls	r3, r3, #20
 80024b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024ba:	e01b      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x494>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	60fb      	str	r3, [r7, #12]
  return result;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 80024d4:	2320      	movs	r3, #32
 80024d6:	e003      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	3301      	adds	r3, #1
 80024e2:	f003 021f 	and.w	r2, r3, #31
 80024e6:	4613      	mov	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4413      	add	r3, r2
 80024ec:	3b1e      	subs	r3, #30
 80024ee:	051b      	lsls	r3, r3, #20
 80024f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024f4:	430b      	orrs	r3, r1
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	6892      	ldr	r2, [r2, #8]
 80024fa:	4619      	mov	r1, r3
 80024fc:	f7ff f9ce 	bl	800189c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	da77      	bge.n	80025f8 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002508:	4840      	ldr	r0, [pc, #256]	; (800260c <HAL_ADC_ConfigChannel+0x5ac>)
 800250a:	f7ff f913 	bl	8001734 <LL_ADC_GetCommonPathInternalCh>
 800250e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002510:	483f      	ldr	r0, [pc, #252]	; (8002610 <HAL_ADC_ConfigChannel+0x5b0>)
 8002512:	f7ff fa97 	bl	8001a44 <LL_ADC_IsEnabled>
 8002516:	4604      	mov	r4, r0
 8002518:	483e      	ldr	r0, [pc, #248]	; (8002614 <HAL_ADC_ConfigChannel+0x5b4>)
 800251a:	f7ff fa93 	bl	8001a44 <LL_ADC_IsEnabled>
 800251e:	4603      	mov	r3, r0
 8002520:	4323      	orrs	r3, r4
 8002522:	2b00      	cmp	r3, #0
 8002524:	d155      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a3b      	ldr	r2, [pc, #236]	; (8002618 <HAL_ADC_ConfigChannel+0x5b8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d122      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x516>
 8002530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002532:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d11d      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a35      	ldr	r2, [pc, #212]	; (8002614 <HAL_ADC_ConfigChannel+0x5b4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d159      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002546:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800254a:	4619      	mov	r1, r3
 800254c:	482f      	ldr	r0, [pc, #188]	; (800260c <HAL_ADC_ConfigChannel+0x5ac>)
 800254e:	f7ff f8de 	bl	800170e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002552:	4b32      	ldr	r3, [pc, #200]	; (800261c <HAL_ADC_ConfigChannel+0x5bc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	099b      	lsrs	r3, r3, #6
 8002558:	4a31      	ldr	r2, [pc, #196]	; (8002620 <HAL_ADC_ConfigChannel+0x5c0>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	099b      	lsrs	r3, r3, #6
 8002560:	3301      	adds	r3, #1
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002566:	e002      	b.n	800256e <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	3b01      	subs	r3, #1
 800256c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f9      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002574:	e040      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a2a      	ldr	r2, [pc, #168]	; (8002624 <HAL_ADC_ConfigChannel+0x5c4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d111      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x544>
 8002580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002582:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10c      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a21      	ldr	r2, [pc, #132]	; (8002614 <HAL_ADC_ConfigChannel+0x5b4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d131      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800259a:	4619      	mov	r1, r3
 800259c:	481b      	ldr	r0, [pc, #108]	; (800260c <HAL_ADC_ConfigChannel+0x5ac>)
 800259e:	f7ff f8b6 	bl	800170e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025a2:	e029      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1f      	ldr	r2, [pc, #124]	; (8002628 <HAL_ADC_ConfigChannel+0x5c8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d124      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x598>
 80025ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d11f      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a15      	ldr	r2, [pc, #84]	; (8002614 <HAL_ADC_ConfigChannel+0x5b4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d11a      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80025c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025c8:	4619      	mov	r1, r3
 80025ca:	4810      	ldr	r0, [pc, #64]	; (800260c <HAL_ADC_ConfigChannel+0x5ac>)
 80025cc:	f7ff f89f 	bl	800170e <LL_ADC_SetCommonPathInternalCh>
 80025d0:	e012      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d6:	f043 0220 	orr.w	r2, r3, #32
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80025e4:	e008      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ea:	f043 0220 	orr.w	r2, r3, #32
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002600:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002604:	4618      	mov	r0, r3
 8002606:	3784      	adds	r7, #132	; 0x84
 8002608:	46bd      	mov	sp, r7
 800260a:	bd90      	pop	{r4, r7, pc}
 800260c:	40022300 	.word	0x40022300
 8002610:	40022000 	.word	0x40022000
 8002614:	40022100 	.word	0x40022100
 8002618:	cb840000 	.word	0xcb840000
 800261c:	24000004 	.word	0x24000004
 8002620:	053e2d63 	.word	0x053e2d63
 8002624:	bac04000 	.word	0xbac04000
 8002628:	cfb80000 	.word	0xcfb80000

0800262c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fa4c 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 8002648:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fa6e 	bl	8001b30 <LL_ADC_INJ_IsConversionOngoing>
 8002654:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d103      	bne.n	8002664 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8098 	beq.w	8002794 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d02a      	beq.n	80026c8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	7d5b      	ldrb	r3, [r3, #21]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d126      	bne.n	80026c8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	7d1b      	ldrb	r3, [r3, #20]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d122      	bne.n	80026c8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002682:	2301      	movs	r3, #1
 8002684:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002686:	e014      	b.n	80026b2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	4a45      	ldr	r2, [pc, #276]	; (80027a0 <ADC_ConversionStop+0x174>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d90d      	bls.n	80026ac <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002694:	f043 0210 	orr.w	r2, r3, #16
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	f043 0201 	orr.w	r2, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e074      	b.n	8002796 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	3301      	adds	r3, #1
 80026b0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026bc:	2b40      	cmp	r3, #64	; 0x40
 80026be:	d1e3      	bne.n	8002688 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2240      	movs	r2, #64	; 0x40
 80026c6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d014      	beq.n	80026f8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fa04 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00c      	beq.n	80026f8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff f9c1 	bl	8001a6a <LL_ADC_IsDisableOngoing>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d104      	bne.n	80026f8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff f9e0 	bl	8001ab8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d014      	beq.n	8002728 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fa14 	bl	8001b30 <LL_ADC_INJ_IsConversionOngoing>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00c      	beq.n	8002728 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff f9a9 	bl	8001a6a <LL_ADC_IsDisableOngoing>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d104      	bne.n	8002728 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff f9f0 	bl	8001b08 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d005      	beq.n	800273a <ADC_ConversionStop+0x10e>
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	2b03      	cmp	r3, #3
 8002732:	d105      	bne.n	8002740 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002734:	230c      	movs	r3, #12
 8002736:	617b      	str	r3, [r7, #20]
        break;
 8002738:	e005      	b.n	8002746 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800273a:	2308      	movs	r3, #8
 800273c:	617b      	str	r3, [r7, #20]
        break;
 800273e:	e002      	b.n	8002746 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002740:	2304      	movs	r3, #4
 8002742:	617b      	str	r3, [r7, #20]
        break;
 8002744:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002746:	f7fe ffc3 	bl	80016d0 <HAL_GetTick>
 800274a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800274c:	e01b      	b.n	8002786 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800274e:	f7fe ffbf 	bl	80016d0 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b05      	cmp	r3, #5
 800275a:	d914      	bls.n	8002786 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	4013      	ands	r3, r2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00d      	beq.n	8002786 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276e:	f043 0210 	orr.w	r2, r3, #16
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277a:	f043 0201 	orr.w	r2, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e007      	b.n	8002796 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1dc      	bne.n	800274e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3720      	adds	r7, #32
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	000cdbff 	.word	0x000cdbff

080027a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff f947 	bl	8001a44 <LL_ADC_IsEnabled>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d161      	bne.n	8002880 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	4b32      	ldr	r3, [pc, #200]	; (800288c <ADC_Enable+0xe8>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00d      	beq.n	80027e6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ce:	f043 0210 	orr.w	r2, r3, #16
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027da:	f043 0201 	orr.w	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e04d      	b.n	8002882 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff f902 	bl	80019f4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80027f0:	f7fe ff6e 	bl	80016d0 <HAL_GetTick>
 80027f4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027f6:	4826      	ldr	r0, [pc, #152]	; (8002890 <ADC_Enable+0xec>)
 80027f8:	f7ff f8a0 	bl	800193c <LL_ADC_GetMultimode>
 80027fc:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a24      	ldr	r2, [pc, #144]	; (8002894 <ADC_Enable+0xf0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d002      	beq.n	800280e <ADC_Enable+0x6a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	e000      	b.n	8002810 <ADC_Enable+0x6c>
 800280e:	4b22      	ldr	r3, [pc, #136]	; (8002898 <ADC_Enable+0xf4>)
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	4293      	cmp	r3, r2
 8002816:	d02c      	beq.n	8002872 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d130      	bne.n	8002880 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800281e:	e028      	b.n	8002872 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff f90d 	bl	8001a44 <LL_ADC_IsEnabled>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d104      	bne.n	800283a <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff f8dd 	bl	80019f4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800283a:	f7fe ff49 	bl	80016d0 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d914      	bls.n	8002872 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b01      	cmp	r3, #1
 8002854:	d00d      	beq.n	8002872 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285a:	f043 0210 	orr.w	r2, r3, #16
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	f043 0201 	orr.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e007      	b.n	8002882 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b01      	cmp	r3, #1
 800287e:	d1cf      	bne.n	8002820 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	8000003f 	.word	0x8000003f
 8002890:	40022300 	.word	0x40022300
 8002894:	40022100 	.word	0x40022100
 8002898:	40022000 	.word	0x40022000

0800289c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff f8de 	bl	8001a6a <LL_ADC_IsDisableOngoing>
 80028ae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff f8c5 	bl	8001a44 <LL_ADC_IsEnabled>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d047      	beq.n	8002950 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d144      	bne.n	8002950 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 030d 	and.w	r3, r3, #13
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d10c      	bne.n	80028ee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff f89f 	bl	8001a1c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2203      	movs	r2, #3
 80028e4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028e6:	f7fe fef3 	bl	80016d0 <HAL_GetTick>
 80028ea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028ec:	e029      	b.n	8002942 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f2:	f043 0210 	orr.w	r2, r3, #16
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fe:	f043 0201 	orr.w	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e023      	b.n	8002952 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800290a:	f7fe fee1 	bl	80016d0 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d914      	bls.n	8002942 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00d      	beq.n	8002942 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292a:	f043 0210 	orr.w	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002936:	f043 0201 	orr.w	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e007      	b.n	8002952 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1dc      	bne.n	800290a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b084      	sub	sp, #16
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002966:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002970:	2b00      	cmp	r3, #0
 8002972:	d14b      	bne.n	8002a0c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d021      	beq.n	80029d2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe ff30 	bl	80017f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d032      	beq.n	8002a04 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d12b      	bne.n	8002a04 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d11f      	bne.n	8002a04 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c8:	f043 0201 	orr.w	r2, r3, #1
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54
 80029d0:	e018      	b.n	8002a04 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d111      	bne.n	8002a04 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d105      	bne.n	8002a04 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fc:	f043 0201 	orr.w	r2, r3, #1
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f7fe fa9f 	bl	8000f48 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a0a:	e00e      	b.n	8002a2a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f7ff fb17 	bl	800204c <HAL_ADC_ErrorCallback>
}
 8002a1e:	e004      	b.n	8002a2a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	4798      	blx	r3
}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f7ff faf9 	bl	8002038 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a46:	bf00      	nop
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b084      	sub	sp, #16
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	f043 0204 	orr.w	r2, r3, #4
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f7ff fae9 	bl	800204c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002a8c:	4b60      	ldr	r3, [pc, #384]	; (8002c10 <ADC_ConfigureBoostMode+0x18c>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01c      	beq.n	8002ad2 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002a98:	f004 f89e 	bl	8006bd8 <HAL_RCC_GetHCLKFreq>
 8002a9c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002aa6:	d010      	beq.n	8002aca <ADC_ConfigureBoostMode+0x46>
 8002aa8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002aac:	d873      	bhi.n	8002b96 <ADC_ConfigureBoostMode+0x112>
 8002aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab2:	d002      	beq.n	8002aba <ADC_ConfigureBoostMode+0x36>
 8002ab4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ab8:	d16d      	bne.n	8002b96 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	0c1b      	lsrs	r3, r3, #16
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac6:	60fb      	str	r3, [r7, #12]
        break;
 8002ac8:	e068      	b.n	8002b9c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	089b      	lsrs	r3, r3, #2
 8002ace:	60fb      	str	r3, [r7, #12]
        break;
 8002ad0:	e064      	b.n	8002b9c <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002ad2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002ad6:	f04f 0100 	mov.w	r1, #0
 8002ada:	f005 fad9 	bl	8008090 <HAL_RCCEx_GetPeriphCLKFreq>
 8002ade:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002ae8:	d051      	beq.n	8002b8e <ADC_ConfigureBoostMode+0x10a>
 8002aea:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002aee:	d854      	bhi.n	8002b9a <ADC_ConfigureBoostMode+0x116>
 8002af0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002af4:	d047      	beq.n	8002b86 <ADC_ConfigureBoostMode+0x102>
 8002af6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002afa:	d84e      	bhi.n	8002b9a <ADC_ConfigureBoostMode+0x116>
 8002afc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b00:	d03d      	beq.n	8002b7e <ADC_ConfigureBoostMode+0xfa>
 8002b02:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b06:	d848      	bhi.n	8002b9a <ADC_ConfigureBoostMode+0x116>
 8002b08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b0c:	d033      	beq.n	8002b76 <ADC_ConfigureBoostMode+0xf2>
 8002b0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b12:	d842      	bhi.n	8002b9a <ADC_ConfigureBoostMode+0x116>
 8002b14:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b18:	d029      	beq.n	8002b6e <ADC_ConfigureBoostMode+0xea>
 8002b1a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b1e:	d83c      	bhi.n	8002b9a <ADC_ConfigureBoostMode+0x116>
 8002b20:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b24:	d01a      	beq.n	8002b5c <ADC_ConfigureBoostMode+0xd8>
 8002b26:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b2a:	d836      	bhi.n	8002b9a <ADC_ConfigureBoostMode+0x116>
 8002b2c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b30:	d014      	beq.n	8002b5c <ADC_ConfigureBoostMode+0xd8>
 8002b32:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b36:	d830      	bhi.n	8002b9a <ADC_ConfigureBoostMode+0x116>
 8002b38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b3c:	d00e      	beq.n	8002b5c <ADC_ConfigureBoostMode+0xd8>
 8002b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b42:	d82a      	bhi.n	8002b9a <ADC_ConfigureBoostMode+0x116>
 8002b44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b48:	d008      	beq.n	8002b5c <ADC_ConfigureBoostMode+0xd8>
 8002b4a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b4e:	d824      	bhi.n	8002b9a <ADC_ConfigureBoostMode+0x116>
 8002b50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b54:	d002      	beq.n	8002b5c <ADC_ConfigureBoostMode+0xd8>
 8002b56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b5a:	d11e      	bne.n	8002b9a <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	0c9b      	lsrs	r3, r3, #18
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6a:	60fb      	str	r3, [r7, #12]
        break;
 8002b6c:	e016      	b.n	8002b9c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	60fb      	str	r3, [r7, #12]
        break;
 8002b74:	e012      	b.n	8002b9c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	60fb      	str	r3, [r7, #12]
        break;
 8002b7c:	e00e      	b.n	8002b9c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	099b      	lsrs	r3, r3, #6
 8002b82:	60fb      	str	r3, [r7, #12]
        break;
 8002b84:	e00a      	b.n	8002b9c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	09db      	lsrs	r3, r3, #7
 8002b8a:	60fb      	str	r3, [r7, #12]
        break;
 8002b8c:	e006      	b.n	8002b9c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	0a1b      	lsrs	r3, r3, #8
 8002b92:	60fb      	str	r3, [r7, #12]
        break;
 8002b94:	e002      	b.n	8002b9c <ADC_ConfigureBoostMode+0x118>
        break;
 8002b96:	bf00      	nop
 8002b98:	e000      	b.n	8002b9c <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002b9a:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	085b      	lsrs	r3, r3, #1
 8002ba0:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4a1b      	ldr	r2, [pc, #108]	; (8002c14 <ADC_ConfigureBoostMode+0x190>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d808      	bhi.n	8002bbc <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002bb8:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002bba:	e025      	b.n	8002c08 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4a16      	ldr	r2, [pc, #88]	; (8002c18 <ADC_ConfigureBoostMode+0x194>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d80a      	bhi.n	8002bda <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bd6:	609a      	str	r2, [r3, #8]
}
 8002bd8:	e016      	b.n	8002c08 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4a0f      	ldr	r2, [pc, #60]	; (8002c1c <ADC_ConfigureBoostMode+0x198>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d80a      	bhi.n	8002bf8 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf4:	609a      	str	r2, [r3, #8]
}
 8002bf6:	e007      	b.n	8002c08 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002c06:	609a      	str	r2, [r3, #8]
}
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40022300 	.word	0x40022300
 8002c14:	005f5e10 	.word	0x005f5e10
 8002c18:	00bebc20 	.word	0x00bebc20
 8002c1c:	017d7840 	.word	0x017d7840

08002c20 <LL_ADC_IsEnabled>:
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <LL_ADC_IsEnabled+0x18>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <LL_ADC_IsEnabled+0x1a>
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <LL_ADC_REG_IsConversionOngoing>:
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d101      	bne.n	8002c5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002c6c:	b590      	push	{r4, r7, lr}
 8002c6e:	b09f      	sub	sp, #124	; 0x7c
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d101      	bne.n	8002c8a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e080      	b.n	8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002c92:	2300      	movs	r3, #0
 8002c94:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a3d      	ldr	r2, [pc, #244]	; (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d102      	bne.n	8002caa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ca4:	4b3c      	ldr	r3, [pc, #240]	; (8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	e001      	b.n	8002cae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002caa:	2300      	movs	r3, #0
 8002cac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10b      	bne.n	8002ccc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb8:	f043 0220 	orr.w	r2, r3, #32
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e05f      	b.n	8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff ffb9 	bl	8002c46 <LL_ADC_REG_IsConversionOngoing>
 8002cd4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff ffb3 	bl	8002c46 <LL_ADC_REG_IsConversionOngoing>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d141      	bne.n	8002d6a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d13e      	bne.n	8002d6a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002cec:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002cee:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d020      	beq.n	8002d3a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	431a      	orrs	r2, r3
 8002d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d08:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d0a:	4822      	ldr	r0, [pc, #136]	; (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002d0c:	f7ff ff88 	bl	8002c20 <LL_ADC_IsEnabled>
 8002d10:	4604      	mov	r4, r0
 8002d12:	4821      	ldr	r0, [pc, #132]	; (8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002d14:	f7ff ff84 	bl	8002c20 <LL_ADC_IsEnabled>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	4323      	orrs	r3, r4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d12e      	bne.n	8002d7e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	4b1e      	ldr	r3, [pc, #120]	; (8002da0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	6811      	ldr	r1, [r2, #0]
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	6892      	ldr	r2, [r2, #8]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	431a      	orrs	r2, r3
 8002d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d36:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d38:	e021      	b.n	8002d7e <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d44:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d46:	4813      	ldr	r0, [pc, #76]	; (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002d48:	f7ff ff6a 	bl	8002c20 <LL_ADC_IsEnabled>
 8002d4c:	4604      	mov	r4, r0
 8002d4e:	4812      	ldr	r0, [pc, #72]	; (8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002d50:	f7ff ff66 	bl	8002c20 <LL_ADC_IsEnabled>
 8002d54:	4603      	mov	r3, r0
 8002d56:	4323      	orrs	r3, r4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d110      	bne.n	8002d7e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d66:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d68:	e009      	b.n	8002d7e <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	f043 0220 	orr.w	r2, r3, #32
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002d7c:	e000      	b.n	8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d7e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d88:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	377c      	adds	r7, #124	; 0x7c
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd90      	pop	{r4, r7, pc}
 8002d94:	40022000 	.word	0x40022000
 8002d98:	40022100 	.word	0x40022100
 8002d9c:	40022300 	.word	0x40022300
 8002da0:	fffff0e0 	.word	0xfffff0e0

08002da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db4:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <__NVIC_SetPriorityGrouping+0x40>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dd2:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <__NVIC_SetPriorityGrouping+0x40>)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	60d3      	str	r3, [r2, #12]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000ed00 	.word	0xe000ed00
 8002de8:	05fa0000 	.word	0x05fa0000

08002dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <__NVIC_GetPriorityGrouping+0x18>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	0a1b      	lsrs	r3, r3, #8
 8002df6:	f003 0307 	and.w	r3, r3, #7
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	db0b      	blt.n	8002e32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	f003 021f 	and.w	r2, r3, #31
 8002e20:	4907      	ldr	r1, [pc, #28]	; (8002e40 <__NVIC_EnableIRQ+0x38>)
 8002e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2001      	movs	r0, #1
 8002e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	e000e100 	.word	0xe000e100

08002e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	6039      	str	r1, [r7, #0]
 8002e4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	db0a      	blt.n	8002e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	490c      	ldr	r1, [pc, #48]	; (8002e90 <__NVIC_SetPriority+0x4c>)
 8002e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e62:	0112      	lsls	r2, r2, #4
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	440b      	add	r3, r1
 8002e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e6c:	e00a      	b.n	8002e84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4908      	ldr	r1, [pc, #32]	; (8002e94 <__NVIC_SetPriority+0x50>)
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	3b04      	subs	r3, #4
 8002e7c:	0112      	lsls	r2, r2, #4
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	440b      	add	r3, r1
 8002e82:	761a      	strb	r2, [r3, #24]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000e100 	.word	0xe000e100
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b089      	sub	sp, #36	; 0x24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f1c3 0307 	rsb	r3, r3, #7
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	bf28      	it	cs
 8002eb6:	2304      	movcs	r3, #4
 8002eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2b06      	cmp	r3, #6
 8002ec0:	d902      	bls.n	8002ec8 <NVIC_EncodePriority+0x30>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3b03      	subs	r3, #3
 8002ec6:	e000      	b.n	8002eca <NVIC_EncodePriority+0x32>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	401a      	ands	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43d9      	mvns	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef0:	4313      	orrs	r3, r2
         );
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3724      	adds	r7, #36	; 0x24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff ff4c 	bl	8002da4 <__NVIC_SetPriorityGrouping>
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f22:	f7ff ff63 	bl	8002dec <__NVIC_GetPriorityGrouping>
 8002f26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	68b9      	ldr	r1, [r7, #8]
 8002f2c:	6978      	ldr	r0, [r7, #20]
 8002f2e:	f7ff ffb3 	bl	8002e98 <NVIC_EncodePriority>
 8002f32:	4602      	mov	r2, r0
 8002f34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff ff82 	bl	8002e44 <__NVIC_SetPriority>
}
 8002f40:	bf00      	nop
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff ff56 	bl	8002e08 <__NVIC_EnableIRQ>
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002f6c:	f7fe fbb0 	bl	80016d0 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e37f      	b.n	800367c <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a66      	ldr	r2, [pc, #408]	; (800311c <HAL_DMA_Init+0x1b8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d04a      	beq.n	800301c <HAL_DMA_Init+0xb8>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a65      	ldr	r2, [pc, #404]	; (8003120 <HAL_DMA_Init+0x1bc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d045      	beq.n	800301c <HAL_DMA_Init+0xb8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a63      	ldr	r2, [pc, #396]	; (8003124 <HAL_DMA_Init+0x1c0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d040      	beq.n	800301c <HAL_DMA_Init+0xb8>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a62      	ldr	r2, [pc, #392]	; (8003128 <HAL_DMA_Init+0x1c4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d03b      	beq.n	800301c <HAL_DMA_Init+0xb8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a60      	ldr	r2, [pc, #384]	; (800312c <HAL_DMA_Init+0x1c8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d036      	beq.n	800301c <HAL_DMA_Init+0xb8>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a5f      	ldr	r2, [pc, #380]	; (8003130 <HAL_DMA_Init+0x1cc>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d031      	beq.n	800301c <HAL_DMA_Init+0xb8>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a5d      	ldr	r2, [pc, #372]	; (8003134 <HAL_DMA_Init+0x1d0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d02c      	beq.n	800301c <HAL_DMA_Init+0xb8>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a5c      	ldr	r2, [pc, #368]	; (8003138 <HAL_DMA_Init+0x1d4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d027      	beq.n	800301c <HAL_DMA_Init+0xb8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a5a      	ldr	r2, [pc, #360]	; (800313c <HAL_DMA_Init+0x1d8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d022      	beq.n	800301c <HAL_DMA_Init+0xb8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a59      	ldr	r2, [pc, #356]	; (8003140 <HAL_DMA_Init+0x1dc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d01d      	beq.n	800301c <HAL_DMA_Init+0xb8>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a57      	ldr	r2, [pc, #348]	; (8003144 <HAL_DMA_Init+0x1e0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d018      	beq.n	800301c <HAL_DMA_Init+0xb8>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a56      	ldr	r2, [pc, #344]	; (8003148 <HAL_DMA_Init+0x1e4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d013      	beq.n	800301c <HAL_DMA_Init+0xb8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a54      	ldr	r2, [pc, #336]	; (800314c <HAL_DMA_Init+0x1e8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00e      	beq.n	800301c <HAL_DMA_Init+0xb8>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a53      	ldr	r2, [pc, #332]	; (8003150 <HAL_DMA_Init+0x1ec>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d009      	beq.n	800301c <HAL_DMA_Init+0xb8>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a51      	ldr	r2, [pc, #324]	; (8003154 <HAL_DMA_Init+0x1f0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d004      	beq.n	800301c <HAL_DMA_Init+0xb8>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a50      	ldr	r2, [pc, #320]	; (8003158 <HAL_DMA_Init+0x1f4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d101      	bne.n	8003020 <HAL_DMA_Init+0xbc>
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <HAL_DMA_Init+0xbe>
 8003020:	2300      	movs	r3, #0
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 813c 	beq.w	80032a0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a37      	ldr	r2, [pc, #220]	; (800311c <HAL_DMA_Init+0x1b8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d04a      	beq.n	80030d8 <HAL_DMA_Init+0x174>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a36      	ldr	r2, [pc, #216]	; (8003120 <HAL_DMA_Init+0x1bc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d045      	beq.n	80030d8 <HAL_DMA_Init+0x174>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a34      	ldr	r2, [pc, #208]	; (8003124 <HAL_DMA_Init+0x1c0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d040      	beq.n	80030d8 <HAL_DMA_Init+0x174>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a33      	ldr	r2, [pc, #204]	; (8003128 <HAL_DMA_Init+0x1c4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d03b      	beq.n	80030d8 <HAL_DMA_Init+0x174>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a31      	ldr	r2, [pc, #196]	; (800312c <HAL_DMA_Init+0x1c8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d036      	beq.n	80030d8 <HAL_DMA_Init+0x174>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a30      	ldr	r2, [pc, #192]	; (8003130 <HAL_DMA_Init+0x1cc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d031      	beq.n	80030d8 <HAL_DMA_Init+0x174>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a2e      	ldr	r2, [pc, #184]	; (8003134 <HAL_DMA_Init+0x1d0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d02c      	beq.n	80030d8 <HAL_DMA_Init+0x174>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a2d      	ldr	r2, [pc, #180]	; (8003138 <HAL_DMA_Init+0x1d4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d027      	beq.n	80030d8 <HAL_DMA_Init+0x174>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a2b      	ldr	r2, [pc, #172]	; (800313c <HAL_DMA_Init+0x1d8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d022      	beq.n	80030d8 <HAL_DMA_Init+0x174>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a2a      	ldr	r2, [pc, #168]	; (8003140 <HAL_DMA_Init+0x1dc>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d01d      	beq.n	80030d8 <HAL_DMA_Init+0x174>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a28      	ldr	r2, [pc, #160]	; (8003144 <HAL_DMA_Init+0x1e0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d018      	beq.n	80030d8 <HAL_DMA_Init+0x174>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a27      	ldr	r2, [pc, #156]	; (8003148 <HAL_DMA_Init+0x1e4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d013      	beq.n	80030d8 <HAL_DMA_Init+0x174>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a25      	ldr	r2, [pc, #148]	; (800314c <HAL_DMA_Init+0x1e8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00e      	beq.n	80030d8 <HAL_DMA_Init+0x174>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a24      	ldr	r2, [pc, #144]	; (8003150 <HAL_DMA_Init+0x1ec>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d009      	beq.n	80030d8 <HAL_DMA_Init+0x174>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a22      	ldr	r2, [pc, #136]	; (8003154 <HAL_DMA_Init+0x1f0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d004      	beq.n	80030d8 <HAL_DMA_Init+0x174>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a21      	ldr	r2, [pc, #132]	; (8003158 <HAL_DMA_Init+0x1f4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d108      	bne.n	80030ea <HAL_DMA_Init+0x186>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0201 	bic.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	e007      	b.n	80030fa <HAL_DMA_Init+0x196>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0201 	bic.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80030fa:	e02f      	b.n	800315c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030fc:	f7fe fae8 	bl	80016d0 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b05      	cmp	r3, #5
 8003108:	d928      	bls.n	800315c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2220      	movs	r2, #32
 800310e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2203      	movs	r2, #3
 8003114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e2af      	b.n	800367c <HAL_DMA_Init+0x718>
 800311c:	40020010 	.word	0x40020010
 8003120:	40020028 	.word	0x40020028
 8003124:	40020040 	.word	0x40020040
 8003128:	40020058 	.word	0x40020058
 800312c:	40020070 	.word	0x40020070
 8003130:	40020088 	.word	0x40020088
 8003134:	400200a0 	.word	0x400200a0
 8003138:	400200b8 	.word	0x400200b8
 800313c:	40020410 	.word	0x40020410
 8003140:	40020428 	.word	0x40020428
 8003144:	40020440 	.word	0x40020440
 8003148:	40020458 	.word	0x40020458
 800314c:	40020470 	.word	0x40020470
 8003150:	40020488 	.word	0x40020488
 8003154:	400204a0 	.word	0x400204a0
 8003158:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1c8      	bne.n	80030fc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4b73      	ldr	r3, [pc, #460]	; (8003344 <HAL_DMA_Init+0x3e0>)
 8003176:	4013      	ands	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003182:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800318e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800319a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d107      	bne.n	80031c0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	4313      	orrs	r3, r2
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4313      	orrs	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b28      	cmp	r3, #40	; 0x28
 80031c6:	d903      	bls.n	80031d0 <HAL_DMA_Init+0x26c>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b2e      	cmp	r3, #46	; 0x2e
 80031ce:	d91f      	bls.n	8003210 <HAL_DMA_Init+0x2ac>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b3e      	cmp	r3, #62	; 0x3e
 80031d6:	d903      	bls.n	80031e0 <HAL_DMA_Init+0x27c>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b42      	cmp	r3, #66	; 0x42
 80031de:	d917      	bls.n	8003210 <HAL_DMA_Init+0x2ac>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b46      	cmp	r3, #70	; 0x46
 80031e6:	d903      	bls.n	80031f0 <HAL_DMA_Init+0x28c>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b48      	cmp	r3, #72	; 0x48
 80031ee:	d90f      	bls.n	8003210 <HAL_DMA_Init+0x2ac>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b4e      	cmp	r3, #78	; 0x4e
 80031f6:	d903      	bls.n	8003200 <HAL_DMA_Init+0x29c>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b52      	cmp	r3, #82	; 0x52
 80031fe:	d907      	bls.n	8003210 <HAL_DMA_Init+0x2ac>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b73      	cmp	r3, #115	; 0x73
 8003206:	d905      	bls.n	8003214 <HAL_DMA_Init+0x2b0>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b77      	cmp	r3, #119	; 0x77
 800320e:	d801      	bhi.n	8003214 <HAL_DMA_Init+0x2b0>
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <HAL_DMA_Init+0x2b2>
 8003214:	2300      	movs	r3, #0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003220:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f023 0307 	bic.w	r3, r3, #7
 8003238:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	4313      	orrs	r3, r2
 8003242:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	2b04      	cmp	r3, #4
 800324a:	d117      	bne.n	800327c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00e      	beq.n	800327c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f002 f990 	bl	8005584 <DMA_CheckFifoParam>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d008      	beq.n	800327c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2240      	movs	r2, #64	; 0x40
 800326e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e1ff      	b.n	800367c <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f002 f8cb 	bl	8005420 <DMA_CalcBaseAndBitshift>
 800328a:	4603      	mov	r3, r0
 800328c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	223f      	movs	r2, #63	; 0x3f
 8003298:	409a      	lsls	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	609a      	str	r2, [r3, #8]
 800329e:	e0fe      	b.n	800349e <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a28      	ldr	r2, [pc, #160]	; (8003348 <HAL_DMA_Init+0x3e4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d04a      	beq.n	8003340 <HAL_DMA_Init+0x3dc>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a27      	ldr	r2, [pc, #156]	; (800334c <HAL_DMA_Init+0x3e8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d045      	beq.n	8003340 <HAL_DMA_Init+0x3dc>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a25      	ldr	r2, [pc, #148]	; (8003350 <HAL_DMA_Init+0x3ec>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d040      	beq.n	8003340 <HAL_DMA_Init+0x3dc>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a24      	ldr	r2, [pc, #144]	; (8003354 <HAL_DMA_Init+0x3f0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d03b      	beq.n	8003340 <HAL_DMA_Init+0x3dc>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a22      	ldr	r2, [pc, #136]	; (8003358 <HAL_DMA_Init+0x3f4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d036      	beq.n	8003340 <HAL_DMA_Init+0x3dc>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a21      	ldr	r2, [pc, #132]	; (800335c <HAL_DMA_Init+0x3f8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d031      	beq.n	8003340 <HAL_DMA_Init+0x3dc>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a1f      	ldr	r2, [pc, #124]	; (8003360 <HAL_DMA_Init+0x3fc>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d02c      	beq.n	8003340 <HAL_DMA_Init+0x3dc>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a1e      	ldr	r2, [pc, #120]	; (8003364 <HAL_DMA_Init+0x400>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d027      	beq.n	8003340 <HAL_DMA_Init+0x3dc>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a1c      	ldr	r2, [pc, #112]	; (8003368 <HAL_DMA_Init+0x404>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d022      	beq.n	8003340 <HAL_DMA_Init+0x3dc>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1b      	ldr	r2, [pc, #108]	; (800336c <HAL_DMA_Init+0x408>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d01d      	beq.n	8003340 <HAL_DMA_Init+0x3dc>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a19      	ldr	r2, [pc, #100]	; (8003370 <HAL_DMA_Init+0x40c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d018      	beq.n	8003340 <HAL_DMA_Init+0x3dc>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a18      	ldr	r2, [pc, #96]	; (8003374 <HAL_DMA_Init+0x410>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d013      	beq.n	8003340 <HAL_DMA_Init+0x3dc>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a16      	ldr	r2, [pc, #88]	; (8003378 <HAL_DMA_Init+0x414>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00e      	beq.n	8003340 <HAL_DMA_Init+0x3dc>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a15      	ldr	r2, [pc, #84]	; (800337c <HAL_DMA_Init+0x418>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d009      	beq.n	8003340 <HAL_DMA_Init+0x3dc>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a13      	ldr	r2, [pc, #76]	; (8003380 <HAL_DMA_Init+0x41c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d004      	beq.n	8003340 <HAL_DMA_Init+0x3dc>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a12      	ldr	r2, [pc, #72]	; (8003384 <HAL_DMA_Init+0x420>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d123      	bne.n	8003388 <HAL_DMA_Init+0x424>
 8003340:	2301      	movs	r3, #1
 8003342:	e022      	b.n	800338a <HAL_DMA_Init+0x426>
 8003344:	fe10803f 	.word	0xfe10803f
 8003348:	48022c08 	.word	0x48022c08
 800334c:	48022c1c 	.word	0x48022c1c
 8003350:	48022c30 	.word	0x48022c30
 8003354:	48022c44 	.word	0x48022c44
 8003358:	48022c58 	.word	0x48022c58
 800335c:	48022c6c 	.word	0x48022c6c
 8003360:	48022c80 	.word	0x48022c80
 8003364:	48022c94 	.word	0x48022c94
 8003368:	58025408 	.word	0x58025408
 800336c:	5802541c 	.word	0x5802541c
 8003370:	58025430 	.word	0x58025430
 8003374:	58025444 	.word	0x58025444
 8003378:	58025458 	.word	0x58025458
 800337c:	5802546c 	.word	0x5802546c
 8003380:	58025480 	.word	0x58025480
 8003384:	58025494 	.word	0x58025494
 8003388:	2300      	movs	r3, #0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d07e      	beq.n	800348c <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a80      	ldr	r2, [pc, #512]	; (8003594 <HAL_DMA_Init+0x630>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d021      	beq.n	80033dc <HAL_DMA_Init+0x478>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a7e      	ldr	r2, [pc, #504]	; (8003598 <HAL_DMA_Init+0x634>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d01c      	beq.n	80033dc <HAL_DMA_Init+0x478>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a7d      	ldr	r2, [pc, #500]	; (800359c <HAL_DMA_Init+0x638>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d017      	beq.n	80033dc <HAL_DMA_Init+0x478>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a7b      	ldr	r2, [pc, #492]	; (80035a0 <HAL_DMA_Init+0x63c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d012      	beq.n	80033dc <HAL_DMA_Init+0x478>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a7a      	ldr	r2, [pc, #488]	; (80035a4 <HAL_DMA_Init+0x640>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00d      	beq.n	80033dc <HAL_DMA_Init+0x478>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a78      	ldr	r2, [pc, #480]	; (80035a8 <HAL_DMA_Init+0x644>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d008      	beq.n	80033dc <HAL_DMA_Init+0x478>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a77      	ldr	r2, [pc, #476]	; (80035ac <HAL_DMA_Init+0x648>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d003      	beq.n	80033dc <HAL_DMA_Init+0x478>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a75      	ldr	r2, [pc, #468]	; (80035b0 <HAL_DMA_Init+0x64c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2202      	movs	r2, #2
 80033e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4b6e      	ldr	r3, [pc, #440]	; (80035b4 <HAL_DMA_Init+0x650>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b40      	cmp	r3, #64	; 0x40
 8003404:	d008      	beq.n	8003418 <HAL_DMA_Init+0x4b4>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2b80      	cmp	r3, #128	; 0x80
 800340c:	d102      	bne.n	8003414 <HAL_DMA_Init+0x4b0>
 800340e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003412:	e002      	b.n	800341a <HAL_DMA_Init+0x4b6>
 8003414:	2300      	movs	r3, #0
 8003416:	e000      	b.n	800341a <HAL_DMA_Init+0x4b6>
 8003418:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	68d2      	ldr	r2, [r2, #12]
 800341e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003420:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003428:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003430:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003438:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003440:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003448:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	4b56      	ldr	r3, [pc, #344]	; (80035b8 <HAL_DMA_Init+0x654>)
 8003460:	4413      	add	r3, r2
 8003462:	4a56      	ldr	r2, [pc, #344]	; (80035bc <HAL_DMA_Init+0x658>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	009a      	lsls	r2, r3, #2
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f001 ffd5 	bl	8005420 <DMA_CalcBaseAndBitshift>
 8003476:	4603      	mov	r3, r0
 8003478:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347e:	f003 031f 	and.w	r3, r3, #31
 8003482:	2201      	movs	r2, #1
 8003484:	409a      	lsls	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	e008      	b.n	800349e <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2240      	movs	r2, #64	; 0x40
 8003490:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2203      	movs	r2, #3
 8003496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e0ee      	b.n	800367c <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a47      	ldr	r2, [pc, #284]	; (80035c0 <HAL_DMA_Init+0x65c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d072      	beq.n	800358e <HAL_DMA_Init+0x62a>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a45      	ldr	r2, [pc, #276]	; (80035c4 <HAL_DMA_Init+0x660>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d06d      	beq.n	800358e <HAL_DMA_Init+0x62a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a44      	ldr	r2, [pc, #272]	; (80035c8 <HAL_DMA_Init+0x664>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d068      	beq.n	800358e <HAL_DMA_Init+0x62a>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a42      	ldr	r2, [pc, #264]	; (80035cc <HAL_DMA_Init+0x668>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d063      	beq.n	800358e <HAL_DMA_Init+0x62a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a41      	ldr	r2, [pc, #260]	; (80035d0 <HAL_DMA_Init+0x66c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d05e      	beq.n	800358e <HAL_DMA_Init+0x62a>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a3f      	ldr	r2, [pc, #252]	; (80035d4 <HAL_DMA_Init+0x670>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d059      	beq.n	800358e <HAL_DMA_Init+0x62a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a3e      	ldr	r2, [pc, #248]	; (80035d8 <HAL_DMA_Init+0x674>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d054      	beq.n	800358e <HAL_DMA_Init+0x62a>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a3c      	ldr	r2, [pc, #240]	; (80035dc <HAL_DMA_Init+0x678>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d04f      	beq.n	800358e <HAL_DMA_Init+0x62a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a3b      	ldr	r2, [pc, #236]	; (80035e0 <HAL_DMA_Init+0x67c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d04a      	beq.n	800358e <HAL_DMA_Init+0x62a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a39      	ldr	r2, [pc, #228]	; (80035e4 <HAL_DMA_Init+0x680>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d045      	beq.n	800358e <HAL_DMA_Init+0x62a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a38      	ldr	r2, [pc, #224]	; (80035e8 <HAL_DMA_Init+0x684>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d040      	beq.n	800358e <HAL_DMA_Init+0x62a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a36      	ldr	r2, [pc, #216]	; (80035ec <HAL_DMA_Init+0x688>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d03b      	beq.n	800358e <HAL_DMA_Init+0x62a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a35      	ldr	r2, [pc, #212]	; (80035f0 <HAL_DMA_Init+0x68c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d036      	beq.n	800358e <HAL_DMA_Init+0x62a>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a33      	ldr	r2, [pc, #204]	; (80035f4 <HAL_DMA_Init+0x690>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d031      	beq.n	800358e <HAL_DMA_Init+0x62a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a32      	ldr	r2, [pc, #200]	; (80035f8 <HAL_DMA_Init+0x694>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d02c      	beq.n	800358e <HAL_DMA_Init+0x62a>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a30      	ldr	r2, [pc, #192]	; (80035fc <HAL_DMA_Init+0x698>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d027      	beq.n	800358e <HAL_DMA_Init+0x62a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a14      	ldr	r2, [pc, #80]	; (8003594 <HAL_DMA_Init+0x630>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d022      	beq.n	800358e <HAL_DMA_Init+0x62a>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a12      	ldr	r2, [pc, #72]	; (8003598 <HAL_DMA_Init+0x634>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d01d      	beq.n	800358e <HAL_DMA_Init+0x62a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a11      	ldr	r2, [pc, #68]	; (800359c <HAL_DMA_Init+0x638>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d018      	beq.n	800358e <HAL_DMA_Init+0x62a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a0f      	ldr	r2, [pc, #60]	; (80035a0 <HAL_DMA_Init+0x63c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d013      	beq.n	800358e <HAL_DMA_Init+0x62a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a0e      	ldr	r2, [pc, #56]	; (80035a4 <HAL_DMA_Init+0x640>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00e      	beq.n	800358e <HAL_DMA_Init+0x62a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a0c      	ldr	r2, [pc, #48]	; (80035a8 <HAL_DMA_Init+0x644>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d009      	beq.n	800358e <HAL_DMA_Init+0x62a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a0b      	ldr	r2, [pc, #44]	; (80035ac <HAL_DMA_Init+0x648>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d004      	beq.n	800358e <HAL_DMA_Init+0x62a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a09      	ldr	r2, [pc, #36]	; (80035b0 <HAL_DMA_Init+0x64c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d138      	bne.n	8003600 <HAL_DMA_Init+0x69c>
 800358e:	2301      	movs	r3, #1
 8003590:	e037      	b.n	8003602 <HAL_DMA_Init+0x69e>
 8003592:	bf00      	nop
 8003594:	58025408 	.word	0x58025408
 8003598:	5802541c 	.word	0x5802541c
 800359c:	58025430 	.word	0x58025430
 80035a0:	58025444 	.word	0x58025444
 80035a4:	58025458 	.word	0x58025458
 80035a8:	5802546c 	.word	0x5802546c
 80035ac:	58025480 	.word	0x58025480
 80035b0:	58025494 	.word	0x58025494
 80035b4:	fffe000f 	.word	0xfffe000f
 80035b8:	a7fdabf8 	.word	0xa7fdabf8
 80035bc:	cccccccd 	.word	0xcccccccd
 80035c0:	40020010 	.word	0x40020010
 80035c4:	40020028 	.word	0x40020028
 80035c8:	40020040 	.word	0x40020040
 80035cc:	40020058 	.word	0x40020058
 80035d0:	40020070 	.word	0x40020070
 80035d4:	40020088 	.word	0x40020088
 80035d8:	400200a0 	.word	0x400200a0
 80035dc:	400200b8 	.word	0x400200b8
 80035e0:	40020410 	.word	0x40020410
 80035e4:	40020428 	.word	0x40020428
 80035e8:	40020440 	.word	0x40020440
 80035ec:	40020458 	.word	0x40020458
 80035f0:	40020470 	.word	0x40020470
 80035f4:	40020488 	.word	0x40020488
 80035f8:	400204a0 	.word	0x400204a0
 80035fc:	400204b8 	.word	0x400204b8
 8003600:	2300      	movs	r3, #0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d032      	beq.n	800366c <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f002 f838 	bl	800567c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b80      	cmp	r3, #128	; 0x80
 8003612:	d102      	bne.n	800361a <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800362e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d010      	beq.n	800365a <HAL_DMA_Init+0x6f6>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b08      	cmp	r3, #8
 800363e:	d80c      	bhi.n	800365a <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f002 f8b5 	bl	80057b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003656:	605a      	str	r2, [r3, #4]
 8003658:	e008      	b.n	800366c <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e226      	b.n	8003aee <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_DMA_Start_IT+0x2a>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e21f      	b.n	8003aee <HAL_DMA_Start_IT+0x46a>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b01      	cmp	r3, #1
 80036c0:	f040 820a 	bne.w	8003ad8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a68      	ldr	r2, [pc, #416]	; (8003878 <HAL_DMA_Start_IT+0x1f4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d04a      	beq.n	8003772 <HAL_DMA_Start_IT+0xee>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a66      	ldr	r2, [pc, #408]	; (800387c <HAL_DMA_Start_IT+0x1f8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d045      	beq.n	8003772 <HAL_DMA_Start_IT+0xee>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a65      	ldr	r2, [pc, #404]	; (8003880 <HAL_DMA_Start_IT+0x1fc>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d040      	beq.n	8003772 <HAL_DMA_Start_IT+0xee>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a63      	ldr	r2, [pc, #396]	; (8003884 <HAL_DMA_Start_IT+0x200>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d03b      	beq.n	8003772 <HAL_DMA_Start_IT+0xee>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a62      	ldr	r2, [pc, #392]	; (8003888 <HAL_DMA_Start_IT+0x204>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d036      	beq.n	8003772 <HAL_DMA_Start_IT+0xee>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a60      	ldr	r2, [pc, #384]	; (800388c <HAL_DMA_Start_IT+0x208>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d031      	beq.n	8003772 <HAL_DMA_Start_IT+0xee>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a5f      	ldr	r2, [pc, #380]	; (8003890 <HAL_DMA_Start_IT+0x20c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d02c      	beq.n	8003772 <HAL_DMA_Start_IT+0xee>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a5d      	ldr	r2, [pc, #372]	; (8003894 <HAL_DMA_Start_IT+0x210>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d027      	beq.n	8003772 <HAL_DMA_Start_IT+0xee>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a5c      	ldr	r2, [pc, #368]	; (8003898 <HAL_DMA_Start_IT+0x214>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d022      	beq.n	8003772 <HAL_DMA_Start_IT+0xee>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a5a      	ldr	r2, [pc, #360]	; (800389c <HAL_DMA_Start_IT+0x218>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d01d      	beq.n	8003772 <HAL_DMA_Start_IT+0xee>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a59      	ldr	r2, [pc, #356]	; (80038a0 <HAL_DMA_Start_IT+0x21c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d018      	beq.n	8003772 <HAL_DMA_Start_IT+0xee>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a57      	ldr	r2, [pc, #348]	; (80038a4 <HAL_DMA_Start_IT+0x220>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d013      	beq.n	8003772 <HAL_DMA_Start_IT+0xee>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a56      	ldr	r2, [pc, #344]	; (80038a8 <HAL_DMA_Start_IT+0x224>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00e      	beq.n	8003772 <HAL_DMA_Start_IT+0xee>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a54      	ldr	r2, [pc, #336]	; (80038ac <HAL_DMA_Start_IT+0x228>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d009      	beq.n	8003772 <HAL_DMA_Start_IT+0xee>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a53      	ldr	r2, [pc, #332]	; (80038b0 <HAL_DMA_Start_IT+0x22c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d004      	beq.n	8003772 <HAL_DMA_Start_IT+0xee>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a51      	ldr	r2, [pc, #324]	; (80038b4 <HAL_DMA_Start_IT+0x230>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d108      	bne.n	8003784 <HAL_DMA_Start_IT+0x100>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0201 	bic.w	r2, r2, #1
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	e007      	b.n	8003794 <HAL_DMA_Start_IT+0x110>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0201 	bic.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f001 fc5c 	bl	8005058 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a34      	ldr	r2, [pc, #208]	; (8003878 <HAL_DMA_Start_IT+0x1f4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d04a      	beq.n	8003840 <HAL_DMA_Start_IT+0x1bc>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a33      	ldr	r2, [pc, #204]	; (800387c <HAL_DMA_Start_IT+0x1f8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d045      	beq.n	8003840 <HAL_DMA_Start_IT+0x1bc>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a31      	ldr	r2, [pc, #196]	; (8003880 <HAL_DMA_Start_IT+0x1fc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d040      	beq.n	8003840 <HAL_DMA_Start_IT+0x1bc>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a30      	ldr	r2, [pc, #192]	; (8003884 <HAL_DMA_Start_IT+0x200>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d03b      	beq.n	8003840 <HAL_DMA_Start_IT+0x1bc>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a2e      	ldr	r2, [pc, #184]	; (8003888 <HAL_DMA_Start_IT+0x204>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d036      	beq.n	8003840 <HAL_DMA_Start_IT+0x1bc>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a2d      	ldr	r2, [pc, #180]	; (800388c <HAL_DMA_Start_IT+0x208>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d031      	beq.n	8003840 <HAL_DMA_Start_IT+0x1bc>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a2b      	ldr	r2, [pc, #172]	; (8003890 <HAL_DMA_Start_IT+0x20c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d02c      	beq.n	8003840 <HAL_DMA_Start_IT+0x1bc>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a2a      	ldr	r2, [pc, #168]	; (8003894 <HAL_DMA_Start_IT+0x210>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d027      	beq.n	8003840 <HAL_DMA_Start_IT+0x1bc>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a28      	ldr	r2, [pc, #160]	; (8003898 <HAL_DMA_Start_IT+0x214>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d022      	beq.n	8003840 <HAL_DMA_Start_IT+0x1bc>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a27      	ldr	r2, [pc, #156]	; (800389c <HAL_DMA_Start_IT+0x218>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d01d      	beq.n	8003840 <HAL_DMA_Start_IT+0x1bc>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a25      	ldr	r2, [pc, #148]	; (80038a0 <HAL_DMA_Start_IT+0x21c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d018      	beq.n	8003840 <HAL_DMA_Start_IT+0x1bc>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a24      	ldr	r2, [pc, #144]	; (80038a4 <HAL_DMA_Start_IT+0x220>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d013      	beq.n	8003840 <HAL_DMA_Start_IT+0x1bc>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a22      	ldr	r2, [pc, #136]	; (80038a8 <HAL_DMA_Start_IT+0x224>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00e      	beq.n	8003840 <HAL_DMA_Start_IT+0x1bc>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a21      	ldr	r2, [pc, #132]	; (80038ac <HAL_DMA_Start_IT+0x228>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d009      	beq.n	8003840 <HAL_DMA_Start_IT+0x1bc>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1f      	ldr	r2, [pc, #124]	; (80038b0 <HAL_DMA_Start_IT+0x22c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_DMA_Start_IT+0x1bc>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a1e      	ldr	r2, [pc, #120]	; (80038b4 <HAL_DMA_Start_IT+0x230>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d101      	bne.n	8003844 <HAL_DMA_Start_IT+0x1c0>
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <HAL_DMA_Start_IT+0x1c2>
 8003844:	2300      	movs	r3, #0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d036      	beq.n	80038b8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f023 021e 	bic.w	r2, r3, #30
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0216 	orr.w	r2, r2, #22
 800385c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	d03e      	beq.n	80038e4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0208 	orr.w	r2, r2, #8
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e035      	b.n	80038e4 <HAL_DMA_Start_IT+0x260>
 8003878:	40020010 	.word	0x40020010
 800387c:	40020028 	.word	0x40020028
 8003880:	40020040 	.word	0x40020040
 8003884:	40020058 	.word	0x40020058
 8003888:	40020070 	.word	0x40020070
 800388c:	40020088 	.word	0x40020088
 8003890:	400200a0 	.word	0x400200a0
 8003894:	400200b8 	.word	0x400200b8
 8003898:	40020410 	.word	0x40020410
 800389c:	40020428 	.word	0x40020428
 80038a0:	40020440 	.word	0x40020440
 80038a4:	40020458 	.word	0x40020458
 80038a8:	40020470 	.word	0x40020470
 80038ac:	40020488 	.word	0x40020488
 80038b0:	400204a0 	.word	0x400204a0
 80038b4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f023 020e 	bic.w	r2, r3, #14
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 020a 	orr.w	r2, r2, #10
 80038ca:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d007      	beq.n	80038e4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0204 	orr.w	r2, r2, #4
 80038e2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a83      	ldr	r2, [pc, #524]	; (8003af8 <HAL_DMA_Start_IT+0x474>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d072      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a82      	ldr	r2, [pc, #520]	; (8003afc <HAL_DMA_Start_IT+0x478>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d06d      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a80      	ldr	r2, [pc, #512]	; (8003b00 <HAL_DMA_Start_IT+0x47c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d068      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a7f      	ldr	r2, [pc, #508]	; (8003b04 <HAL_DMA_Start_IT+0x480>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d063      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a7d      	ldr	r2, [pc, #500]	; (8003b08 <HAL_DMA_Start_IT+0x484>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d05e      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a7c      	ldr	r2, [pc, #496]	; (8003b0c <HAL_DMA_Start_IT+0x488>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d059      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a7a      	ldr	r2, [pc, #488]	; (8003b10 <HAL_DMA_Start_IT+0x48c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d054      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a79      	ldr	r2, [pc, #484]	; (8003b14 <HAL_DMA_Start_IT+0x490>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d04f      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a77      	ldr	r2, [pc, #476]	; (8003b18 <HAL_DMA_Start_IT+0x494>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d04a      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a76      	ldr	r2, [pc, #472]	; (8003b1c <HAL_DMA_Start_IT+0x498>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d045      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a74      	ldr	r2, [pc, #464]	; (8003b20 <HAL_DMA_Start_IT+0x49c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d040      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a73      	ldr	r2, [pc, #460]	; (8003b24 <HAL_DMA_Start_IT+0x4a0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d03b      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a71      	ldr	r2, [pc, #452]	; (8003b28 <HAL_DMA_Start_IT+0x4a4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d036      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a70      	ldr	r2, [pc, #448]	; (8003b2c <HAL_DMA_Start_IT+0x4a8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d031      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a6e      	ldr	r2, [pc, #440]	; (8003b30 <HAL_DMA_Start_IT+0x4ac>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d02c      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a6d      	ldr	r2, [pc, #436]	; (8003b34 <HAL_DMA_Start_IT+0x4b0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d027      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a6b      	ldr	r2, [pc, #428]	; (8003b38 <HAL_DMA_Start_IT+0x4b4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d022      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a6a      	ldr	r2, [pc, #424]	; (8003b3c <HAL_DMA_Start_IT+0x4b8>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d01d      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a68      	ldr	r2, [pc, #416]	; (8003b40 <HAL_DMA_Start_IT+0x4bc>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d018      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a67      	ldr	r2, [pc, #412]	; (8003b44 <HAL_DMA_Start_IT+0x4c0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d013      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a65      	ldr	r2, [pc, #404]	; (8003b48 <HAL_DMA_Start_IT+0x4c4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00e      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a64      	ldr	r2, [pc, #400]	; (8003b4c <HAL_DMA_Start_IT+0x4c8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d009      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a62      	ldr	r2, [pc, #392]	; (8003b50 <HAL_DMA_Start_IT+0x4cc>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d004      	beq.n	80039d4 <HAL_DMA_Start_IT+0x350>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a61      	ldr	r2, [pc, #388]	; (8003b54 <HAL_DMA_Start_IT+0x4d0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d101      	bne.n	80039d8 <HAL_DMA_Start_IT+0x354>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <HAL_DMA_Start_IT+0x356>
 80039d8:	2300      	movs	r3, #0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d01a      	beq.n	8003a14 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d007      	beq.n	80039fc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039fa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d007      	beq.n	8003a14 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a12:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a37      	ldr	r2, [pc, #220]	; (8003af8 <HAL_DMA_Start_IT+0x474>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d04a      	beq.n	8003ab4 <HAL_DMA_Start_IT+0x430>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a36      	ldr	r2, [pc, #216]	; (8003afc <HAL_DMA_Start_IT+0x478>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d045      	beq.n	8003ab4 <HAL_DMA_Start_IT+0x430>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a34      	ldr	r2, [pc, #208]	; (8003b00 <HAL_DMA_Start_IT+0x47c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d040      	beq.n	8003ab4 <HAL_DMA_Start_IT+0x430>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a33      	ldr	r2, [pc, #204]	; (8003b04 <HAL_DMA_Start_IT+0x480>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d03b      	beq.n	8003ab4 <HAL_DMA_Start_IT+0x430>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a31      	ldr	r2, [pc, #196]	; (8003b08 <HAL_DMA_Start_IT+0x484>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d036      	beq.n	8003ab4 <HAL_DMA_Start_IT+0x430>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a30      	ldr	r2, [pc, #192]	; (8003b0c <HAL_DMA_Start_IT+0x488>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d031      	beq.n	8003ab4 <HAL_DMA_Start_IT+0x430>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a2e      	ldr	r2, [pc, #184]	; (8003b10 <HAL_DMA_Start_IT+0x48c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d02c      	beq.n	8003ab4 <HAL_DMA_Start_IT+0x430>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a2d      	ldr	r2, [pc, #180]	; (8003b14 <HAL_DMA_Start_IT+0x490>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d027      	beq.n	8003ab4 <HAL_DMA_Start_IT+0x430>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a2b      	ldr	r2, [pc, #172]	; (8003b18 <HAL_DMA_Start_IT+0x494>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d022      	beq.n	8003ab4 <HAL_DMA_Start_IT+0x430>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a2a      	ldr	r2, [pc, #168]	; (8003b1c <HAL_DMA_Start_IT+0x498>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d01d      	beq.n	8003ab4 <HAL_DMA_Start_IT+0x430>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a28      	ldr	r2, [pc, #160]	; (8003b20 <HAL_DMA_Start_IT+0x49c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d018      	beq.n	8003ab4 <HAL_DMA_Start_IT+0x430>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a27      	ldr	r2, [pc, #156]	; (8003b24 <HAL_DMA_Start_IT+0x4a0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d013      	beq.n	8003ab4 <HAL_DMA_Start_IT+0x430>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a25      	ldr	r2, [pc, #148]	; (8003b28 <HAL_DMA_Start_IT+0x4a4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00e      	beq.n	8003ab4 <HAL_DMA_Start_IT+0x430>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a24      	ldr	r2, [pc, #144]	; (8003b2c <HAL_DMA_Start_IT+0x4a8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d009      	beq.n	8003ab4 <HAL_DMA_Start_IT+0x430>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a22      	ldr	r2, [pc, #136]	; (8003b30 <HAL_DMA_Start_IT+0x4ac>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d004      	beq.n	8003ab4 <HAL_DMA_Start_IT+0x430>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a21      	ldr	r2, [pc, #132]	; (8003b34 <HAL_DMA_Start_IT+0x4b0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d108      	bne.n	8003ac6 <HAL_DMA_Start_IT+0x442>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	e012      	b.n	8003aec <HAL_DMA_Start_IT+0x468>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0201 	orr.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	e009      	b.n	8003aec <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ade:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40020010 	.word	0x40020010
 8003afc:	40020028 	.word	0x40020028
 8003b00:	40020040 	.word	0x40020040
 8003b04:	40020058 	.word	0x40020058
 8003b08:	40020070 	.word	0x40020070
 8003b0c:	40020088 	.word	0x40020088
 8003b10:	400200a0 	.word	0x400200a0
 8003b14:	400200b8 	.word	0x400200b8
 8003b18:	40020410 	.word	0x40020410
 8003b1c:	40020428 	.word	0x40020428
 8003b20:	40020440 	.word	0x40020440
 8003b24:	40020458 	.word	0x40020458
 8003b28:	40020470 	.word	0x40020470
 8003b2c:	40020488 	.word	0x40020488
 8003b30:	400204a0 	.word	0x400204a0
 8003b34:	400204b8 	.word	0x400204b8
 8003b38:	58025408 	.word	0x58025408
 8003b3c:	5802541c 	.word	0x5802541c
 8003b40:	58025430 	.word	0x58025430
 8003b44:	58025444 	.word	0x58025444
 8003b48:	58025458 	.word	0x58025458
 8003b4c:	5802546c 	.word	0x5802546c
 8003b50:	58025480 	.word	0x58025480
 8003b54:	58025494 	.word	0x58025494

08003b58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003b60:	f7fd fdb6 	bl	80016d0 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e2dc      	b.n	800412a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d008      	beq.n	8003b8e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2280      	movs	r2, #128	; 0x80
 8003b80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e2cd      	b.n	800412a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a76      	ldr	r2, [pc, #472]	; (8003d6c <HAL_DMA_Abort+0x214>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d04a      	beq.n	8003c2e <HAL_DMA_Abort+0xd6>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a74      	ldr	r2, [pc, #464]	; (8003d70 <HAL_DMA_Abort+0x218>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d045      	beq.n	8003c2e <HAL_DMA_Abort+0xd6>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a73      	ldr	r2, [pc, #460]	; (8003d74 <HAL_DMA_Abort+0x21c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d040      	beq.n	8003c2e <HAL_DMA_Abort+0xd6>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a71      	ldr	r2, [pc, #452]	; (8003d78 <HAL_DMA_Abort+0x220>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d03b      	beq.n	8003c2e <HAL_DMA_Abort+0xd6>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a70      	ldr	r2, [pc, #448]	; (8003d7c <HAL_DMA_Abort+0x224>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d036      	beq.n	8003c2e <HAL_DMA_Abort+0xd6>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a6e      	ldr	r2, [pc, #440]	; (8003d80 <HAL_DMA_Abort+0x228>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d031      	beq.n	8003c2e <HAL_DMA_Abort+0xd6>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a6d      	ldr	r2, [pc, #436]	; (8003d84 <HAL_DMA_Abort+0x22c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d02c      	beq.n	8003c2e <HAL_DMA_Abort+0xd6>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a6b      	ldr	r2, [pc, #428]	; (8003d88 <HAL_DMA_Abort+0x230>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d027      	beq.n	8003c2e <HAL_DMA_Abort+0xd6>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a6a      	ldr	r2, [pc, #424]	; (8003d8c <HAL_DMA_Abort+0x234>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d022      	beq.n	8003c2e <HAL_DMA_Abort+0xd6>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a68      	ldr	r2, [pc, #416]	; (8003d90 <HAL_DMA_Abort+0x238>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d01d      	beq.n	8003c2e <HAL_DMA_Abort+0xd6>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a67      	ldr	r2, [pc, #412]	; (8003d94 <HAL_DMA_Abort+0x23c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d018      	beq.n	8003c2e <HAL_DMA_Abort+0xd6>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a65      	ldr	r2, [pc, #404]	; (8003d98 <HAL_DMA_Abort+0x240>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <HAL_DMA_Abort+0xd6>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a64      	ldr	r2, [pc, #400]	; (8003d9c <HAL_DMA_Abort+0x244>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00e      	beq.n	8003c2e <HAL_DMA_Abort+0xd6>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a62      	ldr	r2, [pc, #392]	; (8003da0 <HAL_DMA_Abort+0x248>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d009      	beq.n	8003c2e <HAL_DMA_Abort+0xd6>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a61      	ldr	r2, [pc, #388]	; (8003da4 <HAL_DMA_Abort+0x24c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d004      	beq.n	8003c2e <HAL_DMA_Abort+0xd6>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a5f      	ldr	r2, [pc, #380]	; (8003da8 <HAL_DMA_Abort+0x250>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d101      	bne.n	8003c32 <HAL_DMA_Abort+0xda>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <HAL_DMA_Abort+0xdc>
 8003c32:	2300      	movs	r3, #0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d013      	beq.n	8003c60 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 021e 	bic.w	r2, r2, #30
 8003c46:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695a      	ldr	r2, [r3, #20]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c56:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	e00a      	b.n	8003c76 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 020e 	bic.w	r2, r2, #14
 8003c6e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a3c      	ldr	r2, [pc, #240]	; (8003d6c <HAL_DMA_Abort+0x214>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d072      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a3a      	ldr	r2, [pc, #232]	; (8003d70 <HAL_DMA_Abort+0x218>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d06d      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a39      	ldr	r2, [pc, #228]	; (8003d74 <HAL_DMA_Abort+0x21c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d068      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a37      	ldr	r2, [pc, #220]	; (8003d78 <HAL_DMA_Abort+0x220>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d063      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a36      	ldr	r2, [pc, #216]	; (8003d7c <HAL_DMA_Abort+0x224>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d05e      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a34      	ldr	r2, [pc, #208]	; (8003d80 <HAL_DMA_Abort+0x228>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d059      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a33      	ldr	r2, [pc, #204]	; (8003d84 <HAL_DMA_Abort+0x22c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d054      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a31      	ldr	r2, [pc, #196]	; (8003d88 <HAL_DMA_Abort+0x230>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d04f      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a30      	ldr	r2, [pc, #192]	; (8003d8c <HAL_DMA_Abort+0x234>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d04a      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a2e      	ldr	r2, [pc, #184]	; (8003d90 <HAL_DMA_Abort+0x238>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d045      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a2d      	ldr	r2, [pc, #180]	; (8003d94 <HAL_DMA_Abort+0x23c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d040      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a2b      	ldr	r2, [pc, #172]	; (8003d98 <HAL_DMA_Abort+0x240>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d03b      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a2a      	ldr	r2, [pc, #168]	; (8003d9c <HAL_DMA_Abort+0x244>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d036      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a28      	ldr	r2, [pc, #160]	; (8003da0 <HAL_DMA_Abort+0x248>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d031      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a27      	ldr	r2, [pc, #156]	; (8003da4 <HAL_DMA_Abort+0x24c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d02c      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a25      	ldr	r2, [pc, #148]	; (8003da8 <HAL_DMA_Abort+0x250>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d027      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a24      	ldr	r2, [pc, #144]	; (8003dac <HAL_DMA_Abort+0x254>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d022      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a22      	ldr	r2, [pc, #136]	; (8003db0 <HAL_DMA_Abort+0x258>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d01d      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a21      	ldr	r2, [pc, #132]	; (8003db4 <HAL_DMA_Abort+0x25c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d018      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a1f      	ldr	r2, [pc, #124]	; (8003db8 <HAL_DMA_Abort+0x260>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d013      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a1e      	ldr	r2, [pc, #120]	; (8003dbc <HAL_DMA_Abort+0x264>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00e      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a1c      	ldr	r2, [pc, #112]	; (8003dc0 <HAL_DMA_Abort+0x268>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d009      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a1b      	ldr	r2, [pc, #108]	; (8003dc4 <HAL_DMA_Abort+0x26c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d004      	beq.n	8003d66 <HAL_DMA_Abort+0x20e>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a19      	ldr	r2, [pc, #100]	; (8003dc8 <HAL_DMA_Abort+0x270>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d132      	bne.n	8003dcc <HAL_DMA_Abort+0x274>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e031      	b.n	8003dce <HAL_DMA_Abort+0x276>
 8003d6a:	bf00      	nop
 8003d6c:	40020010 	.word	0x40020010
 8003d70:	40020028 	.word	0x40020028
 8003d74:	40020040 	.word	0x40020040
 8003d78:	40020058 	.word	0x40020058
 8003d7c:	40020070 	.word	0x40020070
 8003d80:	40020088 	.word	0x40020088
 8003d84:	400200a0 	.word	0x400200a0
 8003d88:	400200b8 	.word	0x400200b8
 8003d8c:	40020410 	.word	0x40020410
 8003d90:	40020428 	.word	0x40020428
 8003d94:	40020440 	.word	0x40020440
 8003d98:	40020458 	.word	0x40020458
 8003d9c:	40020470 	.word	0x40020470
 8003da0:	40020488 	.word	0x40020488
 8003da4:	400204a0 	.word	0x400204a0
 8003da8:	400204b8 	.word	0x400204b8
 8003dac:	58025408 	.word	0x58025408
 8003db0:	5802541c 	.word	0x5802541c
 8003db4:	58025430 	.word	0x58025430
 8003db8:	58025444 	.word	0x58025444
 8003dbc:	58025458 	.word	0x58025458
 8003dc0:	5802546c 	.word	0x5802546c
 8003dc4:	58025480 	.word	0x58025480
 8003dc8:	58025494 	.word	0x58025494
 8003dcc:	2300      	movs	r3, #0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003de0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a6d      	ldr	r2, [pc, #436]	; (8003f9c <HAL_DMA_Abort+0x444>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d04a      	beq.n	8003e82 <HAL_DMA_Abort+0x32a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a6b      	ldr	r2, [pc, #428]	; (8003fa0 <HAL_DMA_Abort+0x448>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d045      	beq.n	8003e82 <HAL_DMA_Abort+0x32a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a6a      	ldr	r2, [pc, #424]	; (8003fa4 <HAL_DMA_Abort+0x44c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d040      	beq.n	8003e82 <HAL_DMA_Abort+0x32a>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a68      	ldr	r2, [pc, #416]	; (8003fa8 <HAL_DMA_Abort+0x450>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d03b      	beq.n	8003e82 <HAL_DMA_Abort+0x32a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a67      	ldr	r2, [pc, #412]	; (8003fac <HAL_DMA_Abort+0x454>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d036      	beq.n	8003e82 <HAL_DMA_Abort+0x32a>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a65      	ldr	r2, [pc, #404]	; (8003fb0 <HAL_DMA_Abort+0x458>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d031      	beq.n	8003e82 <HAL_DMA_Abort+0x32a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a64      	ldr	r2, [pc, #400]	; (8003fb4 <HAL_DMA_Abort+0x45c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d02c      	beq.n	8003e82 <HAL_DMA_Abort+0x32a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a62      	ldr	r2, [pc, #392]	; (8003fb8 <HAL_DMA_Abort+0x460>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d027      	beq.n	8003e82 <HAL_DMA_Abort+0x32a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a61      	ldr	r2, [pc, #388]	; (8003fbc <HAL_DMA_Abort+0x464>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d022      	beq.n	8003e82 <HAL_DMA_Abort+0x32a>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a5f      	ldr	r2, [pc, #380]	; (8003fc0 <HAL_DMA_Abort+0x468>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d01d      	beq.n	8003e82 <HAL_DMA_Abort+0x32a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a5e      	ldr	r2, [pc, #376]	; (8003fc4 <HAL_DMA_Abort+0x46c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d018      	beq.n	8003e82 <HAL_DMA_Abort+0x32a>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a5c      	ldr	r2, [pc, #368]	; (8003fc8 <HAL_DMA_Abort+0x470>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d013      	beq.n	8003e82 <HAL_DMA_Abort+0x32a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a5b      	ldr	r2, [pc, #364]	; (8003fcc <HAL_DMA_Abort+0x474>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00e      	beq.n	8003e82 <HAL_DMA_Abort+0x32a>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a59      	ldr	r2, [pc, #356]	; (8003fd0 <HAL_DMA_Abort+0x478>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d009      	beq.n	8003e82 <HAL_DMA_Abort+0x32a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a58      	ldr	r2, [pc, #352]	; (8003fd4 <HAL_DMA_Abort+0x47c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d004      	beq.n	8003e82 <HAL_DMA_Abort+0x32a>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a56      	ldr	r2, [pc, #344]	; (8003fd8 <HAL_DMA_Abort+0x480>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d108      	bne.n	8003e94 <HAL_DMA_Abort+0x33c>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0201 	bic.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	e007      	b.n	8003ea4 <HAL_DMA_Abort+0x34c>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0201 	bic.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003ea4:	e013      	b.n	8003ece <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ea6:	f7fd fc13 	bl	80016d0 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b05      	cmp	r3, #5
 8003eb2:	d90c      	bls.n	8003ece <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2203      	movs	r2, #3
 8003ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e12d      	b.n	800412a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e5      	bne.n	8003ea6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a2f      	ldr	r2, [pc, #188]	; (8003f9c <HAL_DMA_Abort+0x444>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d04a      	beq.n	8003f7a <HAL_DMA_Abort+0x422>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a2d      	ldr	r2, [pc, #180]	; (8003fa0 <HAL_DMA_Abort+0x448>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d045      	beq.n	8003f7a <HAL_DMA_Abort+0x422>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a2c      	ldr	r2, [pc, #176]	; (8003fa4 <HAL_DMA_Abort+0x44c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d040      	beq.n	8003f7a <HAL_DMA_Abort+0x422>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a2a      	ldr	r2, [pc, #168]	; (8003fa8 <HAL_DMA_Abort+0x450>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d03b      	beq.n	8003f7a <HAL_DMA_Abort+0x422>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a29      	ldr	r2, [pc, #164]	; (8003fac <HAL_DMA_Abort+0x454>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d036      	beq.n	8003f7a <HAL_DMA_Abort+0x422>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a27      	ldr	r2, [pc, #156]	; (8003fb0 <HAL_DMA_Abort+0x458>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d031      	beq.n	8003f7a <HAL_DMA_Abort+0x422>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a26      	ldr	r2, [pc, #152]	; (8003fb4 <HAL_DMA_Abort+0x45c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d02c      	beq.n	8003f7a <HAL_DMA_Abort+0x422>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a24      	ldr	r2, [pc, #144]	; (8003fb8 <HAL_DMA_Abort+0x460>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d027      	beq.n	8003f7a <HAL_DMA_Abort+0x422>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a23      	ldr	r2, [pc, #140]	; (8003fbc <HAL_DMA_Abort+0x464>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d022      	beq.n	8003f7a <HAL_DMA_Abort+0x422>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a21      	ldr	r2, [pc, #132]	; (8003fc0 <HAL_DMA_Abort+0x468>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d01d      	beq.n	8003f7a <HAL_DMA_Abort+0x422>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a20      	ldr	r2, [pc, #128]	; (8003fc4 <HAL_DMA_Abort+0x46c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d018      	beq.n	8003f7a <HAL_DMA_Abort+0x422>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a1e      	ldr	r2, [pc, #120]	; (8003fc8 <HAL_DMA_Abort+0x470>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d013      	beq.n	8003f7a <HAL_DMA_Abort+0x422>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a1d      	ldr	r2, [pc, #116]	; (8003fcc <HAL_DMA_Abort+0x474>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00e      	beq.n	8003f7a <HAL_DMA_Abort+0x422>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a1b      	ldr	r2, [pc, #108]	; (8003fd0 <HAL_DMA_Abort+0x478>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d009      	beq.n	8003f7a <HAL_DMA_Abort+0x422>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a1a      	ldr	r2, [pc, #104]	; (8003fd4 <HAL_DMA_Abort+0x47c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d004      	beq.n	8003f7a <HAL_DMA_Abort+0x422>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a18      	ldr	r2, [pc, #96]	; (8003fd8 <HAL_DMA_Abort+0x480>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d101      	bne.n	8003f7e <HAL_DMA_Abort+0x426>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <HAL_DMA_Abort+0x428>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d02b      	beq.n	8003fdc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f88:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8e:	f003 031f 	and.w	r3, r3, #31
 8003f92:	223f      	movs	r2, #63	; 0x3f
 8003f94:	409a      	lsls	r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	609a      	str	r2, [r3, #8]
 8003f9a:	e02a      	b.n	8003ff2 <HAL_DMA_Abort+0x49a>
 8003f9c:	40020010 	.word	0x40020010
 8003fa0:	40020028 	.word	0x40020028
 8003fa4:	40020040 	.word	0x40020040
 8003fa8:	40020058 	.word	0x40020058
 8003fac:	40020070 	.word	0x40020070
 8003fb0:	40020088 	.word	0x40020088
 8003fb4:	400200a0 	.word	0x400200a0
 8003fb8:	400200b8 	.word	0x400200b8
 8003fbc:	40020410 	.word	0x40020410
 8003fc0:	40020428 	.word	0x40020428
 8003fc4:	40020440 	.word	0x40020440
 8003fc8:	40020458 	.word	0x40020458
 8003fcc:	40020470 	.word	0x40020470
 8003fd0:	40020488 	.word	0x40020488
 8003fd4:	400204a0 	.word	0x400204a0
 8003fd8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe6:	f003 031f 	and.w	r3, r3, #31
 8003fea:	2201      	movs	r2, #1
 8003fec:	409a      	lsls	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a4f      	ldr	r2, [pc, #316]	; (8004134 <HAL_DMA_Abort+0x5dc>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d072      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a4d      	ldr	r2, [pc, #308]	; (8004138 <HAL_DMA_Abort+0x5e0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d06d      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a4c      	ldr	r2, [pc, #304]	; (800413c <HAL_DMA_Abort+0x5e4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d068      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a4a      	ldr	r2, [pc, #296]	; (8004140 <HAL_DMA_Abort+0x5e8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d063      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a49      	ldr	r2, [pc, #292]	; (8004144 <HAL_DMA_Abort+0x5ec>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d05e      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a47      	ldr	r2, [pc, #284]	; (8004148 <HAL_DMA_Abort+0x5f0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d059      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a46      	ldr	r2, [pc, #280]	; (800414c <HAL_DMA_Abort+0x5f4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d054      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a44      	ldr	r2, [pc, #272]	; (8004150 <HAL_DMA_Abort+0x5f8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d04f      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a43      	ldr	r2, [pc, #268]	; (8004154 <HAL_DMA_Abort+0x5fc>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d04a      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a41      	ldr	r2, [pc, #260]	; (8004158 <HAL_DMA_Abort+0x600>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d045      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a40      	ldr	r2, [pc, #256]	; (800415c <HAL_DMA_Abort+0x604>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d040      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a3e      	ldr	r2, [pc, #248]	; (8004160 <HAL_DMA_Abort+0x608>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d03b      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a3d      	ldr	r2, [pc, #244]	; (8004164 <HAL_DMA_Abort+0x60c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d036      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a3b      	ldr	r2, [pc, #236]	; (8004168 <HAL_DMA_Abort+0x610>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d031      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a3a      	ldr	r2, [pc, #232]	; (800416c <HAL_DMA_Abort+0x614>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d02c      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a38      	ldr	r2, [pc, #224]	; (8004170 <HAL_DMA_Abort+0x618>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d027      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a37      	ldr	r2, [pc, #220]	; (8004174 <HAL_DMA_Abort+0x61c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d022      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a35      	ldr	r2, [pc, #212]	; (8004178 <HAL_DMA_Abort+0x620>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d01d      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a34      	ldr	r2, [pc, #208]	; (800417c <HAL_DMA_Abort+0x624>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d018      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a32      	ldr	r2, [pc, #200]	; (8004180 <HAL_DMA_Abort+0x628>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d013      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a31      	ldr	r2, [pc, #196]	; (8004184 <HAL_DMA_Abort+0x62c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00e      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a2f      	ldr	r2, [pc, #188]	; (8004188 <HAL_DMA_Abort+0x630>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d009      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a2e      	ldr	r2, [pc, #184]	; (800418c <HAL_DMA_Abort+0x634>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d004      	beq.n	80040e2 <HAL_DMA_Abort+0x58a>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a2c      	ldr	r2, [pc, #176]	; (8004190 <HAL_DMA_Abort+0x638>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d101      	bne.n	80040e6 <HAL_DMA_Abort+0x58e>
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <HAL_DMA_Abort+0x590>
 80040e6:	2300      	movs	r3, #0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d015      	beq.n	8004118 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040f4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00c      	beq.n	8004118 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800410c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004116:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40020010 	.word	0x40020010
 8004138:	40020028 	.word	0x40020028
 800413c:	40020040 	.word	0x40020040
 8004140:	40020058 	.word	0x40020058
 8004144:	40020070 	.word	0x40020070
 8004148:	40020088 	.word	0x40020088
 800414c:	400200a0 	.word	0x400200a0
 8004150:	400200b8 	.word	0x400200b8
 8004154:	40020410 	.word	0x40020410
 8004158:	40020428 	.word	0x40020428
 800415c:	40020440 	.word	0x40020440
 8004160:	40020458 	.word	0x40020458
 8004164:	40020470 	.word	0x40020470
 8004168:	40020488 	.word	0x40020488
 800416c:	400204a0 	.word	0x400204a0
 8004170:	400204b8 	.word	0x400204b8
 8004174:	58025408 	.word	0x58025408
 8004178:	5802541c 	.word	0x5802541c
 800417c:	58025430 	.word	0x58025430
 8004180:	58025444 	.word	0x58025444
 8004184:	58025458 	.word	0x58025458
 8004188:	5802546c 	.word	0x5802546c
 800418c:	58025480 	.word	0x58025480
 8004190:	58025494 	.word	0x58025494

08004194 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b08a      	sub	sp, #40	; 0x28
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041a0:	4b67      	ldr	r3, [pc, #412]	; (8004340 <HAL_DMA_IRQHandler+0x1ac>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a67      	ldr	r2, [pc, #412]	; (8004344 <HAL_DMA_IRQHandler+0x1b0>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	0a9b      	lsrs	r3, r3, #10
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a5f      	ldr	r2, [pc, #380]	; (8004348 <HAL_DMA_IRQHandler+0x1b4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d04a      	beq.n	8004266 <HAL_DMA_IRQHandler+0xd2>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a5d      	ldr	r2, [pc, #372]	; (800434c <HAL_DMA_IRQHandler+0x1b8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d045      	beq.n	8004266 <HAL_DMA_IRQHandler+0xd2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a5c      	ldr	r2, [pc, #368]	; (8004350 <HAL_DMA_IRQHandler+0x1bc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d040      	beq.n	8004266 <HAL_DMA_IRQHandler+0xd2>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a5a      	ldr	r2, [pc, #360]	; (8004354 <HAL_DMA_IRQHandler+0x1c0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d03b      	beq.n	8004266 <HAL_DMA_IRQHandler+0xd2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a59      	ldr	r2, [pc, #356]	; (8004358 <HAL_DMA_IRQHandler+0x1c4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d036      	beq.n	8004266 <HAL_DMA_IRQHandler+0xd2>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a57      	ldr	r2, [pc, #348]	; (800435c <HAL_DMA_IRQHandler+0x1c8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d031      	beq.n	8004266 <HAL_DMA_IRQHandler+0xd2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a56      	ldr	r2, [pc, #344]	; (8004360 <HAL_DMA_IRQHandler+0x1cc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d02c      	beq.n	8004266 <HAL_DMA_IRQHandler+0xd2>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a54      	ldr	r2, [pc, #336]	; (8004364 <HAL_DMA_IRQHandler+0x1d0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d027      	beq.n	8004266 <HAL_DMA_IRQHandler+0xd2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a53      	ldr	r2, [pc, #332]	; (8004368 <HAL_DMA_IRQHandler+0x1d4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d022      	beq.n	8004266 <HAL_DMA_IRQHandler+0xd2>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a51      	ldr	r2, [pc, #324]	; (800436c <HAL_DMA_IRQHandler+0x1d8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d01d      	beq.n	8004266 <HAL_DMA_IRQHandler+0xd2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a50      	ldr	r2, [pc, #320]	; (8004370 <HAL_DMA_IRQHandler+0x1dc>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d018      	beq.n	8004266 <HAL_DMA_IRQHandler+0xd2>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a4e      	ldr	r2, [pc, #312]	; (8004374 <HAL_DMA_IRQHandler+0x1e0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d013      	beq.n	8004266 <HAL_DMA_IRQHandler+0xd2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a4d      	ldr	r2, [pc, #308]	; (8004378 <HAL_DMA_IRQHandler+0x1e4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00e      	beq.n	8004266 <HAL_DMA_IRQHandler+0xd2>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a4b      	ldr	r2, [pc, #300]	; (800437c <HAL_DMA_IRQHandler+0x1e8>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d009      	beq.n	8004266 <HAL_DMA_IRQHandler+0xd2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a4a      	ldr	r2, [pc, #296]	; (8004380 <HAL_DMA_IRQHandler+0x1ec>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d004      	beq.n	8004266 <HAL_DMA_IRQHandler+0xd2>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a48      	ldr	r2, [pc, #288]	; (8004384 <HAL_DMA_IRQHandler+0x1f0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d101      	bne.n	800426a <HAL_DMA_IRQHandler+0xd6>
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <HAL_DMA_IRQHandler+0xd8>
 800426a:	2300      	movs	r3, #0
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 842b 	beq.w	8004ac8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004276:	f003 031f 	and.w	r3, r3, #31
 800427a:	2208      	movs	r2, #8
 800427c:	409a      	lsls	r2, r3
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	4013      	ands	r3, r2
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80a2 	beq.w	80043cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a2e      	ldr	r2, [pc, #184]	; (8004348 <HAL_DMA_IRQHandler+0x1b4>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d04a      	beq.n	8004328 <HAL_DMA_IRQHandler+0x194>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a2d      	ldr	r2, [pc, #180]	; (800434c <HAL_DMA_IRQHandler+0x1b8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d045      	beq.n	8004328 <HAL_DMA_IRQHandler+0x194>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a2b      	ldr	r2, [pc, #172]	; (8004350 <HAL_DMA_IRQHandler+0x1bc>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d040      	beq.n	8004328 <HAL_DMA_IRQHandler+0x194>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a2a      	ldr	r2, [pc, #168]	; (8004354 <HAL_DMA_IRQHandler+0x1c0>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d03b      	beq.n	8004328 <HAL_DMA_IRQHandler+0x194>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a28      	ldr	r2, [pc, #160]	; (8004358 <HAL_DMA_IRQHandler+0x1c4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d036      	beq.n	8004328 <HAL_DMA_IRQHandler+0x194>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a27      	ldr	r2, [pc, #156]	; (800435c <HAL_DMA_IRQHandler+0x1c8>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d031      	beq.n	8004328 <HAL_DMA_IRQHandler+0x194>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a25      	ldr	r2, [pc, #148]	; (8004360 <HAL_DMA_IRQHandler+0x1cc>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d02c      	beq.n	8004328 <HAL_DMA_IRQHandler+0x194>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a24      	ldr	r2, [pc, #144]	; (8004364 <HAL_DMA_IRQHandler+0x1d0>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d027      	beq.n	8004328 <HAL_DMA_IRQHandler+0x194>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a22      	ldr	r2, [pc, #136]	; (8004368 <HAL_DMA_IRQHandler+0x1d4>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d022      	beq.n	8004328 <HAL_DMA_IRQHandler+0x194>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a21      	ldr	r2, [pc, #132]	; (800436c <HAL_DMA_IRQHandler+0x1d8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d01d      	beq.n	8004328 <HAL_DMA_IRQHandler+0x194>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a1f      	ldr	r2, [pc, #124]	; (8004370 <HAL_DMA_IRQHandler+0x1dc>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d018      	beq.n	8004328 <HAL_DMA_IRQHandler+0x194>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a1e      	ldr	r2, [pc, #120]	; (8004374 <HAL_DMA_IRQHandler+0x1e0>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d013      	beq.n	8004328 <HAL_DMA_IRQHandler+0x194>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a1c      	ldr	r2, [pc, #112]	; (8004378 <HAL_DMA_IRQHandler+0x1e4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d00e      	beq.n	8004328 <HAL_DMA_IRQHandler+0x194>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a1b      	ldr	r2, [pc, #108]	; (800437c <HAL_DMA_IRQHandler+0x1e8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d009      	beq.n	8004328 <HAL_DMA_IRQHandler+0x194>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a19      	ldr	r2, [pc, #100]	; (8004380 <HAL_DMA_IRQHandler+0x1ec>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d004      	beq.n	8004328 <HAL_DMA_IRQHandler+0x194>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a18      	ldr	r2, [pc, #96]	; (8004384 <HAL_DMA_IRQHandler+0x1f0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d12f      	bne.n	8004388 <HAL_DMA_IRQHandler+0x1f4>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	bf14      	ite	ne
 8004336:	2301      	movne	r3, #1
 8004338:	2300      	moveq	r3, #0
 800433a:	b2db      	uxtb	r3, r3
 800433c:	e02e      	b.n	800439c <HAL_DMA_IRQHandler+0x208>
 800433e:	bf00      	nop
 8004340:	24000004 	.word	0x24000004
 8004344:	1b4e81b5 	.word	0x1b4e81b5
 8004348:	40020010 	.word	0x40020010
 800434c:	40020028 	.word	0x40020028
 8004350:	40020040 	.word	0x40020040
 8004354:	40020058 	.word	0x40020058
 8004358:	40020070 	.word	0x40020070
 800435c:	40020088 	.word	0x40020088
 8004360:	400200a0 	.word	0x400200a0
 8004364:	400200b8 	.word	0x400200b8
 8004368:	40020410 	.word	0x40020410
 800436c:	40020428 	.word	0x40020428
 8004370:	40020440 	.word	0x40020440
 8004374:	40020458 	.word	0x40020458
 8004378:	40020470 	.word	0x40020470
 800437c:	40020488 	.word	0x40020488
 8004380:	400204a0 	.word	0x400204a0
 8004384:	400204b8 	.word	0x400204b8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	bf14      	ite	ne
 8004396:	2301      	movne	r3, #1
 8004398:	2300      	moveq	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d015      	beq.n	80043cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0204 	bic.w	r2, r2, #4
 80043ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	2208      	movs	r2, #8
 80043ba:	409a      	lsls	r2, r3
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c4:	f043 0201 	orr.w	r2, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d0:	f003 031f 	and.w	r3, r3, #31
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	fa22 f303 	lsr.w	r3, r2, r3
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d06e      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a69      	ldr	r2, [pc, #420]	; (800458c <HAL_DMA_IRQHandler+0x3f8>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d04a      	beq.n	8004482 <HAL_DMA_IRQHandler+0x2ee>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a67      	ldr	r2, [pc, #412]	; (8004590 <HAL_DMA_IRQHandler+0x3fc>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d045      	beq.n	8004482 <HAL_DMA_IRQHandler+0x2ee>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a66      	ldr	r2, [pc, #408]	; (8004594 <HAL_DMA_IRQHandler+0x400>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d040      	beq.n	8004482 <HAL_DMA_IRQHandler+0x2ee>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a64      	ldr	r2, [pc, #400]	; (8004598 <HAL_DMA_IRQHandler+0x404>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d03b      	beq.n	8004482 <HAL_DMA_IRQHandler+0x2ee>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a63      	ldr	r2, [pc, #396]	; (800459c <HAL_DMA_IRQHandler+0x408>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d036      	beq.n	8004482 <HAL_DMA_IRQHandler+0x2ee>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a61      	ldr	r2, [pc, #388]	; (80045a0 <HAL_DMA_IRQHandler+0x40c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d031      	beq.n	8004482 <HAL_DMA_IRQHandler+0x2ee>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a60      	ldr	r2, [pc, #384]	; (80045a4 <HAL_DMA_IRQHandler+0x410>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d02c      	beq.n	8004482 <HAL_DMA_IRQHandler+0x2ee>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a5e      	ldr	r2, [pc, #376]	; (80045a8 <HAL_DMA_IRQHandler+0x414>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d027      	beq.n	8004482 <HAL_DMA_IRQHandler+0x2ee>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a5d      	ldr	r2, [pc, #372]	; (80045ac <HAL_DMA_IRQHandler+0x418>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d022      	beq.n	8004482 <HAL_DMA_IRQHandler+0x2ee>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a5b      	ldr	r2, [pc, #364]	; (80045b0 <HAL_DMA_IRQHandler+0x41c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d01d      	beq.n	8004482 <HAL_DMA_IRQHandler+0x2ee>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a5a      	ldr	r2, [pc, #360]	; (80045b4 <HAL_DMA_IRQHandler+0x420>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d018      	beq.n	8004482 <HAL_DMA_IRQHandler+0x2ee>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a58      	ldr	r2, [pc, #352]	; (80045b8 <HAL_DMA_IRQHandler+0x424>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d013      	beq.n	8004482 <HAL_DMA_IRQHandler+0x2ee>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a57      	ldr	r2, [pc, #348]	; (80045bc <HAL_DMA_IRQHandler+0x428>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00e      	beq.n	8004482 <HAL_DMA_IRQHandler+0x2ee>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a55      	ldr	r2, [pc, #340]	; (80045c0 <HAL_DMA_IRQHandler+0x42c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d009      	beq.n	8004482 <HAL_DMA_IRQHandler+0x2ee>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a54      	ldr	r2, [pc, #336]	; (80045c4 <HAL_DMA_IRQHandler+0x430>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d004      	beq.n	8004482 <HAL_DMA_IRQHandler+0x2ee>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a52      	ldr	r2, [pc, #328]	; (80045c8 <HAL_DMA_IRQHandler+0x434>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d10a      	bne.n	8004498 <HAL_DMA_IRQHandler+0x304>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448c:	2b00      	cmp	r3, #0
 800448e:	bf14      	ite	ne
 8004490:	2301      	movne	r3, #1
 8004492:	2300      	moveq	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	e003      	b.n	80044a0 <HAL_DMA_IRQHandler+0x30c>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2300      	movs	r3, #0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00d      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	2201      	movs	r2, #1
 80044ae:	409a      	lsls	r2, r3
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b8:	f043 0202 	orr.w	r2, r3, #2
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c4:	f003 031f 	and.w	r3, r3, #31
 80044c8:	2204      	movs	r2, #4
 80044ca:	409a      	lsls	r2, r3
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	4013      	ands	r3, r2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 808f 	beq.w	80045f4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a2c      	ldr	r2, [pc, #176]	; (800458c <HAL_DMA_IRQHandler+0x3f8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d04a      	beq.n	8004576 <HAL_DMA_IRQHandler+0x3e2>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a2a      	ldr	r2, [pc, #168]	; (8004590 <HAL_DMA_IRQHandler+0x3fc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d045      	beq.n	8004576 <HAL_DMA_IRQHandler+0x3e2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a29      	ldr	r2, [pc, #164]	; (8004594 <HAL_DMA_IRQHandler+0x400>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d040      	beq.n	8004576 <HAL_DMA_IRQHandler+0x3e2>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a27      	ldr	r2, [pc, #156]	; (8004598 <HAL_DMA_IRQHandler+0x404>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d03b      	beq.n	8004576 <HAL_DMA_IRQHandler+0x3e2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a26      	ldr	r2, [pc, #152]	; (800459c <HAL_DMA_IRQHandler+0x408>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d036      	beq.n	8004576 <HAL_DMA_IRQHandler+0x3e2>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a24      	ldr	r2, [pc, #144]	; (80045a0 <HAL_DMA_IRQHandler+0x40c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d031      	beq.n	8004576 <HAL_DMA_IRQHandler+0x3e2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a23      	ldr	r2, [pc, #140]	; (80045a4 <HAL_DMA_IRQHandler+0x410>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d02c      	beq.n	8004576 <HAL_DMA_IRQHandler+0x3e2>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a21      	ldr	r2, [pc, #132]	; (80045a8 <HAL_DMA_IRQHandler+0x414>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d027      	beq.n	8004576 <HAL_DMA_IRQHandler+0x3e2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a20      	ldr	r2, [pc, #128]	; (80045ac <HAL_DMA_IRQHandler+0x418>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d022      	beq.n	8004576 <HAL_DMA_IRQHandler+0x3e2>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1e      	ldr	r2, [pc, #120]	; (80045b0 <HAL_DMA_IRQHandler+0x41c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d01d      	beq.n	8004576 <HAL_DMA_IRQHandler+0x3e2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1d      	ldr	r2, [pc, #116]	; (80045b4 <HAL_DMA_IRQHandler+0x420>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d018      	beq.n	8004576 <HAL_DMA_IRQHandler+0x3e2>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1b      	ldr	r2, [pc, #108]	; (80045b8 <HAL_DMA_IRQHandler+0x424>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <HAL_DMA_IRQHandler+0x3e2>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1a      	ldr	r2, [pc, #104]	; (80045bc <HAL_DMA_IRQHandler+0x428>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00e      	beq.n	8004576 <HAL_DMA_IRQHandler+0x3e2>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a18      	ldr	r2, [pc, #96]	; (80045c0 <HAL_DMA_IRQHandler+0x42c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d009      	beq.n	8004576 <HAL_DMA_IRQHandler+0x3e2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a17      	ldr	r2, [pc, #92]	; (80045c4 <HAL_DMA_IRQHandler+0x430>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d004      	beq.n	8004576 <HAL_DMA_IRQHandler+0x3e2>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a15      	ldr	r2, [pc, #84]	; (80045c8 <HAL_DMA_IRQHandler+0x434>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d12a      	bne.n	80045cc <HAL_DMA_IRQHandler+0x438>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	bf14      	ite	ne
 8004584:	2301      	movne	r3, #1
 8004586:	2300      	moveq	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	e023      	b.n	80045d4 <HAL_DMA_IRQHandler+0x440>
 800458c:	40020010 	.word	0x40020010
 8004590:	40020028 	.word	0x40020028
 8004594:	40020040 	.word	0x40020040
 8004598:	40020058 	.word	0x40020058
 800459c:	40020070 	.word	0x40020070
 80045a0:	40020088 	.word	0x40020088
 80045a4:	400200a0 	.word	0x400200a0
 80045a8:	400200b8 	.word	0x400200b8
 80045ac:	40020410 	.word	0x40020410
 80045b0:	40020428 	.word	0x40020428
 80045b4:	40020440 	.word	0x40020440
 80045b8:	40020458 	.word	0x40020458
 80045bc:	40020470 	.word	0x40020470
 80045c0:	40020488 	.word	0x40020488
 80045c4:	400204a0 	.word	0x400204a0
 80045c8:	400204b8 	.word	0x400204b8
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00d      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045dc:	f003 031f 	and.w	r3, r3, #31
 80045e0:	2204      	movs	r2, #4
 80045e2:	409a      	lsls	r2, r3
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ec:	f043 0204 	orr.w	r2, r3, #4
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	2210      	movs	r2, #16
 80045fe:	409a      	lsls	r2, r3
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	4013      	ands	r3, r2
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 80a6 	beq.w	8004756 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a85      	ldr	r2, [pc, #532]	; (8004824 <HAL_DMA_IRQHandler+0x690>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d04a      	beq.n	80046aa <HAL_DMA_IRQHandler+0x516>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a83      	ldr	r2, [pc, #524]	; (8004828 <HAL_DMA_IRQHandler+0x694>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d045      	beq.n	80046aa <HAL_DMA_IRQHandler+0x516>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a82      	ldr	r2, [pc, #520]	; (800482c <HAL_DMA_IRQHandler+0x698>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d040      	beq.n	80046aa <HAL_DMA_IRQHandler+0x516>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a80      	ldr	r2, [pc, #512]	; (8004830 <HAL_DMA_IRQHandler+0x69c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d03b      	beq.n	80046aa <HAL_DMA_IRQHandler+0x516>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a7f      	ldr	r2, [pc, #508]	; (8004834 <HAL_DMA_IRQHandler+0x6a0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d036      	beq.n	80046aa <HAL_DMA_IRQHandler+0x516>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a7d      	ldr	r2, [pc, #500]	; (8004838 <HAL_DMA_IRQHandler+0x6a4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d031      	beq.n	80046aa <HAL_DMA_IRQHandler+0x516>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a7c      	ldr	r2, [pc, #496]	; (800483c <HAL_DMA_IRQHandler+0x6a8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d02c      	beq.n	80046aa <HAL_DMA_IRQHandler+0x516>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a7a      	ldr	r2, [pc, #488]	; (8004840 <HAL_DMA_IRQHandler+0x6ac>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d027      	beq.n	80046aa <HAL_DMA_IRQHandler+0x516>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a79      	ldr	r2, [pc, #484]	; (8004844 <HAL_DMA_IRQHandler+0x6b0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d022      	beq.n	80046aa <HAL_DMA_IRQHandler+0x516>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a77      	ldr	r2, [pc, #476]	; (8004848 <HAL_DMA_IRQHandler+0x6b4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d01d      	beq.n	80046aa <HAL_DMA_IRQHandler+0x516>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a76      	ldr	r2, [pc, #472]	; (800484c <HAL_DMA_IRQHandler+0x6b8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d018      	beq.n	80046aa <HAL_DMA_IRQHandler+0x516>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a74      	ldr	r2, [pc, #464]	; (8004850 <HAL_DMA_IRQHandler+0x6bc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d013      	beq.n	80046aa <HAL_DMA_IRQHandler+0x516>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a73      	ldr	r2, [pc, #460]	; (8004854 <HAL_DMA_IRQHandler+0x6c0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00e      	beq.n	80046aa <HAL_DMA_IRQHandler+0x516>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a71      	ldr	r2, [pc, #452]	; (8004858 <HAL_DMA_IRQHandler+0x6c4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d009      	beq.n	80046aa <HAL_DMA_IRQHandler+0x516>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a70      	ldr	r2, [pc, #448]	; (800485c <HAL_DMA_IRQHandler+0x6c8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d004      	beq.n	80046aa <HAL_DMA_IRQHandler+0x516>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a6e      	ldr	r2, [pc, #440]	; (8004860 <HAL_DMA_IRQHandler+0x6cc>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d10a      	bne.n	80046c0 <HAL_DMA_IRQHandler+0x52c>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	bf14      	ite	ne
 80046b8:	2301      	movne	r3, #1
 80046ba:	2300      	moveq	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	e009      	b.n	80046d4 <HAL_DMA_IRQHandler+0x540>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	bf14      	ite	ne
 80046ce:	2301      	movne	r3, #1
 80046d0:	2300      	moveq	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d03e      	beq.n	8004756 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046dc:	f003 031f 	and.w	r3, r3, #31
 80046e0:	2210      	movs	r2, #16
 80046e2:	409a      	lsls	r2, r3
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d018      	beq.n	8004728 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d108      	bne.n	8004716 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	2b00      	cmp	r3, #0
 800470a:	d024      	beq.n	8004756 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	4798      	blx	r3
 8004714:	e01f      	b.n	8004756 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800471a:	2b00      	cmp	r3, #0
 800471c:	d01b      	beq.n	8004756 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	4798      	blx	r3
 8004726:	e016      	b.n	8004756 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004732:	2b00      	cmp	r3, #0
 8004734:	d107      	bne.n	8004746 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0208 	bic.w	r2, r2, #8
 8004744:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475a:	f003 031f 	and.w	r3, r3, #31
 800475e:	2220      	movs	r2, #32
 8004760:	409a      	lsls	r2, r3
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8110 	beq.w	800498c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a2c      	ldr	r2, [pc, #176]	; (8004824 <HAL_DMA_IRQHandler+0x690>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d04a      	beq.n	800480c <HAL_DMA_IRQHandler+0x678>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a2b      	ldr	r2, [pc, #172]	; (8004828 <HAL_DMA_IRQHandler+0x694>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d045      	beq.n	800480c <HAL_DMA_IRQHandler+0x678>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a29      	ldr	r2, [pc, #164]	; (800482c <HAL_DMA_IRQHandler+0x698>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d040      	beq.n	800480c <HAL_DMA_IRQHandler+0x678>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a28      	ldr	r2, [pc, #160]	; (8004830 <HAL_DMA_IRQHandler+0x69c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d03b      	beq.n	800480c <HAL_DMA_IRQHandler+0x678>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a26      	ldr	r2, [pc, #152]	; (8004834 <HAL_DMA_IRQHandler+0x6a0>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d036      	beq.n	800480c <HAL_DMA_IRQHandler+0x678>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a25      	ldr	r2, [pc, #148]	; (8004838 <HAL_DMA_IRQHandler+0x6a4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d031      	beq.n	800480c <HAL_DMA_IRQHandler+0x678>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a23      	ldr	r2, [pc, #140]	; (800483c <HAL_DMA_IRQHandler+0x6a8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d02c      	beq.n	800480c <HAL_DMA_IRQHandler+0x678>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a22      	ldr	r2, [pc, #136]	; (8004840 <HAL_DMA_IRQHandler+0x6ac>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d027      	beq.n	800480c <HAL_DMA_IRQHandler+0x678>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a20      	ldr	r2, [pc, #128]	; (8004844 <HAL_DMA_IRQHandler+0x6b0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d022      	beq.n	800480c <HAL_DMA_IRQHandler+0x678>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1f      	ldr	r2, [pc, #124]	; (8004848 <HAL_DMA_IRQHandler+0x6b4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d01d      	beq.n	800480c <HAL_DMA_IRQHandler+0x678>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a1d      	ldr	r2, [pc, #116]	; (800484c <HAL_DMA_IRQHandler+0x6b8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d018      	beq.n	800480c <HAL_DMA_IRQHandler+0x678>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a1c      	ldr	r2, [pc, #112]	; (8004850 <HAL_DMA_IRQHandler+0x6bc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d013      	beq.n	800480c <HAL_DMA_IRQHandler+0x678>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1a      	ldr	r2, [pc, #104]	; (8004854 <HAL_DMA_IRQHandler+0x6c0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00e      	beq.n	800480c <HAL_DMA_IRQHandler+0x678>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a19      	ldr	r2, [pc, #100]	; (8004858 <HAL_DMA_IRQHandler+0x6c4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d009      	beq.n	800480c <HAL_DMA_IRQHandler+0x678>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a17      	ldr	r2, [pc, #92]	; (800485c <HAL_DMA_IRQHandler+0x6c8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d004      	beq.n	800480c <HAL_DMA_IRQHandler+0x678>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a16      	ldr	r2, [pc, #88]	; (8004860 <HAL_DMA_IRQHandler+0x6cc>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d12b      	bne.n	8004864 <HAL_DMA_IRQHandler+0x6d0>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0310 	and.w	r3, r3, #16
 8004816:	2b00      	cmp	r3, #0
 8004818:	bf14      	ite	ne
 800481a:	2301      	movne	r3, #1
 800481c:	2300      	moveq	r3, #0
 800481e:	b2db      	uxtb	r3, r3
 8004820:	e02a      	b.n	8004878 <HAL_DMA_IRQHandler+0x6e4>
 8004822:	bf00      	nop
 8004824:	40020010 	.word	0x40020010
 8004828:	40020028 	.word	0x40020028
 800482c:	40020040 	.word	0x40020040
 8004830:	40020058 	.word	0x40020058
 8004834:	40020070 	.word	0x40020070
 8004838:	40020088 	.word	0x40020088
 800483c:	400200a0 	.word	0x400200a0
 8004840:	400200b8 	.word	0x400200b8
 8004844:	40020410 	.word	0x40020410
 8004848:	40020428 	.word	0x40020428
 800484c:	40020440 	.word	0x40020440
 8004850:	40020458 	.word	0x40020458
 8004854:	40020470 	.word	0x40020470
 8004858:	40020488 	.word	0x40020488
 800485c:	400204a0 	.word	0x400204a0
 8004860:	400204b8 	.word	0x400204b8
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	bf14      	ite	ne
 8004872:	2301      	movne	r3, #1
 8004874:	2300      	moveq	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 8087 	beq.w	800498c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004882:	f003 031f 	and.w	r3, r3, #31
 8004886:	2220      	movs	r2, #32
 8004888:	409a      	lsls	r2, r3
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b04      	cmp	r3, #4
 8004898:	d139      	bne.n	800490e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0216 	bic.w	r2, r2, #22
 80048a8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695a      	ldr	r2, [r3, #20]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048b8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d103      	bne.n	80048ca <HAL_DMA_IRQHandler+0x736>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d007      	beq.n	80048da <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0208 	bic.w	r2, r2, #8
 80048d8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048de:	f003 031f 	and.w	r3, r3, #31
 80048e2:	223f      	movs	r2, #63	; 0x3f
 80048e4:	409a      	lsls	r2, r3
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 8382 	beq.w	8005008 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	4798      	blx	r3
          }
          return;
 800490c:	e37c      	b.n	8005008 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d018      	beq.n	800494e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d108      	bne.n	800493c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492e:	2b00      	cmp	r3, #0
 8004930:	d02c      	beq.n	800498c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	4798      	blx	r3
 800493a:	e027      	b.n	800498c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004940:	2b00      	cmp	r3, #0
 8004942:	d023      	beq.n	800498c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	4798      	blx	r3
 800494c:	e01e      	b.n	800498c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10f      	bne.n	800497c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0210 	bic.w	r2, r2, #16
 800496a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 833e 	beq.w	8005012 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 8088 	beq.w	8004ab4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2204      	movs	r2, #4
 80049a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a89      	ldr	r2, [pc, #548]	; (8004bd8 <HAL_DMA_IRQHandler+0xa44>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d04a      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x8b8>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a88      	ldr	r2, [pc, #544]	; (8004bdc <HAL_DMA_IRQHandler+0xa48>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d045      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x8b8>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a86      	ldr	r2, [pc, #536]	; (8004be0 <HAL_DMA_IRQHandler+0xa4c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d040      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x8b8>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a85      	ldr	r2, [pc, #532]	; (8004be4 <HAL_DMA_IRQHandler+0xa50>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d03b      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x8b8>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a83      	ldr	r2, [pc, #524]	; (8004be8 <HAL_DMA_IRQHandler+0xa54>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d036      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x8b8>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a82      	ldr	r2, [pc, #520]	; (8004bec <HAL_DMA_IRQHandler+0xa58>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d031      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x8b8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a80      	ldr	r2, [pc, #512]	; (8004bf0 <HAL_DMA_IRQHandler+0xa5c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d02c      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x8b8>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a7f      	ldr	r2, [pc, #508]	; (8004bf4 <HAL_DMA_IRQHandler+0xa60>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d027      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x8b8>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a7d      	ldr	r2, [pc, #500]	; (8004bf8 <HAL_DMA_IRQHandler+0xa64>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d022      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x8b8>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a7c      	ldr	r2, [pc, #496]	; (8004bfc <HAL_DMA_IRQHandler+0xa68>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d01d      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x8b8>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a7a      	ldr	r2, [pc, #488]	; (8004c00 <HAL_DMA_IRQHandler+0xa6c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d018      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x8b8>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a79      	ldr	r2, [pc, #484]	; (8004c04 <HAL_DMA_IRQHandler+0xa70>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d013      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x8b8>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a77      	ldr	r2, [pc, #476]	; (8004c08 <HAL_DMA_IRQHandler+0xa74>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d00e      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x8b8>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a76      	ldr	r2, [pc, #472]	; (8004c0c <HAL_DMA_IRQHandler+0xa78>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d009      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x8b8>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a74      	ldr	r2, [pc, #464]	; (8004c10 <HAL_DMA_IRQHandler+0xa7c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d004      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x8b8>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a73      	ldr	r2, [pc, #460]	; (8004c14 <HAL_DMA_IRQHandler+0xa80>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d108      	bne.n	8004a5e <HAL_DMA_IRQHandler+0x8ca>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0201 	bic.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	e007      	b.n	8004a6e <HAL_DMA_IRQHandler+0x8da>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0201 	bic.w	r2, r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3301      	adds	r3, #1
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d307      	bcc.n	8004a8a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1f2      	bne.n	8004a6e <HAL_DMA_IRQHandler+0x8da>
 8004a88:	e000      	b.n	8004a8c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004a8a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d004      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2203      	movs	r2, #3
 8004a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004aa2:	e003      	b.n	8004aac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 82aa 	beq.w	8005012 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	4798      	blx	r3
 8004ac6:	e2a4      	b.n	8005012 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a52      	ldr	r2, [pc, #328]	; (8004c18 <HAL_DMA_IRQHandler+0xa84>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d04a      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x9d4>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a51      	ldr	r2, [pc, #324]	; (8004c1c <HAL_DMA_IRQHandler+0xa88>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d045      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x9d4>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a4f      	ldr	r2, [pc, #316]	; (8004c20 <HAL_DMA_IRQHandler+0xa8c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d040      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x9d4>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a4e      	ldr	r2, [pc, #312]	; (8004c24 <HAL_DMA_IRQHandler+0xa90>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d03b      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x9d4>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a4c      	ldr	r2, [pc, #304]	; (8004c28 <HAL_DMA_IRQHandler+0xa94>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d036      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x9d4>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a4b      	ldr	r2, [pc, #300]	; (8004c2c <HAL_DMA_IRQHandler+0xa98>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d031      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x9d4>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a49      	ldr	r2, [pc, #292]	; (8004c30 <HAL_DMA_IRQHandler+0xa9c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d02c      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x9d4>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a48      	ldr	r2, [pc, #288]	; (8004c34 <HAL_DMA_IRQHandler+0xaa0>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d027      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x9d4>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a46      	ldr	r2, [pc, #280]	; (8004c38 <HAL_DMA_IRQHandler+0xaa4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d022      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x9d4>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a45      	ldr	r2, [pc, #276]	; (8004c3c <HAL_DMA_IRQHandler+0xaa8>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d01d      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x9d4>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a43      	ldr	r2, [pc, #268]	; (8004c40 <HAL_DMA_IRQHandler+0xaac>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d018      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x9d4>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a42      	ldr	r2, [pc, #264]	; (8004c44 <HAL_DMA_IRQHandler+0xab0>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d013      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x9d4>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a40      	ldr	r2, [pc, #256]	; (8004c48 <HAL_DMA_IRQHandler+0xab4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d00e      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x9d4>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a3f      	ldr	r2, [pc, #252]	; (8004c4c <HAL_DMA_IRQHandler+0xab8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d009      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x9d4>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a3d      	ldr	r2, [pc, #244]	; (8004c50 <HAL_DMA_IRQHandler+0xabc>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d004      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x9d4>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a3c      	ldr	r2, [pc, #240]	; (8004c54 <HAL_DMA_IRQHandler+0xac0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d101      	bne.n	8004b6c <HAL_DMA_IRQHandler+0x9d8>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <HAL_DMA_IRQHandler+0x9da>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 824f 	beq.w	8005012 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b80:	f003 031f 	and.w	r3, r3, #31
 8004b84:	2204      	movs	r2, #4
 8004b86:	409a      	lsls	r2, r3
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 80dd 	beq.w	8004d4c <HAL_DMA_IRQHandler+0xbb8>
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 80d7 	beq.w	8004d4c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba2:	f003 031f 	and.w	r3, r3, #31
 8004ba6:	2204      	movs	r2, #4
 8004ba8:	409a      	lsls	r2, r3
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d059      	beq.n	8004c6c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d14a      	bne.n	8004c58 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 8220 	beq.w	800500c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bd4:	e21a      	b.n	800500c <HAL_DMA_IRQHandler+0xe78>
 8004bd6:	bf00      	nop
 8004bd8:	40020010 	.word	0x40020010
 8004bdc:	40020028 	.word	0x40020028
 8004be0:	40020040 	.word	0x40020040
 8004be4:	40020058 	.word	0x40020058
 8004be8:	40020070 	.word	0x40020070
 8004bec:	40020088 	.word	0x40020088
 8004bf0:	400200a0 	.word	0x400200a0
 8004bf4:	400200b8 	.word	0x400200b8
 8004bf8:	40020410 	.word	0x40020410
 8004bfc:	40020428 	.word	0x40020428
 8004c00:	40020440 	.word	0x40020440
 8004c04:	40020458 	.word	0x40020458
 8004c08:	40020470 	.word	0x40020470
 8004c0c:	40020488 	.word	0x40020488
 8004c10:	400204a0 	.word	0x400204a0
 8004c14:	400204b8 	.word	0x400204b8
 8004c18:	48022c08 	.word	0x48022c08
 8004c1c:	48022c1c 	.word	0x48022c1c
 8004c20:	48022c30 	.word	0x48022c30
 8004c24:	48022c44 	.word	0x48022c44
 8004c28:	48022c58 	.word	0x48022c58
 8004c2c:	48022c6c 	.word	0x48022c6c
 8004c30:	48022c80 	.word	0x48022c80
 8004c34:	48022c94 	.word	0x48022c94
 8004c38:	58025408 	.word	0x58025408
 8004c3c:	5802541c 	.word	0x5802541c
 8004c40:	58025430 	.word	0x58025430
 8004c44:	58025444 	.word	0x58025444
 8004c48:	58025458 	.word	0x58025458
 8004c4c:	5802546c 	.word	0x5802546c
 8004c50:	58025480 	.word	0x58025480
 8004c54:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 81d5 	beq.w	800500c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c6a:	e1cf      	b.n	800500c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d160      	bne.n	8004d38 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a7f      	ldr	r2, [pc, #508]	; (8004e78 <HAL_DMA_IRQHandler+0xce4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d04a      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xb82>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a7d      	ldr	r2, [pc, #500]	; (8004e7c <HAL_DMA_IRQHandler+0xce8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d045      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xb82>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a7c      	ldr	r2, [pc, #496]	; (8004e80 <HAL_DMA_IRQHandler+0xcec>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d040      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xb82>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a7a      	ldr	r2, [pc, #488]	; (8004e84 <HAL_DMA_IRQHandler+0xcf0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d03b      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xb82>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a79      	ldr	r2, [pc, #484]	; (8004e88 <HAL_DMA_IRQHandler+0xcf4>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d036      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xb82>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a77      	ldr	r2, [pc, #476]	; (8004e8c <HAL_DMA_IRQHandler+0xcf8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d031      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xb82>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a76      	ldr	r2, [pc, #472]	; (8004e90 <HAL_DMA_IRQHandler+0xcfc>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d02c      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xb82>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a74      	ldr	r2, [pc, #464]	; (8004e94 <HAL_DMA_IRQHandler+0xd00>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d027      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xb82>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a73      	ldr	r2, [pc, #460]	; (8004e98 <HAL_DMA_IRQHandler+0xd04>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d022      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xb82>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a71      	ldr	r2, [pc, #452]	; (8004e9c <HAL_DMA_IRQHandler+0xd08>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d01d      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xb82>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a70      	ldr	r2, [pc, #448]	; (8004ea0 <HAL_DMA_IRQHandler+0xd0c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d018      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xb82>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a6e      	ldr	r2, [pc, #440]	; (8004ea4 <HAL_DMA_IRQHandler+0xd10>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d013      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xb82>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a6d      	ldr	r2, [pc, #436]	; (8004ea8 <HAL_DMA_IRQHandler+0xd14>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00e      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xb82>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a6b      	ldr	r2, [pc, #428]	; (8004eac <HAL_DMA_IRQHandler+0xd18>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d009      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xb82>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a6a      	ldr	r2, [pc, #424]	; (8004eb0 <HAL_DMA_IRQHandler+0xd1c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d004      	beq.n	8004d16 <HAL_DMA_IRQHandler+0xb82>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a68      	ldr	r2, [pc, #416]	; (8004eb4 <HAL_DMA_IRQHandler+0xd20>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d108      	bne.n	8004d28 <HAL_DMA_IRQHandler+0xb94>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0208 	bic.w	r2, r2, #8
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	e007      	b.n	8004d38 <HAL_DMA_IRQHandler+0xba4>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0204 	bic.w	r2, r2, #4
 8004d36:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 8165 	beq.w	800500c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d4a:	e15f      	b.n	800500c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d50:	f003 031f 	and.w	r3, r3, #31
 8004d54:	2202      	movs	r2, #2
 8004d56:	409a      	lsls	r2, r3
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 80c5 	beq.w	8004eec <HAL_DMA_IRQHandler+0xd58>
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80bf 	beq.w	8004eec <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d72:	f003 031f 	and.w	r3, r3, #31
 8004d76:	2202      	movs	r2, #2
 8004d78:	409a      	lsls	r2, r3
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d018      	beq.n	8004dba <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d109      	bne.n	8004da6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 813a 	beq.w	8005010 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004da4:	e134      	b.n	8005010 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 8130 	beq.w	8005010 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004db8:	e12a      	b.n	8005010 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f003 0320 	and.w	r3, r3, #32
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f040 8089 	bne.w	8004ed8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a2b      	ldr	r2, [pc, #172]	; (8004e78 <HAL_DMA_IRQHandler+0xce4>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d04a      	beq.n	8004e66 <HAL_DMA_IRQHandler+0xcd2>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a29      	ldr	r2, [pc, #164]	; (8004e7c <HAL_DMA_IRQHandler+0xce8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d045      	beq.n	8004e66 <HAL_DMA_IRQHandler+0xcd2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a28      	ldr	r2, [pc, #160]	; (8004e80 <HAL_DMA_IRQHandler+0xcec>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d040      	beq.n	8004e66 <HAL_DMA_IRQHandler+0xcd2>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a26      	ldr	r2, [pc, #152]	; (8004e84 <HAL_DMA_IRQHandler+0xcf0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d03b      	beq.n	8004e66 <HAL_DMA_IRQHandler+0xcd2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a25      	ldr	r2, [pc, #148]	; (8004e88 <HAL_DMA_IRQHandler+0xcf4>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d036      	beq.n	8004e66 <HAL_DMA_IRQHandler+0xcd2>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a23      	ldr	r2, [pc, #140]	; (8004e8c <HAL_DMA_IRQHandler+0xcf8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d031      	beq.n	8004e66 <HAL_DMA_IRQHandler+0xcd2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a22      	ldr	r2, [pc, #136]	; (8004e90 <HAL_DMA_IRQHandler+0xcfc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d02c      	beq.n	8004e66 <HAL_DMA_IRQHandler+0xcd2>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a20      	ldr	r2, [pc, #128]	; (8004e94 <HAL_DMA_IRQHandler+0xd00>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d027      	beq.n	8004e66 <HAL_DMA_IRQHandler+0xcd2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a1f      	ldr	r2, [pc, #124]	; (8004e98 <HAL_DMA_IRQHandler+0xd04>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d022      	beq.n	8004e66 <HAL_DMA_IRQHandler+0xcd2>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1d      	ldr	r2, [pc, #116]	; (8004e9c <HAL_DMA_IRQHandler+0xd08>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d01d      	beq.n	8004e66 <HAL_DMA_IRQHandler+0xcd2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a1c      	ldr	r2, [pc, #112]	; (8004ea0 <HAL_DMA_IRQHandler+0xd0c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d018      	beq.n	8004e66 <HAL_DMA_IRQHandler+0xcd2>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a1a      	ldr	r2, [pc, #104]	; (8004ea4 <HAL_DMA_IRQHandler+0xd10>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d013      	beq.n	8004e66 <HAL_DMA_IRQHandler+0xcd2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a19      	ldr	r2, [pc, #100]	; (8004ea8 <HAL_DMA_IRQHandler+0xd14>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00e      	beq.n	8004e66 <HAL_DMA_IRQHandler+0xcd2>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a17      	ldr	r2, [pc, #92]	; (8004eac <HAL_DMA_IRQHandler+0xd18>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d009      	beq.n	8004e66 <HAL_DMA_IRQHandler+0xcd2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a16      	ldr	r2, [pc, #88]	; (8004eb0 <HAL_DMA_IRQHandler+0xd1c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d004      	beq.n	8004e66 <HAL_DMA_IRQHandler+0xcd2>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a14      	ldr	r2, [pc, #80]	; (8004eb4 <HAL_DMA_IRQHandler+0xd20>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d128      	bne.n	8004eb8 <HAL_DMA_IRQHandler+0xd24>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0214 	bic.w	r2, r2, #20
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	e027      	b.n	8004ec8 <HAL_DMA_IRQHandler+0xd34>
 8004e78:	40020010 	.word	0x40020010
 8004e7c:	40020028 	.word	0x40020028
 8004e80:	40020040 	.word	0x40020040
 8004e84:	40020058 	.word	0x40020058
 8004e88:	40020070 	.word	0x40020070
 8004e8c:	40020088 	.word	0x40020088
 8004e90:	400200a0 	.word	0x400200a0
 8004e94:	400200b8 	.word	0x400200b8
 8004e98:	40020410 	.word	0x40020410
 8004e9c:	40020428 	.word	0x40020428
 8004ea0:	40020440 	.word	0x40020440
 8004ea4:	40020458 	.word	0x40020458
 8004ea8:	40020470 	.word	0x40020470
 8004eac:	40020488 	.word	0x40020488
 8004eb0:	400204a0 	.word	0x400204a0
 8004eb4:	400204b8 	.word	0x400204b8
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 020a 	bic.w	r2, r2, #10
 8004ec6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8097 	beq.w	8005010 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eea:	e091      	b.n	8005010 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef0:	f003 031f 	and.w	r3, r3, #31
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	409a      	lsls	r2, r3
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 8088 	beq.w	8005012 <HAL_DMA_IRQHandler+0xe7e>
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 8082 	beq.w	8005012 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a41      	ldr	r2, [pc, #260]	; (8005018 <HAL_DMA_IRQHandler+0xe84>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d04a      	beq.n	8004fae <HAL_DMA_IRQHandler+0xe1a>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a3f      	ldr	r2, [pc, #252]	; (800501c <HAL_DMA_IRQHandler+0xe88>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d045      	beq.n	8004fae <HAL_DMA_IRQHandler+0xe1a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a3e      	ldr	r2, [pc, #248]	; (8005020 <HAL_DMA_IRQHandler+0xe8c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d040      	beq.n	8004fae <HAL_DMA_IRQHandler+0xe1a>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a3c      	ldr	r2, [pc, #240]	; (8005024 <HAL_DMA_IRQHandler+0xe90>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d03b      	beq.n	8004fae <HAL_DMA_IRQHandler+0xe1a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a3b      	ldr	r2, [pc, #236]	; (8005028 <HAL_DMA_IRQHandler+0xe94>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d036      	beq.n	8004fae <HAL_DMA_IRQHandler+0xe1a>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a39      	ldr	r2, [pc, #228]	; (800502c <HAL_DMA_IRQHandler+0xe98>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d031      	beq.n	8004fae <HAL_DMA_IRQHandler+0xe1a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a38      	ldr	r2, [pc, #224]	; (8005030 <HAL_DMA_IRQHandler+0xe9c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d02c      	beq.n	8004fae <HAL_DMA_IRQHandler+0xe1a>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a36      	ldr	r2, [pc, #216]	; (8005034 <HAL_DMA_IRQHandler+0xea0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d027      	beq.n	8004fae <HAL_DMA_IRQHandler+0xe1a>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a35      	ldr	r2, [pc, #212]	; (8005038 <HAL_DMA_IRQHandler+0xea4>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d022      	beq.n	8004fae <HAL_DMA_IRQHandler+0xe1a>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a33      	ldr	r2, [pc, #204]	; (800503c <HAL_DMA_IRQHandler+0xea8>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d01d      	beq.n	8004fae <HAL_DMA_IRQHandler+0xe1a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a32      	ldr	r2, [pc, #200]	; (8005040 <HAL_DMA_IRQHandler+0xeac>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d018      	beq.n	8004fae <HAL_DMA_IRQHandler+0xe1a>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a30      	ldr	r2, [pc, #192]	; (8005044 <HAL_DMA_IRQHandler+0xeb0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <HAL_DMA_IRQHandler+0xe1a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a2f      	ldr	r2, [pc, #188]	; (8005048 <HAL_DMA_IRQHandler+0xeb4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00e      	beq.n	8004fae <HAL_DMA_IRQHandler+0xe1a>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a2d      	ldr	r2, [pc, #180]	; (800504c <HAL_DMA_IRQHandler+0xeb8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d009      	beq.n	8004fae <HAL_DMA_IRQHandler+0xe1a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a2c      	ldr	r2, [pc, #176]	; (8005050 <HAL_DMA_IRQHandler+0xebc>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d004      	beq.n	8004fae <HAL_DMA_IRQHandler+0xe1a>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a2a      	ldr	r2, [pc, #168]	; (8005054 <HAL_DMA_IRQHandler+0xec0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d108      	bne.n	8004fc0 <HAL_DMA_IRQHandler+0xe2c>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 021c 	bic.w	r2, r2, #28
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	e007      	b.n	8004fd0 <HAL_DMA_IRQHandler+0xe3c>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 020e 	bic.w	r2, r2, #14
 8004fce:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd4:	f003 031f 	and.w	r3, r3, #31
 8004fd8:	2201      	movs	r2, #1
 8004fda:	409a      	lsls	r2, r3
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d009      	beq.n	8005012 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	4798      	blx	r3
 8005006:	e004      	b.n	8005012 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8005008:	bf00      	nop
 800500a:	e002      	b.n	8005012 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800500c:	bf00      	nop
 800500e:	e000      	b.n	8005012 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005010:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005012:	3728      	adds	r7, #40	; 0x28
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40020010 	.word	0x40020010
 800501c:	40020028 	.word	0x40020028
 8005020:	40020040 	.word	0x40020040
 8005024:	40020058 	.word	0x40020058
 8005028:	40020070 	.word	0x40020070
 800502c:	40020088 	.word	0x40020088
 8005030:	400200a0 	.word	0x400200a0
 8005034:	400200b8 	.word	0x400200b8
 8005038:	40020410 	.word	0x40020410
 800503c:	40020428 	.word	0x40020428
 8005040:	40020440 	.word	0x40020440
 8005044:	40020458 	.word	0x40020458
 8005048:	40020470 	.word	0x40020470
 800504c:	40020488 	.word	0x40020488
 8005050:	400204a0 	.word	0x400204a0
 8005054:	400204b8 	.word	0x400204b8

08005058 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
 8005064:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005070:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a7f      	ldr	r2, [pc, #508]	; (8005274 <DMA_SetConfig+0x21c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d072      	beq.n	8005162 <DMA_SetConfig+0x10a>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a7d      	ldr	r2, [pc, #500]	; (8005278 <DMA_SetConfig+0x220>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d06d      	beq.n	8005162 <DMA_SetConfig+0x10a>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a7c      	ldr	r2, [pc, #496]	; (800527c <DMA_SetConfig+0x224>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d068      	beq.n	8005162 <DMA_SetConfig+0x10a>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a7a      	ldr	r2, [pc, #488]	; (8005280 <DMA_SetConfig+0x228>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d063      	beq.n	8005162 <DMA_SetConfig+0x10a>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a79      	ldr	r2, [pc, #484]	; (8005284 <DMA_SetConfig+0x22c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d05e      	beq.n	8005162 <DMA_SetConfig+0x10a>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a77      	ldr	r2, [pc, #476]	; (8005288 <DMA_SetConfig+0x230>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d059      	beq.n	8005162 <DMA_SetConfig+0x10a>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a76      	ldr	r2, [pc, #472]	; (800528c <DMA_SetConfig+0x234>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d054      	beq.n	8005162 <DMA_SetConfig+0x10a>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a74      	ldr	r2, [pc, #464]	; (8005290 <DMA_SetConfig+0x238>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d04f      	beq.n	8005162 <DMA_SetConfig+0x10a>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a73      	ldr	r2, [pc, #460]	; (8005294 <DMA_SetConfig+0x23c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d04a      	beq.n	8005162 <DMA_SetConfig+0x10a>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a71      	ldr	r2, [pc, #452]	; (8005298 <DMA_SetConfig+0x240>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d045      	beq.n	8005162 <DMA_SetConfig+0x10a>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a70      	ldr	r2, [pc, #448]	; (800529c <DMA_SetConfig+0x244>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d040      	beq.n	8005162 <DMA_SetConfig+0x10a>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a6e      	ldr	r2, [pc, #440]	; (80052a0 <DMA_SetConfig+0x248>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d03b      	beq.n	8005162 <DMA_SetConfig+0x10a>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a6d      	ldr	r2, [pc, #436]	; (80052a4 <DMA_SetConfig+0x24c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d036      	beq.n	8005162 <DMA_SetConfig+0x10a>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a6b      	ldr	r2, [pc, #428]	; (80052a8 <DMA_SetConfig+0x250>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d031      	beq.n	8005162 <DMA_SetConfig+0x10a>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a6a      	ldr	r2, [pc, #424]	; (80052ac <DMA_SetConfig+0x254>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d02c      	beq.n	8005162 <DMA_SetConfig+0x10a>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a68      	ldr	r2, [pc, #416]	; (80052b0 <DMA_SetConfig+0x258>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d027      	beq.n	8005162 <DMA_SetConfig+0x10a>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a67      	ldr	r2, [pc, #412]	; (80052b4 <DMA_SetConfig+0x25c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d022      	beq.n	8005162 <DMA_SetConfig+0x10a>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a65      	ldr	r2, [pc, #404]	; (80052b8 <DMA_SetConfig+0x260>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d01d      	beq.n	8005162 <DMA_SetConfig+0x10a>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a64      	ldr	r2, [pc, #400]	; (80052bc <DMA_SetConfig+0x264>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d018      	beq.n	8005162 <DMA_SetConfig+0x10a>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a62      	ldr	r2, [pc, #392]	; (80052c0 <DMA_SetConfig+0x268>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d013      	beq.n	8005162 <DMA_SetConfig+0x10a>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a61      	ldr	r2, [pc, #388]	; (80052c4 <DMA_SetConfig+0x26c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d00e      	beq.n	8005162 <DMA_SetConfig+0x10a>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a5f      	ldr	r2, [pc, #380]	; (80052c8 <DMA_SetConfig+0x270>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d009      	beq.n	8005162 <DMA_SetConfig+0x10a>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a5e      	ldr	r2, [pc, #376]	; (80052cc <DMA_SetConfig+0x274>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d004      	beq.n	8005162 <DMA_SetConfig+0x10a>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a5c      	ldr	r2, [pc, #368]	; (80052d0 <DMA_SetConfig+0x278>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d101      	bne.n	8005166 <DMA_SetConfig+0x10e>
 8005162:	2301      	movs	r3, #1
 8005164:	e000      	b.n	8005168 <DMA_SetConfig+0x110>
 8005166:	2300      	movs	r3, #0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00d      	beq.n	8005188 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005174:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800517a:	2b00      	cmp	r3, #0
 800517c:	d004      	beq.n	8005188 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005186:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a39      	ldr	r2, [pc, #228]	; (8005274 <DMA_SetConfig+0x21c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d04a      	beq.n	8005228 <DMA_SetConfig+0x1d0>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a38      	ldr	r2, [pc, #224]	; (8005278 <DMA_SetConfig+0x220>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d045      	beq.n	8005228 <DMA_SetConfig+0x1d0>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a36      	ldr	r2, [pc, #216]	; (800527c <DMA_SetConfig+0x224>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d040      	beq.n	8005228 <DMA_SetConfig+0x1d0>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a35      	ldr	r2, [pc, #212]	; (8005280 <DMA_SetConfig+0x228>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d03b      	beq.n	8005228 <DMA_SetConfig+0x1d0>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a33      	ldr	r2, [pc, #204]	; (8005284 <DMA_SetConfig+0x22c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d036      	beq.n	8005228 <DMA_SetConfig+0x1d0>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a32      	ldr	r2, [pc, #200]	; (8005288 <DMA_SetConfig+0x230>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d031      	beq.n	8005228 <DMA_SetConfig+0x1d0>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a30      	ldr	r2, [pc, #192]	; (800528c <DMA_SetConfig+0x234>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d02c      	beq.n	8005228 <DMA_SetConfig+0x1d0>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a2f      	ldr	r2, [pc, #188]	; (8005290 <DMA_SetConfig+0x238>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d027      	beq.n	8005228 <DMA_SetConfig+0x1d0>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a2d      	ldr	r2, [pc, #180]	; (8005294 <DMA_SetConfig+0x23c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d022      	beq.n	8005228 <DMA_SetConfig+0x1d0>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a2c      	ldr	r2, [pc, #176]	; (8005298 <DMA_SetConfig+0x240>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d01d      	beq.n	8005228 <DMA_SetConfig+0x1d0>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a2a      	ldr	r2, [pc, #168]	; (800529c <DMA_SetConfig+0x244>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d018      	beq.n	8005228 <DMA_SetConfig+0x1d0>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a29      	ldr	r2, [pc, #164]	; (80052a0 <DMA_SetConfig+0x248>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d013      	beq.n	8005228 <DMA_SetConfig+0x1d0>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a27      	ldr	r2, [pc, #156]	; (80052a4 <DMA_SetConfig+0x24c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00e      	beq.n	8005228 <DMA_SetConfig+0x1d0>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a26      	ldr	r2, [pc, #152]	; (80052a8 <DMA_SetConfig+0x250>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d009      	beq.n	8005228 <DMA_SetConfig+0x1d0>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a24      	ldr	r2, [pc, #144]	; (80052ac <DMA_SetConfig+0x254>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d004      	beq.n	8005228 <DMA_SetConfig+0x1d0>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a23      	ldr	r2, [pc, #140]	; (80052b0 <DMA_SetConfig+0x258>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d101      	bne.n	800522c <DMA_SetConfig+0x1d4>
 8005228:	2301      	movs	r3, #1
 800522a:	e000      	b.n	800522e <DMA_SetConfig+0x1d6>
 800522c:	2300      	movs	r3, #0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d059      	beq.n	80052e6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005236:	f003 031f 	and.w	r3, r3, #31
 800523a:	223f      	movs	r2, #63	; 0x3f
 800523c:	409a      	lsls	r2, r3
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005250:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	2b40      	cmp	r3, #64	; 0x40
 8005260:	d138      	bne.n	80052d4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005272:	e0ae      	b.n	80053d2 <DMA_SetConfig+0x37a>
 8005274:	40020010 	.word	0x40020010
 8005278:	40020028 	.word	0x40020028
 800527c:	40020040 	.word	0x40020040
 8005280:	40020058 	.word	0x40020058
 8005284:	40020070 	.word	0x40020070
 8005288:	40020088 	.word	0x40020088
 800528c:	400200a0 	.word	0x400200a0
 8005290:	400200b8 	.word	0x400200b8
 8005294:	40020410 	.word	0x40020410
 8005298:	40020428 	.word	0x40020428
 800529c:	40020440 	.word	0x40020440
 80052a0:	40020458 	.word	0x40020458
 80052a4:	40020470 	.word	0x40020470
 80052a8:	40020488 	.word	0x40020488
 80052ac:	400204a0 	.word	0x400204a0
 80052b0:	400204b8 	.word	0x400204b8
 80052b4:	58025408 	.word	0x58025408
 80052b8:	5802541c 	.word	0x5802541c
 80052bc:	58025430 	.word	0x58025430
 80052c0:	58025444 	.word	0x58025444
 80052c4:	58025458 	.word	0x58025458
 80052c8:	5802546c 	.word	0x5802546c
 80052cc:	58025480 	.word	0x58025480
 80052d0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	60da      	str	r2, [r3, #12]
}
 80052e4:	e075      	b.n	80053d2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a3d      	ldr	r2, [pc, #244]	; (80053e0 <DMA_SetConfig+0x388>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d04a      	beq.n	8005386 <DMA_SetConfig+0x32e>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a3b      	ldr	r2, [pc, #236]	; (80053e4 <DMA_SetConfig+0x38c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d045      	beq.n	8005386 <DMA_SetConfig+0x32e>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a3a      	ldr	r2, [pc, #232]	; (80053e8 <DMA_SetConfig+0x390>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d040      	beq.n	8005386 <DMA_SetConfig+0x32e>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a38      	ldr	r2, [pc, #224]	; (80053ec <DMA_SetConfig+0x394>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d03b      	beq.n	8005386 <DMA_SetConfig+0x32e>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a37      	ldr	r2, [pc, #220]	; (80053f0 <DMA_SetConfig+0x398>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d036      	beq.n	8005386 <DMA_SetConfig+0x32e>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a35      	ldr	r2, [pc, #212]	; (80053f4 <DMA_SetConfig+0x39c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d031      	beq.n	8005386 <DMA_SetConfig+0x32e>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a34      	ldr	r2, [pc, #208]	; (80053f8 <DMA_SetConfig+0x3a0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d02c      	beq.n	8005386 <DMA_SetConfig+0x32e>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a32      	ldr	r2, [pc, #200]	; (80053fc <DMA_SetConfig+0x3a4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d027      	beq.n	8005386 <DMA_SetConfig+0x32e>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a31      	ldr	r2, [pc, #196]	; (8005400 <DMA_SetConfig+0x3a8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d022      	beq.n	8005386 <DMA_SetConfig+0x32e>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a2f      	ldr	r2, [pc, #188]	; (8005404 <DMA_SetConfig+0x3ac>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d01d      	beq.n	8005386 <DMA_SetConfig+0x32e>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a2e      	ldr	r2, [pc, #184]	; (8005408 <DMA_SetConfig+0x3b0>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d018      	beq.n	8005386 <DMA_SetConfig+0x32e>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a2c      	ldr	r2, [pc, #176]	; (800540c <DMA_SetConfig+0x3b4>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d013      	beq.n	8005386 <DMA_SetConfig+0x32e>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a2b      	ldr	r2, [pc, #172]	; (8005410 <DMA_SetConfig+0x3b8>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00e      	beq.n	8005386 <DMA_SetConfig+0x32e>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a29      	ldr	r2, [pc, #164]	; (8005414 <DMA_SetConfig+0x3bc>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d009      	beq.n	8005386 <DMA_SetConfig+0x32e>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a28      	ldr	r2, [pc, #160]	; (8005418 <DMA_SetConfig+0x3c0>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d004      	beq.n	8005386 <DMA_SetConfig+0x32e>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a26      	ldr	r2, [pc, #152]	; (800541c <DMA_SetConfig+0x3c4>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d101      	bne.n	800538a <DMA_SetConfig+0x332>
 8005386:	2301      	movs	r3, #1
 8005388:	e000      	b.n	800538c <DMA_SetConfig+0x334>
 800538a:	2300      	movs	r3, #0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d020      	beq.n	80053d2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005394:	f003 031f 	and.w	r3, r3, #31
 8005398:	2201      	movs	r2, #1
 800539a:	409a      	lsls	r2, r3
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	2b40      	cmp	r3, #64	; 0x40
 80053ae:	d108      	bne.n	80053c2 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	60da      	str	r2, [r3, #12]
}
 80053c0:	e007      	b.n	80053d2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	60da      	str	r2, [r3, #12]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	48022c08 	.word	0x48022c08
 80053e4:	48022c1c 	.word	0x48022c1c
 80053e8:	48022c30 	.word	0x48022c30
 80053ec:	48022c44 	.word	0x48022c44
 80053f0:	48022c58 	.word	0x48022c58
 80053f4:	48022c6c 	.word	0x48022c6c
 80053f8:	48022c80 	.word	0x48022c80
 80053fc:	48022c94 	.word	0x48022c94
 8005400:	58025408 	.word	0x58025408
 8005404:	5802541c 	.word	0x5802541c
 8005408:	58025430 	.word	0x58025430
 800540c:	58025444 	.word	0x58025444
 8005410:	58025458 	.word	0x58025458
 8005414:	5802546c 	.word	0x5802546c
 8005418:	58025480 	.word	0x58025480
 800541c:	58025494 	.word	0x58025494

08005420 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a42      	ldr	r2, [pc, #264]	; (8005538 <DMA_CalcBaseAndBitshift+0x118>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d04a      	beq.n	80054c8 <DMA_CalcBaseAndBitshift+0xa8>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a41      	ldr	r2, [pc, #260]	; (800553c <DMA_CalcBaseAndBitshift+0x11c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d045      	beq.n	80054c8 <DMA_CalcBaseAndBitshift+0xa8>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a3f      	ldr	r2, [pc, #252]	; (8005540 <DMA_CalcBaseAndBitshift+0x120>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d040      	beq.n	80054c8 <DMA_CalcBaseAndBitshift+0xa8>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a3e      	ldr	r2, [pc, #248]	; (8005544 <DMA_CalcBaseAndBitshift+0x124>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d03b      	beq.n	80054c8 <DMA_CalcBaseAndBitshift+0xa8>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a3c      	ldr	r2, [pc, #240]	; (8005548 <DMA_CalcBaseAndBitshift+0x128>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d036      	beq.n	80054c8 <DMA_CalcBaseAndBitshift+0xa8>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a3b      	ldr	r2, [pc, #236]	; (800554c <DMA_CalcBaseAndBitshift+0x12c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d031      	beq.n	80054c8 <DMA_CalcBaseAndBitshift+0xa8>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a39      	ldr	r2, [pc, #228]	; (8005550 <DMA_CalcBaseAndBitshift+0x130>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d02c      	beq.n	80054c8 <DMA_CalcBaseAndBitshift+0xa8>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a38      	ldr	r2, [pc, #224]	; (8005554 <DMA_CalcBaseAndBitshift+0x134>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d027      	beq.n	80054c8 <DMA_CalcBaseAndBitshift+0xa8>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a36      	ldr	r2, [pc, #216]	; (8005558 <DMA_CalcBaseAndBitshift+0x138>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d022      	beq.n	80054c8 <DMA_CalcBaseAndBitshift+0xa8>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a35      	ldr	r2, [pc, #212]	; (800555c <DMA_CalcBaseAndBitshift+0x13c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d01d      	beq.n	80054c8 <DMA_CalcBaseAndBitshift+0xa8>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a33      	ldr	r2, [pc, #204]	; (8005560 <DMA_CalcBaseAndBitshift+0x140>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d018      	beq.n	80054c8 <DMA_CalcBaseAndBitshift+0xa8>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a32      	ldr	r2, [pc, #200]	; (8005564 <DMA_CalcBaseAndBitshift+0x144>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d013      	beq.n	80054c8 <DMA_CalcBaseAndBitshift+0xa8>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a30      	ldr	r2, [pc, #192]	; (8005568 <DMA_CalcBaseAndBitshift+0x148>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d00e      	beq.n	80054c8 <DMA_CalcBaseAndBitshift+0xa8>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a2f      	ldr	r2, [pc, #188]	; (800556c <DMA_CalcBaseAndBitshift+0x14c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d009      	beq.n	80054c8 <DMA_CalcBaseAndBitshift+0xa8>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a2d      	ldr	r2, [pc, #180]	; (8005570 <DMA_CalcBaseAndBitshift+0x150>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d004      	beq.n	80054c8 <DMA_CalcBaseAndBitshift+0xa8>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a2c      	ldr	r2, [pc, #176]	; (8005574 <DMA_CalcBaseAndBitshift+0x154>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d101      	bne.n	80054cc <DMA_CalcBaseAndBitshift+0xac>
 80054c8:	2301      	movs	r3, #1
 80054ca:	e000      	b.n	80054ce <DMA_CalcBaseAndBitshift+0xae>
 80054cc:	2300      	movs	r3, #0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d024      	beq.n	800551c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	3b10      	subs	r3, #16
 80054da:	4a27      	ldr	r2, [pc, #156]	; (8005578 <DMA_CalcBaseAndBitshift+0x158>)
 80054dc:	fba2 2303 	umull	r2, r3, r2, r3
 80054e0:	091b      	lsrs	r3, r3, #4
 80054e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	4a24      	ldr	r2, [pc, #144]	; (800557c <DMA_CalcBaseAndBitshift+0x15c>)
 80054ec:	5cd3      	ldrb	r3, [r2, r3]
 80054ee:	461a      	mov	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d908      	bls.n	800550c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	4b1f      	ldr	r3, [pc, #124]	; (8005580 <DMA_CalcBaseAndBitshift+0x160>)
 8005502:	4013      	ands	r3, r2
 8005504:	1d1a      	adds	r2, r3, #4
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	659a      	str	r2, [r3, #88]	; 0x58
 800550a:	e00d      	b.n	8005528 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	461a      	mov	r2, r3
 8005512:	4b1b      	ldr	r3, [pc, #108]	; (8005580 <DMA_CalcBaseAndBitshift+0x160>)
 8005514:	4013      	ands	r3, r2
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6593      	str	r3, [r2, #88]	; 0x58
 800551a:	e005      	b.n	8005528 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800552c:	4618      	mov	r0, r3
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	40020010 	.word	0x40020010
 800553c:	40020028 	.word	0x40020028
 8005540:	40020040 	.word	0x40020040
 8005544:	40020058 	.word	0x40020058
 8005548:	40020070 	.word	0x40020070
 800554c:	40020088 	.word	0x40020088
 8005550:	400200a0 	.word	0x400200a0
 8005554:	400200b8 	.word	0x400200b8
 8005558:	40020410 	.word	0x40020410
 800555c:	40020428 	.word	0x40020428
 8005560:	40020440 	.word	0x40020440
 8005564:	40020458 	.word	0x40020458
 8005568:	40020470 	.word	0x40020470
 800556c:	40020488 	.word	0x40020488
 8005570:	400204a0 	.word	0x400204a0
 8005574:	400204b8 	.word	0x400204b8
 8005578:	aaaaaaab 	.word	0xaaaaaaab
 800557c:	080108d4 	.word	0x080108d4
 8005580:	fffffc00 	.word	0xfffffc00

08005584 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800558c:	2300      	movs	r3, #0
 800558e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d120      	bne.n	80055da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559c:	2b03      	cmp	r3, #3
 800559e:	d858      	bhi.n	8005652 <DMA_CheckFifoParam+0xce>
 80055a0:	a201      	add	r2, pc, #4	; (adr r2, 80055a8 <DMA_CheckFifoParam+0x24>)
 80055a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a6:	bf00      	nop
 80055a8:	080055b9 	.word	0x080055b9
 80055ac:	080055cb 	.word	0x080055cb
 80055b0:	080055b9 	.word	0x080055b9
 80055b4:	08005653 	.word	0x08005653
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d048      	beq.n	8005656 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055c8:	e045      	b.n	8005656 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055d2:	d142      	bne.n	800565a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055d8:	e03f      	b.n	800565a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e2:	d123      	bne.n	800562c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e8:	2b03      	cmp	r3, #3
 80055ea:	d838      	bhi.n	800565e <DMA_CheckFifoParam+0xda>
 80055ec:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <DMA_CheckFifoParam+0x70>)
 80055ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f2:	bf00      	nop
 80055f4:	08005605 	.word	0x08005605
 80055f8:	0800560b 	.word	0x0800560b
 80055fc:	08005605 	.word	0x08005605
 8005600:	0800561d 	.word	0x0800561d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	73fb      	strb	r3, [r7, #15]
        break;
 8005608:	e030      	b.n	800566c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d025      	beq.n	8005662 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800561a:	e022      	b.n	8005662 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005620:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005624:	d11f      	bne.n	8005666 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800562a:	e01c      	b.n	8005666 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005630:	2b02      	cmp	r3, #2
 8005632:	d902      	bls.n	800563a <DMA_CheckFifoParam+0xb6>
 8005634:	2b03      	cmp	r3, #3
 8005636:	d003      	beq.n	8005640 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005638:	e018      	b.n	800566c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	73fb      	strb	r3, [r7, #15]
        break;
 800563e:	e015      	b.n	800566c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00e      	beq.n	800566a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	73fb      	strb	r3, [r7, #15]
    break;
 8005650:	e00b      	b.n	800566a <DMA_CheckFifoParam+0xe6>
        break;
 8005652:	bf00      	nop
 8005654:	e00a      	b.n	800566c <DMA_CheckFifoParam+0xe8>
        break;
 8005656:	bf00      	nop
 8005658:	e008      	b.n	800566c <DMA_CheckFifoParam+0xe8>
        break;
 800565a:	bf00      	nop
 800565c:	e006      	b.n	800566c <DMA_CheckFifoParam+0xe8>
        break;
 800565e:	bf00      	nop
 8005660:	e004      	b.n	800566c <DMA_CheckFifoParam+0xe8>
        break;
 8005662:	bf00      	nop
 8005664:	e002      	b.n	800566c <DMA_CheckFifoParam+0xe8>
        break;
 8005666:	bf00      	nop
 8005668:	e000      	b.n	800566c <DMA_CheckFifoParam+0xe8>
    break;
 800566a:	bf00      	nop
    }
  }

  return status;
 800566c:	7bfb      	ldrb	r3, [r7, #15]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop

0800567c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a38      	ldr	r2, [pc, #224]	; (8005770 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d022      	beq.n	80056da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a36      	ldr	r2, [pc, #216]	; (8005774 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d01d      	beq.n	80056da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a35      	ldr	r2, [pc, #212]	; (8005778 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d018      	beq.n	80056da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a33      	ldr	r2, [pc, #204]	; (800577c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d013      	beq.n	80056da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a32      	ldr	r2, [pc, #200]	; (8005780 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00e      	beq.n	80056da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a30      	ldr	r2, [pc, #192]	; (8005784 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d009      	beq.n	80056da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a2f      	ldr	r2, [pc, #188]	; (8005788 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d004      	beq.n	80056da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a2d      	ldr	r2, [pc, #180]	; (800578c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d101      	bne.n	80056de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80056de:	2300      	movs	r3, #0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d01a      	beq.n	800571a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	3b08      	subs	r3, #8
 80056ec:	4a28      	ldr	r2, [pc, #160]	; (8005790 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80056ee:	fba2 2303 	umull	r2, r3, r2, r3
 80056f2:	091b      	lsrs	r3, r3, #4
 80056f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4b26      	ldr	r3, [pc, #152]	; (8005794 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80056fa:	4413      	add	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	461a      	mov	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a24      	ldr	r2, [pc, #144]	; (8005798 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005708:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f003 031f 	and.w	r3, r3, #31
 8005710:	2201      	movs	r2, #1
 8005712:	409a      	lsls	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005718:	e024      	b.n	8005764 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	b2db      	uxtb	r3, r3
 8005720:	3b10      	subs	r3, #16
 8005722:	4a1e      	ldr	r2, [pc, #120]	; (800579c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005724:	fba2 2303 	umull	r2, r3, r2, r3
 8005728:	091b      	lsrs	r3, r3, #4
 800572a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4a1c      	ldr	r2, [pc, #112]	; (80057a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d806      	bhi.n	8005742 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	4a1b      	ldr	r2, [pc, #108]	; (80057a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d902      	bls.n	8005742 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3308      	adds	r3, #8
 8005740:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	4b18      	ldr	r3, [pc, #96]	; (80057a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005746:	4413      	add	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	461a      	mov	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a16      	ldr	r2, [pc, #88]	; (80057ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005754:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f003 031f 	and.w	r3, r3, #31
 800575c:	2201      	movs	r2, #1
 800575e:	409a      	lsls	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005764:	bf00      	nop
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	58025408 	.word	0x58025408
 8005774:	5802541c 	.word	0x5802541c
 8005778:	58025430 	.word	0x58025430
 800577c:	58025444 	.word	0x58025444
 8005780:	58025458 	.word	0x58025458
 8005784:	5802546c 	.word	0x5802546c
 8005788:	58025480 	.word	0x58025480
 800578c:	58025494 	.word	0x58025494
 8005790:	cccccccd 	.word	0xcccccccd
 8005794:	16009600 	.word	0x16009600
 8005798:	58025880 	.word	0x58025880
 800579c:	aaaaaaab 	.word	0xaaaaaaab
 80057a0:	400204b8 	.word	0x400204b8
 80057a4:	4002040f 	.word	0x4002040f
 80057a8:	10008200 	.word	0x10008200
 80057ac:	40020880 	.word	0x40020880

080057b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d04a      	beq.n	800585c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d847      	bhi.n	800585c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a25      	ldr	r2, [pc, #148]	; (8005868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d022      	beq.n	800581c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a24      	ldr	r2, [pc, #144]	; (800586c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d01d      	beq.n	800581c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a22      	ldr	r2, [pc, #136]	; (8005870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d018      	beq.n	800581c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a21      	ldr	r2, [pc, #132]	; (8005874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d013      	beq.n	800581c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a1f      	ldr	r2, [pc, #124]	; (8005878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00e      	beq.n	800581c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a1e      	ldr	r2, [pc, #120]	; (800587c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d009      	beq.n	800581c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a1c      	ldr	r2, [pc, #112]	; (8005880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d004      	beq.n	800581c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a1b      	ldr	r2, [pc, #108]	; (8005884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d101      	bne.n	8005820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800581c:	2301      	movs	r3, #1
 800581e:	e000      	b.n	8005822 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005820:	2300      	movs	r3, #0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4b17      	ldr	r3, [pc, #92]	; (8005888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800582a:	4413      	add	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	461a      	mov	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a15      	ldr	r2, [pc, #84]	; (800588c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005838:	671a      	str	r2, [r3, #112]	; 0x70
 800583a:	e009      	b.n	8005850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4b14      	ldr	r3, [pc, #80]	; (8005890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005840:	4413      	add	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	461a      	mov	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a11      	ldr	r2, [pc, #68]	; (8005894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800584e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3b01      	subs	r3, #1
 8005854:	2201      	movs	r2, #1
 8005856:	409a      	lsls	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800585c:	bf00      	nop
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	58025408 	.word	0x58025408
 800586c:	5802541c 	.word	0x5802541c
 8005870:	58025430 	.word	0x58025430
 8005874:	58025444 	.word	0x58025444
 8005878:	58025458 	.word	0x58025458
 800587c:	5802546c 	.word	0x5802546c
 8005880:	58025480 	.word	0x58025480
 8005884:	58025494 	.word	0x58025494
 8005888:	1600963f 	.word	0x1600963f
 800588c:	58025940 	.word	0x58025940
 8005890:	1000823f 	.word	0x1000823f
 8005894:	40020940 	.word	0x40020940

08005898 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005898:	b480      	push	{r7}
 800589a:	b089      	sub	sp, #36	; 0x24
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80058a6:	4b89      	ldr	r3, [pc, #548]	; (8005acc <HAL_GPIO_Init+0x234>)
 80058a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058aa:	e194      	b.n	8005bd6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	2101      	movs	r1, #1
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	fa01 f303 	lsl.w	r3, r1, r3
 80058b8:	4013      	ands	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f000 8186 	beq.w	8005bd0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f003 0303 	and.w	r3, r3, #3
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d005      	beq.n	80058dc <HAL_GPIO_Init+0x44>
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f003 0303 	and.w	r3, r3, #3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d130      	bne.n	800593e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	2203      	movs	r2, #3
 80058e8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ec:	43db      	mvns	r3, r3
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	4013      	ands	r3, r2
 80058f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	68da      	ldr	r2, [r3, #12]
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	4313      	orrs	r3, r2
 8005904:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005912:	2201      	movs	r2, #1
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	43db      	mvns	r3, r3
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	4013      	ands	r3, r2
 8005920:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	091b      	lsrs	r3, r3, #4
 8005928:	f003 0201 	and.w	r2, r3, #1
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	fa02 f303 	lsl.w	r3, r2, r3
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	4313      	orrs	r3, r2
 8005936:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	2b03      	cmp	r3, #3
 8005948:	d017      	beq.n	800597a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	2203      	movs	r2, #3
 8005956:	fa02 f303 	lsl.w	r3, r2, r3
 800595a:	43db      	mvns	r3, r3
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	4013      	ands	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	fa02 f303 	lsl.w	r3, r2, r3
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	4313      	orrs	r3, r2
 8005972:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d123      	bne.n	80059ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	08da      	lsrs	r2, r3, #3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	3208      	adds	r2, #8
 800598e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	220f      	movs	r2, #15
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	43db      	mvns	r3, r3
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	4013      	ands	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	691a      	ldr	r2, [r3, #16]
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	4313      	orrs	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	08da      	lsrs	r2, r3, #3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	3208      	adds	r2, #8
 80059c8:	69b9      	ldr	r1, [r7, #24]
 80059ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	2203      	movs	r2, #3
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	43db      	mvns	r3, r3
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	4013      	ands	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f003 0203 	and.w	r2, r3, #3
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 80e0 	beq.w	8005bd0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a10:	4b2f      	ldr	r3, [pc, #188]	; (8005ad0 <HAL_GPIO_Init+0x238>)
 8005a12:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005a16:	4a2e      	ldr	r2, [pc, #184]	; (8005ad0 <HAL_GPIO_Init+0x238>)
 8005a18:	f043 0302 	orr.w	r3, r3, #2
 8005a1c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005a20:	4b2b      	ldr	r3, [pc, #172]	; (8005ad0 <HAL_GPIO_Init+0x238>)
 8005a22:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a2e:	4a29      	ldr	r2, [pc, #164]	; (8005ad4 <HAL_GPIO_Init+0x23c>)
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	089b      	lsrs	r3, r3, #2
 8005a34:	3302      	adds	r3, #2
 8005a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	220f      	movs	r2, #15
 8005a46:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4a:	43db      	mvns	r3, r3
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a20      	ldr	r2, [pc, #128]	; (8005ad8 <HAL_GPIO_Init+0x240>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d052      	beq.n	8005b00 <HAL_GPIO_Init+0x268>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a1f      	ldr	r2, [pc, #124]	; (8005adc <HAL_GPIO_Init+0x244>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d031      	beq.n	8005ac6 <HAL_GPIO_Init+0x22e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a1e      	ldr	r2, [pc, #120]	; (8005ae0 <HAL_GPIO_Init+0x248>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d02b      	beq.n	8005ac2 <HAL_GPIO_Init+0x22a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ae4 <HAL_GPIO_Init+0x24c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d025      	beq.n	8005abe <HAL_GPIO_Init+0x226>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a1c      	ldr	r2, [pc, #112]	; (8005ae8 <HAL_GPIO_Init+0x250>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d01f      	beq.n	8005aba <HAL_GPIO_Init+0x222>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a1b      	ldr	r2, [pc, #108]	; (8005aec <HAL_GPIO_Init+0x254>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d019      	beq.n	8005ab6 <HAL_GPIO_Init+0x21e>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a1a      	ldr	r2, [pc, #104]	; (8005af0 <HAL_GPIO_Init+0x258>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d013      	beq.n	8005ab2 <HAL_GPIO_Init+0x21a>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a19      	ldr	r2, [pc, #100]	; (8005af4 <HAL_GPIO_Init+0x25c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00d      	beq.n	8005aae <HAL_GPIO_Init+0x216>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a18      	ldr	r2, [pc, #96]	; (8005af8 <HAL_GPIO_Init+0x260>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d007      	beq.n	8005aaa <HAL_GPIO_Init+0x212>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a17      	ldr	r2, [pc, #92]	; (8005afc <HAL_GPIO_Init+0x264>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d101      	bne.n	8005aa6 <HAL_GPIO_Init+0x20e>
 8005aa2:	2309      	movs	r3, #9
 8005aa4:	e02d      	b.n	8005b02 <HAL_GPIO_Init+0x26a>
 8005aa6:	230a      	movs	r3, #10
 8005aa8:	e02b      	b.n	8005b02 <HAL_GPIO_Init+0x26a>
 8005aaa:	2308      	movs	r3, #8
 8005aac:	e029      	b.n	8005b02 <HAL_GPIO_Init+0x26a>
 8005aae:	2307      	movs	r3, #7
 8005ab0:	e027      	b.n	8005b02 <HAL_GPIO_Init+0x26a>
 8005ab2:	2306      	movs	r3, #6
 8005ab4:	e025      	b.n	8005b02 <HAL_GPIO_Init+0x26a>
 8005ab6:	2305      	movs	r3, #5
 8005ab8:	e023      	b.n	8005b02 <HAL_GPIO_Init+0x26a>
 8005aba:	2304      	movs	r3, #4
 8005abc:	e021      	b.n	8005b02 <HAL_GPIO_Init+0x26a>
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e01f      	b.n	8005b02 <HAL_GPIO_Init+0x26a>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	e01d      	b.n	8005b02 <HAL_GPIO_Init+0x26a>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e01b      	b.n	8005b02 <HAL_GPIO_Init+0x26a>
 8005aca:	bf00      	nop
 8005acc:	58000080 	.word	0x58000080
 8005ad0:	58024400 	.word	0x58024400
 8005ad4:	58000400 	.word	0x58000400
 8005ad8:	58020000 	.word	0x58020000
 8005adc:	58020400 	.word	0x58020400
 8005ae0:	58020800 	.word	0x58020800
 8005ae4:	58020c00 	.word	0x58020c00
 8005ae8:	58021000 	.word	0x58021000
 8005aec:	58021400 	.word	0x58021400
 8005af0:	58021800 	.word	0x58021800
 8005af4:	58021c00 	.word	0x58021c00
 8005af8:	58022000 	.word	0x58022000
 8005afc:	58022400 	.word	0x58022400
 8005b00:	2300      	movs	r3, #0
 8005b02:	69fa      	ldr	r2, [r7, #28]
 8005b04:	f002 0203 	and.w	r2, r2, #3
 8005b08:	0092      	lsls	r2, r2, #2
 8005b0a:	4093      	lsls	r3, r2
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b12:	4938      	ldr	r1, [pc, #224]	; (8005bf4 <HAL_GPIO_Init+0x35c>)
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	089b      	lsrs	r3, r3, #2
 8005b18:	3302      	adds	r3, #2
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	43db      	mvns	r3, r3
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	4013      	ands	r3, r2
 8005b30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005b46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	43db      	mvns	r3, r3
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	43db      	mvns	r3, r3
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	43db      	mvns	r3, r3
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f47f ae63 	bne.w	80058ac <HAL_GPIO_Init+0x14>
  }
}
 8005be6:	bf00      	nop
 8005be8:	bf00      	nop
 8005bea:	3724      	adds	r7, #36	; 0x24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	58000400 	.word	0x58000400

08005bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	807b      	strh	r3, [r7, #2]
 8005c04:	4613      	mov	r3, r2
 8005c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c08:	787b      	ldrb	r3, [r7, #1]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c0e:	887a      	ldrh	r2, [r7, #2]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005c14:	e003      	b.n	8005c1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005c16:	887b      	ldrh	r3, [r7, #2]
 8005c18:	041a      	lsls	r2, r3, #16
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	619a      	str	r2, [r3, #24]
}
 8005c1e:	bf00      	nop
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b085      	sub	sp, #20
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	460b      	mov	r3, r1
 8005c34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c3c:	887a      	ldrh	r2, [r7, #2]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4013      	ands	r3, r2
 8005c42:	041a      	lsls	r2, r3, #16
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	43d9      	mvns	r1, r3
 8005c48:	887b      	ldrh	r3, [r7, #2]
 8005c4a:	400b      	ands	r3, r1
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	619a      	str	r2, [r3, #24]
}
 8005c52:	bf00      	nop
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
	...

08005c60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005c68:	4b29      	ldr	r3, [pc, #164]	; (8005d10 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	2b06      	cmp	r3, #6
 8005c72:	d00a      	beq.n	8005c8a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005c74:	4b26      	ldr	r3, [pc, #152]	; (8005d10 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d001      	beq.n	8005c86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e040      	b.n	8005d08 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	e03e      	b.n	8005d08 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005c8a:	4b21      	ldr	r3, [pc, #132]	; (8005d10 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005c92:	491f      	ldr	r1, [pc, #124]	; (8005d10 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005c9a:	f7fb fd19 	bl	80016d0 <HAL_GetTick>
 8005c9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ca0:	e009      	b.n	8005cb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ca2:	f7fb fd15 	bl	80016d0 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cb0:	d901      	bls.n	8005cb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e028      	b.n	8005d08 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cb6:	4b16      	ldr	r3, [pc, #88]	; (8005d10 <HAL_PWREx_ConfigSupply+0xb0>)
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cc2:	d1ee      	bne.n	8005ca2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b1e      	cmp	r3, #30
 8005cc8:	d008      	beq.n	8005cdc <HAL_PWREx_ConfigSupply+0x7c>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b2e      	cmp	r3, #46	; 0x2e
 8005cce:	d005      	beq.n	8005cdc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b1d      	cmp	r3, #29
 8005cd4:	d002      	beq.n	8005cdc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b2d      	cmp	r3, #45	; 0x2d
 8005cda:	d114      	bne.n	8005d06 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005cdc:	f7fb fcf8 	bl	80016d0 <HAL_GetTick>
 8005ce0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005ce2:	e009      	b.n	8005cf8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ce4:	f7fb fcf4 	bl	80016d0 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cf2:	d901      	bls.n	8005cf8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e007      	b.n	8005d08 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005cf8:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <HAL_PWREx_ConfigSupply+0xb0>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d04:	d1ee      	bne.n	8005ce4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	58024800 	.word	0x58024800

08005d14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08c      	sub	sp, #48	; 0x30
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d102      	bne.n	8005d28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	f000 bc1f 	b.w	8006566 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 80b3 	beq.w	8005e9c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d36:	4b95      	ldr	r3, [pc, #596]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d40:	4b92      	ldr	r3, [pc, #584]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d44:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d48:	2b10      	cmp	r3, #16
 8005d4a:	d007      	beq.n	8005d5c <HAL_RCC_OscConfig+0x48>
 8005d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4e:	2b18      	cmp	r3, #24
 8005d50:	d112      	bne.n	8005d78 <HAL_RCC_OscConfig+0x64>
 8005d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d54:	f003 0303 	and.w	r3, r3, #3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d10d      	bne.n	8005d78 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d5c:	4b8b      	ldr	r3, [pc, #556]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 8098 	beq.w	8005e9a <HAL_RCC_OscConfig+0x186>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f040 8093 	bne.w	8005e9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e3f6      	b.n	8006566 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d80:	d106      	bne.n	8005d90 <HAL_RCC_OscConfig+0x7c>
 8005d82:	4b82      	ldr	r3, [pc, #520]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a81      	ldr	r2, [pc, #516]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	e058      	b.n	8005e42 <HAL_RCC_OscConfig+0x12e>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d112      	bne.n	8005dbe <HAL_RCC_OscConfig+0xaa>
 8005d98:	4b7c      	ldr	r3, [pc, #496]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a7b      	ldr	r2, [pc, #492]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	4b79      	ldr	r3, [pc, #484]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a78      	ldr	r2, [pc, #480]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005daa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	4b76      	ldr	r3, [pc, #472]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a75      	ldr	r2, [pc, #468]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	e041      	b.n	8005e42 <HAL_RCC_OscConfig+0x12e>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dc6:	d112      	bne.n	8005dee <HAL_RCC_OscConfig+0xda>
 8005dc8:	4b70      	ldr	r3, [pc, #448]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a6f      	ldr	r2, [pc, #444]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005dce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	4b6d      	ldr	r3, [pc, #436]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a6c      	ldr	r2, [pc, #432]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005dda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	4b6a      	ldr	r3, [pc, #424]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a69      	ldr	r2, [pc, #420]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	e029      	b.n	8005e42 <HAL_RCC_OscConfig+0x12e>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005df6:	d112      	bne.n	8005e1e <HAL_RCC_OscConfig+0x10a>
 8005df8:	4b64      	ldr	r3, [pc, #400]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a63      	ldr	r2, [pc, #396]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005dfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	4b61      	ldr	r3, [pc, #388]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a60      	ldr	r2, [pc, #384]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005e0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e0e:	6013      	str	r3, [r2, #0]
 8005e10:	4b5e      	ldr	r3, [pc, #376]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a5d      	ldr	r2, [pc, #372]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	e011      	b.n	8005e42 <HAL_RCC_OscConfig+0x12e>
 8005e1e:	4b5b      	ldr	r3, [pc, #364]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a5a      	ldr	r2, [pc, #360]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	4b58      	ldr	r3, [pc, #352]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a57      	ldr	r2, [pc, #348]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005e30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	4b55      	ldr	r3, [pc, #340]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a54      	ldr	r2, [pc, #336]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005e3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005e40:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d013      	beq.n	8005e72 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4a:	f7fb fc41 	bl	80016d0 <HAL_GetTick>
 8005e4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e50:	e008      	b.n	8005e64 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e52:	f7fb fc3d 	bl	80016d0 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	2b64      	cmp	r3, #100	; 0x64
 8005e5e:	d901      	bls.n	8005e64 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e380      	b.n	8006566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e64:	4b49      	ldr	r3, [pc, #292]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0f0      	beq.n	8005e52 <HAL_RCC_OscConfig+0x13e>
 8005e70:	e014      	b.n	8005e9c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e72:	f7fb fc2d 	bl	80016d0 <HAL_GetTick>
 8005e76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e78:	e008      	b.n	8005e8c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e7a:	f7fb fc29 	bl	80016d0 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b64      	cmp	r3, #100	; 0x64
 8005e86:	d901      	bls.n	8005e8c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e36c      	b.n	8006566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e8c:	4b3f      	ldr	r3, [pc, #252]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1f0      	bne.n	8005e7a <HAL_RCC_OscConfig+0x166>
 8005e98:	e000      	b.n	8005e9c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e9a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 808c 	beq.w	8005fc2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eaa:	4b38      	ldr	r3, [pc, #224]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eb2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005eb4:	4b35      	ldr	r3, [pc, #212]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x1bc>
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	2b18      	cmp	r3, #24
 8005ec4:	d137      	bne.n	8005f36 <HAL_RCC_OscConfig+0x222>
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	f003 0303 	and.w	r3, r3, #3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d132      	bne.n	8005f36 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ed0:	4b2e      	ldr	r3, [pc, #184]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x1d4>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e33e      	b.n	8006566 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ee8:	4b28      	ldr	r3, [pc, #160]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f023 0219 	bic.w	r2, r3, #25
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	4925      	ldr	r1, [pc, #148]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005efa:	f7fb fbe9 	bl	80016d0 <HAL_GetTick>
 8005efe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f00:	e008      	b.n	8005f14 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f02:	f7fb fbe5 	bl	80016d0 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d901      	bls.n	8005f14 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e328      	b.n	8006566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f14:	4b1d      	ldr	r3, [pc, #116]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0f0      	beq.n	8005f02 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f20:	4b1a      	ldr	r3, [pc, #104]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	061b      	lsls	r3, r3, #24
 8005f2e:	4917      	ldr	r1, [pc, #92]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f34:	e045      	b.n	8005fc2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d028      	beq.n	8005f90 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f3e:	4b13      	ldr	r3, [pc, #76]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f023 0219 	bic.w	r2, r3, #25
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	4910      	ldr	r1, [pc, #64]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f50:	f7fb fbbe 	bl	80016d0 <HAL_GetTick>
 8005f54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f56:	e008      	b.n	8005f6a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f58:	f7fb fbba 	bl	80016d0 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e2fd      	b.n	8006566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f6a:	4b08      	ldr	r3, [pc, #32]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0304 	and.w	r3, r3, #4
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d0f0      	beq.n	8005f58 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f76:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	061b      	lsls	r3, r3, #24
 8005f84:	4901      	ldr	r1, [pc, #4]	; (8005f8c <HAL_RCC_OscConfig+0x278>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	604b      	str	r3, [r1, #4]
 8005f8a:	e01a      	b.n	8005fc2 <HAL_RCC_OscConfig+0x2ae>
 8005f8c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f90:	4b97      	ldr	r3, [pc, #604]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a96      	ldr	r2, [pc, #600]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 8005f96:	f023 0301 	bic.w	r3, r3, #1
 8005f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9c:	f7fb fb98 	bl	80016d0 <HAL_GetTick>
 8005fa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fa2:	e008      	b.n	8005fb6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fa4:	f7fb fb94 	bl	80016d0 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e2d7      	b.n	8006566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fb6:	4b8e      	ldr	r3, [pc, #568]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1f0      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0310 	and.w	r3, r3, #16
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d06a      	beq.n	80060a4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fce:	4b88      	ldr	r3, [pc, #544]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fd6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fd8:	4b85      	ldr	r3, [pc, #532]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 8005fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fdc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d007      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x2e0>
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	2b18      	cmp	r3, #24
 8005fe8:	d11b      	bne.n	8006022 <HAL_RCC_OscConfig+0x30e>
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f003 0303 	and.w	r3, r3, #3
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d116      	bne.n	8006022 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ff4:	4b7e      	ldr	r3, [pc, #504]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d005      	beq.n	800600c <HAL_RCC_OscConfig+0x2f8>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	2b80      	cmp	r3, #128	; 0x80
 8006006:	d001      	beq.n	800600c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e2ac      	b.n	8006566 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800600c:	4b78      	ldr	r3, [pc, #480]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	061b      	lsls	r3, r3, #24
 800601a:	4975      	ldr	r1, [pc, #468]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 800601c:	4313      	orrs	r3, r2
 800601e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006020:	e040      	b.n	80060a4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d023      	beq.n	8006072 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800602a:	4b71      	ldr	r3, [pc, #452]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a70      	ldr	r2, [pc, #448]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 8006030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006036:	f7fb fb4b 	bl	80016d0 <HAL_GetTick>
 800603a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800603c:	e008      	b.n	8006050 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800603e:	f7fb fb47 	bl	80016d0 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d901      	bls.n	8006050 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e28a      	b.n	8006566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006050:	4b67      	ldr	r3, [pc, #412]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006058:	2b00      	cmp	r3, #0
 800605a:	d0f0      	beq.n	800603e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800605c:	4b64      	ldr	r3, [pc, #400]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	061b      	lsls	r3, r3, #24
 800606a:	4961      	ldr	r1, [pc, #388]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 800606c:	4313      	orrs	r3, r2
 800606e:	60cb      	str	r3, [r1, #12]
 8006070:	e018      	b.n	80060a4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006072:	4b5f      	ldr	r3, [pc, #380]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a5e      	ldr	r2, [pc, #376]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 8006078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800607c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607e:	f7fb fb27 	bl	80016d0 <HAL_GetTick>
 8006082:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006084:	e008      	b.n	8006098 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006086:	f7fb fb23 	bl	80016d0 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	2b02      	cmp	r3, #2
 8006092:	d901      	bls.n	8006098 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e266      	b.n	8006566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006098:	4b55      	ldr	r3, [pc, #340]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1f0      	bne.n	8006086 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d036      	beq.n	800611e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d019      	beq.n	80060ec <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060b8:	4b4d      	ldr	r3, [pc, #308]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 80060ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060bc:	4a4c      	ldr	r2, [pc, #304]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 80060be:	f043 0301 	orr.w	r3, r3, #1
 80060c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c4:	f7fb fb04 	bl	80016d0 <HAL_GetTick>
 80060c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060ca:	e008      	b.n	80060de <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060cc:	f7fb fb00 	bl	80016d0 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e243      	b.n	8006566 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060de:	4b44      	ldr	r3, [pc, #272]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 80060e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d0f0      	beq.n	80060cc <HAL_RCC_OscConfig+0x3b8>
 80060ea:	e018      	b.n	800611e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060ec:	4b40      	ldr	r3, [pc, #256]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 80060ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f0:	4a3f      	ldr	r2, [pc, #252]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 80060f2:	f023 0301 	bic.w	r3, r3, #1
 80060f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f8:	f7fb faea 	bl	80016d0 <HAL_GetTick>
 80060fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006100:	f7fb fae6 	bl	80016d0 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e229      	b.n	8006566 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006112:	4b37      	ldr	r3, [pc, #220]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 8006114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1f0      	bne.n	8006100 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0320 	and.w	r3, r3, #32
 8006126:	2b00      	cmp	r3, #0
 8006128:	d036      	beq.n	8006198 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d019      	beq.n	8006166 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006132:	4b2f      	ldr	r3, [pc, #188]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a2e      	ldr	r2, [pc, #184]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 8006138:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800613c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800613e:	f7fb fac7 	bl	80016d0 <HAL_GetTick>
 8006142:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006144:	e008      	b.n	8006158 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006146:	f7fb fac3 	bl	80016d0 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e206      	b.n	8006566 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006158:	4b25      	ldr	r3, [pc, #148]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d0f0      	beq.n	8006146 <HAL_RCC_OscConfig+0x432>
 8006164:	e018      	b.n	8006198 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006166:	4b22      	ldr	r3, [pc, #136]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a21      	ldr	r2, [pc, #132]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 800616c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006170:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006172:	f7fb faad 	bl	80016d0 <HAL_GetTick>
 8006176:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006178:	e008      	b.n	800618c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800617a:	f7fb faa9 	bl	80016d0 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b02      	cmp	r3, #2
 8006186:	d901      	bls.n	800618c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e1ec      	b.n	8006566 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800618c:	4b18      	ldr	r3, [pc, #96]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1f0      	bne.n	800617a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 80af 	beq.w	8006304 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061a6:	4b13      	ldr	r3, [pc, #76]	; (80061f4 <HAL_RCC_OscConfig+0x4e0>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a12      	ldr	r2, [pc, #72]	; (80061f4 <HAL_RCC_OscConfig+0x4e0>)
 80061ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061b2:	f7fb fa8d 	bl	80016d0 <HAL_GetTick>
 80061b6:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061b8:	e008      	b.n	80061cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061ba:	f7fb fa89 	bl	80016d0 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b64      	cmp	r3, #100	; 0x64
 80061c6:	d901      	bls.n	80061cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e1cc      	b.n	8006566 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061cc:	4b09      	ldr	r3, [pc, #36]	; (80061f4 <HAL_RCC_OscConfig+0x4e0>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0f0      	beq.n	80061ba <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d10b      	bne.n	80061f8 <HAL_RCC_OscConfig+0x4e4>
 80061e0:	4b03      	ldr	r3, [pc, #12]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 80061e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e4:	4a02      	ldr	r2, [pc, #8]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 80061e6:	f043 0301 	orr.w	r3, r3, #1
 80061ea:	6713      	str	r3, [r2, #112]	; 0x70
 80061ec:	e05b      	b.n	80062a6 <HAL_RCC_OscConfig+0x592>
 80061ee:	bf00      	nop
 80061f0:	58024400 	.word	0x58024400
 80061f4:	58024800 	.word	0x58024800
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d112      	bne.n	8006226 <HAL_RCC_OscConfig+0x512>
 8006200:	4b9d      	ldr	r3, [pc, #628]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 8006202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006204:	4a9c      	ldr	r2, [pc, #624]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 8006206:	f023 0301 	bic.w	r3, r3, #1
 800620a:	6713      	str	r3, [r2, #112]	; 0x70
 800620c:	4b9a      	ldr	r3, [pc, #616]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 800620e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006210:	4a99      	ldr	r2, [pc, #612]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 8006212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006216:	6713      	str	r3, [r2, #112]	; 0x70
 8006218:	4b97      	ldr	r3, [pc, #604]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 800621a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621c:	4a96      	ldr	r2, [pc, #600]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 800621e:	f023 0304 	bic.w	r3, r3, #4
 8006222:	6713      	str	r3, [r2, #112]	; 0x70
 8006224:	e03f      	b.n	80062a6 <HAL_RCC_OscConfig+0x592>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	2b05      	cmp	r3, #5
 800622c:	d112      	bne.n	8006254 <HAL_RCC_OscConfig+0x540>
 800622e:	4b92      	ldr	r3, [pc, #584]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 8006230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006232:	4a91      	ldr	r2, [pc, #580]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 8006234:	f043 0304 	orr.w	r3, r3, #4
 8006238:	6713      	str	r3, [r2, #112]	; 0x70
 800623a:	4b8f      	ldr	r3, [pc, #572]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 800623c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623e:	4a8e      	ldr	r2, [pc, #568]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 8006240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006244:	6713      	str	r3, [r2, #112]	; 0x70
 8006246:	4b8c      	ldr	r3, [pc, #560]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 8006248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624a:	4a8b      	ldr	r2, [pc, #556]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 800624c:	f043 0301 	orr.w	r3, r3, #1
 8006250:	6713      	str	r3, [r2, #112]	; 0x70
 8006252:	e028      	b.n	80062a6 <HAL_RCC_OscConfig+0x592>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	2b85      	cmp	r3, #133	; 0x85
 800625a:	d112      	bne.n	8006282 <HAL_RCC_OscConfig+0x56e>
 800625c:	4b86      	ldr	r3, [pc, #536]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 800625e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006260:	4a85      	ldr	r2, [pc, #532]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 8006262:	f043 0304 	orr.w	r3, r3, #4
 8006266:	6713      	str	r3, [r2, #112]	; 0x70
 8006268:	4b83      	ldr	r3, [pc, #524]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 800626a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626c:	4a82      	ldr	r2, [pc, #520]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 800626e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006272:	6713      	str	r3, [r2, #112]	; 0x70
 8006274:	4b80      	ldr	r3, [pc, #512]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 8006276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006278:	4a7f      	ldr	r2, [pc, #508]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 800627a:	f043 0301 	orr.w	r3, r3, #1
 800627e:	6713      	str	r3, [r2, #112]	; 0x70
 8006280:	e011      	b.n	80062a6 <HAL_RCC_OscConfig+0x592>
 8006282:	4b7d      	ldr	r3, [pc, #500]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 8006284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006286:	4a7c      	ldr	r2, [pc, #496]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 8006288:	f023 0301 	bic.w	r3, r3, #1
 800628c:	6713      	str	r3, [r2, #112]	; 0x70
 800628e:	4b7a      	ldr	r3, [pc, #488]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006292:	4a79      	ldr	r2, [pc, #484]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 8006294:	f023 0304 	bic.w	r3, r3, #4
 8006298:	6713      	str	r3, [r2, #112]	; 0x70
 800629a:	4b77      	ldr	r3, [pc, #476]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 800629c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629e:	4a76      	ldr	r2, [pc, #472]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 80062a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d015      	beq.n	80062da <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ae:	f7fb fa0f 	bl	80016d0 <HAL_GetTick>
 80062b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062b4:	e00a      	b.n	80062cc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062b6:	f7fb fa0b 	bl	80016d0 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d901      	bls.n	80062cc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e14c      	b.n	8006566 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062cc:	4b6a      	ldr	r3, [pc, #424]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 80062ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0ee      	beq.n	80062b6 <HAL_RCC_OscConfig+0x5a2>
 80062d8:	e014      	b.n	8006304 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062da:	f7fb f9f9 	bl	80016d0 <HAL_GetTick>
 80062de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062e0:	e00a      	b.n	80062f8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062e2:	f7fb f9f5 	bl	80016d0 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d901      	bls.n	80062f8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e136      	b.n	8006566 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062f8:	4b5f      	ldr	r3, [pc, #380]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 80062fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1ee      	bne.n	80062e2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 812b 	beq.w	8006564 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800630e:	4b5a      	ldr	r3, [pc, #360]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006316:	2b18      	cmp	r3, #24
 8006318:	f000 80bb 	beq.w	8006492 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	2b02      	cmp	r3, #2
 8006322:	f040 8095 	bne.w	8006450 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006326:	4b54      	ldr	r3, [pc, #336]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a53      	ldr	r2, [pc, #332]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 800632c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006332:	f7fb f9cd 	bl	80016d0 <HAL_GetTick>
 8006336:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006338:	e008      	b.n	800634c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800633a:	f7fb f9c9 	bl	80016d0 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d901      	bls.n	800634c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e10c      	b.n	8006566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800634c:	4b4a      	ldr	r3, [pc, #296]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1f0      	bne.n	800633a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006358:	4b47      	ldr	r3, [pc, #284]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 800635a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800635c:	4b47      	ldr	r3, [pc, #284]	; (800647c <HAL_RCC_OscConfig+0x768>)
 800635e:	4013      	ands	r3, r2
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006368:	0112      	lsls	r2, r2, #4
 800636a:	430a      	orrs	r2, r1
 800636c:	4942      	ldr	r1, [pc, #264]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 800636e:	4313      	orrs	r3, r2
 8006370:	628b      	str	r3, [r1, #40]	; 0x28
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006376:	3b01      	subs	r3, #1
 8006378:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006380:	3b01      	subs	r3, #1
 8006382:	025b      	lsls	r3, r3, #9
 8006384:	b29b      	uxth	r3, r3
 8006386:	431a      	orrs	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	3b01      	subs	r3, #1
 800638e:	041b      	lsls	r3, r3, #16
 8006390:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006394:	431a      	orrs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639a:	3b01      	subs	r3, #1
 800639c:	061b      	lsls	r3, r3, #24
 800639e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063a2:	4935      	ldr	r1, [pc, #212]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80063a8:	4b33      	ldr	r3, [pc, #204]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	4a32      	ldr	r2, [pc, #200]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 80063ae:	f023 0301 	bic.w	r3, r3, #1
 80063b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80063b4:	4b30      	ldr	r3, [pc, #192]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 80063b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063b8:	4b31      	ldr	r3, [pc, #196]	; (8006480 <HAL_RCC_OscConfig+0x76c>)
 80063ba:	4013      	ands	r3, r2
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80063c0:	00d2      	lsls	r2, r2, #3
 80063c2:	492d      	ldr	r1, [pc, #180]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80063c8:	4b2b      	ldr	r3, [pc, #172]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	f023 020c 	bic.w	r2, r3, #12
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d4:	4928      	ldr	r1, [pc, #160]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80063da:	4b27      	ldr	r3, [pc, #156]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 80063dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063de:	f023 0202 	bic.w	r2, r3, #2
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e6:	4924      	ldr	r1, [pc, #144]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063ec:	4b22      	ldr	r3, [pc, #136]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 80063ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f0:	4a21      	ldr	r2, [pc, #132]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 80063f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063f8:	4b1f      	ldr	r3, [pc, #124]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	4a1e      	ldr	r2, [pc, #120]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 80063fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006404:	4b1c      	ldr	r3, [pc, #112]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	4a1b      	ldr	r2, [pc, #108]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 800640a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800640e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006410:	4b19      	ldr	r3, [pc, #100]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	4a18      	ldr	r2, [pc, #96]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 8006416:	f043 0301 	orr.w	r3, r3, #1
 800641a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800641c:	4b16      	ldr	r3, [pc, #88]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a15      	ldr	r2, [pc, #84]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 8006422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006428:	f7fb f952 	bl	80016d0 <HAL_GetTick>
 800642c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800642e:	e008      	b.n	8006442 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006430:	f7fb f94e 	bl	80016d0 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b02      	cmp	r3, #2
 800643c:	d901      	bls.n	8006442 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e091      	b.n	8006566 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006442:	4b0d      	ldr	r3, [pc, #52]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d0f0      	beq.n	8006430 <HAL_RCC_OscConfig+0x71c>
 800644e:	e089      	b.n	8006564 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006450:	4b09      	ldr	r3, [pc, #36]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a08      	ldr	r2, [pc, #32]	; (8006478 <HAL_RCC_OscConfig+0x764>)
 8006456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800645a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800645c:	f7fb f938 	bl	80016d0 <HAL_GetTick>
 8006460:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006462:	e00f      	b.n	8006484 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006464:	f7fb f934 	bl	80016d0 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	2b02      	cmp	r3, #2
 8006470:	d908      	bls.n	8006484 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e077      	b.n	8006566 <HAL_RCC_OscConfig+0x852>
 8006476:	bf00      	nop
 8006478:	58024400 	.word	0x58024400
 800647c:	fffffc0c 	.word	0xfffffc0c
 8006480:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006484:	4b3a      	ldr	r3, [pc, #232]	; (8006570 <HAL_RCC_OscConfig+0x85c>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e9      	bne.n	8006464 <HAL_RCC_OscConfig+0x750>
 8006490:	e068      	b.n	8006564 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006492:	4b37      	ldr	r3, [pc, #220]	; (8006570 <HAL_RCC_OscConfig+0x85c>)
 8006494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006496:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006498:	4b35      	ldr	r3, [pc, #212]	; (8006570 <HAL_RCC_OscConfig+0x85c>)
 800649a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d031      	beq.n	800650a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f003 0203 	and.w	r2, r3, #3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d12a      	bne.n	800650a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	091b      	lsrs	r3, r3, #4
 80064b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d122      	bne.n	800650a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d11a      	bne.n	800650a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	0a5b      	lsrs	r3, r3, #9
 80064d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d111      	bne.n	800650a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	0c1b      	lsrs	r3, r3, #16
 80064ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d108      	bne.n	800650a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	0e1b      	lsrs	r3, r3, #24
 80064fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006504:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006506:	429a      	cmp	r2, r3
 8006508:	d001      	beq.n	800650e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e02b      	b.n	8006566 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800650e:	4b18      	ldr	r3, [pc, #96]	; (8006570 <HAL_RCC_OscConfig+0x85c>)
 8006510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006512:	08db      	lsrs	r3, r3, #3
 8006514:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006518:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	429a      	cmp	r2, r3
 8006522:	d01f      	beq.n	8006564 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006524:	4b12      	ldr	r3, [pc, #72]	; (8006570 <HAL_RCC_OscConfig+0x85c>)
 8006526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006528:	4a11      	ldr	r2, [pc, #68]	; (8006570 <HAL_RCC_OscConfig+0x85c>)
 800652a:	f023 0301 	bic.w	r3, r3, #1
 800652e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006530:	f7fb f8ce 	bl	80016d0 <HAL_GetTick>
 8006534:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006536:	bf00      	nop
 8006538:	f7fb f8ca 	bl	80016d0 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	4293      	cmp	r3, r2
 8006542:	d0f9      	beq.n	8006538 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006544:	4b0a      	ldr	r3, [pc, #40]	; (8006570 <HAL_RCC_OscConfig+0x85c>)
 8006546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006548:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <HAL_RCC_OscConfig+0x860>)
 800654a:	4013      	ands	r3, r2
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006550:	00d2      	lsls	r2, r2, #3
 8006552:	4907      	ldr	r1, [pc, #28]	; (8006570 <HAL_RCC_OscConfig+0x85c>)
 8006554:	4313      	orrs	r3, r2
 8006556:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006558:	4b05      	ldr	r3, [pc, #20]	; (8006570 <HAL_RCC_OscConfig+0x85c>)
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	4a04      	ldr	r2, [pc, #16]	; (8006570 <HAL_RCC_OscConfig+0x85c>)
 800655e:	f043 0301 	orr.w	r3, r3, #1
 8006562:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3730      	adds	r7, #48	; 0x30
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	58024400 	.word	0x58024400
 8006574:	ffff0007 	.word	0xffff0007

08006578 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e19c      	b.n	80068c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800658c:	4b8a      	ldr	r3, [pc, #552]	; (80067b8 <HAL_RCC_ClockConfig+0x240>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 030f 	and.w	r3, r3, #15
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d910      	bls.n	80065bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800659a:	4b87      	ldr	r3, [pc, #540]	; (80067b8 <HAL_RCC_ClockConfig+0x240>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f023 020f 	bic.w	r2, r3, #15
 80065a2:	4985      	ldr	r1, [pc, #532]	; (80067b8 <HAL_RCC_ClockConfig+0x240>)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065aa:	4b83      	ldr	r3, [pc, #524]	; (80067b8 <HAL_RCC_ClockConfig+0x240>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 030f 	and.w	r3, r3, #15
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d001      	beq.n	80065bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e184      	b.n	80068c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d010      	beq.n	80065ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	4b7b      	ldr	r3, [pc, #492]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d908      	bls.n	80065ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80065d8:	4b78      	ldr	r3, [pc, #480]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	4975      	ldr	r1, [pc, #468]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0308 	and.w	r3, r3, #8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d010      	beq.n	8006618 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	695a      	ldr	r2, [r3, #20]
 80065fa:	4b70      	ldr	r3, [pc, #448]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006602:	429a      	cmp	r2, r3
 8006604:	d908      	bls.n	8006618 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006606:	4b6d      	ldr	r3, [pc, #436]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	496a      	ldr	r1, [pc, #424]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 8006614:	4313      	orrs	r3, r2
 8006616:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0310 	and.w	r3, r3, #16
 8006620:	2b00      	cmp	r3, #0
 8006622:	d010      	beq.n	8006646 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	699a      	ldr	r2, [r3, #24]
 8006628:	4b64      	ldr	r3, [pc, #400]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006630:	429a      	cmp	r2, r3
 8006632:	d908      	bls.n	8006646 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006634:	4b61      	ldr	r3, [pc, #388]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 8006636:	69db      	ldr	r3, [r3, #28]
 8006638:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	495e      	ldr	r1, [pc, #376]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 8006642:	4313      	orrs	r3, r2
 8006644:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b00      	cmp	r3, #0
 8006650:	d010      	beq.n	8006674 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	69da      	ldr	r2, [r3, #28]
 8006656:	4b59      	ldr	r3, [pc, #356]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800665e:	429a      	cmp	r2, r3
 8006660:	d908      	bls.n	8006674 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006662:	4b56      	ldr	r3, [pc, #344]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	4953      	ldr	r1, [pc, #332]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 8006670:	4313      	orrs	r3, r2
 8006672:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d010      	beq.n	80066a2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68da      	ldr	r2, [r3, #12]
 8006684:	4b4d      	ldr	r3, [pc, #308]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	f003 030f 	and.w	r3, r3, #15
 800668c:	429a      	cmp	r2, r3
 800668e:	d908      	bls.n	80066a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006690:	4b4a      	ldr	r3, [pc, #296]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	f023 020f 	bic.w	r2, r3, #15
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	4947      	ldr	r1, [pc, #284]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d055      	beq.n	800675a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80066ae:	4b43      	ldr	r3, [pc, #268]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	4940      	ldr	r1, [pc, #256]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d107      	bne.n	80066d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066c8:	4b3c      	ldr	r3, [pc, #240]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d121      	bne.n	8006718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e0f6      	b.n	80068c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	2b03      	cmp	r3, #3
 80066de:	d107      	bne.n	80066f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066e0:	4b36      	ldr	r3, [pc, #216]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d115      	bne.n	8006718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e0ea      	b.n	80068c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d107      	bne.n	8006708 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066f8:	4b30      	ldr	r3, [pc, #192]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006700:	2b00      	cmp	r3, #0
 8006702:	d109      	bne.n	8006718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e0de      	b.n	80068c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006708:	4b2c      	ldr	r3, [pc, #176]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e0d6      	b.n	80068c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006718:	4b28      	ldr	r3, [pc, #160]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f023 0207 	bic.w	r2, r3, #7
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	4925      	ldr	r1, [pc, #148]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 8006726:	4313      	orrs	r3, r2
 8006728:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800672a:	f7fa ffd1 	bl	80016d0 <HAL_GetTick>
 800672e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006730:	e00a      	b.n	8006748 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006732:	f7fa ffcd 	bl	80016d0 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006740:	4293      	cmp	r3, r2
 8006742:	d901      	bls.n	8006748 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e0be      	b.n	80068c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006748:	4b1c      	ldr	r3, [pc, #112]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	429a      	cmp	r2, r3
 8006758:	d1eb      	bne.n	8006732 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d010      	beq.n	8006788 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68da      	ldr	r2, [r3, #12]
 800676a:	4b14      	ldr	r3, [pc, #80]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	f003 030f 	and.w	r3, r3, #15
 8006772:	429a      	cmp	r2, r3
 8006774:	d208      	bcs.n	8006788 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006776:	4b11      	ldr	r3, [pc, #68]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	f023 020f 	bic.w	r2, r3, #15
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	490e      	ldr	r1, [pc, #56]	; (80067bc <HAL_RCC_ClockConfig+0x244>)
 8006784:	4313      	orrs	r3, r2
 8006786:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006788:	4b0b      	ldr	r3, [pc, #44]	; (80067b8 <HAL_RCC_ClockConfig+0x240>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	429a      	cmp	r2, r3
 8006794:	d214      	bcs.n	80067c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006796:	4b08      	ldr	r3, [pc, #32]	; (80067b8 <HAL_RCC_ClockConfig+0x240>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f023 020f 	bic.w	r2, r3, #15
 800679e:	4906      	ldr	r1, [pc, #24]	; (80067b8 <HAL_RCC_ClockConfig+0x240>)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067a6:	4b04      	ldr	r3, [pc, #16]	; (80067b8 <HAL_RCC_ClockConfig+0x240>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 030f 	and.w	r3, r3, #15
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d005      	beq.n	80067c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e086      	b.n	80068c6 <HAL_RCC_ClockConfig+0x34e>
 80067b8:	52002000 	.word	0x52002000
 80067bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d010      	beq.n	80067ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	691a      	ldr	r2, [r3, #16]
 80067d0:	4b3f      	ldr	r3, [pc, #252]	; (80068d0 <HAL_RCC_ClockConfig+0x358>)
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067d8:	429a      	cmp	r2, r3
 80067da:	d208      	bcs.n	80067ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067dc:	4b3c      	ldr	r3, [pc, #240]	; (80068d0 <HAL_RCC_ClockConfig+0x358>)
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	4939      	ldr	r1, [pc, #228]	; (80068d0 <HAL_RCC_ClockConfig+0x358>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0308 	and.w	r3, r3, #8
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d010      	beq.n	800681c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	695a      	ldr	r2, [r3, #20]
 80067fe:	4b34      	ldr	r3, [pc, #208]	; (80068d0 <HAL_RCC_ClockConfig+0x358>)
 8006800:	69db      	ldr	r3, [r3, #28]
 8006802:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006806:	429a      	cmp	r2, r3
 8006808:	d208      	bcs.n	800681c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800680a:	4b31      	ldr	r3, [pc, #196]	; (80068d0 <HAL_RCC_ClockConfig+0x358>)
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	492e      	ldr	r1, [pc, #184]	; (80068d0 <HAL_RCC_ClockConfig+0x358>)
 8006818:	4313      	orrs	r3, r2
 800681a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0310 	and.w	r3, r3, #16
 8006824:	2b00      	cmp	r3, #0
 8006826:	d010      	beq.n	800684a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	699a      	ldr	r2, [r3, #24]
 800682c:	4b28      	ldr	r3, [pc, #160]	; (80068d0 <HAL_RCC_ClockConfig+0x358>)
 800682e:	69db      	ldr	r3, [r3, #28]
 8006830:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006834:	429a      	cmp	r2, r3
 8006836:	d208      	bcs.n	800684a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006838:	4b25      	ldr	r3, [pc, #148]	; (80068d0 <HAL_RCC_ClockConfig+0x358>)
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	4922      	ldr	r1, [pc, #136]	; (80068d0 <HAL_RCC_ClockConfig+0x358>)
 8006846:	4313      	orrs	r3, r2
 8006848:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0320 	and.w	r3, r3, #32
 8006852:	2b00      	cmp	r3, #0
 8006854:	d010      	beq.n	8006878 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	69da      	ldr	r2, [r3, #28]
 800685a:	4b1d      	ldr	r3, [pc, #116]	; (80068d0 <HAL_RCC_ClockConfig+0x358>)
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006862:	429a      	cmp	r2, r3
 8006864:	d208      	bcs.n	8006878 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006866:	4b1a      	ldr	r3, [pc, #104]	; (80068d0 <HAL_RCC_ClockConfig+0x358>)
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	4917      	ldr	r1, [pc, #92]	; (80068d0 <HAL_RCC_ClockConfig+0x358>)
 8006874:	4313      	orrs	r3, r2
 8006876:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006878:	f000 f834 	bl	80068e4 <HAL_RCC_GetSysClockFreq>
 800687c:	4602      	mov	r2, r0
 800687e:	4b14      	ldr	r3, [pc, #80]	; (80068d0 <HAL_RCC_ClockConfig+0x358>)
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	0a1b      	lsrs	r3, r3, #8
 8006884:	f003 030f 	and.w	r3, r3, #15
 8006888:	4912      	ldr	r1, [pc, #72]	; (80068d4 <HAL_RCC_ClockConfig+0x35c>)
 800688a:	5ccb      	ldrb	r3, [r1, r3]
 800688c:	f003 031f 	and.w	r3, r3, #31
 8006890:	fa22 f303 	lsr.w	r3, r2, r3
 8006894:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006896:	4b0e      	ldr	r3, [pc, #56]	; (80068d0 <HAL_RCC_ClockConfig+0x358>)
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	f003 030f 	and.w	r3, r3, #15
 800689e:	4a0d      	ldr	r2, [pc, #52]	; (80068d4 <HAL_RCC_ClockConfig+0x35c>)
 80068a0:	5cd3      	ldrb	r3, [r2, r3]
 80068a2:	f003 031f 	and.w	r3, r3, #31
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	fa22 f303 	lsr.w	r3, r2, r3
 80068ac:	4a0a      	ldr	r2, [pc, #40]	; (80068d8 <HAL_RCC_ClockConfig+0x360>)
 80068ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068b0:	4a0a      	ldr	r2, [pc, #40]	; (80068dc <HAL_RCC_ClockConfig+0x364>)
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80068b6:	4b0a      	ldr	r3, [pc, #40]	; (80068e0 <HAL_RCC_ClockConfig+0x368>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fa fd82 	bl	80013c4 <HAL_InitTick>
 80068c0:	4603      	mov	r3, r0
 80068c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	58024400 	.word	0x58024400
 80068d4:	080108c4 	.word	0x080108c4
 80068d8:	24000008 	.word	0x24000008
 80068dc:	24000004 	.word	0x24000004
 80068e0:	2400000c 	.word	0x2400000c

080068e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b089      	sub	sp, #36	; 0x24
 80068e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068ea:	4bb3      	ldr	r3, [pc, #716]	; (8006bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068f2:	2b18      	cmp	r3, #24
 80068f4:	f200 8155 	bhi.w	8006ba2 <HAL_RCC_GetSysClockFreq+0x2be>
 80068f8:	a201      	add	r2, pc, #4	; (adr r2, 8006900 <HAL_RCC_GetSysClockFreq+0x1c>)
 80068fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fe:	bf00      	nop
 8006900:	08006965 	.word	0x08006965
 8006904:	08006ba3 	.word	0x08006ba3
 8006908:	08006ba3 	.word	0x08006ba3
 800690c:	08006ba3 	.word	0x08006ba3
 8006910:	08006ba3 	.word	0x08006ba3
 8006914:	08006ba3 	.word	0x08006ba3
 8006918:	08006ba3 	.word	0x08006ba3
 800691c:	08006ba3 	.word	0x08006ba3
 8006920:	0800698b 	.word	0x0800698b
 8006924:	08006ba3 	.word	0x08006ba3
 8006928:	08006ba3 	.word	0x08006ba3
 800692c:	08006ba3 	.word	0x08006ba3
 8006930:	08006ba3 	.word	0x08006ba3
 8006934:	08006ba3 	.word	0x08006ba3
 8006938:	08006ba3 	.word	0x08006ba3
 800693c:	08006ba3 	.word	0x08006ba3
 8006940:	08006991 	.word	0x08006991
 8006944:	08006ba3 	.word	0x08006ba3
 8006948:	08006ba3 	.word	0x08006ba3
 800694c:	08006ba3 	.word	0x08006ba3
 8006950:	08006ba3 	.word	0x08006ba3
 8006954:	08006ba3 	.word	0x08006ba3
 8006958:	08006ba3 	.word	0x08006ba3
 800695c:	08006ba3 	.word	0x08006ba3
 8006960:	08006997 	.word	0x08006997
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006964:	4b94      	ldr	r3, [pc, #592]	; (8006bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0320 	and.w	r3, r3, #32
 800696c:	2b00      	cmp	r3, #0
 800696e:	d009      	beq.n	8006984 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006970:	4b91      	ldr	r3, [pc, #580]	; (8006bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	08db      	lsrs	r3, r3, #3
 8006976:	f003 0303 	and.w	r3, r3, #3
 800697a:	4a90      	ldr	r2, [pc, #576]	; (8006bbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800697c:	fa22 f303 	lsr.w	r3, r2, r3
 8006980:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006982:	e111      	b.n	8006ba8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006984:	4b8d      	ldr	r3, [pc, #564]	; (8006bbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006986:	61bb      	str	r3, [r7, #24]
      break;
 8006988:	e10e      	b.n	8006ba8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800698a:	4b8d      	ldr	r3, [pc, #564]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800698c:	61bb      	str	r3, [r7, #24]
      break;
 800698e:	e10b      	b.n	8006ba8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006990:	4b8c      	ldr	r3, [pc, #560]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006992:	61bb      	str	r3, [r7, #24]
      break;
 8006994:	e108      	b.n	8006ba8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006996:	4b88      	ldr	r3, [pc, #544]	; (8006bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699a:	f003 0303 	and.w	r3, r3, #3
 800699e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80069a0:	4b85      	ldr	r3, [pc, #532]	; (8006bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a4:	091b      	lsrs	r3, r3, #4
 80069a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80069ac:	4b82      	ldr	r3, [pc, #520]	; (8006bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80069b6:	4b80      	ldr	r3, [pc, #512]	; (8006bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ba:	08db      	lsrs	r3, r3, #3
 80069bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	fb02 f303 	mul.w	r3, r2, r3
 80069c6:	ee07 3a90 	vmov	s15, r3
 80069ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 80e1 	beq.w	8006b9c <HAL_RCC_GetSysClockFreq+0x2b8>
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2b02      	cmp	r3, #2
 80069de:	f000 8083 	beq.w	8006ae8 <HAL_RCC_GetSysClockFreq+0x204>
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	f200 80a1 	bhi.w	8006b2c <HAL_RCC_GetSysClockFreq+0x248>
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <HAL_RCC_GetSysClockFreq+0x114>
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d056      	beq.n	8006aa4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80069f6:	e099      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069f8:	4b6f      	ldr	r3, [pc, #444]	; (8006bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d02d      	beq.n	8006a60 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a04:	4b6c      	ldr	r3, [pc, #432]	; (8006bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	08db      	lsrs	r3, r3, #3
 8006a0a:	f003 0303 	and.w	r3, r3, #3
 8006a0e:	4a6b      	ldr	r2, [pc, #428]	; (8006bbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a10:	fa22 f303 	lsr.w	r3, r2, r3
 8006a14:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	ee07 3a90 	vmov	s15, r3
 8006a1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	ee07 3a90 	vmov	s15, r3
 8006a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a2e:	4b62      	ldr	r3, [pc, #392]	; (8006bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a36:	ee07 3a90 	vmov	s15, r3
 8006a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a42:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006bc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a5a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006a5e:	e087      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	ee07 3a90 	vmov	s15, r3
 8006a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006bcc <HAL_RCC_GetSysClockFreq+0x2e8>
 8006a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a72:	4b51      	ldr	r3, [pc, #324]	; (8006bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a7a:	ee07 3a90 	vmov	s15, r3
 8006a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a86:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006bc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006aa2:	e065      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	ee07 3a90 	vmov	s15, r3
 8006aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aae:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006bd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ab6:	4b40      	ldr	r3, [pc, #256]	; (8006bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006abe:	ee07 3a90 	vmov	s15, r3
 8006ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006aca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006bc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ae2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006ae6:	e043      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	ee07 3a90 	vmov	s15, r3
 8006aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006bd4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006afa:	4b2f      	ldr	r3, [pc, #188]	; (8006bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b0e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006bc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b2a:	e021      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b36:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006bd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b3e:	4b1e      	ldr	r3, [pc, #120]	; (8006bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b52:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006bc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b6e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006b70:	4b11      	ldr	r3, [pc, #68]	; (8006bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b74:	0a5b      	lsrs	r3, r3, #9
 8006b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	ee07 3a90 	vmov	s15, r3
 8006b84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b88:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b94:	ee17 3a90 	vmov	r3, s15
 8006b98:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006b9a:	e005      	b.n	8006ba8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	61bb      	str	r3, [r7, #24]
      break;
 8006ba0:	e002      	b.n	8006ba8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006ba2:	4b07      	ldr	r3, [pc, #28]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ba4:	61bb      	str	r3, [r7, #24]
      break;
 8006ba6:	bf00      	nop
  }

  return sysclockfreq;
 8006ba8:	69bb      	ldr	r3, [r7, #24]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3724      	adds	r7, #36	; 0x24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	58024400 	.word	0x58024400
 8006bbc:	03d09000 	.word	0x03d09000
 8006bc0:	003d0900 	.word	0x003d0900
 8006bc4:	007a1200 	.word	0x007a1200
 8006bc8:	46000000 	.word	0x46000000
 8006bcc:	4c742400 	.word	0x4c742400
 8006bd0:	4a742400 	.word	0x4a742400
 8006bd4:	4af42400 	.word	0x4af42400

08006bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006bde:	f7ff fe81 	bl	80068e4 <HAL_RCC_GetSysClockFreq>
 8006be2:	4602      	mov	r2, r0
 8006be4:	4b10      	ldr	r3, [pc, #64]	; (8006c28 <HAL_RCC_GetHCLKFreq+0x50>)
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	0a1b      	lsrs	r3, r3, #8
 8006bea:	f003 030f 	and.w	r3, r3, #15
 8006bee:	490f      	ldr	r1, [pc, #60]	; (8006c2c <HAL_RCC_GetHCLKFreq+0x54>)
 8006bf0:	5ccb      	ldrb	r3, [r1, r3]
 8006bf2:	f003 031f 	and.w	r3, r3, #31
 8006bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bfa:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006bfc:	4b0a      	ldr	r3, [pc, #40]	; (8006c28 <HAL_RCC_GetHCLKFreq+0x50>)
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	f003 030f 	and.w	r3, r3, #15
 8006c04:	4a09      	ldr	r2, [pc, #36]	; (8006c2c <HAL_RCC_GetHCLKFreq+0x54>)
 8006c06:	5cd3      	ldrb	r3, [r2, r3]
 8006c08:	f003 031f 	and.w	r3, r3, #31
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c12:	4a07      	ldr	r2, [pc, #28]	; (8006c30 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c16:	4a07      	ldr	r2, [pc, #28]	; (8006c34 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006c1c:	4b04      	ldr	r3, [pc, #16]	; (8006c30 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	58024400 	.word	0x58024400
 8006c2c:	080108c4 	.word	0x080108c4
 8006c30:	24000008 	.word	0x24000008
 8006c34:	24000004 	.word	0x24000004

08006c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006c3c:	f7ff ffcc 	bl	8006bd8 <HAL_RCC_GetHCLKFreq>
 8006c40:	4602      	mov	r2, r0
 8006c42:	4b06      	ldr	r3, [pc, #24]	; (8006c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	091b      	lsrs	r3, r3, #4
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	4904      	ldr	r1, [pc, #16]	; (8006c60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c4e:	5ccb      	ldrb	r3, [r1, r3]
 8006c50:	f003 031f 	and.w	r3, r3, #31
 8006c54:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	58024400 	.word	0x58024400
 8006c60:	080108c4 	.word	0x080108c4

08006c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8006c68:	f7ff ffb6 	bl	8006bd8 <HAL_RCC_GetHCLKFreq>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	0a1b      	lsrs	r3, r3, #8
 8006c74:	f003 0307 	and.w	r3, r3, #7
 8006c78:	4904      	ldr	r1, [pc, #16]	; (8006c8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c7a:	5ccb      	ldrb	r3, [r1, r3]
 8006c7c:	f003 031f 	and.w	r3, r3, #31
 8006c80:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	58024400 	.word	0x58024400
 8006c8c:	080108c4 	.word	0x080108c4

08006c90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	223f      	movs	r2, #63	; 0x3f
 8006c9e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ca0:	4b1a      	ldr	r3, [pc, #104]	; (8006d0c <HAL_RCC_GetClockConfig+0x7c>)
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	f003 0207 	and.w	r2, r3, #7
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8006cac:	4b17      	ldr	r3, [pc, #92]	; (8006d0c <HAL_RCC_GetClockConfig+0x7c>)
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8006cb8:	4b14      	ldr	r3, [pc, #80]	; (8006d0c <HAL_RCC_GetClockConfig+0x7c>)
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	f003 020f 	and.w	r2, r3, #15
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8006cc4:	4b11      	ldr	r3, [pc, #68]	; (8006d0c <HAL_RCC_GetClockConfig+0x7c>)
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8006cd0:	4b0e      	ldr	r3, [pc, #56]	; (8006d0c <HAL_RCC_GetClockConfig+0x7c>)
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8006cdc:	4b0b      	ldr	r3, [pc, #44]	; (8006d0c <HAL_RCC_GetClockConfig+0x7c>)
 8006cde:	69db      	ldr	r3, [r3, #28]
 8006ce0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8006ce8:	4b08      	ldr	r3, [pc, #32]	; (8006d0c <HAL_RCC_GetClockConfig+0x7c>)
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006cf4:	4b06      	ldr	r3, [pc, #24]	; (8006d10 <HAL_RCC_GetClockConfig+0x80>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 020f 	and.w	r2, r3, #15
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	601a      	str	r2, [r3, #0]
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	58024400 	.word	0x58024400
 8006d10:	52002000 	.word	0x52002000

08006d14 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d18:	b0c8      	sub	sp, #288	; 0x120
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d20:	2300      	movs	r3, #0
 8006d22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d26:	2300      	movs	r3, #0
 8006d28:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d34:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006d38:	2500      	movs	r5, #0
 8006d3a:	ea54 0305 	orrs.w	r3, r4, r5
 8006d3e:	d049      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d4a:	d02f      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006d4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d50:	d828      	bhi.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d56:	d01a      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006d58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d5c:	d822      	bhi.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d66:	d007      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d68:	e01c      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d6a:	4ba7      	ldr	r3, [pc, #668]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6e:	4aa6      	ldr	r2, [pc, #664]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d76:	e01a      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d7c:	3308      	adds	r3, #8
 8006d7e:	2102      	movs	r1, #2
 8006d80:	4618      	mov	r0, r3
 8006d82:	f002 fa6d 	bl	8009260 <RCCEx_PLL2_Config>
 8006d86:	4603      	mov	r3, r0
 8006d88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d8c:	e00f      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d92:	3328      	adds	r3, #40	; 0x28
 8006d94:	2102      	movs	r1, #2
 8006d96:	4618      	mov	r0, r3
 8006d98:	f002 fb14 	bl	80093c4 <RCCEx_PLL3_Config>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006da2:	e004      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006daa:	e000      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10a      	bne.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006db6:	4b94      	ldr	r3, [pc, #592]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dc4:	4a90      	ldr	r2, [pc, #576]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dc6:	430b      	orrs	r3, r1
 8006dc8:	6513      	str	r3, [r2, #80]	; 0x50
 8006dca:	e003      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dcc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006dd0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ddc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006de0:	f04f 0900 	mov.w	r9, #0
 8006de4:	ea58 0309 	orrs.w	r3, r8, r9
 8006de8:	d047      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	d82a      	bhi.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006df4:	a201      	add	r2, pc, #4	; (adr r2, 8006dfc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfa:	bf00      	nop
 8006dfc:	08006e11 	.word	0x08006e11
 8006e00:	08006e1f 	.word	0x08006e1f
 8006e04:	08006e35 	.word	0x08006e35
 8006e08:	08006e53 	.word	0x08006e53
 8006e0c:	08006e53 	.word	0x08006e53
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e10:	4b7d      	ldr	r3, [pc, #500]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e14:	4a7c      	ldr	r2, [pc, #496]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e1c:	e01a      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e22:	3308      	adds	r3, #8
 8006e24:	2100      	movs	r1, #0
 8006e26:	4618      	mov	r0, r3
 8006e28:	f002 fa1a 	bl	8009260 <RCCEx_PLL2_Config>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e32:	e00f      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e38:	3328      	adds	r3, #40	; 0x28
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f002 fac1 	bl	80093c4 <RCCEx_PLL3_Config>
 8006e42:	4603      	mov	r3, r0
 8006e44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e48:	e004      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006e50:	e000      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10a      	bne.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e5c:	4b6a      	ldr	r3, [pc, #424]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e60:	f023 0107 	bic.w	r1, r3, #7
 8006e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e6a:	4a67      	ldr	r2, [pc, #412]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	6513      	str	r3, [r2, #80]	; 0x50
 8006e70:	e003      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e76:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e82:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006e86:	f04f 0b00 	mov.w	fp, #0
 8006e8a:	ea5a 030b 	orrs.w	r3, sl, fp
 8006e8e:	d054      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8006e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e96:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006e9a:	d036      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006e9c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006ea0:	d82f      	bhi.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ea6:	d032      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eac:	d829      	bhi.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006eae:	2bc0      	cmp	r3, #192	; 0xc0
 8006eb0:	d02f      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006eb2:	2bc0      	cmp	r3, #192	; 0xc0
 8006eb4:	d825      	bhi.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006eb6:	2b80      	cmp	r3, #128	; 0x80
 8006eb8:	d018      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006eba:	2b80      	cmp	r3, #128	; 0x80
 8006ebc:	d821      	bhi.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006ec2:	2b40      	cmp	r3, #64	; 0x40
 8006ec4:	d007      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8006ec6:	e01c      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec8:	4b4f      	ldr	r3, [pc, #316]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	4a4e      	ldr	r2, [pc, #312]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006ed4:	e01e      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eda:	3308      	adds	r3, #8
 8006edc:	2100      	movs	r1, #0
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f002 f9be 	bl	8009260 <RCCEx_PLL2_Config>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006eea:	e013      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ef0:	3328      	adds	r3, #40	; 0x28
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f002 fa65 	bl	80093c4 <RCCEx_PLL3_Config>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006f00:	e008      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006f08:	e004      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006f0a:	bf00      	nop
 8006f0c:	e002      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006f0e:	bf00      	nop
 8006f10:	e000      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006f12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10a      	bne.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006f1c:	4b3a      	ldr	r3, [pc, #232]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f20:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f2a:	4a37      	ldr	r2, [pc, #220]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f2c:	430b      	orrs	r3, r1
 8006f2e:	6513      	str	r3, [r2, #80]	; 0x50
 8006f30:	e003      	b.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f36:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f42:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006f46:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f50:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006f54:	460b      	mov	r3, r1
 8006f56:	4313      	orrs	r3, r2
 8006f58:	d05c      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8006f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f60:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006f64:	d03b      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006f66:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006f6a:	d834      	bhi.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f70:	d037      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8006f72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f76:	d82e      	bhi.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006f78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006f7c:	d033      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006f7e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006f82:	d828      	bhi.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f88:	d01a      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8006f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f8e:	d822      	bhi.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d003      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f98:	d007      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006f9a:	e01c      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f9c:	4b1a      	ldr	r3, [pc, #104]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa0:	4a19      	ldr	r2, [pc, #100]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006fa8:	e01e      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fae:	3308      	adds	r3, #8
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f002 f954 	bl	8009260 <RCCEx_PLL2_Config>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006fbe:	e013      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fc4:	3328      	adds	r3, #40	; 0x28
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f002 f9fb 	bl	80093c4 <RCCEx_PLL3_Config>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006fd4:	e008      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006fdc:	e004      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006fde:	bf00      	nop
 8006fe0:	e002      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006fe2:	bf00      	nop
 8006fe4:	e000      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fe8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10d      	bne.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006ff0:	4b05      	ldr	r3, [pc, #20]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ff4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8006ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ffe:	4a02      	ldr	r2, [pc, #8]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007000:	430b      	orrs	r3, r1
 8007002:	6513      	str	r3, [r2, #80]	; 0x50
 8007004:	e006      	b.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007006:	bf00      	nop
 8007008:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800700c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007010:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007014:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007020:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007024:	2300      	movs	r3, #0
 8007026:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800702a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800702e:	460b      	mov	r3, r1
 8007030:	4313      	orrs	r3, r2
 8007032:	d03a      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800703a:	2b30      	cmp	r3, #48	; 0x30
 800703c:	d01f      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800703e:	2b30      	cmp	r3, #48	; 0x30
 8007040:	d819      	bhi.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007042:	2b20      	cmp	r3, #32
 8007044:	d00c      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007046:	2b20      	cmp	r3, #32
 8007048:	d815      	bhi.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800704a:	2b00      	cmp	r3, #0
 800704c:	d019      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800704e:	2b10      	cmp	r3, #16
 8007050:	d111      	bne.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007052:	4bae      	ldr	r3, [pc, #696]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007056:	4aad      	ldr	r2, [pc, #692]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800705c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800705e:	e011      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007064:	3308      	adds	r3, #8
 8007066:	2102      	movs	r1, #2
 8007068:	4618      	mov	r0, r3
 800706a:	f002 f8f9 	bl	8009260 <RCCEx_PLL2_Config>
 800706e:	4603      	mov	r3, r0
 8007070:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007074:	e006      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800707c:	e002      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800707e:	bf00      	nop
 8007080:	e000      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007082:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007084:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10a      	bne.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800708c:	4b9f      	ldr	r3, [pc, #636]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800708e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007090:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007094:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800709a:	4a9c      	ldr	r2, [pc, #624]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800709c:	430b      	orrs	r3, r1
 800709e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80070a0:	e003      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80070a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80070aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80070b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80070ba:	2300      	movs	r3, #0
 80070bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80070c0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80070c4:	460b      	mov	r3, r1
 80070c6:	4313      	orrs	r3, r2
 80070c8:	d051      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80070ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070d4:	d035      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80070d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070da:	d82e      	bhi.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80070dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070e0:	d031      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80070e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070e6:	d828      	bhi.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80070e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070ec:	d01a      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80070ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070f2:	d822      	bhi.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80070f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070fc:	d007      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80070fe:	e01c      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007100:	4b82      	ldr	r3, [pc, #520]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007104:	4a81      	ldr	r2, [pc, #516]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800710a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800710c:	e01c      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800710e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007112:	3308      	adds	r3, #8
 8007114:	2100      	movs	r1, #0
 8007116:	4618      	mov	r0, r3
 8007118:	f002 f8a2 	bl	8009260 <RCCEx_PLL2_Config>
 800711c:	4603      	mov	r3, r0
 800711e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007122:	e011      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007128:	3328      	adds	r3, #40	; 0x28
 800712a:	2100      	movs	r1, #0
 800712c:	4618      	mov	r0, r3
 800712e:	f002 f949 	bl	80093c4 <RCCEx_PLL3_Config>
 8007132:	4603      	mov	r3, r0
 8007134:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007138:	e006      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007140:	e002      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007142:	bf00      	nop
 8007144:	e000      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007148:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10a      	bne.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007150:	4b6e      	ldr	r3, [pc, #440]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007154:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800715c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800715e:	4a6b      	ldr	r2, [pc, #428]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007160:	430b      	orrs	r3, r1
 8007162:	6513      	str	r3, [r2, #80]	; 0x50
 8007164:	e003      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007166:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800716a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800716e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007176:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800717a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800717e:	2300      	movs	r3, #0
 8007180:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007184:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007188:	460b      	mov	r3, r1
 800718a:	4313      	orrs	r3, r2
 800718c:	d053      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800718e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007198:	d033      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800719a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800719e:	d82c      	bhi.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80071a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071a4:	d02f      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80071a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071aa:	d826      	bhi.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80071ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071b0:	d02b      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80071b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071b6:	d820      	bhi.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80071b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071bc:	d012      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80071be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071c2:	d81a      	bhi.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d022      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80071c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071cc:	d115      	bne.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071d2:	3308      	adds	r3, #8
 80071d4:	2101      	movs	r1, #1
 80071d6:	4618      	mov	r0, r3
 80071d8:	f002 f842 	bl	8009260 <RCCEx_PLL2_Config>
 80071dc:	4603      	mov	r3, r0
 80071de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80071e2:	e015      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071e8:	3328      	adds	r3, #40	; 0x28
 80071ea:	2101      	movs	r1, #1
 80071ec:	4618      	mov	r0, r3
 80071ee:	f002 f8e9 	bl	80093c4 <RCCEx_PLL3_Config>
 80071f2:	4603      	mov	r3, r0
 80071f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80071f8:	e00a      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007200:	e006      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007202:	bf00      	nop
 8007204:	e004      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007206:	bf00      	nop
 8007208:	e002      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800720a:	bf00      	nop
 800720c:	e000      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800720e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007210:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10a      	bne.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007218:	4b3c      	ldr	r3, [pc, #240]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800721a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800721c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007226:	4a39      	ldr	r2, [pc, #228]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007228:	430b      	orrs	r3, r1
 800722a:	6513      	str	r3, [r2, #80]	; 0x50
 800722c:	e003      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007232:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007242:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007246:	2300      	movs	r3, #0
 8007248:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800724c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007250:	460b      	mov	r3, r1
 8007252:	4313      	orrs	r3, r2
 8007254:	d060      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800725a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800725e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007262:	d039      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8007264:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007268:	d832      	bhi.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800726a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800726e:	d035      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007274:	d82c      	bhi.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800727a:	d031      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800727c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007280:	d826      	bhi.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007282:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007286:	d02d      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007288:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800728c:	d820      	bhi.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800728e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007292:	d012      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007298:	d81a      	bhi.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800729a:	2b00      	cmp	r3, #0
 800729c:	d024      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800729e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072a2:	d115      	bne.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072a8:	3308      	adds	r3, #8
 80072aa:	2101      	movs	r1, #1
 80072ac:	4618      	mov	r0, r3
 80072ae:	f001 ffd7 	bl	8009260 <RCCEx_PLL2_Config>
 80072b2:	4603      	mov	r3, r0
 80072b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80072b8:	e017      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072be:	3328      	adds	r3, #40	; 0x28
 80072c0:	2101      	movs	r1, #1
 80072c2:	4618      	mov	r0, r3
 80072c4:	f002 f87e 	bl	80093c4 <RCCEx_PLL3_Config>
 80072c8:	4603      	mov	r3, r0
 80072ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80072ce:	e00c      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80072d6:	e008      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80072d8:	bf00      	nop
 80072da:	e006      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80072dc:	bf00      	nop
 80072de:	e004      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80072e0:	bf00      	nop
 80072e2:	e002      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80072e4:	bf00      	nop
 80072e6:	e000      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80072e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10e      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80072f2:	4b06      	ldr	r3, [pc, #24]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80072f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80072fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007302:	4a02      	ldr	r2, [pc, #8]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007304:	430b      	orrs	r3, r1
 8007306:	6593      	str	r3, [r2, #88]	; 0x58
 8007308:	e006      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800730a:	bf00      	nop
 800730c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007310:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007314:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007324:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007328:	2300      	movs	r3, #0
 800732a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800732e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007332:	460b      	mov	r3, r1
 8007334:	4313      	orrs	r3, r2
 8007336:	d037      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007338:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800733c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800733e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007342:	d00e      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007348:	d816      	bhi.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800734a:	2b00      	cmp	r3, #0
 800734c:	d018      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800734e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007352:	d111      	bne.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007354:	4bc4      	ldr	r3, [pc, #784]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	4ac3      	ldr	r2, [pc, #780]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800735a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800735e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007360:	e00f      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007366:	3308      	adds	r3, #8
 8007368:	2101      	movs	r1, #1
 800736a:	4618      	mov	r0, r3
 800736c:	f001 ff78 	bl	8009260 <RCCEx_PLL2_Config>
 8007370:	4603      	mov	r3, r0
 8007372:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007376:	e004      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800737e:	e000      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007382:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10a      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800738a:	4bb7      	ldr	r3, [pc, #732]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800738c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800738e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007392:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007396:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007398:	4ab3      	ldr	r2, [pc, #716]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800739a:	430b      	orrs	r3, r1
 800739c:	6513      	str	r3, [r2, #80]	; 0x50
 800739e:	e003      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80073a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80073a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80073b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073b8:	2300      	movs	r3, #0
 80073ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80073be:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4313      	orrs	r3, r2
 80073c6:	d039      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80073c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d81c      	bhi.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80073d2:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80073d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d8:	08007415 	.word	0x08007415
 80073dc:	080073e9 	.word	0x080073e9
 80073e0:	080073f7 	.word	0x080073f7
 80073e4:	08007415 	.word	0x08007415
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073e8:	4b9f      	ldr	r3, [pc, #636]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ec:	4a9e      	ldr	r2, [pc, #632]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80073f4:	e00f      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073fa:	3308      	adds	r3, #8
 80073fc:	2102      	movs	r1, #2
 80073fe:	4618      	mov	r0, r3
 8007400:	f001 ff2e 	bl	8009260 <RCCEx_PLL2_Config>
 8007404:	4603      	mov	r3, r0
 8007406:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800740a:	e004      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007412:	e000      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007416:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10a      	bne.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800741e:	4b92      	ldr	r3, [pc, #584]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007422:	f023 0103 	bic.w	r1, r3, #3
 8007426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800742a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800742c:	4a8e      	ldr	r2, [pc, #568]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800742e:	430b      	orrs	r3, r1
 8007430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007432:	e003      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007434:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007438:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800743c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007444:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007448:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800744c:	2300      	movs	r3, #0
 800744e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007452:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007456:	460b      	mov	r3, r1
 8007458:	4313      	orrs	r3, r2
 800745a:	f000 8099 	beq.w	8007590 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800745e:	4b83      	ldr	r3, [pc, #524]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a82      	ldr	r2, [pc, #520]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007468:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800746a:	f7fa f931 	bl	80016d0 <HAL_GetTick>
 800746e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007472:	e00b      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007474:	f7fa f92c 	bl	80016d0 <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	2b64      	cmp	r3, #100	; 0x64
 8007482:	d903      	bls.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800748a:	e005      	b.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800748c:	4b77      	ldr	r3, [pc, #476]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0ed      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007498:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800749c:	2b00      	cmp	r3, #0
 800749e:	d173      	bne.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80074a0:	4b71      	ldr	r3, [pc, #452]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80074ac:	4053      	eors	r3, r2
 80074ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d015      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074b6:	4b6c      	ldr	r3, [pc, #432]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80074c2:	4b69      	ldr	r3, [pc, #420]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c6:	4a68      	ldr	r2, [pc, #416]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074cc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80074ce:	4b66      	ldr	r3, [pc, #408]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d2:	4a65      	ldr	r2, [pc, #404]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074d8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80074da:	4a63      	ldr	r2, [pc, #396]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80074e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80074ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ee:	d118      	bne.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f0:	f7fa f8ee 	bl	80016d0 <HAL_GetTick>
 80074f4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074f8:	e00d      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074fa:	f7fa f8e9 	bl	80016d0 <HAL_GetTick>
 80074fe:	4602      	mov	r2, r0
 8007500:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007504:	1ad2      	subs	r2, r2, r3
 8007506:	f241 3388 	movw	r3, #5000	; 0x1388
 800750a:	429a      	cmp	r2, r3
 800750c:	d903      	bls.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8007514:	e005      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007516:	4b54      	ldr	r3, [pc, #336]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0eb      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007522:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007526:	2b00      	cmp	r3, #0
 8007528:	d129      	bne.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800752a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800752e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007536:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800753a:	d10e      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800753c:	4b4a      	ldr	r3, [pc, #296]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007548:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800754c:	091a      	lsrs	r2, r3, #4
 800754e:	4b48      	ldr	r3, [pc, #288]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007550:	4013      	ands	r3, r2
 8007552:	4a45      	ldr	r2, [pc, #276]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007554:	430b      	orrs	r3, r1
 8007556:	6113      	str	r3, [r2, #16]
 8007558:	e005      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800755a:	4b43      	ldr	r3, [pc, #268]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	4a42      	ldr	r2, [pc, #264]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007560:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007564:	6113      	str	r3, [r2, #16]
 8007566:	4b40      	ldr	r3, [pc, #256]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007568:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800756a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800756e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007576:	4a3c      	ldr	r2, [pc, #240]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007578:	430b      	orrs	r3, r1
 800757a:	6713      	str	r3, [r2, #112]	; 0x70
 800757c:	e008      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800757e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007582:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8007586:	e003      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007588:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800758c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007598:	f002 0301 	and.w	r3, r2, #1
 800759c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075a0:	2300      	movs	r3, #0
 80075a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4313      	orrs	r3, r2
 80075ae:	f000 8090 	beq.w	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80075b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ba:	2b28      	cmp	r3, #40	; 0x28
 80075bc:	d870      	bhi.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80075be:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80075c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c4:	080076a9 	.word	0x080076a9
 80075c8:	080076a1 	.word	0x080076a1
 80075cc:	080076a1 	.word	0x080076a1
 80075d0:	080076a1 	.word	0x080076a1
 80075d4:	080076a1 	.word	0x080076a1
 80075d8:	080076a1 	.word	0x080076a1
 80075dc:	080076a1 	.word	0x080076a1
 80075e0:	080076a1 	.word	0x080076a1
 80075e4:	08007675 	.word	0x08007675
 80075e8:	080076a1 	.word	0x080076a1
 80075ec:	080076a1 	.word	0x080076a1
 80075f0:	080076a1 	.word	0x080076a1
 80075f4:	080076a1 	.word	0x080076a1
 80075f8:	080076a1 	.word	0x080076a1
 80075fc:	080076a1 	.word	0x080076a1
 8007600:	080076a1 	.word	0x080076a1
 8007604:	0800768b 	.word	0x0800768b
 8007608:	080076a1 	.word	0x080076a1
 800760c:	080076a1 	.word	0x080076a1
 8007610:	080076a1 	.word	0x080076a1
 8007614:	080076a1 	.word	0x080076a1
 8007618:	080076a1 	.word	0x080076a1
 800761c:	080076a1 	.word	0x080076a1
 8007620:	080076a1 	.word	0x080076a1
 8007624:	080076a9 	.word	0x080076a9
 8007628:	080076a1 	.word	0x080076a1
 800762c:	080076a1 	.word	0x080076a1
 8007630:	080076a1 	.word	0x080076a1
 8007634:	080076a1 	.word	0x080076a1
 8007638:	080076a1 	.word	0x080076a1
 800763c:	080076a1 	.word	0x080076a1
 8007640:	080076a1 	.word	0x080076a1
 8007644:	080076a9 	.word	0x080076a9
 8007648:	080076a1 	.word	0x080076a1
 800764c:	080076a1 	.word	0x080076a1
 8007650:	080076a1 	.word	0x080076a1
 8007654:	080076a1 	.word	0x080076a1
 8007658:	080076a1 	.word	0x080076a1
 800765c:	080076a1 	.word	0x080076a1
 8007660:	080076a1 	.word	0x080076a1
 8007664:	080076a9 	.word	0x080076a9
 8007668:	58024400 	.word	0x58024400
 800766c:	58024800 	.word	0x58024800
 8007670:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007678:	3308      	adds	r3, #8
 800767a:	2101      	movs	r1, #1
 800767c:	4618      	mov	r0, r3
 800767e:	f001 fdef 	bl	8009260 <RCCEx_PLL2_Config>
 8007682:	4603      	mov	r3, r0
 8007684:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007688:	e00f      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800768a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800768e:	3328      	adds	r3, #40	; 0x28
 8007690:	2101      	movs	r1, #1
 8007692:	4618      	mov	r0, r3
 8007694:	f001 fe96 	bl	80093c4 <RCCEx_PLL3_Config>
 8007698:	4603      	mov	r3, r0
 800769a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800769e:	e004      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80076a6:	e000      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80076a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10b      	bne.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80076b2:	4bc0      	ldr	r3, [pc, #768]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80076b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80076ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076c2:	4abc      	ldr	r2, [pc, #752]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80076c4:	430b      	orrs	r3, r1
 80076c6:	6553      	str	r3, [r2, #84]	; 0x54
 80076c8:	e003      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80076ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80076d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076da:	f002 0302 	and.w	r3, r2, #2
 80076de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076e2:	2300      	movs	r3, #0
 80076e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80076e8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80076ec:	460b      	mov	r3, r1
 80076ee:	4313      	orrs	r3, r2
 80076f0:	d043      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80076f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076fa:	2b05      	cmp	r3, #5
 80076fc:	d824      	bhi.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80076fe:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8007700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007704:	08007751 	.word	0x08007751
 8007708:	0800771d 	.word	0x0800771d
 800770c:	08007733 	.word	0x08007733
 8007710:	08007751 	.word	0x08007751
 8007714:	08007751 	.word	0x08007751
 8007718:	08007751 	.word	0x08007751
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800771c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007720:	3308      	adds	r3, #8
 8007722:	2101      	movs	r1, #1
 8007724:	4618      	mov	r0, r3
 8007726:	f001 fd9b 	bl	8009260 <RCCEx_PLL2_Config>
 800772a:	4603      	mov	r3, r0
 800772c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007730:	e00f      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007736:	3328      	adds	r3, #40	; 0x28
 8007738:	2101      	movs	r1, #1
 800773a:	4618      	mov	r0, r3
 800773c:	f001 fe42 	bl	80093c4 <RCCEx_PLL3_Config>
 8007740:	4603      	mov	r3, r0
 8007742:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007746:	e004      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800774e:	e000      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007750:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007752:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10b      	bne.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800775a:	4b96      	ldr	r3, [pc, #600]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800775c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775e:	f023 0107 	bic.w	r1, r3, #7
 8007762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800776a:	4a92      	ldr	r2, [pc, #584]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800776c:	430b      	orrs	r3, r1
 800776e:	6553      	str	r3, [r2, #84]	; 0x54
 8007770:	e003      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007772:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007776:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800777a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800777e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007782:	f002 0304 	and.w	r3, r2, #4
 8007786:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800778a:	2300      	movs	r3, #0
 800778c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007790:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007794:	460b      	mov	r3, r1
 8007796:	4313      	orrs	r3, r2
 8007798:	d043      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800779a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800779e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077a2:	2b05      	cmp	r3, #5
 80077a4:	d824      	bhi.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80077a6:	a201      	add	r2, pc, #4	; (adr r2, 80077ac <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80077a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ac:	080077f9 	.word	0x080077f9
 80077b0:	080077c5 	.word	0x080077c5
 80077b4:	080077db 	.word	0x080077db
 80077b8:	080077f9 	.word	0x080077f9
 80077bc:	080077f9 	.word	0x080077f9
 80077c0:	080077f9 	.word	0x080077f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077c8:	3308      	adds	r3, #8
 80077ca:	2101      	movs	r1, #1
 80077cc:	4618      	mov	r0, r3
 80077ce:	f001 fd47 	bl	8009260 <RCCEx_PLL2_Config>
 80077d2:	4603      	mov	r3, r0
 80077d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80077d8:	e00f      	b.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077de:	3328      	adds	r3, #40	; 0x28
 80077e0:	2101      	movs	r1, #1
 80077e2:	4618      	mov	r0, r3
 80077e4:	f001 fdee 	bl	80093c4 <RCCEx_PLL3_Config>
 80077e8:	4603      	mov	r3, r0
 80077ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80077ee:	e004      	b.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80077f6:	e000      	b.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80077f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d10b      	bne.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007802:	4b6c      	ldr	r3, [pc, #432]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007806:	f023 0107 	bic.w	r1, r3, #7
 800780a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800780e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007812:	4a68      	ldr	r2, [pc, #416]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007814:	430b      	orrs	r3, r1
 8007816:	6593      	str	r3, [r2, #88]	; 0x58
 8007818:	e003      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800781e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007822:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	f002 0320 	and.w	r3, r2, #32
 800782e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007832:	2300      	movs	r3, #0
 8007834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007838:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800783c:	460b      	mov	r3, r1
 800783e:	4313      	orrs	r3, r2
 8007840:	d055      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007846:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800784a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800784e:	d033      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007850:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007854:	d82c      	bhi.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800785a:	d02f      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800785c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007860:	d826      	bhi.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007862:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007866:	d02b      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007868:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800786c:	d820      	bhi.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800786e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007872:	d012      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007878:	d81a      	bhi.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800787a:	2b00      	cmp	r3, #0
 800787c:	d022      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800787e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007882:	d115      	bne.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007888:	3308      	adds	r3, #8
 800788a:	2100      	movs	r1, #0
 800788c:	4618      	mov	r0, r3
 800788e:	f001 fce7 	bl	8009260 <RCCEx_PLL2_Config>
 8007892:	4603      	mov	r3, r0
 8007894:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007898:	e015      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800789a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800789e:	3328      	adds	r3, #40	; 0x28
 80078a0:	2102      	movs	r1, #2
 80078a2:	4618      	mov	r0, r3
 80078a4:	f001 fd8e 	bl	80093c4 <RCCEx_PLL3_Config>
 80078a8:	4603      	mov	r3, r0
 80078aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80078ae:	e00a      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80078b6:	e006      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80078b8:	bf00      	nop
 80078ba:	e004      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80078bc:	bf00      	nop
 80078be:	e002      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80078c0:	bf00      	nop
 80078c2:	e000      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80078c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10b      	bne.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078ce:	4b39      	ldr	r3, [pc, #228]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80078d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80078d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078de:	4a35      	ldr	r2, [pc, #212]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80078e0:	430b      	orrs	r3, r1
 80078e2:	6553      	str	r3, [r2, #84]	; 0x54
 80078e4:	e003      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80078ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80078ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80078fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078fe:	2300      	movs	r3, #0
 8007900:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007904:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007908:	460b      	mov	r3, r1
 800790a:	4313      	orrs	r3, r2
 800790c:	d058      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800790e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007912:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007916:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800791a:	d033      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800791c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007920:	d82c      	bhi.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007926:	d02f      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800792c:	d826      	bhi.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800792e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007932:	d02b      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007934:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007938:	d820      	bhi.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800793a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800793e:	d012      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007944:	d81a      	bhi.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007946:	2b00      	cmp	r3, #0
 8007948:	d022      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800794a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800794e:	d115      	bne.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007954:	3308      	adds	r3, #8
 8007956:	2100      	movs	r1, #0
 8007958:	4618      	mov	r0, r3
 800795a:	f001 fc81 	bl	8009260 <RCCEx_PLL2_Config>
 800795e:	4603      	mov	r3, r0
 8007960:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007964:	e015      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800796a:	3328      	adds	r3, #40	; 0x28
 800796c:	2102      	movs	r1, #2
 800796e:	4618      	mov	r0, r3
 8007970:	f001 fd28 	bl	80093c4 <RCCEx_PLL3_Config>
 8007974:	4603      	mov	r3, r0
 8007976:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800797a:	e00a      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007982:	e006      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007984:	bf00      	nop
 8007986:	e004      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007988:	bf00      	nop
 800798a:	e002      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800798c:	bf00      	nop
 800798e:	e000      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007992:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10e      	bne.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800799a:	4b06      	ldr	r3, [pc, #24]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800799c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800799e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80079a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80079aa:	4a02      	ldr	r2, [pc, #8]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80079ac:	430b      	orrs	r3, r1
 80079ae:	6593      	str	r3, [r2, #88]	; 0x58
 80079b0:	e006      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80079b2:	bf00      	nop
 80079b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80079bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80079c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80079cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80079d0:	2300      	movs	r3, #0
 80079d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80079d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80079da:	460b      	mov	r3, r1
 80079dc:	4313      	orrs	r3, r2
 80079de:	d055      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80079e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80079e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80079ec:	d033      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80079ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80079f2:	d82c      	bhi.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80079f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079f8:	d02f      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80079fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079fe:	d826      	bhi.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007a00:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007a04:	d02b      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007a06:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007a0a:	d820      	bhi.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007a0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a10:	d012      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007a12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a16:	d81a      	bhi.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d022      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a20:	d115      	bne.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a26:	3308      	adds	r3, #8
 8007a28:	2100      	movs	r1, #0
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f001 fc18 	bl	8009260 <RCCEx_PLL2_Config>
 8007a30:	4603      	mov	r3, r0
 8007a32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007a36:	e015      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a3c:	3328      	adds	r3, #40	; 0x28
 8007a3e:	2102      	movs	r1, #2
 8007a40:	4618      	mov	r0, r3
 8007a42:	f001 fcbf 	bl	80093c4 <RCCEx_PLL3_Config>
 8007a46:	4603      	mov	r3, r0
 8007a48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007a4c:	e00a      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007a54:	e006      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007a56:	bf00      	nop
 8007a58:	e004      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007a5a:	bf00      	nop
 8007a5c:	e002      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007a5e:	bf00      	nop
 8007a60:	e000      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007a62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10b      	bne.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007a6c:	4ba1      	ldr	r3, [pc, #644]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a70:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007a7c:	4a9d      	ldr	r2, [pc, #628]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007a7e:	430b      	orrs	r3, r1
 8007a80:	6593      	str	r3, [r2, #88]	; 0x58
 8007a82:	e003      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007a88:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a94:	f002 0308 	and.w	r3, r2, #8
 8007a98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007aa2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	d01e      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ab8:	d10c      	bne.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007abe:	3328      	adds	r3, #40	; 0x28
 8007ac0:	2102      	movs	r1, #2
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f001 fc7e 	bl	80093c4 <RCCEx_PLL3_Config>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007ad4:	4b87      	ldr	r3, [pc, #540]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ae4:	4a83      	ldr	r2, [pc, #524]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007ae6:	430b      	orrs	r3, r1
 8007ae8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af2:	f002 0310 	and.w	r3, r2, #16
 8007af6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007afa:	2300      	movs	r3, #0
 8007afc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b00:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007b04:	460b      	mov	r3, r1
 8007b06:	4313      	orrs	r3, r2
 8007b08:	d01e      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b16:	d10c      	bne.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b1c:	3328      	adds	r3, #40	; 0x28
 8007b1e:	2102      	movs	r1, #2
 8007b20:	4618      	mov	r0, r3
 8007b22:	f001 fc4f 	bl	80093c4 <RCCEx_PLL3_Config>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b32:	4b70      	ldr	r3, [pc, #448]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b42:	4a6c      	ldr	r2, [pc, #432]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007b44:	430b      	orrs	r3, r1
 8007b46:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b50:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007b54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b5e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007b62:	460b      	mov	r3, r1
 8007b64:	4313      	orrs	r3, r2
 8007b66:	d03e      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007b70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b74:	d022      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8007b76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b7a:	d81b      	bhi.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d003      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8007b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b84:	d00b      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8007b86:	e015      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b8c:	3308      	adds	r3, #8
 8007b8e:	2100      	movs	r1, #0
 8007b90:	4618      	mov	r0, r3
 8007b92:	f001 fb65 	bl	8009260 <RCCEx_PLL2_Config>
 8007b96:	4603      	mov	r3, r0
 8007b98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007b9c:	e00f      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ba2:	3328      	adds	r3, #40	; 0x28
 8007ba4:	2102      	movs	r1, #2
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f001 fc0c 	bl	80093c4 <RCCEx_PLL3_Config>
 8007bac:	4603      	mov	r3, r0
 8007bae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007bb2:	e004      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007bba:	e000      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8007bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bbe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10b      	bne.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007bc6:	4b4b      	ldr	r3, [pc, #300]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007bd6:	4a47      	ldr	r2, [pc, #284]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007bd8:	430b      	orrs	r3, r1
 8007bda:	6593      	str	r3, [r2, #88]	; 0x58
 8007bdc:	e003      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bde:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007be2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bee:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007bf2:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007bf8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	d03b      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c0e:	d01f      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8007c10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c14:	d818      	bhi.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c1a:	d003      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8007c1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c20:	d007      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8007c22:	e011      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c24:	4b33      	ldr	r3, [pc, #204]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c28:	4a32      	ldr	r2, [pc, #200]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007c30:	e00f      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c36:	3328      	adds	r3, #40	; 0x28
 8007c38:	2101      	movs	r1, #1
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f001 fbc2 	bl	80093c4 <RCCEx_PLL3_Config>
 8007c40:	4603      	mov	r3, r0
 8007c42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8007c46:	e004      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007c4e:	e000      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10b      	bne.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c5a:	4b26      	ldr	r3, [pc, #152]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6a:	4a22      	ldr	r2, [pc, #136]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007c6c:	430b      	orrs	r3, r1
 8007c6e:	6553      	str	r3, [r2, #84]	; 0x54
 8007c70:	e003      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007c76:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007c86:	673b      	str	r3, [r7, #112]	; 0x70
 8007c88:	2300      	movs	r3, #0
 8007c8a:	677b      	str	r3, [r7, #116]	; 0x74
 8007c8c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007c90:	460b      	mov	r3, r1
 8007c92:	4313      	orrs	r3, r2
 8007c94:	d034      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d003      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8007ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ca4:	d007      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8007ca6:	e011      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ca8:	4b12      	ldr	r3, [pc, #72]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cac:	4a11      	ldr	r2, [pc, #68]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007cb4:	e00e      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cba:	3308      	adds	r3, #8
 8007cbc:	2102      	movs	r1, #2
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f001 face 	bl	8009260 <RCCEx_PLL2_Config>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007cca:	e003      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10d      	bne.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007cdc:	4b05      	ldr	r3, [pc, #20]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ce0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cea:	4a02      	ldr	r2, [pc, #8]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007cec:	430b      	orrs	r3, r1
 8007cee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007cf0:	e006      	b.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8007cf2:	bf00      	nop
 8007cf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007cfc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d08:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007d0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d0e:	2300      	movs	r3, #0
 8007d10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d12:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007d16:	460b      	mov	r3, r1
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	d00c      	beq.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d20:	3328      	adds	r3, #40	; 0x28
 8007d22:	2102      	movs	r1, #2
 8007d24:	4618      	mov	r0, r3
 8007d26:	f001 fb4d 	bl	80093c4 <RCCEx_PLL3_Config>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d002      	beq.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007d42:	663b      	str	r3, [r7, #96]	; 0x60
 8007d44:	2300      	movs	r3, #0
 8007d46:	667b      	str	r3, [r7, #100]	; 0x64
 8007d48:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	d038      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d5e:	d018      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8007d60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d64:	d811      	bhi.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d6a:	d014      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8007d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d70:	d80b      	bhi.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d011      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8007d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d7a:	d106      	bne.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d7c:	4bc3      	ldr	r3, [pc, #780]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d80:	4ac2      	ldr	r2, [pc, #776]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007d88:	e008      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007d90:	e004      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007d92:	bf00      	nop
 8007d94:	e002      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007d96:	bf00      	nop
 8007d98:	e000      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10b      	bne.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007da4:	4bb9      	ldr	r3, [pc, #740]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db4:	4ab5      	ldr	r2, [pc, #724]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007db6:	430b      	orrs	r3, r1
 8007db8:	6553      	str	r3, [r2, #84]	; 0x54
 8007dba:	e003      	b.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007dc0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007dc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dcc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007dd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dd6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	d009      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007de0:	4baa      	ldr	r3, [pc, #680]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dee:	4aa7      	ldr	r2, [pc, #668]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007df0:	430b      	orrs	r3, r1
 8007df2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007e00:	653b      	str	r3, [r7, #80]	; 0x50
 8007e02:	2300      	movs	r3, #0
 8007e04:	657b      	str	r3, [r7, #84]	; 0x54
 8007e06:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	d009      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e10:	4b9e      	ldr	r3, [pc, #632]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e14:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e1e:	4a9b      	ldr	r2, [pc, #620]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007e20:	430b      	orrs	r3, r1
 8007e22:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007e30:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e32:	2300      	movs	r3, #0
 8007e34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e36:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	d009      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007e40:	4b92      	ldr	r3, [pc, #584]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e44:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8007e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e4e:	4a8f      	ldr	r2, [pc, #572]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007e50:	430b      	orrs	r3, r1
 8007e52:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007e60:	643b      	str	r3, [r7, #64]	; 0x40
 8007e62:	2300      	movs	r3, #0
 8007e64:	647b      	str	r3, [r7, #68]	; 0x44
 8007e66:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	d00e      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e70:	4b86      	ldr	r3, [pc, #536]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	4a85      	ldr	r2, [pc, #532]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007e76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e7a:	6113      	str	r3, [r2, #16]
 8007e7c:	4b83      	ldr	r3, [pc, #524]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007e7e:	6919      	ldr	r1, [r3, #16]
 8007e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007e88:	4a80      	ldr	r2, [pc, #512]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007e8a:	430b      	orrs	r3, r1
 8007e8c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e96:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007e9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ea0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	d009      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007eaa:	4b78      	ldr	r3, [pc, #480]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eae:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb8:	4a74      	ldr	r2, [pc, #464]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007eba:	430b      	orrs	r3, r1
 8007ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007eca:	633b      	str	r3, [r7, #48]	; 0x30
 8007ecc:	2300      	movs	r3, #0
 8007ece:	637b      	str	r3, [r7, #52]	; 0x34
 8007ed0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	d00a      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007eda:	4b6c      	ldr	r3, [pc, #432]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ede:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007eea:	4a68      	ldr	r2, [pc, #416]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007eec:	430b      	orrs	r3, r1
 8007eee:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	2100      	movs	r1, #0
 8007efa:	62b9      	str	r1, [r7, #40]	; 0x28
 8007efc:	f003 0301 	and.w	r3, r3, #1
 8007f00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f02:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007f06:	460b      	mov	r3, r1
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	d011      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f10:	3308      	adds	r3, #8
 8007f12:	2100      	movs	r1, #0
 8007f14:	4618      	mov	r0, r3
 8007f16:	f001 f9a3 	bl	8009260 <RCCEx_PLL2_Config>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007f20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d003      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007f2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	2100      	movs	r1, #0
 8007f3a:	6239      	str	r1, [r7, #32]
 8007f3c:	f003 0302 	and.w	r3, r3, #2
 8007f40:	627b      	str	r3, [r7, #36]	; 0x24
 8007f42:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007f46:	460b      	mov	r3, r1
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	d011      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f50:	3308      	adds	r3, #8
 8007f52:	2101      	movs	r1, #1
 8007f54:	4618      	mov	r0, r3
 8007f56:	f001 f983 	bl	8009260 <RCCEx_PLL2_Config>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007f60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d003      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007f6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f78:	2100      	movs	r1, #0
 8007f7a:	61b9      	str	r1, [r7, #24]
 8007f7c:	f003 0304 	and.w	r3, r3, #4
 8007f80:	61fb      	str	r3, [r7, #28]
 8007f82:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007f86:	460b      	mov	r3, r1
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	d011      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f90:	3308      	adds	r3, #8
 8007f92:	2102      	movs	r1, #2
 8007f94:	4618      	mov	r0, r3
 8007f96:	f001 f963 	bl	8009260 <RCCEx_PLL2_Config>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007fa0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d003      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007fac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	2100      	movs	r1, #0
 8007fba:	6139      	str	r1, [r7, #16]
 8007fbc:	f003 0308 	and.w	r3, r3, #8
 8007fc0:	617b      	str	r3, [r7, #20]
 8007fc2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	d011      	beq.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fd0:	3328      	adds	r3, #40	; 0x28
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f001 f9f5 	bl	80093c4 <RCCEx_PLL3_Config>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8007fe0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d003      	beq.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007fec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	60b9      	str	r1, [r7, #8]
 8007ffc:	f003 0310 	and.w	r3, r3, #16
 8008000:	60fb      	str	r3, [r7, #12]
 8008002:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008006:	460b      	mov	r3, r1
 8008008:	4313      	orrs	r3, r2
 800800a:	d011      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800800c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008010:	3328      	adds	r3, #40	; 0x28
 8008012:	2101      	movs	r1, #1
 8008014:	4618      	mov	r0, r3
 8008016:	f001 f9d5 	bl	80093c4 <RCCEx_PLL3_Config>
 800801a:	4603      	mov	r3, r0
 800801c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8008020:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008024:	2b00      	cmp	r3, #0
 8008026:	d003      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008028:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800802c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008030:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	2100      	movs	r1, #0
 800803a:	6039      	str	r1, [r7, #0]
 800803c:	f003 0320 	and.w	r3, r3, #32
 8008040:	607b      	str	r3, [r7, #4]
 8008042:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008046:	460b      	mov	r3, r1
 8008048:	4313      	orrs	r3, r2
 800804a:	d011      	beq.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800804c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008050:	3328      	adds	r3, #40	; 0x28
 8008052:	2102      	movs	r1, #2
 8008054:	4618      	mov	r0, r3
 8008056:	f001 f9b5 	bl	80093c4 <RCCEx_PLL3_Config>
 800805a:	4603      	mov	r3, r0
 800805c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8008060:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008064:	2b00      	cmp	r3, #0
 8008066:	d003      	beq.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008068:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800806c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8008070:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	e000      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
}
 800807e:	4618      	mov	r0, r3
 8008080:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8008084:	46bd      	mov	sp, r7
 8008086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800808a:	bf00      	nop
 800808c:	58024400 	.word	0x58024400

08008090 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b090      	sub	sp, #64	; 0x40
 8008094:	af00      	add	r7, sp, #0
 8008096:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800809a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800809e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80080a2:	430b      	orrs	r3, r1
 80080a4:	f040 8094 	bne.w	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80080a8:	4b97      	ldr	r3, [pc, #604]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ac:	f003 0307 	and.w	r3, r3, #7
 80080b0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80080b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b4:	2b04      	cmp	r3, #4
 80080b6:	f200 8087 	bhi.w	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80080ba:	a201      	add	r2, pc, #4	; (adr r2, 80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80080bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c0:	080080d5 	.word	0x080080d5
 80080c4:	080080fd 	.word	0x080080fd
 80080c8:	08008125 	.word	0x08008125
 80080cc:	080081c1 	.word	0x080081c1
 80080d0:	0800814d 	.word	0x0800814d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080d4:	4b8c      	ldr	r3, [pc, #560]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080e0:	d108      	bne.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 ff68 	bl	8008fbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080f0:	f000 bc97 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80080f4:	2300      	movs	r3, #0
 80080f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080f8:	f000 bc93 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080fc:	4b82      	ldr	r3, [pc, #520]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008104:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008108:	d108      	bne.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800810a:	f107 0318 	add.w	r3, r7, #24
 800810e:	4618      	mov	r0, r3
 8008110:	f000 fcac 	bl	8008a6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008118:	f000 bc83 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800811c:	2300      	movs	r3, #0
 800811e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008120:	f000 bc7f 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008124:	4b78      	ldr	r3, [pc, #480]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800812c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008130:	d108      	bne.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008132:	f107 030c 	add.w	r3, r7, #12
 8008136:	4618      	mov	r0, r3
 8008138:	f000 fdec 	bl	8008d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008140:	f000 bc6f 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008144:	2300      	movs	r3, #0
 8008146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008148:	f000 bc6b 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800814c:	4b6e      	ldr	r3, [pc, #440]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800814e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008150:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008154:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008156:	4b6c      	ldr	r3, [pc, #432]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 0304 	and.w	r3, r3, #4
 800815e:	2b04      	cmp	r3, #4
 8008160:	d10c      	bne.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008164:	2b00      	cmp	r3, #0
 8008166:	d109      	bne.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008168:	4b67      	ldr	r3, [pc, #412]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	08db      	lsrs	r3, r3, #3
 800816e:	f003 0303 	and.w	r3, r3, #3
 8008172:	4a66      	ldr	r2, [pc, #408]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008174:	fa22 f303 	lsr.w	r3, r2, r3
 8008178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800817a:	e01f      	b.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800817c:	4b62      	ldr	r3, [pc, #392]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008188:	d106      	bne.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800818a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800818c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008190:	d102      	bne.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008192:	4b5f      	ldr	r3, [pc, #380]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008196:	e011      	b.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008198:	4b5b      	ldr	r3, [pc, #364]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081a4:	d106      	bne.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80081a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081ac:	d102      	bne.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081ae:	4b59      	ldr	r3, [pc, #356]	; (8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80081b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081b2:	e003      	b.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081b4:	2300      	movs	r3, #0
 80081b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80081b8:	f000 bc33 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80081bc:	f000 bc31 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081c0:	4b55      	ldr	r3, [pc, #340]	; (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80081c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081c4:	f000 bc2d 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80081c8:	2300      	movs	r3, #0
 80081ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081cc:	f000 bc29 	b.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80081d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081d4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80081d8:	430b      	orrs	r3, r1
 80081da:	f040 809f 	bne.w	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 80081de:	4b4a      	ldr	r3, [pc, #296]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081e2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80081e6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80081e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081ee:	d04d      	beq.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80081f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081f6:	f200 8084 	bhi.w	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80081fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fc:	2bc0      	cmp	r3, #192	; 0xc0
 80081fe:	d07d      	beq.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8008200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008202:	2bc0      	cmp	r3, #192	; 0xc0
 8008204:	d87d      	bhi.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008208:	2b80      	cmp	r3, #128	; 0x80
 800820a:	d02d      	beq.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820e:	2b80      	cmp	r3, #128	; 0x80
 8008210:	d877      	bhi.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008214:	2b00      	cmp	r3, #0
 8008216:	d003      	beq.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8008218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821a:	2b40      	cmp	r3, #64	; 0x40
 800821c:	d012      	beq.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800821e:	e070      	b.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008220:	4b39      	ldr	r3, [pc, #228]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008228:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800822c:	d107      	bne.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800822e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008232:	4618      	mov	r0, r3
 8008234:	f000 fec2 	bl	8008fbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800823c:	e3f1      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800823e:	2300      	movs	r3, #0
 8008240:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008242:	e3ee      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008244:	4b30      	ldr	r3, [pc, #192]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800824c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008250:	d107      	bne.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008252:	f107 0318 	add.w	r3, r7, #24
 8008256:	4618      	mov	r0, r3
 8008258:	f000 fc08 	bl	8008a6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008260:	e3df      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008262:	2300      	movs	r3, #0
 8008264:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008266:	e3dc      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008268:	4b27      	ldr	r3, [pc, #156]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008270:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008274:	d107      	bne.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008276:	f107 030c 	add.w	r3, r7, #12
 800827a:	4618      	mov	r0, r3
 800827c:	f000 fd4a 	bl	8008d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008284:	e3cd      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008286:	2300      	movs	r3, #0
 8008288:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800828a:	e3ca      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800828c:	4b1e      	ldr	r3, [pc, #120]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800828e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008290:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008294:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008296:	4b1c      	ldr	r3, [pc, #112]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0304 	and.w	r3, r3, #4
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d10c      	bne.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80082a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d109      	bne.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082a8:	4b17      	ldr	r3, [pc, #92]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	08db      	lsrs	r3, r3, #3
 80082ae:	f003 0303 	and.w	r3, r3, #3
 80082b2:	4a16      	ldr	r2, [pc, #88]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80082b4:	fa22 f303 	lsr.w	r3, r2, r3
 80082b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082ba:	e01e      	b.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082bc:	4b12      	ldr	r3, [pc, #72]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082c8:	d106      	bne.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80082ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082d0:	d102      	bne.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80082d2:	4b0f      	ldr	r3, [pc, #60]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80082d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082d6:	e010      	b.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082d8:	4b0b      	ldr	r3, [pc, #44]	; (8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082e4:	d106      	bne.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80082e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082ec:	d102      	bne.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80082ee:	4b09      	ldr	r3, [pc, #36]	; (8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80082f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082f2:	e002      	b.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80082f4:	2300      	movs	r3, #0
 80082f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80082f8:	e393      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80082fa:	e392      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80082fc:	4b06      	ldr	r3, [pc, #24]	; (8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80082fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008300:	e38f      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008302:	2300      	movs	r3, #0
 8008304:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008306:	e38c      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008308:	58024400 	.word	0x58024400
 800830c:	03d09000 	.word	0x03d09000
 8008310:	003d0900 	.word	0x003d0900
 8008314:	007a1200 	.word	0x007a1200
 8008318:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800831c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008320:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008324:	430b      	orrs	r3, r1
 8008326:	f040 809c 	bne.w	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800832a:	4b9e      	ldr	r3, [pc, #632]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800832c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800832e:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8008332:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800833a:	d054      	beq.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800833c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008342:	f200 808b 	bhi.w	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008348:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800834c:	f000 8083 	beq.w	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8008350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008352:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008356:	f200 8081 	bhi.w	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800835a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008360:	d02f      	beq.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8008362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008368:	d878      	bhi.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800836a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836c:	2b00      	cmp	r3, #0
 800836e:	d004      	beq.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8008370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008376:	d012      	beq.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8008378:	e070      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800837a:	4b8a      	ldr	r3, [pc, #552]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008382:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008386:	d107      	bne.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800838c:	4618      	mov	r0, r3
 800838e:	f000 fe15 	bl	8008fbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008394:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008396:	e344      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008398:	2300      	movs	r3, #0
 800839a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800839c:	e341      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800839e:	4b81      	ldr	r3, [pc, #516]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083aa:	d107      	bne.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083ac:	f107 0318 	add.w	r3, r7, #24
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 fb5b 	bl	8008a6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083ba:	e332      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80083bc:	2300      	movs	r3, #0
 80083be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c0:	e32f      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083c2:	4b78      	ldr	r3, [pc, #480]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ce:	d107      	bne.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083d0:	f107 030c 	add.w	r3, r7, #12
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 fc9d 	bl	8008d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083de:	e320      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80083e0:	2300      	movs	r3, #0
 80083e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083e4:	e31d      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083e6:	4b6f      	ldr	r3, [pc, #444]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80083e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083ee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083f0:	4b6c      	ldr	r3, [pc, #432]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 0304 	and.w	r3, r3, #4
 80083f8:	2b04      	cmp	r3, #4
 80083fa:	d10c      	bne.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80083fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d109      	bne.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008402:	4b68      	ldr	r3, [pc, #416]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	08db      	lsrs	r3, r3, #3
 8008408:	f003 0303 	and.w	r3, r3, #3
 800840c:	4a66      	ldr	r2, [pc, #408]	; (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800840e:	fa22 f303 	lsr.w	r3, r2, r3
 8008412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008414:	e01e      	b.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008416:	4b63      	ldr	r3, [pc, #396]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800841e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008422:	d106      	bne.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008426:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800842a:	d102      	bne.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800842c:	4b5f      	ldr	r3, [pc, #380]	; (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800842e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008430:	e010      	b.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008432:	4b5c      	ldr	r3, [pc, #368]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800843a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800843e:	d106      	bne.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008446:	d102      	bne.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008448:	4b59      	ldr	r3, [pc, #356]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800844a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800844c:	e002      	b.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800844e:	2300      	movs	r3, #0
 8008450:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8008452:	e2e6      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008454:	e2e5      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008456:	4b57      	ldr	r3, [pc, #348]	; (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008458:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800845a:	e2e2      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800845c:	2300      	movs	r3, #0
 800845e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008460:	e2df      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008462:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008466:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800846a:	430b      	orrs	r3, r1
 800846c:	f040 80a7 	bne.w	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008470:	4b4c      	ldr	r3, [pc, #304]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008474:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008478:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800847a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008480:	d055      	beq.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8008482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008488:	f200 8096 	bhi.w	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800848c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008492:	f000 8084 	beq.w	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8008496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008498:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800849c:	f200 808c 	bhi.w	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80084a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084a6:	d030      	beq.n	800850a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084ae:	f200 8083 	bhi.w	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80084b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d004      	beq.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80084b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084be:	d012      	beq.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80084c0:	e07a      	b.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084c2:	4b38      	ldr	r3, [pc, #224]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084ce:	d107      	bne.n	80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084d4:	4618      	mov	r0, r3
 80084d6:	f000 fd71 	bl	8008fbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084de:	e2a0      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80084e0:	2300      	movs	r3, #0
 80084e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084e4:	e29d      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084e6:	4b2f      	ldr	r3, [pc, #188]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084f2:	d107      	bne.n	8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084f4:	f107 0318 	add.w	r3, r7, #24
 80084f8:	4618      	mov	r0, r3
 80084fa:	f000 fab7 	bl	8008a6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008502:	e28e      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008504:	2300      	movs	r3, #0
 8008506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008508:	e28b      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800850a:	4b26      	ldr	r3, [pc, #152]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008516:	d107      	bne.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008518:	f107 030c 	add.w	r3, r7, #12
 800851c:	4618      	mov	r0, r3
 800851e:	f000 fbf9 	bl	8008d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008526:	e27c      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008528:	2300      	movs	r3, #0
 800852a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800852c:	e279      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800852e:	4b1d      	ldr	r3, [pc, #116]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008532:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008536:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008538:	4b1a      	ldr	r3, [pc, #104]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 0304 	and.w	r3, r3, #4
 8008540:	2b04      	cmp	r3, #4
 8008542:	d10c      	bne.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8008544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008546:	2b00      	cmp	r3, #0
 8008548:	d109      	bne.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800854a:	4b16      	ldr	r3, [pc, #88]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	08db      	lsrs	r3, r3, #3
 8008550:	f003 0303 	and.w	r3, r3, #3
 8008554:	4a14      	ldr	r2, [pc, #80]	; (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8008556:	fa22 f303 	lsr.w	r3, r2, r3
 800855a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800855c:	e01e      	b.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800855e:	4b11      	ldr	r3, [pc, #68]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800856a:	d106      	bne.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800856c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800856e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008572:	d102      	bne.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008574:	4b0d      	ldr	r3, [pc, #52]	; (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8008576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008578:	e010      	b.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800857a:	4b0a      	ldr	r3, [pc, #40]	; (80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008582:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008586:	d106      	bne.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800858e:	d102      	bne.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008590:	4b07      	ldr	r3, [pc, #28]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008594:	e002      	b.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008596:	2300      	movs	r3, #0
 8008598:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800859a:	e242      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800859c:	e241      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800859e:	4b05      	ldr	r3, [pc, #20]	; (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80085a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085a2:	e23e      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80085a4:	58024400 	.word	0x58024400
 80085a8:	03d09000 	.word	0x03d09000
 80085ac:	003d0900 	.word	0x003d0900
 80085b0:	007a1200 	.word	0x007a1200
 80085b4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80085b8:	2300      	movs	r3, #0
 80085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085bc:	e231      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80085be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085c2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80085c6:	430b      	orrs	r3, r1
 80085c8:	f040 8085 	bne.w	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80085cc:	4b9c      	ldr	r3, [pc, #624]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80085ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085d0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80085d4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80085d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085dc:	d06b      	beq.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80085de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085e4:	d874      	bhi.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80085e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80085ec:	d056      	beq.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80085ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80085f4:	d86c      	bhi.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80085f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80085fc:	d03b      	beq.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80085fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008600:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008604:	d864      	bhi.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008608:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800860c:	d021      	beq.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800860e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008614:	d85c      	bhi.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008618:	2b00      	cmp	r3, #0
 800861a:	d004      	beq.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800861c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008622:	d004      	beq.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8008624:	e054      	b.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008626:	f7fe fb07 	bl	8006c38 <HAL_RCC_GetPCLK1Freq>
 800862a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800862c:	e1f9      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800862e:	4b84      	ldr	r3, [pc, #528]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008636:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800863a:	d107      	bne.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800863c:	f107 0318 	add.w	r3, r7, #24
 8008640:	4618      	mov	r0, r3
 8008642:	f000 fa13 	bl	8008a6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800864a:	e1ea      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800864c:	2300      	movs	r3, #0
 800864e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008650:	e1e7      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008652:	4b7b      	ldr	r3, [pc, #492]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800865a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800865e:	d107      	bne.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008660:	f107 030c 	add.w	r3, r7, #12
 8008664:	4618      	mov	r0, r3
 8008666:	f000 fb55 	bl	8008d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800866e:	e1d8      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008674:	e1d5      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008676:	4b72      	ldr	r3, [pc, #456]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0304 	and.w	r3, r3, #4
 800867e:	2b04      	cmp	r3, #4
 8008680:	d109      	bne.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008682:	4b6f      	ldr	r3, [pc, #444]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	08db      	lsrs	r3, r3, #3
 8008688:	f003 0303 	and.w	r3, r3, #3
 800868c:	4a6d      	ldr	r2, [pc, #436]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800868e:	fa22 f303 	lsr.w	r3, r2, r3
 8008692:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008694:	e1c5      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008696:	2300      	movs	r3, #0
 8008698:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800869a:	e1c2      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800869c:	4b68      	ldr	r3, [pc, #416]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086a8:	d102      	bne.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80086aa:	4b67      	ldr	r3, [pc, #412]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80086ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ae:	e1b8      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80086b0:	2300      	movs	r3, #0
 80086b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086b4:	e1b5      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086b6:	4b62      	ldr	r3, [pc, #392]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086c2:	d102      	bne.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80086c4:	4b61      	ldr	r3, [pc, #388]	; (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80086c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086c8:	e1ab      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80086ca:	2300      	movs	r3, #0
 80086cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086ce:	e1a8      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80086d0:	2300      	movs	r3, #0
 80086d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086d4:	e1a5      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80086d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086da:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80086de:	430b      	orrs	r3, r1
 80086e0:	d173      	bne.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80086e2:	4b57      	ldr	r3, [pc, #348]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80086e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80086ea:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80086ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086f2:	d02f      	beq.n	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 80086f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086fa:	d863      	bhi.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80086fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d004      	beq.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008708:	d012      	beq.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800870a:	e05b      	b.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800870c:	4b4c      	ldr	r3, [pc, #304]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008714:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008718:	d107      	bne.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800871a:	f107 0318 	add.w	r3, r7, #24
 800871e:	4618      	mov	r0, r3
 8008720:	f000 f9a4 	bl	8008a6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008728:	e17b      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800872a:	2300      	movs	r3, #0
 800872c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800872e:	e178      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008730:	4b43      	ldr	r3, [pc, #268]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800873c:	d107      	bne.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800873e:	f107 030c 	add.w	r3, r7, #12
 8008742:	4618      	mov	r0, r3
 8008744:	f000 fae6 	bl	8008d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800874c:	e169      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800874e:	2300      	movs	r3, #0
 8008750:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008752:	e166      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008754:	4b3a      	ldr	r3, [pc, #232]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008758:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800875c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800875e:	4b38      	ldr	r3, [pc, #224]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 0304 	and.w	r3, r3, #4
 8008766:	2b04      	cmp	r3, #4
 8008768:	d10c      	bne.n	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800876a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800876c:	2b00      	cmp	r3, #0
 800876e:	d109      	bne.n	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008770:	4b33      	ldr	r3, [pc, #204]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	08db      	lsrs	r3, r3, #3
 8008776:	f003 0303 	and.w	r3, r3, #3
 800877a:	4a32      	ldr	r2, [pc, #200]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800877c:	fa22 f303 	lsr.w	r3, r2, r3
 8008780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008782:	e01e      	b.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008784:	4b2e      	ldr	r3, [pc, #184]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800878c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008790:	d106      	bne.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8008792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008798:	d102      	bne.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800879a:	4b2b      	ldr	r3, [pc, #172]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800879c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800879e:	e010      	b.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087a0:	4b27      	ldr	r3, [pc, #156]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087ac:	d106      	bne.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80087ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087b4:	d102      	bne.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80087b6:	4b25      	ldr	r3, [pc, #148]	; (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80087b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087ba:	e002      	b.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80087c0:	e12f      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80087c2:	e12e      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80087c4:	2300      	movs	r3, #0
 80087c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087c8:	e12b      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80087ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087ce:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80087d2:	430b      	orrs	r3, r1
 80087d4:	d13c      	bne.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80087d6:	4b1a      	ldr	r3, [pc, #104]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80087d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087de:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80087e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d004      	beq.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80087e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087ec:	d012      	beq.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80087ee:	e023      	b.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087f0:	4b13      	ldr	r3, [pc, #76]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087fc:	d107      	bne.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008802:	4618      	mov	r0, r3
 8008804:	f000 fbda 	bl	8008fbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800880c:	e109      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800880e:	2300      	movs	r3, #0
 8008810:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008812:	e106      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008814:	4b0a      	ldr	r3, [pc, #40]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800881c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008820:	d107      	bne.n	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008822:	f107 0318 	add.w	r3, r7, #24
 8008826:	4618      	mov	r0, r3
 8008828:	f000 f920 	bl	8008a6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008830:	e0f7      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008832:	2300      	movs	r3, #0
 8008834:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008836:	e0f4      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008838:	2300      	movs	r3, #0
 800883a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800883c:	e0f1      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800883e:	bf00      	nop
 8008840:	58024400 	.word	0x58024400
 8008844:	03d09000 	.word	0x03d09000
 8008848:	003d0900 	.word	0x003d0900
 800884c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008854:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008858:	430b      	orrs	r3, r1
 800885a:	f040 8091 	bne.w	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800885e:	4b73      	ldr	r3, [pc, #460]	; (8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008862:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008866:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800886e:	f000 8081 	beq.w	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008874:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008878:	d87f      	bhi.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800887a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008880:	d06b      	beq.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8008882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008884:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008888:	d877      	bhi.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800888a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008890:	d056      	beq.n	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8008892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008898:	d86f      	bhi.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800889a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80088a0:	d03b      	beq.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80088a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80088a8:	d867      	bhi.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80088aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088b0:	d021      	beq.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80088b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088b8:	d85f      	bhi.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80088ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d004      	beq.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80088c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088c6:	d004      	beq.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80088c8:	e057      	b.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80088ca:	f000 f8b9 	bl	8008a40 <HAL_RCCEx_GetD3PCLK1Freq>
 80088ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80088d0:	e0a7      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088d2:	4b56      	ldr	r3, [pc, #344]	; (8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088de:	d107      	bne.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088e0:	f107 0318 	add.w	r3, r7, #24
 80088e4:	4618      	mov	r0, r3
 80088e6:	f000 f8c1 	bl	8008a6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088ee:	e098      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80088f0:	2300      	movs	r3, #0
 80088f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088f4:	e095      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088f6:	4b4d      	ldr	r3, [pc, #308]	; (8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008902:	d107      	bne.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008904:	f107 030c 	add.w	r3, r7, #12
 8008908:	4618      	mov	r0, r3
 800890a:	f000 fa03 	bl	8008d14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008912:	e086      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008914:	2300      	movs	r3, #0
 8008916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008918:	e083      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800891a:	4b44      	ldr	r3, [pc, #272]	; (8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0304 	and.w	r3, r3, #4
 8008922:	2b04      	cmp	r3, #4
 8008924:	d109      	bne.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008926:	4b41      	ldr	r3, [pc, #260]	; (8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	08db      	lsrs	r3, r3, #3
 800892c:	f003 0303 	and.w	r3, r3, #3
 8008930:	4a3f      	ldr	r2, [pc, #252]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008932:	fa22 f303 	lsr.w	r3, r2, r3
 8008936:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008938:	e073      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800893a:	2300      	movs	r3, #0
 800893c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800893e:	e070      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008940:	4b3a      	ldr	r3, [pc, #232]	; (8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800894c:	d102      	bne.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800894e:	4b39      	ldr	r3, [pc, #228]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8008950:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008952:	e066      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008954:	2300      	movs	r3, #0
 8008956:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008958:	e063      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800895a:	4b34      	ldr	r3, [pc, #208]	; (8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008962:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008966:	d102      	bne.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8008968:	4b33      	ldr	r3, [pc, #204]	; (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800896a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800896c:	e059      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800896e:	2300      	movs	r3, #0
 8008970:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008972:	e056      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008974:	4b31      	ldr	r3, [pc, #196]	; (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8008976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008978:	e053      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800897a:	2300      	movs	r3, #0
 800897c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800897e:	e050      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008984:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008988:	430b      	orrs	r3, r1
 800898a:	d148      	bne.n	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800898c:	4b27      	ldr	r3, [pc, #156]	; (8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800898e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008990:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008994:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800899c:	d02a      	beq.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800899e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089a4:	d838      	bhi.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80089a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d004      	beq.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80089ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089b2:	d00d      	beq.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80089b4:	e030      	b.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80089b6:	4b1d      	ldr	r3, [pc, #116]	; (8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089c2:	d102      	bne.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 80089c4:	4b1c      	ldr	r3, [pc, #112]	; (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80089c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089c8:	e02b      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80089ca:	2300      	movs	r3, #0
 80089cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089ce:	e028      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089d0:	4b16      	ldr	r3, [pc, #88]	; (8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089dc:	d107      	bne.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 faea 	bl	8008fbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089ec:	e019      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80089ee:	2300      	movs	r3, #0
 80089f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089f2:	e016      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089f4:	4b0d      	ldr	r3, [pc, #52]	; (8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a00:	d107      	bne.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a02:	f107 0318 	add.w	r3, r7, #24
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 f830 	bl	8008a6c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a10:	e007      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008a12:	2300      	movs	r3, #0
 8008a14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a16:	e004      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a1c:	e001      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3740      	adds	r7, #64	; 0x40
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	58024400 	.word	0x58024400
 8008a30:	03d09000 	.word	0x03d09000
 8008a34:	003d0900 	.word	0x003d0900
 8008a38:	007a1200 	.word	0x007a1200
 8008a3c:	00bb8000 	.word	0x00bb8000

08008a40 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008a44:	f7fe f8c8 	bl	8006bd8 <HAL_RCC_GetHCLKFreq>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	4b06      	ldr	r3, [pc, #24]	; (8008a64 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	091b      	lsrs	r3, r3, #4
 8008a50:	f003 0307 	and.w	r3, r3, #7
 8008a54:	4904      	ldr	r1, [pc, #16]	; (8008a68 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008a56:	5ccb      	ldrb	r3, [r1, r3]
 8008a58:	f003 031f 	and.w	r3, r3, #31
 8008a5c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	58024400 	.word	0x58024400
 8008a68:	080108c4 	.word	0x080108c4

08008a6c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b089      	sub	sp, #36	; 0x24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a74:	4ba1      	ldr	r3, [pc, #644]	; (8008cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a78:	f003 0303 	and.w	r3, r3, #3
 8008a7c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008a7e:	4b9f      	ldr	r3, [pc, #636]	; (8008cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a82:	0b1b      	lsrs	r3, r3, #12
 8008a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a88:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008a8a:	4b9c      	ldr	r3, [pc, #624]	; (8008cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8e:	091b      	lsrs	r3, r3, #4
 8008a90:	f003 0301 	and.w	r3, r3, #1
 8008a94:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008a96:	4b99      	ldr	r3, [pc, #612]	; (8008cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a9a:	08db      	lsrs	r3, r3, #3
 8008a9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008aa0:	693a      	ldr	r2, [r7, #16]
 8008aa2:	fb02 f303 	mul.w	r3, r2, r3
 8008aa6:	ee07 3a90 	vmov	s15, r3
 8008aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f000 8111 	beq.w	8008cdc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	f000 8083 	beq.w	8008bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	f200 80a1 	bhi.w	8008c0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d003      	beq.n	8008ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d056      	beq.n	8008b84 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008ad6:	e099      	b.n	8008c0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ad8:	4b88      	ldr	r3, [pc, #544]	; (8008cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0320 	and.w	r3, r3, #32
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d02d      	beq.n	8008b40 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ae4:	4b85      	ldr	r3, [pc, #532]	; (8008cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	08db      	lsrs	r3, r3, #3
 8008aea:	f003 0303 	and.w	r3, r3, #3
 8008aee:	4a84      	ldr	r2, [pc, #528]	; (8008d00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008af0:	fa22 f303 	lsr.w	r3, r2, r3
 8008af4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	ee07 3a90 	vmov	s15, r3
 8008afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	ee07 3a90 	vmov	s15, r3
 8008b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b0e:	4b7b      	ldr	r3, [pc, #492]	; (8008cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b16:	ee07 3a90 	vmov	s15, r3
 8008b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b22:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008d04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008b3e:	e087      	b.n	8008c50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	ee07 3a90 	vmov	s15, r3
 8008b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008d08 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b52:	4b6a      	ldr	r3, [pc, #424]	; (8008cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5a:	ee07 3a90 	vmov	s15, r3
 8008b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b66:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008d04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b82:	e065      	b.n	8008c50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	ee07 3a90 	vmov	s15, r3
 8008b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b96:	4b59      	ldr	r3, [pc, #356]	; (8008cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b9e:	ee07 3a90 	vmov	s15, r3
 8008ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008baa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008d04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bc6:	e043      	b.n	8008c50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	ee07 3a90 	vmov	s15, r3
 8008bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bd2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008d10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bda:	4b48      	ldr	r3, [pc, #288]	; (8008cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be2:	ee07 3a90 	vmov	s15, r3
 8008be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008d04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c0a:	e021      	b.n	8008c50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	ee07 3a90 	vmov	s15, r3
 8008c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c1e:	4b37      	ldr	r3, [pc, #220]	; (8008cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c26:	ee07 3a90 	vmov	s15, r3
 8008c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c32:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008d04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c4e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008c50:	4b2a      	ldr	r3, [pc, #168]	; (8008cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c54:	0a5b      	lsrs	r3, r3, #9
 8008c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c5a:	ee07 3a90 	vmov	s15, r3
 8008c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c76:	ee17 2a90 	vmov	r2, s15
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008c7e:	4b1f      	ldr	r3, [pc, #124]	; (8008cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c82:	0c1b      	lsrs	r3, r3, #16
 8008c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c88:	ee07 3a90 	vmov	s15, r3
 8008c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c98:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ca4:	ee17 2a90 	vmov	r2, s15
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008cac:	4b13      	ldr	r3, [pc, #76]	; (8008cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb0:	0e1b      	lsrs	r3, r3, #24
 8008cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cb6:	ee07 3a90 	vmov	s15, r3
 8008cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cd2:	ee17 2a90 	vmov	r2, s15
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008cda:	e008      	b.n	8008cee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	609a      	str	r2, [r3, #8]
}
 8008cee:	bf00      	nop
 8008cf0:	3724      	adds	r7, #36	; 0x24
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	58024400 	.word	0x58024400
 8008d00:	03d09000 	.word	0x03d09000
 8008d04:	46000000 	.word	0x46000000
 8008d08:	4c742400 	.word	0x4c742400
 8008d0c:	4a742400 	.word	0x4a742400
 8008d10:	4af42400 	.word	0x4af42400

08008d14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b089      	sub	sp, #36	; 0x24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d1c:	4ba1      	ldr	r3, [pc, #644]	; (8008fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d20:	f003 0303 	and.w	r3, r3, #3
 8008d24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008d26:	4b9f      	ldr	r3, [pc, #636]	; (8008fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2a:	0d1b      	lsrs	r3, r3, #20
 8008d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008d32:	4b9c      	ldr	r3, [pc, #624]	; (8008fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d36:	0a1b      	lsrs	r3, r3, #8
 8008d38:	f003 0301 	and.w	r3, r3, #1
 8008d3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008d3e:	4b99      	ldr	r3, [pc, #612]	; (8008fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d42:	08db      	lsrs	r3, r3, #3
 8008d44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	fb02 f303 	mul.w	r3, r2, r3
 8008d4e:	ee07 3a90 	vmov	s15, r3
 8008d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f000 8111 	beq.w	8008f84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	f000 8083 	beq.w	8008e70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	f200 80a1 	bhi.w	8008eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d003      	beq.n	8008d80 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d056      	beq.n	8008e2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008d7e:	e099      	b.n	8008eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d80:	4b88      	ldr	r3, [pc, #544]	; (8008fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0320 	and.w	r3, r3, #32
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d02d      	beq.n	8008de8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d8c:	4b85      	ldr	r3, [pc, #532]	; (8008fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	08db      	lsrs	r3, r3, #3
 8008d92:	f003 0303 	and.w	r3, r3, #3
 8008d96:	4a84      	ldr	r2, [pc, #528]	; (8008fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008d98:	fa22 f303 	lsr.w	r3, r2, r3
 8008d9c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	ee07 3a90 	vmov	s15, r3
 8008da4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	ee07 3a90 	vmov	s15, r3
 8008dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db6:	4b7b      	ldr	r3, [pc, #492]	; (8008fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbe:	ee07 3a90 	vmov	s15, r3
 8008dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dca:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008fac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008de6:	e087      	b.n	8008ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dfa:	4b6a      	ldr	r3, [pc, #424]	; (8008fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e02:	ee07 3a90 	vmov	s15, r3
 8008e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008fac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e2a:	e065      	b.n	8008ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	ee07 3a90 	vmov	s15, r3
 8008e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e3e:	4b59      	ldr	r3, [pc, #356]	; (8008fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e46:	ee07 3a90 	vmov	s15, r3
 8008e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e52:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008fac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e6e:	e043      	b.n	8008ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	ee07 3a90 	vmov	s15, r3
 8008e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e82:	4b48      	ldr	r3, [pc, #288]	; (8008fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e8a:	ee07 3a90 	vmov	s15, r3
 8008e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e96:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008fac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008eb2:	e021      	b.n	8008ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	ee07 3a90 	vmov	s15, r3
 8008eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ebe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ec6:	4b37      	ldr	r3, [pc, #220]	; (8008fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ece:	ee07 3a90 	vmov	s15, r3
 8008ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eda:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008fac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ef6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008ef8:	4b2a      	ldr	r3, [pc, #168]	; (8008fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efc:	0a5b      	lsrs	r3, r3, #9
 8008efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f02:	ee07 3a90 	vmov	s15, r3
 8008f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f12:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f1e:	ee17 2a90 	vmov	r2, s15
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008f26:	4b1f      	ldr	r3, [pc, #124]	; (8008fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2a:	0c1b      	lsrs	r3, r3, #16
 8008f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f30:	ee07 3a90 	vmov	s15, r3
 8008f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f40:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f4c:	ee17 2a90 	vmov	r2, s15
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008f54:	4b13      	ldr	r3, [pc, #76]	; (8008fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f58:	0e1b      	lsrs	r3, r3, #24
 8008f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f5e:	ee07 3a90 	vmov	s15, r3
 8008f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f7a:	ee17 2a90 	vmov	r2, s15
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008f82:	e008      	b.n	8008f96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	609a      	str	r2, [r3, #8]
}
 8008f96:	bf00      	nop
 8008f98:	3724      	adds	r7, #36	; 0x24
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	58024400 	.word	0x58024400
 8008fa8:	03d09000 	.word	0x03d09000
 8008fac:	46000000 	.word	0x46000000
 8008fb0:	4c742400 	.word	0x4c742400
 8008fb4:	4a742400 	.word	0x4a742400
 8008fb8:	4af42400 	.word	0x4af42400

08008fbc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b089      	sub	sp, #36	; 0x24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fc4:	4ba0      	ldr	r3, [pc, #640]	; (8009248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc8:	f003 0303 	and.w	r3, r3, #3
 8008fcc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008fce:	4b9e      	ldr	r3, [pc, #632]	; (8009248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd2:	091b      	lsrs	r3, r3, #4
 8008fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fd8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008fda:	4b9b      	ldr	r3, [pc, #620]	; (8009248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008fe4:	4b98      	ldr	r3, [pc, #608]	; (8009248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe8:	08db      	lsrs	r3, r3, #3
 8008fea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fee:	693a      	ldr	r2, [r7, #16]
 8008ff0:	fb02 f303 	mul.w	r3, r2, r3
 8008ff4:	ee07 3a90 	vmov	s15, r3
 8008ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ffc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 8111 	beq.w	800922a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	2b02      	cmp	r3, #2
 800900c:	f000 8083 	beq.w	8009116 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	2b02      	cmp	r3, #2
 8009014:	f200 80a1 	bhi.w	800915a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d003      	beq.n	8009026 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d056      	beq.n	80090d2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009024:	e099      	b.n	800915a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009026:	4b88      	ldr	r3, [pc, #544]	; (8009248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0320 	and.w	r3, r3, #32
 800902e:	2b00      	cmp	r3, #0
 8009030:	d02d      	beq.n	800908e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009032:	4b85      	ldr	r3, [pc, #532]	; (8009248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	08db      	lsrs	r3, r3, #3
 8009038:	f003 0303 	and.w	r3, r3, #3
 800903c:	4a83      	ldr	r2, [pc, #524]	; (800924c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800903e:	fa22 f303 	lsr.w	r3, r2, r3
 8009042:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	ee07 3a90 	vmov	s15, r3
 800904a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	ee07 3a90 	vmov	s15, r3
 8009054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009058:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800905c:	4b7a      	ldr	r3, [pc, #488]	; (8009248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800905e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009064:	ee07 3a90 	vmov	s15, r3
 8009068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800906c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009070:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009250 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009074:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009078:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800907c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009080:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009088:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800908c:	e087      	b.n	800919e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	ee07 3a90 	vmov	s15, r3
 8009094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009098:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009254 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800909c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090a0:	4b69      	ldr	r3, [pc, #420]	; (8009248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090a8:	ee07 3a90 	vmov	s15, r3
 80090ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80090b4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009250 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090d0:	e065      	b.n	800919e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	ee07 3a90 	vmov	s15, r3
 80090d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090dc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009258 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80090e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090e4:	4b58      	ldr	r3, [pc, #352]	; (8009248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ec:	ee07 3a90 	vmov	s15, r3
 80090f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80090f8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009250 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009100:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009104:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009108:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800910c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009110:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009114:	e043      	b.n	800919e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	ee07 3a90 	vmov	s15, r3
 800911c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009120:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800925c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009124:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009128:	4b47      	ldr	r3, [pc, #284]	; (8009248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800912a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009130:	ee07 3a90 	vmov	s15, r3
 8009134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009138:	ed97 6a03 	vldr	s12, [r7, #12]
 800913c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009250 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009140:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009144:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009148:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800914c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009154:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009158:	e021      	b.n	800919e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	ee07 3a90 	vmov	s15, r3
 8009160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009164:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009254 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009168:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800916c:	4b36      	ldr	r3, [pc, #216]	; (8009248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800916e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009174:	ee07 3a90 	vmov	s15, r3
 8009178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800917c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009180:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009250 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009184:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009188:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800918c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009190:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009198:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800919c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800919e:	4b2a      	ldr	r3, [pc, #168]	; (8009248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a2:	0a5b      	lsrs	r3, r3, #9
 80091a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091a8:	ee07 3a90 	vmov	s15, r3
 80091ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80091bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091c4:	ee17 2a90 	vmov	r2, s15
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80091cc:	4b1e      	ldr	r3, [pc, #120]	; (8009248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d0:	0c1b      	lsrs	r3, r3, #16
 80091d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091d6:	ee07 3a90 	vmov	s15, r3
 80091da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80091ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091f2:	ee17 2a90 	vmov	r2, s15
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80091fa:	4b13      	ldr	r3, [pc, #76]	; (8009248 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091fe:	0e1b      	lsrs	r3, r3, #24
 8009200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009204:	ee07 3a90 	vmov	s15, r3
 8009208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800920c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009210:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009214:	edd7 6a07 	vldr	s13, [r7, #28]
 8009218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800921c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009220:	ee17 2a90 	vmov	r2, s15
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009228:	e008      	b.n	800923c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	609a      	str	r2, [r3, #8]
}
 800923c:	bf00      	nop
 800923e:	3724      	adds	r7, #36	; 0x24
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr
 8009248:	58024400 	.word	0x58024400
 800924c:	03d09000 	.word	0x03d09000
 8009250:	46000000 	.word	0x46000000
 8009254:	4c742400 	.word	0x4c742400
 8009258:	4a742400 	.word	0x4a742400
 800925c:	4af42400 	.word	0x4af42400

08009260 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800926e:	4b53      	ldr	r3, [pc, #332]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 8009270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009272:	f003 0303 	and.w	r3, r3, #3
 8009276:	2b03      	cmp	r3, #3
 8009278:	d101      	bne.n	800927e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e099      	b.n	80093b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800927e:	4b4f      	ldr	r3, [pc, #316]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a4e      	ldr	r2, [pc, #312]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 8009284:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800928a:	f7f8 fa21 	bl	80016d0 <HAL_GetTick>
 800928e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009290:	e008      	b.n	80092a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009292:	f7f8 fa1d 	bl	80016d0 <HAL_GetTick>
 8009296:	4602      	mov	r2, r0
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	1ad3      	subs	r3, r2, r3
 800929c:	2b02      	cmp	r3, #2
 800929e:	d901      	bls.n	80092a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80092a0:	2303      	movs	r3, #3
 80092a2:	e086      	b.n	80093b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80092a4:	4b45      	ldr	r3, [pc, #276]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d1f0      	bne.n	8009292 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80092b0:	4b42      	ldr	r3, [pc, #264]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 80092b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	031b      	lsls	r3, r3, #12
 80092be:	493f      	ldr	r1, [pc, #252]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 80092c0:	4313      	orrs	r3, r2
 80092c2:	628b      	str	r3, [r1, #40]	; 0x28
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	3b01      	subs	r3, #1
 80092ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	3b01      	subs	r3, #1
 80092d4:	025b      	lsls	r3, r3, #9
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	431a      	orrs	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	3b01      	subs	r3, #1
 80092e0:	041b      	lsls	r3, r3, #16
 80092e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80092e6:	431a      	orrs	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	3b01      	subs	r3, #1
 80092ee:	061b      	lsls	r3, r3, #24
 80092f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80092f4:	4931      	ldr	r1, [pc, #196]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80092fa:	4b30      	ldr	r3, [pc, #192]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 80092fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	695b      	ldr	r3, [r3, #20]
 8009306:	492d      	ldr	r1, [pc, #180]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 8009308:	4313      	orrs	r3, r2
 800930a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800930c:	4b2b      	ldr	r3, [pc, #172]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 800930e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009310:	f023 0220 	bic.w	r2, r3, #32
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	4928      	ldr	r1, [pc, #160]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 800931a:	4313      	orrs	r3, r2
 800931c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800931e:	4b27      	ldr	r3, [pc, #156]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 8009320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009322:	4a26      	ldr	r2, [pc, #152]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 8009324:	f023 0310 	bic.w	r3, r3, #16
 8009328:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800932a:	4b24      	ldr	r3, [pc, #144]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 800932c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800932e:	4b24      	ldr	r3, [pc, #144]	; (80093c0 <RCCEx_PLL2_Config+0x160>)
 8009330:	4013      	ands	r3, r2
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	69d2      	ldr	r2, [r2, #28]
 8009336:	00d2      	lsls	r2, r2, #3
 8009338:	4920      	ldr	r1, [pc, #128]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 800933a:	4313      	orrs	r3, r2
 800933c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800933e:	4b1f      	ldr	r3, [pc, #124]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 8009340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009342:	4a1e      	ldr	r2, [pc, #120]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 8009344:	f043 0310 	orr.w	r3, r3, #16
 8009348:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d106      	bne.n	800935e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009350:	4b1a      	ldr	r3, [pc, #104]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 8009352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009354:	4a19      	ldr	r2, [pc, #100]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 8009356:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800935a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800935c:	e00f      	b.n	800937e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d106      	bne.n	8009372 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009364:	4b15      	ldr	r3, [pc, #84]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 8009366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009368:	4a14      	ldr	r2, [pc, #80]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 800936a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800936e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009370:	e005      	b.n	800937e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009372:	4b12      	ldr	r3, [pc, #72]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 8009374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009376:	4a11      	ldr	r2, [pc, #68]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 8009378:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800937c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800937e:	4b0f      	ldr	r3, [pc, #60]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a0e      	ldr	r2, [pc, #56]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 8009384:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009388:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800938a:	f7f8 f9a1 	bl	80016d0 <HAL_GetTick>
 800938e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009390:	e008      	b.n	80093a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009392:	f7f8 f99d 	bl	80016d0 <HAL_GetTick>
 8009396:	4602      	mov	r2, r0
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	2b02      	cmp	r3, #2
 800939e:	d901      	bls.n	80093a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80093a0:	2303      	movs	r3, #3
 80093a2:	e006      	b.n	80093b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80093a4:	4b05      	ldr	r3, [pc, #20]	; (80093bc <RCCEx_PLL2_Config+0x15c>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d0f0      	beq.n	8009392 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	58024400 	.word	0x58024400
 80093c0:	ffff0007 	.word	0xffff0007

080093c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093ce:	2300      	movs	r3, #0
 80093d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80093d2:	4b53      	ldr	r3, [pc, #332]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 80093d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d6:	f003 0303 	and.w	r3, r3, #3
 80093da:	2b03      	cmp	r3, #3
 80093dc:	d101      	bne.n	80093e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e099      	b.n	8009516 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80093e2:	4b4f      	ldr	r3, [pc, #316]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a4e      	ldr	r2, [pc, #312]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 80093e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093ee:	f7f8 f96f 	bl	80016d0 <HAL_GetTick>
 80093f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80093f4:	e008      	b.n	8009408 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80093f6:	f7f8 f96b 	bl	80016d0 <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	2b02      	cmp	r3, #2
 8009402:	d901      	bls.n	8009408 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009404:	2303      	movs	r3, #3
 8009406:	e086      	b.n	8009516 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009408:	4b45      	ldr	r3, [pc, #276]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1f0      	bne.n	80093f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009414:	4b42      	ldr	r3, [pc, #264]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 8009416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009418:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	051b      	lsls	r3, r3, #20
 8009422:	493f      	ldr	r1, [pc, #252]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 8009424:	4313      	orrs	r3, r2
 8009426:	628b      	str	r3, [r1, #40]	; 0x28
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	3b01      	subs	r3, #1
 800942e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	3b01      	subs	r3, #1
 8009438:	025b      	lsls	r3, r3, #9
 800943a:	b29b      	uxth	r3, r3
 800943c:	431a      	orrs	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	3b01      	subs	r3, #1
 8009444:	041b      	lsls	r3, r3, #16
 8009446:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800944a:	431a      	orrs	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	3b01      	subs	r3, #1
 8009452:	061b      	lsls	r3, r3, #24
 8009454:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009458:	4931      	ldr	r1, [pc, #196]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 800945a:	4313      	orrs	r3, r2
 800945c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800945e:	4b30      	ldr	r3, [pc, #192]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 8009460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009462:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	695b      	ldr	r3, [r3, #20]
 800946a:	492d      	ldr	r1, [pc, #180]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 800946c:	4313      	orrs	r3, r2
 800946e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009470:	4b2b      	ldr	r3, [pc, #172]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 8009472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009474:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	4928      	ldr	r1, [pc, #160]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 800947e:	4313      	orrs	r3, r2
 8009480:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009482:	4b27      	ldr	r3, [pc, #156]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 8009484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009486:	4a26      	ldr	r2, [pc, #152]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 8009488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800948c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800948e:	4b24      	ldr	r3, [pc, #144]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 8009490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009492:	4b24      	ldr	r3, [pc, #144]	; (8009524 <RCCEx_PLL3_Config+0x160>)
 8009494:	4013      	ands	r3, r2
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	69d2      	ldr	r2, [r2, #28]
 800949a:	00d2      	lsls	r2, r2, #3
 800949c:	4920      	ldr	r1, [pc, #128]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 800949e:	4313      	orrs	r3, r2
 80094a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80094a2:	4b1f      	ldr	r3, [pc, #124]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 80094a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a6:	4a1e      	ldr	r2, [pc, #120]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 80094a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d106      	bne.n	80094c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80094b4:	4b1a      	ldr	r3, [pc, #104]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 80094b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b8:	4a19      	ldr	r2, [pc, #100]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 80094ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80094be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80094c0:	e00f      	b.n	80094e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d106      	bne.n	80094d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80094c8:	4b15      	ldr	r3, [pc, #84]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 80094ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094cc:	4a14      	ldr	r2, [pc, #80]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 80094ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80094d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80094d4:	e005      	b.n	80094e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80094d6:	4b12      	ldr	r3, [pc, #72]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 80094d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094da:	4a11      	ldr	r2, [pc, #68]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 80094dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80094e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80094e2:	4b0f      	ldr	r3, [pc, #60]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a0e      	ldr	r2, [pc, #56]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 80094e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094ee:	f7f8 f8ef 	bl	80016d0 <HAL_GetTick>
 80094f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094f4:	e008      	b.n	8009508 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80094f6:	f7f8 f8eb 	bl	80016d0 <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	2b02      	cmp	r3, #2
 8009502:	d901      	bls.n	8009508 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009504:	2303      	movs	r3, #3
 8009506:	e006      	b.n	8009516 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009508:	4b05      	ldr	r3, [pc, #20]	; (8009520 <RCCEx_PLL3_Config+0x15c>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009510:	2b00      	cmp	r3, #0
 8009512:	d0f0      	beq.n	80094f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009514:	7bfb      	ldrb	r3, [r7, #15]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	58024400 	.word	0x58024400
 8009524:	ffff0007 	.word	0xffff0007

08009528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d101      	bne.n	800953a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	e049      	b.n	80095ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009540:	b2db      	uxtb	r3, r3
 8009542:	2b00      	cmp	r3, #0
 8009544:	d106      	bne.n	8009554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f7f7 fe70 	bl	8001234 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2202      	movs	r2, #2
 8009558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	3304      	adds	r3, #4
 8009564:	4619      	mov	r1, r3
 8009566:	4610      	mov	r0, r2
 8009568:	f000 fd48 	bl	8009ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
	...

080095d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d001      	beq.n	80095f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e04c      	b.n	800968a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2202      	movs	r2, #2
 80095f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a26      	ldr	r2, [pc, #152]	; (8009698 <HAL_TIM_Base_Start+0xc0>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d022      	beq.n	8009648 <HAL_TIM_Base_Start+0x70>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800960a:	d01d      	beq.n	8009648 <HAL_TIM_Base_Start+0x70>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a22      	ldr	r2, [pc, #136]	; (800969c <HAL_TIM_Base_Start+0xc4>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d018      	beq.n	8009648 <HAL_TIM_Base_Start+0x70>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a21      	ldr	r2, [pc, #132]	; (80096a0 <HAL_TIM_Base_Start+0xc8>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d013      	beq.n	8009648 <HAL_TIM_Base_Start+0x70>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a1f      	ldr	r2, [pc, #124]	; (80096a4 <HAL_TIM_Base_Start+0xcc>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d00e      	beq.n	8009648 <HAL_TIM_Base_Start+0x70>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a1e      	ldr	r2, [pc, #120]	; (80096a8 <HAL_TIM_Base_Start+0xd0>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d009      	beq.n	8009648 <HAL_TIM_Base_Start+0x70>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a1c      	ldr	r2, [pc, #112]	; (80096ac <HAL_TIM_Base_Start+0xd4>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d004      	beq.n	8009648 <HAL_TIM_Base_Start+0x70>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a1b      	ldr	r2, [pc, #108]	; (80096b0 <HAL_TIM_Base_Start+0xd8>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d115      	bne.n	8009674 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	689a      	ldr	r2, [r3, #8]
 800964e:	4b19      	ldr	r3, [pc, #100]	; (80096b4 <HAL_TIM_Base_Start+0xdc>)
 8009650:	4013      	ands	r3, r2
 8009652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2b06      	cmp	r3, #6
 8009658:	d015      	beq.n	8009686 <HAL_TIM_Base_Start+0xae>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009660:	d011      	beq.n	8009686 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f042 0201 	orr.w	r2, r2, #1
 8009670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009672:	e008      	b.n	8009686 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f042 0201 	orr.w	r2, r2, #1
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	e000      	b.n	8009688 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009686:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	3714      	adds	r7, #20
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	40010000 	.word	0x40010000
 800969c:	40000400 	.word	0x40000400
 80096a0:	40000800 	.word	0x40000800
 80096a4:	40000c00 	.word	0x40000c00
 80096a8:	40010400 	.word	0x40010400
 80096ac:	40001800 	.word	0x40001800
 80096b0:	40014000 	.word	0x40014000
 80096b4:	00010007 	.word	0x00010007

080096b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d001      	beq.n	80096d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	e054      	b.n	800977a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2202      	movs	r2, #2
 80096d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68da      	ldr	r2, [r3, #12]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f042 0201 	orr.w	r2, r2, #1
 80096e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a26      	ldr	r2, [pc, #152]	; (8009788 <HAL_TIM_Base_Start_IT+0xd0>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d022      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x80>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096fa:	d01d      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x80>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a22      	ldr	r2, [pc, #136]	; (800978c <HAL_TIM_Base_Start_IT+0xd4>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d018      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x80>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a21      	ldr	r2, [pc, #132]	; (8009790 <HAL_TIM_Base_Start_IT+0xd8>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d013      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x80>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a1f      	ldr	r2, [pc, #124]	; (8009794 <HAL_TIM_Base_Start_IT+0xdc>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d00e      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x80>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a1e      	ldr	r2, [pc, #120]	; (8009798 <HAL_TIM_Base_Start_IT+0xe0>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d009      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x80>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a1c      	ldr	r2, [pc, #112]	; (800979c <HAL_TIM_Base_Start_IT+0xe4>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d004      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x80>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a1b      	ldr	r2, [pc, #108]	; (80097a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d115      	bne.n	8009764 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	689a      	ldr	r2, [r3, #8]
 800973e:	4b19      	ldr	r3, [pc, #100]	; (80097a4 <HAL_TIM_Base_Start_IT+0xec>)
 8009740:	4013      	ands	r3, r2
 8009742:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2b06      	cmp	r3, #6
 8009748:	d015      	beq.n	8009776 <HAL_TIM_Base_Start_IT+0xbe>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009750:	d011      	beq.n	8009776 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f042 0201 	orr.w	r2, r2, #1
 8009760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009762:	e008      	b.n	8009776 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f042 0201 	orr.w	r2, r2, #1
 8009772:	601a      	str	r2, [r3, #0]
 8009774:	e000      	b.n	8009778 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009776:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	40010000 	.word	0x40010000
 800978c:	40000400 	.word	0x40000400
 8009790:	40000800 	.word	0x40000800
 8009794:	40000c00 	.word	0x40000c00
 8009798:	40010400 	.word	0x40010400
 800979c:	40001800 	.word	0x40001800
 80097a0:	40014000 	.word	0x40014000
 80097a4:	00010007 	.word	0x00010007

080097a8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d101      	bne.n	80097ba <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	e049      	b.n	800984e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d106      	bne.n	80097d4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f841 	bl	8009856 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2202      	movs	r2, #2
 80097d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	3304      	adds	r3, #4
 80097e4:	4619      	mov	r1, r3
 80097e6:	4610      	mov	r0, r2
 80097e8:	f000 fc08 	bl	8009ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009856:	b480      	push	{r7}
 8009858:	b083      	sub	sp, #12
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800985e:	bf00      	nop
 8009860:	370c      	adds	r7, #12
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
	...

0800986c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d109      	bne.n	8009890 <HAL_TIM_OC_Start+0x24>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009882:	b2db      	uxtb	r3, r3
 8009884:	2b01      	cmp	r3, #1
 8009886:	bf14      	ite	ne
 8009888:	2301      	movne	r3, #1
 800988a:	2300      	moveq	r3, #0
 800988c:	b2db      	uxtb	r3, r3
 800988e:	e03c      	b.n	800990a <HAL_TIM_OC_Start+0x9e>
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	2b04      	cmp	r3, #4
 8009894:	d109      	bne.n	80098aa <HAL_TIM_OC_Start+0x3e>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800989c:	b2db      	uxtb	r3, r3
 800989e:	2b01      	cmp	r3, #1
 80098a0:	bf14      	ite	ne
 80098a2:	2301      	movne	r3, #1
 80098a4:	2300      	moveq	r3, #0
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	e02f      	b.n	800990a <HAL_TIM_OC_Start+0x9e>
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	2b08      	cmp	r3, #8
 80098ae:	d109      	bne.n	80098c4 <HAL_TIM_OC_Start+0x58>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	bf14      	ite	ne
 80098bc:	2301      	movne	r3, #1
 80098be:	2300      	moveq	r3, #0
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	e022      	b.n	800990a <HAL_TIM_OC_Start+0x9e>
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	2b0c      	cmp	r3, #12
 80098c8:	d109      	bne.n	80098de <HAL_TIM_OC_Start+0x72>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	bf14      	ite	ne
 80098d6:	2301      	movne	r3, #1
 80098d8:	2300      	moveq	r3, #0
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	e015      	b.n	800990a <HAL_TIM_OC_Start+0x9e>
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	2b10      	cmp	r3, #16
 80098e2:	d109      	bne.n	80098f8 <HAL_TIM_OC_Start+0x8c>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	bf14      	ite	ne
 80098f0:	2301      	movne	r3, #1
 80098f2:	2300      	moveq	r3, #0
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	e008      	b.n	800990a <HAL_TIM_OC_Start+0x9e>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	2b01      	cmp	r3, #1
 8009902:	bf14      	ite	ne
 8009904:	2301      	movne	r3, #1
 8009906:	2300      	moveq	r3, #0
 8009908:	b2db      	uxtb	r3, r3
 800990a:	2b00      	cmp	r3, #0
 800990c:	d001      	beq.n	8009912 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	e0a1      	b.n	8009a56 <HAL_TIM_OC_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d104      	bne.n	8009922 <HAL_TIM_OC_Start+0xb6>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009920:	e023      	b.n	800996a <HAL_TIM_OC_Start+0xfe>
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	2b04      	cmp	r3, #4
 8009926:	d104      	bne.n	8009932 <HAL_TIM_OC_Start+0xc6>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2202      	movs	r2, #2
 800992c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009930:	e01b      	b.n	800996a <HAL_TIM_OC_Start+0xfe>
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	2b08      	cmp	r3, #8
 8009936:	d104      	bne.n	8009942 <HAL_TIM_OC_Start+0xd6>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2202      	movs	r2, #2
 800993c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009940:	e013      	b.n	800996a <HAL_TIM_OC_Start+0xfe>
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	2b0c      	cmp	r3, #12
 8009946:	d104      	bne.n	8009952 <HAL_TIM_OC_Start+0xe6>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2202      	movs	r2, #2
 800994c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009950:	e00b      	b.n	800996a <HAL_TIM_OC_Start+0xfe>
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	2b10      	cmp	r3, #16
 8009956:	d104      	bne.n	8009962 <HAL_TIM_OC_Start+0xf6>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2202      	movs	r2, #2
 800995c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009960:	e003      	b.n	800996a <HAL_TIM_OC_Start+0xfe>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2202      	movs	r2, #2
 8009966:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2201      	movs	r2, #1
 8009970:	6839      	ldr	r1, [r7, #0]
 8009972:	4618      	mov	r0, r3
 8009974:	f000 ff50 	bl	800a818 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a38      	ldr	r2, [pc, #224]	; (8009a60 <HAL_TIM_OC_Start+0x1f4>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d013      	beq.n	80099aa <HAL_TIM_OC_Start+0x13e>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a37      	ldr	r2, [pc, #220]	; (8009a64 <HAL_TIM_OC_Start+0x1f8>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d00e      	beq.n	80099aa <HAL_TIM_OC_Start+0x13e>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a35      	ldr	r2, [pc, #212]	; (8009a68 <HAL_TIM_OC_Start+0x1fc>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d009      	beq.n	80099aa <HAL_TIM_OC_Start+0x13e>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a34      	ldr	r2, [pc, #208]	; (8009a6c <HAL_TIM_OC_Start+0x200>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d004      	beq.n	80099aa <HAL_TIM_OC_Start+0x13e>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a32      	ldr	r2, [pc, #200]	; (8009a70 <HAL_TIM_OC_Start+0x204>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d101      	bne.n	80099ae <HAL_TIM_OC_Start+0x142>
 80099aa:	2301      	movs	r3, #1
 80099ac:	e000      	b.n	80099b0 <HAL_TIM_OC_Start+0x144>
 80099ae:	2300      	movs	r3, #0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d007      	beq.n	80099c4 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a25      	ldr	r2, [pc, #148]	; (8009a60 <HAL_TIM_OC_Start+0x1f4>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d022      	beq.n	8009a14 <HAL_TIM_OC_Start+0x1a8>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099d6:	d01d      	beq.n	8009a14 <HAL_TIM_OC_Start+0x1a8>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a25      	ldr	r2, [pc, #148]	; (8009a74 <HAL_TIM_OC_Start+0x208>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d018      	beq.n	8009a14 <HAL_TIM_OC_Start+0x1a8>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a24      	ldr	r2, [pc, #144]	; (8009a78 <HAL_TIM_OC_Start+0x20c>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d013      	beq.n	8009a14 <HAL_TIM_OC_Start+0x1a8>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a22      	ldr	r2, [pc, #136]	; (8009a7c <HAL_TIM_OC_Start+0x210>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d00e      	beq.n	8009a14 <HAL_TIM_OC_Start+0x1a8>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a1a      	ldr	r2, [pc, #104]	; (8009a64 <HAL_TIM_OC_Start+0x1f8>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d009      	beq.n	8009a14 <HAL_TIM_OC_Start+0x1a8>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a1e      	ldr	r2, [pc, #120]	; (8009a80 <HAL_TIM_OC_Start+0x214>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d004      	beq.n	8009a14 <HAL_TIM_OC_Start+0x1a8>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a16      	ldr	r2, [pc, #88]	; (8009a68 <HAL_TIM_OC_Start+0x1fc>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d115      	bne.n	8009a40 <HAL_TIM_OC_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	689a      	ldr	r2, [r3, #8]
 8009a1a:	4b1a      	ldr	r3, [pc, #104]	; (8009a84 <HAL_TIM_OC_Start+0x218>)
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2b06      	cmp	r3, #6
 8009a24:	d015      	beq.n	8009a52 <HAL_TIM_OC_Start+0x1e6>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a2c:	d011      	beq.n	8009a52 <HAL_TIM_OC_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f042 0201 	orr.w	r2, r2, #1
 8009a3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a3e:	e008      	b.n	8009a52 <HAL_TIM_OC_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f042 0201 	orr.w	r2, r2, #1
 8009a4e:	601a      	str	r2, [r3, #0]
 8009a50:	e000      	b.n	8009a54 <HAL_TIM_OC_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	40010000 	.word	0x40010000
 8009a64:	40010400 	.word	0x40010400
 8009a68:	40014000 	.word	0x40014000
 8009a6c:	40014400 	.word	0x40014400
 8009a70:	40014800 	.word	0x40014800
 8009a74:	40000400 	.word	0x40000400
 8009a78:	40000800 	.word	0x40000800
 8009a7c:	40000c00 	.word	0x40000c00
 8009a80:	40001800 	.word	0x40001800
 8009a84:	00010007 	.word	0x00010007

08009a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	f003 0302 	and.w	r3, r3, #2
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d122      	bne.n	8009ae4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	f003 0302 	and.w	r3, r3, #2
 8009aa8:	2b02      	cmp	r3, #2
 8009aaa:	d11b      	bne.n	8009ae4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f06f 0202 	mvn.w	r2, #2
 8009ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	699b      	ldr	r3, [r3, #24]
 8009ac2:	f003 0303 	and.w	r3, r3, #3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d003      	beq.n	8009ad2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 fa78 	bl	8009fc0 <HAL_TIM_IC_CaptureCallback>
 8009ad0:	e005      	b.n	8009ade <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 fa6a 	bl	8009fac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fa7b 	bl	8009fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	f003 0304 	and.w	r3, r3, #4
 8009aee:	2b04      	cmp	r3, #4
 8009af0:	d122      	bne.n	8009b38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	f003 0304 	and.w	r3, r3, #4
 8009afc:	2b04      	cmp	r3, #4
 8009afe:	d11b      	bne.n	8009b38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f06f 0204 	mvn.w	r2, #4
 8009b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2202      	movs	r2, #2
 8009b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	699b      	ldr	r3, [r3, #24]
 8009b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d003      	beq.n	8009b26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fa4e 	bl	8009fc0 <HAL_TIM_IC_CaptureCallback>
 8009b24:	e005      	b.n	8009b32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 fa40 	bl	8009fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 fa51 	bl	8009fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	f003 0308 	and.w	r3, r3, #8
 8009b42:	2b08      	cmp	r3, #8
 8009b44:	d122      	bne.n	8009b8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	f003 0308 	and.w	r3, r3, #8
 8009b50:	2b08      	cmp	r3, #8
 8009b52:	d11b      	bne.n	8009b8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f06f 0208 	mvn.w	r2, #8
 8009b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2204      	movs	r2, #4
 8009b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	69db      	ldr	r3, [r3, #28]
 8009b6a:	f003 0303 	and.w	r3, r3, #3
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d003      	beq.n	8009b7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fa24 	bl	8009fc0 <HAL_TIM_IC_CaptureCallback>
 8009b78:	e005      	b.n	8009b86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 fa16 	bl	8009fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fa27 	bl	8009fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	f003 0310 	and.w	r3, r3, #16
 8009b96:	2b10      	cmp	r3, #16
 8009b98:	d122      	bne.n	8009be0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	f003 0310 	and.w	r3, r3, #16
 8009ba4:	2b10      	cmp	r3, #16
 8009ba6:	d11b      	bne.n	8009be0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f06f 0210 	mvn.w	r2, #16
 8009bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2208      	movs	r2, #8
 8009bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	69db      	ldr	r3, [r3, #28]
 8009bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d003      	beq.n	8009bce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f9fa 	bl	8009fc0 <HAL_TIM_IC_CaptureCallback>
 8009bcc:	e005      	b.n	8009bda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f9ec 	bl	8009fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 f9fd 	bl	8009fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	691b      	ldr	r3, [r3, #16]
 8009be6:	f003 0301 	and.w	r3, r3, #1
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d10e      	bne.n	8009c0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	f003 0301 	and.w	r3, r3, #1
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d107      	bne.n	8009c0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f06f 0201 	mvn.w	r2, #1
 8009c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7f7 fa3c 	bl	8001084 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c16:	2b80      	cmp	r3, #128	; 0x80
 8009c18:	d10e      	bne.n	8009c38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c24:	2b80      	cmp	r3, #128	; 0x80
 8009c26:	d107      	bne.n	8009c38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 ff4e 	bl	800aad4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c46:	d10e      	bne.n	8009c66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c52:	2b80      	cmp	r3, #128	; 0x80
 8009c54:	d107      	bne.n	8009c66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 ff41 	bl	800aae8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c70:	2b40      	cmp	r3, #64	; 0x40
 8009c72:	d10e      	bne.n	8009c92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c7e:	2b40      	cmp	r3, #64	; 0x40
 8009c80:	d107      	bne.n	8009c92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 f9ab 	bl	8009fe8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	691b      	ldr	r3, [r3, #16]
 8009c98:	f003 0320 	and.w	r3, r3, #32
 8009c9c:	2b20      	cmp	r3, #32
 8009c9e:	d10e      	bne.n	8009cbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	f003 0320 	and.w	r3, r3, #32
 8009caa:	2b20      	cmp	r3, #32
 8009cac:	d107      	bne.n	8009cbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f06f 0220 	mvn.w	r2, #32
 8009cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 ff01 	bl	800aac0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cbe:	bf00      	nop
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
	...

08009cc8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d101      	bne.n	8009ce6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8009ce2:	2302      	movs	r3, #2
 8009ce4:	e066      	b.n	8009db4 <HAL_TIM_OC_ConfigChannel+0xec>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b14      	cmp	r3, #20
 8009cf2:	d857      	bhi.n	8009da4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009cf4:	a201      	add	r2, pc, #4	; (adr r2, 8009cfc <HAL_TIM_OC_ConfigChannel+0x34>)
 8009cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfa:	bf00      	nop
 8009cfc:	08009d51 	.word	0x08009d51
 8009d00:	08009da5 	.word	0x08009da5
 8009d04:	08009da5 	.word	0x08009da5
 8009d08:	08009da5 	.word	0x08009da5
 8009d0c:	08009d5f 	.word	0x08009d5f
 8009d10:	08009da5 	.word	0x08009da5
 8009d14:	08009da5 	.word	0x08009da5
 8009d18:	08009da5 	.word	0x08009da5
 8009d1c:	08009d6d 	.word	0x08009d6d
 8009d20:	08009da5 	.word	0x08009da5
 8009d24:	08009da5 	.word	0x08009da5
 8009d28:	08009da5 	.word	0x08009da5
 8009d2c:	08009d7b 	.word	0x08009d7b
 8009d30:	08009da5 	.word	0x08009da5
 8009d34:	08009da5 	.word	0x08009da5
 8009d38:	08009da5 	.word	0x08009da5
 8009d3c:	08009d89 	.word	0x08009d89
 8009d40:	08009da5 	.word	0x08009da5
 8009d44:	08009da5 	.word	0x08009da5
 8009d48:	08009da5 	.word	0x08009da5
 8009d4c:	08009d97 	.word	0x08009d97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68b9      	ldr	r1, [r7, #8]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 f9ea 	bl	800a130 <TIM_OC1_SetConfig>
      break;
 8009d5c:	e025      	b.n	8009daa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	68b9      	ldr	r1, [r7, #8]
 8009d64:	4618      	mov	r0, r3
 8009d66:	f000 fa73 	bl	800a250 <TIM_OC2_SetConfig>
      break;
 8009d6a:	e01e      	b.n	8009daa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	68b9      	ldr	r1, [r7, #8]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f000 faf6 	bl	800a364 <TIM_OC3_SetConfig>
      break;
 8009d78:	e017      	b.n	8009daa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	68b9      	ldr	r1, [r7, #8]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 fb77 	bl	800a474 <TIM_OC4_SetConfig>
      break;
 8009d86:	e010      	b.n	8009daa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	68b9      	ldr	r1, [r7, #8]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 fbda 	bl	800a548 <TIM_OC5_SetConfig>
      break;
 8009d94:	e009      	b.n	8009daa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68b9      	ldr	r1, [r7, #8]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f000 fc37 	bl	800a610 <TIM_OC6_SetConfig>
      break;
 8009da2:	e002      	b.n	8009daa <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	75fb      	strb	r3, [r7, #23]
      break;
 8009da8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3718      	adds	r7, #24
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d101      	bne.n	8009dd8 <HAL_TIM_ConfigClockSource+0x1c>
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	e0dc      	b.n	8009f92 <HAL_TIM_ConfigClockSource+0x1d6>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2202      	movs	r2, #2
 8009de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	4b6a      	ldr	r3, [pc, #424]	; (8009f9c <HAL_TIM_ConfigClockSource+0x1e0>)
 8009df4:	4013      	ands	r3, r2
 8009df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009dfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	68ba      	ldr	r2, [r7, #8]
 8009e06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a64      	ldr	r2, [pc, #400]	; (8009fa0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	f000 80a9 	beq.w	8009f66 <HAL_TIM_ConfigClockSource+0x1aa>
 8009e14:	4a62      	ldr	r2, [pc, #392]	; (8009fa0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	f200 80ae 	bhi.w	8009f78 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e1c:	4a61      	ldr	r2, [pc, #388]	; (8009fa4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	f000 80a1 	beq.w	8009f66 <HAL_TIM_ConfigClockSource+0x1aa>
 8009e24:	4a5f      	ldr	r2, [pc, #380]	; (8009fa4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	f200 80a6 	bhi.w	8009f78 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e2c:	4a5e      	ldr	r2, [pc, #376]	; (8009fa8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	f000 8099 	beq.w	8009f66 <HAL_TIM_ConfigClockSource+0x1aa>
 8009e34:	4a5c      	ldr	r2, [pc, #368]	; (8009fa8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	f200 809e 	bhi.w	8009f78 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e3c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009e40:	f000 8091 	beq.w	8009f66 <HAL_TIM_ConfigClockSource+0x1aa>
 8009e44:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009e48:	f200 8096 	bhi.w	8009f78 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e50:	f000 8089 	beq.w	8009f66 <HAL_TIM_ConfigClockSource+0x1aa>
 8009e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e58:	f200 808e 	bhi.w	8009f78 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e60:	d03e      	beq.n	8009ee0 <HAL_TIM_ConfigClockSource+0x124>
 8009e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e66:	f200 8087 	bhi.w	8009f78 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e6e:	f000 8086 	beq.w	8009f7e <HAL_TIM_ConfigClockSource+0x1c2>
 8009e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e76:	d87f      	bhi.n	8009f78 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e78:	2b70      	cmp	r3, #112	; 0x70
 8009e7a:	d01a      	beq.n	8009eb2 <HAL_TIM_ConfigClockSource+0xf6>
 8009e7c:	2b70      	cmp	r3, #112	; 0x70
 8009e7e:	d87b      	bhi.n	8009f78 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e80:	2b60      	cmp	r3, #96	; 0x60
 8009e82:	d050      	beq.n	8009f26 <HAL_TIM_ConfigClockSource+0x16a>
 8009e84:	2b60      	cmp	r3, #96	; 0x60
 8009e86:	d877      	bhi.n	8009f78 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e88:	2b50      	cmp	r3, #80	; 0x50
 8009e8a:	d03c      	beq.n	8009f06 <HAL_TIM_ConfigClockSource+0x14a>
 8009e8c:	2b50      	cmp	r3, #80	; 0x50
 8009e8e:	d873      	bhi.n	8009f78 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e90:	2b40      	cmp	r3, #64	; 0x40
 8009e92:	d058      	beq.n	8009f46 <HAL_TIM_ConfigClockSource+0x18a>
 8009e94:	2b40      	cmp	r3, #64	; 0x40
 8009e96:	d86f      	bhi.n	8009f78 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e98:	2b30      	cmp	r3, #48	; 0x30
 8009e9a:	d064      	beq.n	8009f66 <HAL_TIM_ConfigClockSource+0x1aa>
 8009e9c:	2b30      	cmp	r3, #48	; 0x30
 8009e9e:	d86b      	bhi.n	8009f78 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ea0:	2b20      	cmp	r3, #32
 8009ea2:	d060      	beq.n	8009f66 <HAL_TIM_ConfigClockSource+0x1aa>
 8009ea4:	2b20      	cmp	r3, #32
 8009ea6:	d867      	bhi.n	8009f78 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d05c      	beq.n	8009f66 <HAL_TIM_ConfigClockSource+0x1aa>
 8009eac:	2b10      	cmp	r3, #16
 8009eae:	d05a      	beq.n	8009f66 <HAL_TIM_ConfigClockSource+0x1aa>
 8009eb0:	e062      	b.n	8009f78 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6818      	ldr	r0, [r3, #0]
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	6899      	ldr	r1, [r3, #8]
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	685a      	ldr	r2, [r3, #4]
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	f000 fc89 	bl	800a7d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009ed4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	609a      	str	r2, [r3, #8]
      break;
 8009ede:	e04f      	b.n	8009f80 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6818      	ldr	r0, [r3, #0]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	6899      	ldr	r1, [r3, #8]
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	685a      	ldr	r2, [r3, #4]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	f000 fc72 	bl	800a7d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	689a      	ldr	r2, [r3, #8]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f02:	609a      	str	r2, [r3, #8]
      break;
 8009f04:	e03c      	b.n	8009f80 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6818      	ldr	r0, [r3, #0]
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	6859      	ldr	r1, [r3, #4]
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	461a      	mov	r2, r3
 8009f14:	f000 fbe2 	bl	800a6dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2150      	movs	r1, #80	; 0x50
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f000 fc3c 	bl	800a79c <TIM_ITRx_SetConfig>
      break;
 8009f24:	e02c      	b.n	8009f80 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6818      	ldr	r0, [r3, #0]
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	6859      	ldr	r1, [r3, #4]
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	461a      	mov	r2, r3
 8009f34:	f000 fc01 	bl	800a73a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2160      	movs	r1, #96	; 0x60
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 fc2c 	bl	800a79c <TIM_ITRx_SetConfig>
      break;
 8009f44:	e01c      	b.n	8009f80 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6818      	ldr	r0, [r3, #0]
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	6859      	ldr	r1, [r3, #4]
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	461a      	mov	r2, r3
 8009f54:	f000 fbc2 	bl	800a6dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2140      	movs	r1, #64	; 0x40
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f000 fc1c 	bl	800a79c <TIM_ITRx_SetConfig>
      break;
 8009f64:	e00c      	b.n	8009f80 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	4610      	mov	r0, r2
 8009f72:	f000 fc13 	bl	800a79c <TIM_ITRx_SetConfig>
      break;
 8009f76:	e003      	b.n	8009f80 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8009f7c:	e000      	b.n	8009f80 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009f7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	ffceff88 	.word	0xffceff88
 8009fa0:	00100040 	.word	0x00100040
 8009fa4:	00100030 	.word	0x00100030
 8009fa8:	00100020 	.word	0x00100020

08009fac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009fb4:	bf00      	nop
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009fc8:	bf00      	nop
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a40      	ldr	r2, [pc, #256]	; (800a110 <TIM_Base_SetConfig+0x114>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d013      	beq.n	800a03c <TIM_Base_SetConfig+0x40>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a01a:	d00f      	beq.n	800a03c <TIM_Base_SetConfig+0x40>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a3d      	ldr	r2, [pc, #244]	; (800a114 <TIM_Base_SetConfig+0x118>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d00b      	beq.n	800a03c <TIM_Base_SetConfig+0x40>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a3c      	ldr	r2, [pc, #240]	; (800a118 <TIM_Base_SetConfig+0x11c>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d007      	beq.n	800a03c <TIM_Base_SetConfig+0x40>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a3b      	ldr	r2, [pc, #236]	; (800a11c <TIM_Base_SetConfig+0x120>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d003      	beq.n	800a03c <TIM_Base_SetConfig+0x40>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a3a      	ldr	r2, [pc, #232]	; (800a120 <TIM_Base_SetConfig+0x124>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d108      	bne.n	800a04e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	68fa      	ldr	r2, [r7, #12]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a2f      	ldr	r2, [pc, #188]	; (800a110 <TIM_Base_SetConfig+0x114>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d01f      	beq.n	800a096 <TIM_Base_SetConfig+0x9a>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a05c:	d01b      	beq.n	800a096 <TIM_Base_SetConfig+0x9a>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a2c      	ldr	r2, [pc, #176]	; (800a114 <TIM_Base_SetConfig+0x118>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d017      	beq.n	800a096 <TIM_Base_SetConfig+0x9a>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a2b      	ldr	r2, [pc, #172]	; (800a118 <TIM_Base_SetConfig+0x11c>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d013      	beq.n	800a096 <TIM_Base_SetConfig+0x9a>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a2a      	ldr	r2, [pc, #168]	; (800a11c <TIM_Base_SetConfig+0x120>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d00f      	beq.n	800a096 <TIM_Base_SetConfig+0x9a>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a29      	ldr	r2, [pc, #164]	; (800a120 <TIM_Base_SetConfig+0x124>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d00b      	beq.n	800a096 <TIM_Base_SetConfig+0x9a>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a28      	ldr	r2, [pc, #160]	; (800a124 <TIM_Base_SetConfig+0x128>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d007      	beq.n	800a096 <TIM_Base_SetConfig+0x9a>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4a27      	ldr	r2, [pc, #156]	; (800a128 <TIM_Base_SetConfig+0x12c>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d003      	beq.n	800a096 <TIM_Base_SetConfig+0x9a>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4a26      	ldr	r2, [pc, #152]	; (800a12c <TIM_Base_SetConfig+0x130>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d108      	bne.n	800a0a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a09c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	695b      	ldr	r3, [r3, #20]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	689a      	ldr	r2, [r3, #8]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a10      	ldr	r2, [pc, #64]	; (800a110 <TIM_Base_SetConfig+0x114>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d00f      	beq.n	800a0f4 <TIM_Base_SetConfig+0xf8>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a12      	ldr	r2, [pc, #72]	; (800a120 <TIM_Base_SetConfig+0x124>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d00b      	beq.n	800a0f4 <TIM_Base_SetConfig+0xf8>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a11      	ldr	r2, [pc, #68]	; (800a124 <TIM_Base_SetConfig+0x128>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d007      	beq.n	800a0f4 <TIM_Base_SetConfig+0xf8>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a10      	ldr	r2, [pc, #64]	; (800a128 <TIM_Base_SetConfig+0x12c>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d003      	beq.n	800a0f4 <TIM_Base_SetConfig+0xf8>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a0f      	ldr	r2, [pc, #60]	; (800a12c <TIM_Base_SetConfig+0x130>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d103      	bne.n	800a0fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	691a      	ldr	r2, [r3, #16]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2201      	movs	r2, #1
 800a100:	615a      	str	r2, [r3, #20]
}
 800a102:	bf00      	nop
 800a104:	3714      	adds	r7, #20
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	40010000 	.word	0x40010000
 800a114:	40000400 	.word	0x40000400
 800a118:	40000800 	.word	0x40000800
 800a11c:	40000c00 	.word	0x40000c00
 800a120:	40010400 	.word	0x40010400
 800a124:	40014000 	.word	0x40014000
 800a128:	40014400 	.word	0x40014400
 800a12c:	40014800 	.word	0x40014800

0800a130 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a130:	b480      	push	{r7}
 800a132:	b087      	sub	sp, #28
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a1b      	ldr	r3, [r3, #32]
 800a13e:	f023 0201 	bic.w	r2, r3, #1
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a1b      	ldr	r3, [r3, #32]
 800a14a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	4b37      	ldr	r3, [pc, #220]	; (800a238 <TIM_OC1_SetConfig+0x108>)
 800a15c:	4013      	ands	r3, r2
 800a15e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f023 0303 	bic.w	r3, r3, #3
 800a166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	4313      	orrs	r3, r2
 800a170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	f023 0302 	bic.w	r3, r3, #2
 800a178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	697a      	ldr	r2, [r7, #20]
 800a180:	4313      	orrs	r3, r2
 800a182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a2d      	ldr	r2, [pc, #180]	; (800a23c <TIM_OC1_SetConfig+0x10c>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d00f      	beq.n	800a1ac <TIM_OC1_SetConfig+0x7c>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	4a2c      	ldr	r2, [pc, #176]	; (800a240 <TIM_OC1_SetConfig+0x110>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d00b      	beq.n	800a1ac <TIM_OC1_SetConfig+0x7c>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4a2b      	ldr	r2, [pc, #172]	; (800a244 <TIM_OC1_SetConfig+0x114>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d007      	beq.n	800a1ac <TIM_OC1_SetConfig+0x7c>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a2a      	ldr	r2, [pc, #168]	; (800a248 <TIM_OC1_SetConfig+0x118>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d003      	beq.n	800a1ac <TIM_OC1_SetConfig+0x7c>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a29      	ldr	r2, [pc, #164]	; (800a24c <TIM_OC1_SetConfig+0x11c>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d10c      	bne.n	800a1c6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	f023 0308 	bic.w	r3, r3, #8
 800a1b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	697a      	ldr	r2, [r7, #20]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	f023 0304 	bic.w	r3, r3, #4
 800a1c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4a1c      	ldr	r2, [pc, #112]	; (800a23c <TIM_OC1_SetConfig+0x10c>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d00f      	beq.n	800a1ee <TIM_OC1_SetConfig+0xbe>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4a1b      	ldr	r2, [pc, #108]	; (800a240 <TIM_OC1_SetConfig+0x110>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d00b      	beq.n	800a1ee <TIM_OC1_SetConfig+0xbe>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a1a      	ldr	r2, [pc, #104]	; (800a244 <TIM_OC1_SetConfig+0x114>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d007      	beq.n	800a1ee <TIM_OC1_SetConfig+0xbe>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a19      	ldr	r2, [pc, #100]	; (800a248 <TIM_OC1_SetConfig+0x118>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d003      	beq.n	800a1ee <TIM_OC1_SetConfig+0xbe>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a18      	ldr	r2, [pc, #96]	; (800a24c <TIM_OC1_SetConfig+0x11c>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d111      	bne.n	800a212 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	695b      	ldr	r3, [r3, #20]
 800a202:	693a      	ldr	r2, [r7, #16]
 800a204:	4313      	orrs	r3, r2
 800a206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	699b      	ldr	r3, [r3, #24]
 800a20c:	693a      	ldr	r2, [r7, #16]
 800a20e:	4313      	orrs	r3, r2
 800a210:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	693a      	ldr	r2, [r7, #16]
 800a216:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	685a      	ldr	r2, [r3, #4]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	697a      	ldr	r2, [r7, #20]
 800a22a:	621a      	str	r2, [r3, #32]
}
 800a22c:	bf00      	nop
 800a22e:	371c      	adds	r7, #28
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr
 800a238:	fffeff8f 	.word	0xfffeff8f
 800a23c:	40010000 	.word	0x40010000
 800a240:	40010400 	.word	0x40010400
 800a244:	40014000 	.word	0x40014000
 800a248:	40014400 	.word	0x40014400
 800a24c:	40014800 	.word	0x40014800

0800a250 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a250:	b480      	push	{r7}
 800a252:	b087      	sub	sp, #28
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a1b      	ldr	r3, [r3, #32]
 800a25e:	f023 0210 	bic.w	r2, r3, #16
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a1b      	ldr	r3, [r3, #32]
 800a26a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	699b      	ldr	r3, [r3, #24]
 800a276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	4b34      	ldr	r3, [pc, #208]	; (800a34c <TIM_OC2_SetConfig+0xfc>)
 800a27c:	4013      	ands	r3, r2
 800a27e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	021b      	lsls	r3, r3, #8
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	4313      	orrs	r3, r2
 800a292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	f023 0320 	bic.w	r3, r3, #32
 800a29a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	011b      	lsls	r3, r3, #4
 800a2a2:	697a      	ldr	r2, [r7, #20]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a29      	ldr	r2, [pc, #164]	; (800a350 <TIM_OC2_SetConfig+0x100>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d003      	beq.n	800a2b8 <TIM_OC2_SetConfig+0x68>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a28      	ldr	r2, [pc, #160]	; (800a354 <TIM_OC2_SetConfig+0x104>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d10d      	bne.n	800a2d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	011b      	lsls	r3, r3, #4
 800a2c6:	697a      	ldr	r2, [r7, #20]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	4a1e      	ldr	r2, [pc, #120]	; (800a350 <TIM_OC2_SetConfig+0x100>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d00f      	beq.n	800a2fc <TIM_OC2_SetConfig+0xac>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4a1d      	ldr	r2, [pc, #116]	; (800a354 <TIM_OC2_SetConfig+0x104>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d00b      	beq.n	800a2fc <TIM_OC2_SetConfig+0xac>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	4a1c      	ldr	r2, [pc, #112]	; (800a358 <TIM_OC2_SetConfig+0x108>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d007      	beq.n	800a2fc <TIM_OC2_SetConfig+0xac>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a1b      	ldr	r2, [pc, #108]	; (800a35c <TIM_OC2_SetConfig+0x10c>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d003      	beq.n	800a2fc <TIM_OC2_SetConfig+0xac>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a1a      	ldr	r2, [pc, #104]	; (800a360 <TIM_OC2_SetConfig+0x110>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d113      	bne.n	800a324 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a302:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a30a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	695b      	ldr	r3, [r3, #20]
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	693a      	ldr	r2, [r7, #16]
 800a314:	4313      	orrs	r3, r2
 800a316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	699b      	ldr	r3, [r3, #24]
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	4313      	orrs	r3, r2
 800a322:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	693a      	ldr	r2, [r7, #16]
 800a328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	685a      	ldr	r2, [r3, #4]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	697a      	ldr	r2, [r7, #20]
 800a33c:	621a      	str	r2, [r3, #32]
}
 800a33e:	bf00      	nop
 800a340:	371c      	adds	r7, #28
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	feff8fff 	.word	0xfeff8fff
 800a350:	40010000 	.word	0x40010000
 800a354:	40010400 	.word	0x40010400
 800a358:	40014000 	.word	0x40014000
 800a35c:	40014400 	.word	0x40014400
 800a360:	40014800 	.word	0x40014800

0800a364 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a364:	b480      	push	{r7}
 800a366:	b087      	sub	sp, #28
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	69db      	ldr	r3, [r3, #28]
 800a38a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	4b33      	ldr	r3, [pc, #204]	; (800a45c <TIM_OC3_SetConfig+0xf8>)
 800a390:	4013      	ands	r3, r2
 800a392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f023 0303 	bic.w	r3, r3, #3
 800a39a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a3ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	021b      	lsls	r3, r3, #8
 800a3b4:	697a      	ldr	r2, [r7, #20]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4a28      	ldr	r2, [pc, #160]	; (800a460 <TIM_OC3_SetConfig+0xfc>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d003      	beq.n	800a3ca <TIM_OC3_SetConfig+0x66>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	4a27      	ldr	r2, [pc, #156]	; (800a464 <TIM_OC3_SetConfig+0x100>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d10d      	bne.n	800a3e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	021b      	lsls	r3, r3, #8
 800a3d8:	697a      	ldr	r2, [r7, #20]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a1d      	ldr	r2, [pc, #116]	; (800a460 <TIM_OC3_SetConfig+0xfc>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d00f      	beq.n	800a40e <TIM_OC3_SetConfig+0xaa>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a1c      	ldr	r2, [pc, #112]	; (800a464 <TIM_OC3_SetConfig+0x100>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d00b      	beq.n	800a40e <TIM_OC3_SetConfig+0xaa>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a1b      	ldr	r2, [pc, #108]	; (800a468 <TIM_OC3_SetConfig+0x104>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d007      	beq.n	800a40e <TIM_OC3_SetConfig+0xaa>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a1a      	ldr	r2, [pc, #104]	; (800a46c <TIM_OC3_SetConfig+0x108>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d003      	beq.n	800a40e <TIM_OC3_SetConfig+0xaa>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a19      	ldr	r2, [pc, #100]	; (800a470 <TIM_OC3_SetConfig+0x10c>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d113      	bne.n	800a436 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a41c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	695b      	ldr	r3, [r3, #20]
 800a422:	011b      	lsls	r3, r3, #4
 800a424:	693a      	ldr	r2, [r7, #16]
 800a426:	4313      	orrs	r3, r2
 800a428:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	011b      	lsls	r3, r3, #4
 800a430:	693a      	ldr	r2, [r7, #16]
 800a432:	4313      	orrs	r3, r2
 800a434:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	693a      	ldr	r2, [r7, #16]
 800a43a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	685a      	ldr	r2, [r3, #4]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	697a      	ldr	r2, [r7, #20]
 800a44e:	621a      	str	r2, [r3, #32]
}
 800a450:	bf00      	nop
 800a452:	371c      	adds	r7, #28
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr
 800a45c:	fffeff8f 	.word	0xfffeff8f
 800a460:	40010000 	.word	0x40010000
 800a464:	40010400 	.word	0x40010400
 800a468:	40014000 	.word	0x40014000
 800a46c:	40014400 	.word	0x40014400
 800a470:	40014800 	.word	0x40014800

0800a474 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a474:	b480      	push	{r7}
 800a476:	b087      	sub	sp, #28
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a1b      	ldr	r3, [r3, #32]
 800a482:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a1b      	ldr	r3, [r3, #32]
 800a48e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	69db      	ldr	r3, [r3, #28]
 800a49a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	4b24      	ldr	r3, [pc, #144]	; (800a530 <TIM_OC4_SetConfig+0xbc>)
 800a4a0:	4013      	ands	r3, r2
 800a4a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	021b      	lsls	r3, r3, #8
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	031b      	lsls	r3, r3, #12
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	4a19      	ldr	r2, [pc, #100]	; (800a534 <TIM_OC4_SetConfig+0xc0>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d00f      	beq.n	800a4f4 <TIM_OC4_SetConfig+0x80>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	4a18      	ldr	r2, [pc, #96]	; (800a538 <TIM_OC4_SetConfig+0xc4>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d00b      	beq.n	800a4f4 <TIM_OC4_SetConfig+0x80>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4a17      	ldr	r2, [pc, #92]	; (800a53c <TIM_OC4_SetConfig+0xc8>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d007      	beq.n	800a4f4 <TIM_OC4_SetConfig+0x80>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	4a16      	ldr	r2, [pc, #88]	; (800a540 <TIM_OC4_SetConfig+0xcc>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d003      	beq.n	800a4f4 <TIM_OC4_SetConfig+0x80>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	4a15      	ldr	r2, [pc, #84]	; (800a544 <TIM_OC4_SetConfig+0xd0>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d109      	bne.n	800a508 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	695b      	ldr	r3, [r3, #20]
 800a500:	019b      	lsls	r3, r3, #6
 800a502:	697a      	ldr	r2, [r7, #20]
 800a504:	4313      	orrs	r3, r2
 800a506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	697a      	ldr	r2, [r7, #20]
 800a50c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	685a      	ldr	r2, [r3, #4]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	693a      	ldr	r2, [r7, #16]
 800a520:	621a      	str	r2, [r3, #32]
}
 800a522:	bf00      	nop
 800a524:	371c      	adds	r7, #28
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop
 800a530:	feff8fff 	.word	0xfeff8fff
 800a534:	40010000 	.word	0x40010000
 800a538:	40010400 	.word	0x40010400
 800a53c:	40014000 	.word	0x40014000
 800a540:	40014400 	.word	0x40014400
 800a544:	40014800 	.word	0x40014800

0800a548 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a548:	b480      	push	{r7}
 800a54a:	b087      	sub	sp, #28
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a1b      	ldr	r3, [r3, #32]
 800a556:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a1b      	ldr	r3, [r3, #32]
 800a562:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a56e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	4b21      	ldr	r3, [pc, #132]	; (800a5f8 <TIM_OC5_SetConfig+0xb0>)
 800a574:	4013      	ands	r3, r2
 800a576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	68fa      	ldr	r2, [r7, #12]
 800a57e:	4313      	orrs	r3, r2
 800a580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a588:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	041b      	lsls	r3, r3, #16
 800a590:	693a      	ldr	r2, [r7, #16]
 800a592:	4313      	orrs	r3, r2
 800a594:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a18      	ldr	r2, [pc, #96]	; (800a5fc <TIM_OC5_SetConfig+0xb4>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d00f      	beq.n	800a5be <TIM_OC5_SetConfig+0x76>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a17      	ldr	r2, [pc, #92]	; (800a600 <TIM_OC5_SetConfig+0xb8>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d00b      	beq.n	800a5be <TIM_OC5_SetConfig+0x76>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a16      	ldr	r2, [pc, #88]	; (800a604 <TIM_OC5_SetConfig+0xbc>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d007      	beq.n	800a5be <TIM_OC5_SetConfig+0x76>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a15      	ldr	r2, [pc, #84]	; (800a608 <TIM_OC5_SetConfig+0xc0>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d003      	beq.n	800a5be <TIM_OC5_SetConfig+0x76>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4a14      	ldr	r2, [pc, #80]	; (800a60c <TIM_OC5_SetConfig+0xc4>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d109      	bne.n	800a5d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	695b      	ldr	r3, [r3, #20]
 800a5ca:	021b      	lsls	r3, r3, #8
 800a5cc:	697a      	ldr	r2, [r7, #20]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	697a      	ldr	r2, [r7, #20]
 800a5d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	685a      	ldr	r2, [r3, #4]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	693a      	ldr	r2, [r7, #16]
 800a5ea:	621a      	str	r2, [r3, #32]
}
 800a5ec:	bf00      	nop
 800a5ee:	371c      	adds	r7, #28
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr
 800a5f8:	fffeff8f 	.word	0xfffeff8f
 800a5fc:	40010000 	.word	0x40010000
 800a600:	40010400 	.word	0x40010400
 800a604:	40014000 	.word	0x40014000
 800a608:	40014400 	.word	0x40014400
 800a60c:	40014800 	.word	0x40014800

0800a610 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a610:	b480      	push	{r7}
 800a612:	b087      	sub	sp, #28
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a1b      	ldr	r3, [r3, #32]
 800a61e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a1b      	ldr	r3, [r3, #32]
 800a62a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	4b22      	ldr	r3, [pc, #136]	; (800a6c4 <TIM_OC6_SetConfig+0xb4>)
 800a63c:	4013      	ands	r3, r2
 800a63e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	021b      	lsls	r3, r3, #8
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	4313      	orrs	r3, r2
 800a64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a652:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	051b      	lsls	r3, r3, #20
 800a65a:	693a      	ldr	r2, [r7, #16]
 800a65c:	4313      	orrs	r3, r2
 800a65e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4a19      	ldr	r2, [pc, #100]	; (800a6c8 <TIM_OC6_SetConfig+0xb8>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d00f      	beq.n	800a688 <TIM_OC6_SetConfig+0x78>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4a18      	ldr	r2, [pc, #96]	; (800a6cc <TIM_OC6_SetConfig+0xbc>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d00b      	beq.n	800a688 <TIM_OC6_SetConfig+0x78>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	4a17      	ldr	r2, [pc, #92]	; (800a6d0 <TIM_OC6_SetConfig+0xc0>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d007      	beq.n	800a688 <TIM_OC6_SetConfig+0x78>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	4a16      	ldr	r2, [pc, #88]	; (800a6d4 <TIM_OC6_SetConfig+0xc4>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d003      	beq.n	800a688 <TIM_OC6_SetConfig+0x78>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	4a15      	ldr	r2, [pc, #84]	; (800a6d8 <TIM_OC6_SetConfig+0xc8>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d109      	bne.n	800a69c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a68e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	695b      	ldr	r3, [r3, #20]
 800a694:	029b      	lsls	r3, r3, #10
 800a696:	697a      	ldr	r2, [r7, #20]
 800a698:	4313      	orrs	r3, r2
 800a69a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	697a      	ldr	r2, [r7, #20]
 800a6a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	693a      	ldr	r2, [r7, #16]
 800a6b4:	621a      	str	r2, [r3, #32]
}
 800a6b6:	bf00      	nop
 800a6b8:	371c      	adds	r7, #28
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	feff8fff 	.word	0xfeff8fff
 800a6c8:	40010000 	.word	0x40010000
 800a6cc:	40010400 	.word	0x40010400
 800a6d0:	40014000 	.word	0x40014000
 800a6d4:	40014400 	.word	0x40014400
 800a6d8:	40014800 	.word	0x40014800

0800a6dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b087      	sub	sp, #28
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	6a1b      	ldr	r3, [r3, #32]
 800a6ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	6a1b      	ldr	r3, [r3, #32]
 800a6f2:	f023 0201 	bic.w	r2, r3, #1
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	699b      	ldr	r3, [r3, #24]
 800a6fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	011b      	lsls	r3, r3, #4
 800a70c:	693a      	ldr	r2, [r7, #16]
 800a70e:	4313      	orrs	r3, r2
 800a710:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	f023 030a 	bic.w	r3, r3, #10
 800a718:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a71a:	697a      	ldr	r2, [r7, #20]
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	4313      	orrs	r3, r2
 800a720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	693a      	ldr	r2, [r7, #16]
 800a726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	697a      	ldr	r2, [r7, #20]
 800a72c:	621a      	str	r2, [r3, #32]
}
 800a72e:	bf00      	nop
 800a730:	371c      	adds	r7, #28
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr

0800a73a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a73a:	b480      	push	{r7}
 800a73c:	b087      	sub	sp, #28
 800a73e:	af00      	add	r7, sp, #0
 800a740:	60f8      	str	r0, [r7, #12]
 800a742:	60b9      	str	r1, [r7, #8]
 800a744:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	f023 0210 	bic.w	r2, r3, #16
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	699b      	ldr	r3, [r3, #24]
 800a756:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6a1b      	ldr	r3, [r3, #32]
 800a75c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a764:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	031b      	lsls	r3, r3, #12
 800a76a:	697a      	ldr	r2, [r7, #20]
 800a76c:	4313      	orrs	r3, r2
 800a76e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a776:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	011b      	lsls	r3, r3, #4
 800a77c:	693a      	ldr	r2, [r7, #16]
 800a77e:	4313      	orrs	r3, r2
 800a780:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	697a      	ldr	r2, [r7, #20]
 800a786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	693a      	ldr	r2, [r7, #16]
 800a78c:	621a      	str	r2, [r3, #32]
}
 800a78e:	bf00      	nop
 800a790:	371c      	adds	r7, #28
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
	...

0800a79c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	4b09      	ldr	r3, [pc, #36]	; (800a7d4 <TIM_ITRx_SetConfig+0x38>)
 800a7b0:	4013      	ands	r3, r2
 800a7b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a7b4:	683a      	ldr	r2, [r7, #0]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	f043 0307 	orr.w	r3, r3, #7
 800a7be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	609a      	str	r2, [r3, #8]
}
 800a7c6:	bf00      	nop
 800a7c8:	3714      	adds	r7, #20
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	ffcfff8f 	.word	0xffcfff8f

0800a7d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b087      	sub	sp, #28
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]
 800a7e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	689b      	ldr	r3, [r3, #8]
 800a7ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a7f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	021a      	lsls	r2, r3, #8
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	431a      	orrs	r2, r3
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	697a      	ldr	r2, [r7, #20]
 800a802:	4313      	orrs	r3, r2
 800a804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	697a      	ldr	r2, [r7, #20]
 800a80a:	609a      	str	r2, [r3, #8]
}
 800a80c:	bf00      	nop
 800a80e:	371c      	adds	r7, #28
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a818:	b480      	push	{r7}
 800a81a:	b087      	sub	sp, #28
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	f003 031f 	and.w	r3, r3, #31
 800a82a:	2201      	movs	r2, #1
 800a82c:	fa02 f303 	lsl.w	r3, r2, r3
 800a830:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	6a1a      	ldr	r2, [r3, #32]
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	43db      	mvns	r3, r3
 800a83a:	401a      	ands	r2, r3
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6a1a      	ldr	r2, [r3, #32]
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	f003 031f 	and.w	r3, r3, #31
 800a84a:	6879      	ldr	r1, [r7, #4]
 800a84c:	fa01 f303 	lsl.w	r3, r1, r3
 800a850:	431a      	orrs	r2, r3
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	621a      	str	r2, [r3, #32]
}
 800a856:	bf00      	nop
 800a858:	371c      	adds	r7, #28
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
	...

0800a864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a864:	b480      	push	{r7}
 800a866:	b085      	sub	sp, #20
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a874:	2b01      	cmp	r3, #1
 800a876:	d101      	bne.n	800a87c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a878:	2302      	movs	r3, #2
 800a87a:	e06d      	b.n	800a958 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2201      	movs	r2, #1
 800a880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2202      	movs	r2, #2
 800a888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a30      	ldr	r2, [pc, #192]	; (800a964 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d004      	beq.n	800a8b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a2f      	ldr	r2, [pc, #188]	; (800a968 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d108      	bne.n	800a8c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a8b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	68fa      	ldr	r2, [r7, #12]
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a20      	ldr	r2, [pc, #128]	; (800a964 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d022      	beq.n	800a92c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ee:	d01d      	beq.n	800a92c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a1d      	ldr	r2, [pc, #116]	; (800a96c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d018      	beq.n	800a92c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a1c      	ldr	r2, [pc, #112]	; (800a970 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d013      	beq.n	800a92c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a1a      	ldr	r2, [pc, #104]	; (800a974 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d00e      	beq.n	800a92c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4a15      	ldr	r2, [pc, #84]	; (800a968 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d009      	beq.n	800a92c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a16      	ldr	r2, [pc, #88]	; (800a978 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d004      	beq.n	800a92c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a15      	ldr	r2, [pc, #84]	; (800a97c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d10c      	bne.n	800a946 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a932:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	68ba      	ldr	r2, [r7, #8]
 800a93a:	4313      	orrs	r3, r2
 800a93c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68ba      	ldr	r2, [r7, #8]
 800a944:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2201      	movs	r2, #1
 800a94a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a956:	2300      	movs	r3, #0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3714      	adds	r7, #20
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr
 800a964:	40010000 	.word	0x40010000
 800a968:	40010400 	.word	0x40010400
 800a96c:	40000400 	.word	0x40000400
 800a970:	40000800 	.word	0x40000800
 800a974:	40000c00 	.word	0x40000c00
 800a978:	40001800 	.word	0x40001800
 800a97c:	40014000 	.word	0x40014000

0800a980 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a98a:	2300      	movs	r3, #0
 800a98c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a994:	2b01      	cmp	r3, #1
 800a996:	d101      	bne.n	800a99c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a998:	2302      	movs	r3, #2
 800a99a:	e087      	b.n	800aaac <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	68db      	ldr	r3, [r3, #12]
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	695b      	ldr	r3, [r3, #20]
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa02:	4313      	orrs	r3, r2
 800aa04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	699b      	ldr	r3, [r3, #24]
 800aa10:	041b      	lsls	r3, r3, #16
 800aa12:	4313      	orrs	r3, r2
 800aa14:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a27      	ldr	r2, [pc, #156]	; (800aab8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d004      	beq.n	800aa2a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4a25      	ldr	r2, [pc, #148]	; (800aabc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d106      	bne.n	800aa38 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	69db      	ldr	r3, [r3, #28]
 800aa34:	4313      	orrs	r3, r2
 800aa36:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a1e      	ldr	r2, [pc, #120]	; (800aab8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d004      	beq.n	800aa4c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a1d      	ldr	r2, [pc, #116]	; (800aabc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d126      	bne.n	800aa9a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa56:	051b      	lsls	r3, r3, #20
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	4313      	orrs	r3, r2
 800aa68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa74:	4313      	orrs	r3, r2
 800aa76:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a0e      	ldr	r2, [pc, #56]	; (800aab8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d004      	beq.n	800aa8c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a0d      	ldr	r2, [pc, #52]	; (800aabc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d106      	bne.n	800aa9a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa96:	4313      	orrs	r3, r2
 800aa98:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	40010000 	.word	0x40010000
 800aabc:	40010400 	.word	0x40010400

0800aac0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aac8:	bf00      	nop
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aadc:	bf00      	nop
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d101      	bne.n	800ab0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e042      	b.n	800ab94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d106      	bne.n	800ab26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f7f6 fbe5 	bl	80012f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2224      	movs	r2, #36	; 0x24
 800ab2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f022 0201 	bic.w	r2, r2, #1
 800ab3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 f82c 	bl	800ab9c <UART_SetConfig>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d101      	bne.n	800ab4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e022      	b.n	800ab94 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d002      	beq.n	800ab5c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 fe8c 	bl	800b874 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	685a      	ldr	r2, [r3, #4]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	689a      	ldr	r2, [r3, #8]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f042 0201 	orr.w	r2, r2, #1
 800ab8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f000 ff13 	bl	800b9b8 <UART_CheckIdleState>
 800ab92:	4603      	mov	r3, r0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aba0:	b092      	sub	sp, #72	; 0x48
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aba6:	2300      	movs	r3, #0
 800aba8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	689a      	ldr	r2, [r3, #8]
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	691b      	ldr	r3, [r3, #16]
 800abb4:	431a      	orrs	r2, r3
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	695b      	ldr	r3, [r3, #20]
 800abba:	431a      	orrs	r2, r3
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	69db      	ldr	r3, [r3, #28]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	4bbe      	ldr	r3, [pc, #760]	; (800aec4 <UART_SetConfig+0x328>)
 800abcc:	4013      	ands	r3, r2
 800abce:	697a      	ldr	r2, [r7, #20]
 800abd0:	6812      	ldr	r2, [r2, #0]
 800abd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800abd4:	430b      	orrs	r3, r1
 800abd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	68da      	ldr	r2, [r3, #12]
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	430a      	orrs	r2, r1
 800abec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	699b      	ldr	r3, [r3, #24]
 800abf2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4ab3      	ldr	r2, [pc, #716]	; (800aec8 <UART_SetConfig+0x32c>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d004      	beq.n	800ac08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac04:	4313      	orrs	r3, r2
 800ac06:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	689a      	ldr	r2, [r3, #8]
 800ac0e:	4baf      	ldr	r3, [pc, #700]	; (800aecc <UART_SetConfig+0x330>)
 800ac10:	4013      	ands	r3, r2
 800ac12:	697a      	ldr	r2, [r7, #20]
 800ac14:	6812      	ldr	r2, [r2, #0]
 800ac16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac18:	430b      	orrs	r3, r1
 800ac1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac22:	f023 010f 	bic.w	r1, r3, #15
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	430a      	orrs	r2, r1
 800ac30:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4aa6      	ldr	r2, [pc, #664]	; (800aed0 <UART_SetConfig+0x334>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d177      	bne.n	800ad2c <UART_SetConfig+0x190>
 800ac3c:	4ba5      	ldr	r3, [pc, #660]	; (800aed4 <UART_SetConfig+0x338>)
 800ac3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac44:	2b28      	cmp	r3, #40	; 0x28
 800ac46:	d86d      	bhi.n	800ad24 <UART_SetConfig+0x188>
 800ac48:	a201      	add	r2, pc, #4	; (adr r2, 800ac50 <UART_SetConfig+0xb4>)
 800ac4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac4e:	bf00      	nop
 800ac50:	0800acf5 	.word	0x0800acf5
 800ac54:	0800ad25 	.word	0x0800ad25
 800ac58:	0800ad25 	.word	0x0800ad25
 800ac5c:	0800ad25 	.word	0x0800ad25
 800ac60:	0800ad25 	.word	0x0800ad25
 800ac64:	0800ad25 	.word	0x0800ad25
 800ac68:	0800ad25 	.word	0x0800ad25
 800ac6c:	0800ad25 	.word	0x0800ad25
 800ac70:	0800acfd 	.word	0x0800acfd
 800ac74:	0800ad25 	.word	0x0800ad25
 800ac78:	0800ad25 	.word	0x0800ad25
 800ac7c:	0800ad25 	.word	0x0800ad25
 800ac80:	0800ad25 	.word	0x0800ad25
 800ac84:	0800ad25 	.word	0x0800ad25
 800ac88:	0800ad25 	.word	0x0800ad25
 800ac8c:	0800ad25 	.word	0x0800ad25
 800ac90:	0800ad05 	.word	0x0800ad05
 800ac94:	0800ad25 	.word	0x0800ad25
 800ac98:	0800ad25 	.word	0x0800ad25
 800ac9c:	0800ad25 	.word	0x0800ad25
 800aca0:	0800ad25 	.word	0x0800ad25
 800aca4:	0800ad25 	.word	0x0800ad25
 800aca8:	0800ad25 	.word	0x0800ad25
 800acac:	0800ad25 	.word	0x0800ad25
 800acb0:	0800ad0d 	.word	0x0800ad0d
 800acb4:	0800ad25 	.word	0x0800ad25
 800acb8:	0800ad25 	.word	0x0800ad25
 800acbc:	0800ad25 	.word	0x0800ad25
 800acc0:	0800ad25 	.word	0x0800ad25
 800acc4:	0800ad25 	.word	0x0800ad25
 800acc8:	0800ad25 	.word	0x0800ad25
 800accc:	0800ad25 	.word	0x0800ad25
 800acd0:	0800ad15 	.word	0x0800ad15
 800acd4:	0800ad25 	.word	0x0800ad25
 800acd8:	0800ad25 	.word	0x0800ad25
 800acdc:	0800ad25 	.word	0x0800ad25
 800ace0:	0800ad25 	.word	0x0800ad25
 800ace4:	0800ad25 	.word	0x0800ad25
 800ace8:	0800ad25 	.word	0x0800ad25
 800acec:	0800ad25 	.word	0x0800ad25
 800acf0:	0800ad1d 	.word	0x0800ad1d
 800acf4:	2301      	movs	r3, #1
 800acf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acfa:	e326      	b.n	800b34a <UART_SetConfig+0x7ae>
 800acfc:	2304      	movs	r3, #4
 800acfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad02:	e322      	b.n	800b34a <UART_SetConfig+0x7ae>
 800ad04:	2308      	movs	r3, #8
 800ad06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad0a:	e31e      	b.n	800b34a <UART_SetConfig+0x7ae>
 800ad0c:	2310      	movs	r3, #16
 800ad0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad12:	e31a      	b.n	800b34a <UART_SetConfig+0x7ae>
 800ad14:	2320      	movs	r3, #32
 800ad16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad1a:	e316      	b.n	800b34a <UART_SetConfig+0x7ae>
 800ad1c:	2340      	movs	r3, #64	; 0x40
 800ad1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad22:	e312      	b.n	800b34a <UART_SetConfig+0x7ae>
 800ad24:	2380      	movs	r3, #128	; 0x80
 800ad26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad2a:	e30e      	b.n	800b34a <UART_SetConfig+0x7ae>
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a69      	ldr	r2, [pc, #420]	; (800aed8 <UART_SetConfig+0x33c>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d130      	bne.n	800ad98 <UART_SetConfig+0x1fc>
 800ad36:	4b67      	ldr	r3, [pc, #412]	; (800aed4 <UART_SetConfig+0x338>)
 800ad38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad3a:	f003 0307 	and.w	r3, r3, #7
 800ad3e:	2b05      	cmp	r3, #5
 800ad40:	d826      	bhi.n	800ad90 <UART_SetConfig+0x1f4>
 800ad42:	a201      	add	r2, pc, #4	; (adr r2, 800ad48 <UART_SetConfig+0x1ac>)
 800ad44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad48:	0800ad61 	.word	0x0800ad61
 800ad4c:	0800ad69 	.word	0x0800ad69
 800ad50:	0800ad71 	.word	0x0800ad71
 800ad54:	0800ad79 	.word	0x0800ad79
 800ad58:	0800ad81 	.word	0x0800ad81
 800ad5c:	0800ad89 	.word	0x0800ad89
 800ad60:	2300      	movs	r3, #0
 800ad62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad66:	e2f0      	b.n	800b34a <UART_SetConfig+0x7ae>
 800ad68:	2304      	movs	r3, #4
 800ad6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad6e:	e2ec      	b.n	800b34a <UART_SetConfig+0x7ae>
 800ad70:	2308      	movs	r3, #8
 800ad72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad76:	e2e8      	b.n	800b34a <UART_SetConfig+0x7ae>
 800ad78:	2310      	movs	r3, #16
 800ad7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad7e:	e2e4      	b.n	800b34a <UART_SetConfig+0x7ae>
 800ad80:	2320      	movs	r3, #32
 800ad82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad86:	e2e0      	b.n	800b34a <UART_SetConfig+0x7ae>
 800ad88:	2340      	movs	r3, #64	; 0x40
 800ad8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad8e:	e2dc      	b.n	800b34a <UART_SetConfig+0x7ae>
 800ad90:	2380      	movs	r3, #128	; 0x80
 800ad92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad96:	e2d8      	b.n	800b34a <UART_SetConfig+0x7ae>
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a4f      	ldr	r2, [pc, #316]	; (800aedc <UART_SetConfig+0x340>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d130      	bne.n	800ae04 <UART_SetConfig+0x268>
 800ada2:	4b4c      	ldr	r3, [pc, #304]	; (800aed4 <UART_SetConfig+0x338>)
 800ada4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ada6:	f003 0307 	and.w	r3, r3, #7
 800adaa:	2b05      	cmp	r3, #5
 800adac:	d826      	bhi.n	800adfc <UART_SetConfig+0x260>
 800adae:	a201      	add	r2, pc, #4	; (adr r2, 800adb4 <UART_SetConfig+0x218>)
 800adb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb4:	0800adcd 	.word	0x0800adcd
 800adb8:	0800add5 	.word	0x0800add5
 800adbc:	0800addd 	.word	0x0800addd
 800adc0:	0800ade5 	.word	0x0800ade5
 800adc4:	0800aded 	.word	0x0800aded
 800adc8:	0800adf5 	.word	0x0800adf5
 800adcc:	2300      	movs	r3, #0
 800adce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800add2:	e2ba      	b.n	800b34a <UART_SetConfig+0x7ae>
 800add4:	2304      	movs	r3, #4
 800add6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adda:	e2b6      	b.n	800b34a <UART_SetConfig+0x7ae>
 800addc:	2308      	movs	r3, #8
 800adde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ade2:	e2b2      	b.n	800b34a <UART_SetConfig+0x7ae>
 800ade4:	2310      	movs	r3, #16
 800ade6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adea:	e2ae      	b.n	800b34a <UART_SetConfig+0x7ae>
 800adec:	2320      	movs	r3, #32
 800adee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adf2:	e2aa      	b.n	800b34a <UART_SetConfig+0x7ae>
 800adf4:	2340      	movs	r3, #64	; 0x40
 800adf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adfa:	e2a6      	b.n	800b34a <UART_SetConfig+0x7ae>
 800adfc:	2380      	movs	r3, #128	; 0x80
 800adfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae02:	e2a2      	b.n	800b34a <UART_SetConfig+0x7ae>
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a35      	ldr	r2, [pc, #212]	; (800aee0 <UART_SetConfig+0x344>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d130      	bne.n	800ae70 <UART_SetConfig+0x2d4>
 800ae0e:	4b31      	ldr	r3, [pc, #196]	; (800aed4 <UART_SetConfig+0x338>)
 800ae10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae12:	f003 0307 	and.w	r3, r3, #7
 800ae16:	2b05      	cmp	r3, #5
 800ae18:	d826      	bhi.n	800ae68 <UART_SetConfig+0x2cc>
 800ae1a:	a201      	add	r2, pc, #4	; (adr r2, 800ae20 <UART_SetConfig+0x284>)
 800ae1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae20:	0800ae39 	.word	0x0800ae39
 800ae24:	0800ae41 	.word	0x0800ae41
 800ae28:	0800ae49 	.word	0x0800ae49
 800ae2c:	0800ae51 	.word	0x0800ae51
 800ae30:	0800ae59 	.word	0x0800ae59
 800ae34:	0800ae61 	.word	0x0800ae61
 800ae38:	2300      	movs	r3, #0
 800ae3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae3e:	e284      	b.n	800b34a <UART_SetConfig+0x7ae>
 800ae40:	2304      	movs	r3, #4
 800ae42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae46:	e280      	b.n	800b34a <UART_SetConfig+0x7ae>
 800ae48:	2308      	movs	r3, #8
 800ae4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae4e:	e27c      	b.n	800b34a <UART_SetConfig+0x7ae>
 800ae50:	2310      	movs	r3, #16
 800ae52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae56:	e278      	b.n	800b34a <UART_SetConfig+0x7ae>
 800ae58:	2320      	movs	r3, #32
 800ae5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae5e:	e274      	b.n	800b34a <UART_SetConfig+0x7ae>
 800ae60:	2340      	movs	r3, #64	; 0x40
 800ae62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae66:	e270      	b.n	800b34a <UART_SetConfig+0x7ae>
 800ae68:	2380      	movs	r3, #128	; 0x80
 800ae6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae6e:	e26c      	b.n	800b34a <UART_SetConfig+0x7ae>
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a1b      	ldr	r2, [pc, #108]	; (800aee4 <UART_SetConfig+0x348>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d142      	bne.n	800af00 <UART_SetConfig+0x364>
 800ae7a:	4b16      	ldr	r3, [pc, #88]	; (800aed4 <UART_SetConfig+0x338>)
 800ae7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae7e:	f003 0307 	and.w	r3, r3, #7
 800ae82:	2b05      	cmp	r3, #5
 800ae84:	d838      	bhi.n	800aef8 <UART_SetConfig+0x35c>
 800ae86:	a201      	add	r2, pc, #4	; (adr r2, 800ae8c <UART_SetConfig+0x2f0>)
 800ae88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae8c:	0800aea5 	.word	0x0800aea5
 800ae90:	0800aead 	.word	0x0800aead
 800ae94:	0800aeb5 	.word	0x0800aeb5
 800ae98:	0800aebd 	.word	0x0800aebd
 800ae9c:	0800aee9 	.word	0x0800aee9
 800aea0:	0800aef1 	.word	0x0800aef1
 800aea4:	2300      	movs	r3, #0
 800aea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeaa:	e24e      	b.n	800b34a <UART_SetConfig+0x7ae>
 800aeac:	2304      	movs	r3, #4
 800aeae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeb2:	e24a      	b.n	800b34a <UART_SetConfig+0x7ae>
 800aeb4:	2308      	movs	r3, #8
 800aeb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeba:	e246      	b.n	800b34a <UART_SetConfig+0x7ae>
 800aebc:	2310      	movs	r3, #16
 800aebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aec2:	e242      	b.n	800b34a <UART_SetConfig+0x7ae>
 800aec4:	cfff69f3 	.word	0xcfff69f3
 800aec8:	58000c00 	.word	0x58000c00
 800aecc:	11fff4ff 	.word	0x11fff4ff
 800aed0:	40011000 	.word	0x40011000
 800aed4:	58024400 	.word	0x58024400
 800aed8:	40004400 	.word	0x40004400
 800aedc:	40004800 	.word	0x40004800
 800aee0:	40004c00 	.word	0x40004c00
 800aee4:	40005000 	.word	0x40005000
 800aee8:	2320      	movs	r3, #32
 800aeea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeee:	e22c      	b.n	800b34a <UART_SetConfig+0x7ae>
 800aef0:	2340      	movs	r3, #64	; 0x40
 800aef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aef6:	e228      	b.n	800b34a <UART_SetConfig+0x7ae>
 800aef8:	2380      	movs	r3, #128	; 0x80
 800aefa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aefe:	e224      	b.n	800b34a <UART_SetConfig+0x7ae>
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4ab1      	ldr	r2, [pc, #708]	; (800b1cc <UART_SetConfig+0x630>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d176      	bne.n	800aff8 <UART_SetConfig+0x45c>
 800af0a:	4bb1      	ldr	r3, [pc, #708]	; (800b1d0 <UART_SetConfig+0x634>)
 800af0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af12:	2b28      	cmp	r3, #40	; 0x28
 800af14:	d86c      	bhi.n	800aff0 <UART_SetConfig+0x454>
 800af16:	a201      	add	r2, pc, #4	; (adr r2, 800af1c <UART_SetConfig+0x380>)
 800af18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af1c:	0800afc1 	.word	0x0800afc1
 800af20:	0800aff1 	.word	0x0800aff1
 800af24:	0800aff1 	.word	0x0800aff1
 800af28:	0800aff1 	.word	0x0800aff1
 800af2c:	0800aff1 	.word	0x0800aff1
 800af30:	0800aff1 	.word	0x0800aff1
 800af34:	0800aff1 	.word	0x0800aff1
 800af38:	0800aff1 	.word	0x0800aff1
 800af3c:	0800afc9 	.word	0x0800afc9
 800af40:	0800aff1 	.word	0x0800aff1
 800af44:	0800aff1 	.word	0x0800aff1
 800af48:	0800aff1 	.word	0x0800aff1
 800af4c:	0800aff1 	.word	0x0800aff1
 800af50:	0800aff1 	.word	0x0800aff1
 800af54:	0800aff1 	.word	0x0800aff1
 800af58:	0800aff1 	.word	0x0800aff1
 800af5c:	0800afd1 	.word	0x0800afd1
 800af60:	0800aff1 	.word	0x0800aff1
 800af64:	0800aff1 	.word	0x0800aff1
 800af68:	0800aff1 	.word	0x0800aff1
 800af6c:	0800aff1 	.word	0x0800aff1
 800af70:	0800aff1 	.word	0x0800aff1
 800af74:	0800aff1 	.word	0x0800aff1
 800af78:	0800aff1 	.word	0x0800aff1
 800af7c:	0800afd9 	.word	0x0800afd9
 800af80:	0800aff1 	.word	0x0800aff1
 800af84:	0800aff1 	.word	0x0800aff1
 800af88:	0800aff1 	.word	0x0800aff1
 800af8c:	0800aff1 	.word	0x0800aff1
 800af90:	0800aff1 	.word	0x0800aff1
 800af94:	0800aff1 	.word	0x0800aff1
 800af98:	0800aff1 	.word	0x0800aff1
 800af9c:	0800afe1 	.word	0x0800afe1
 800afa0:	0800aff1 	.word	0x0800aff1
 800afa4:	0800aff1 	.word	0x0800aff1
 800afa8:	0800aff1 	.word	0x0800aff1
 800afac:	0800aff1 	.word	0x0800aff1
 800afb0:	0800aff1 	.word	0x0800aff1
 800afb4:	0800aff1 	.word	0x0800aff1
 800afb8:	0800aff1 	.word	0x0800aff1
 800afbc:	0800afe9 	.word	0x0800afe9
 800afc0:	2301      	movs	r3, #1
 800afc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afc6:	e1c0      	b.n	800b34a <UART_SetConfig+0x7ae>
 800afc8:	2304      	movs	r3, #4
 800afca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afce:	e1bc      	b.n	800b34a <UART_SetConfig+0x7ae>
 800afd0:	2308      	movs	r3, #8
 800afd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afd6:	e1b8      	b.n	800b34a <UART_SetConfig+0x7ae>
 800afd8:	2310      	movs	r3, #16
 800afda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afde:	e1b4      	b.n	800b34a <UART_SetConfig+0x7ae>
 800afe0:	2320      	movs	r3, #32
 800afe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afe6:	e1b0      	b.n	800b34a <UART_SetConfig+0x7ae>
 800afe8:	2340      	movs	r3, #64	; 0x40
 800afea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afee:	e1ac      	b.n	800b34a <UART_SetConfig+0x7ae>
 800aff0:	2380      	movs	r3, #128	; 0x80
 800aff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aff6:	e1a8      	b.n	800b34a <UART_SetConfig+0x7ae>
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4a75      	ldr	r2, [pc, #468]	; (800b1d4 <UART_SetConfig+0x638>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d130      	bne.n	800b064 <UART_SetConfig+0x4c8>
 800b002:	4b73      	ldr	r3, [pc, #460]	; (800b1d0 <UART_SetConfig+0x634>)
 800b004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b006:	f003 0307 	and.w	r3, r3, #7
 800b00a:	2b05      	cmp	r3, #5
 800b00c:	d826      	bhi.n	800b05c <UART_SetConfig+0x4c0>
 800b00e:	a201      	add	r2, pc, #4	; (adr r2, 800b014 <UART_SetConfig+0x478>)
 800b010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b014:	0800b02d 	.word	0x0800b02d
 800b018:	0800b035 	.word	0x0800b035
 800b01c:	0800b03d 	.word	0x0800b03d
 800b020:	0800b045 	.word	0x0800b045
 800b024:	0800b04d 	.word	0x0800b04d
 800b028:	0800b055 	.word	0x0800b055
 800b02c:	2300      	movs	r3, #0
 800b02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b032:	e18a      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b034:	2304      	movs	r3, #4
 800b036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b03a:	e186      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b03c:	2308      	movs	r3, #8
 800b03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b042:	e182      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b044:	2310      	movs	r3, #16
 800b046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b04a:	e17e      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b04c:	2320      	movs	r3, #32
 800b04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b052:	e17a      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b054:	2340      	movs	r3, #64	; 0x40
 800b056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b05a:	e176      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b05c:	2380      	movs	r3, #128	; 0x80
 800b05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b062:	e172      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a5b      	ldr	r2, [pc, #364]	; (800b1d8 <UART_SetConfig+0x63c>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d130      	bne.n	800b0d0 <UART_SetConfig+0x534>
 800b06e:	4b58      	ldr	r3, [pc, #352]	; (800b1d0 <UART_SetConfig+0x634>)
 800b070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b072:	f003 0307 	and.w	r3, r3, #7
 800b076:	2b05      	cmp	r3, #5
 800b078:	d826      	bhi.n	800b0c8 <UART_SetConfig+0x52c>
 800b07a:	a201      	add	r2, pc, #4	; (adr r2, 800b080 <UART_SetConfig+0x4e4>)
 800b07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b080:	0800b099 	.word	0x0800b099
 800b084:	0800b0a1 	.word	0x0800b0a1
 800b088:	0800b0a9 	.word	0x0800b0a9
 800b08c:	0800b0b1 	.word	0x0800b0b1
 800b090:	0800b0b9 	.word	0x0800b0b9
 800b094:	0800b0c1 	.word	0x0800b0c1
 800b098:	2300      	movs	r3, #0
 800b09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b09e:	e154      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b0a0:	2304      	movs	r3, #4
 800b0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0a6:	e150      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b0a8:	2308      	movs	r3, #8
 800b0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ae:	e14c      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b0b0:	2310      	movs	r3, #16
 800b0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0b6:	e148      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b0b8:	2320      	movs	r3, #32
 800b0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0be:	e144      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b0c0:	2340      	movs	r3, #64	; 0x40
 800b0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0c6:	e140      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b0c8:	2380      	movs	r3, #128	; 0x80
 800b0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ce:	e13c      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a41      	ldr	r2, [pc, #260]	; (800b1dc <UART_SetConfig+0x640>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	f040 8082 	bne.w	800b1e0 <UART_SetConfig+0x644>
 800b0dc:	4b3c      	ldr	r3, [pc, #240]	; (800b1d0 <UART_SetConfig+0x634>)
 800b0de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b0e4:	2b28      	cmp	r3, #40	; 0x28
 800b0e6:	d86d      	bhi.n	800b1c4 <UART_SetConfig+0x628>
 800b0e8:	a201      	add	r2, pc, #4	; (adr r2, 800b0f0 <UART_SetConfig+0x554>)
 800b0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ee:	bf00      	nop
 800b0f0:	0800b195 	.word	0x0800b195
 800b0f4:	0800b1c5 	.word	0x0800b1c5
 800b0f8:	0800b1c5 	.word	0x0800b1c5
 800b0fc:	0800b1c5 	.word	0x0800b1c5
 800b100:	0800b1c5 	.word	0x0800b1c5
 800b104:	0800b1c5 	.word	0x0800b1c5
 800b108:	0800b1c5 	.word	0x0800b1c5
 800b10c:	0800b1c5 	.word	0x0800b1c5
 800b110:	0800b19d 	.word	0x0800b19d
 800b114:	0800b1c5 	.word	0x0800b1c5
 800b118:	0800b1c5 	.word	0x0800b1c5
 800b11c:	0800b1c5 	.word	0x0800b1c5
 800b120:	0800b1c5 	.word	0x0800b1c5
 800b124:	0800b1c5 	.word	0x0800b1c5
 800b128:	0800b1c5 	.word	0x0800b1c5
 800b12c:	0800b1c5 	.word	0x0800b1c5
 800b130:	0800b1a5 	.word	0x0800b1a5
 800b134:	0800b1c5 	.word	0x0800b1c5
 800b138:	0800b1c5 	.word	0x0800b1c5
 800b13c:	0800b1c5 	.word	0x0800b1c5
 800b140:	0800b1c5 	.word	0x0800b1c5
 800b144:	0800b1c5 	.word	0x0800b1c5
 800b148:	0800b1c5 	.word	0x0800b1c5
 800b14c:	0800b1c5 	.word	0x0800b1c5
 800b150:	0800b1ad 	.word	0x0800b1ad
 800b154:	0800b1c5 	.word	0x0800b1c5
 800b158:	0800b1c5 	.word	0x0800b1c5
 800b15c:	0800b1c5 	.word	0x0800b1c5
 800b160:	0800b1c5 	.word	0x0800b1c5
 800b164:	0800b1c5 	.word	0x0800b1c5
 800b168:	0800b1c5 	.word	0x0800b1c5
 800b16c:	0800b1c5 	.word	0x0800b1c5
 800b170:	0800b1b5 	.word	0x0800b1b5
 800b174:	0800b1c5 	.word	0x0800b1c5
 800b178:	0800b1c5 	.word	0x0800b1c5
 800b17c:	0800b1c5 	.word	0x0800b1c5
 800b180:	0800b1c5 	.word	0x0800b1c5
 800b184:	0800b1c5 	.word	0x0800b1c5
 800b188:	0800b1c5 	.word	0x0800b1c5
 800b18c:	0800b1c5 	.word	0x0800b1c5
 800b190:	0800b1bd 	.word	0x0800b1bd
 800b194:	2301      	movs	r3, #1
 800b196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b19a:	e0d6      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b19c:	2304      	movs	r3, #4
 800b19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1a2:	e0d2      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b1a4:	2308      	movs	r3, #8
 800b1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1aa:	e0ce      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b1ac:	2310      	movs	r3, #16
 800b1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1b2:	e0ca      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b1b4:	2320      	movs	r3, #32
 800b1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ba:	e0c6      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b1bc:	2340      	movs	r3, #64	; 0x40
 800b1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1c2:	e0c2      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b1c4:	2380      	movs	r3, #128	; 0x80
 800b1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ca:	e0be      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b1cc:	40011400 	.word	0x40011400
 800b1d0:	58024400 	.word	0x58024400
 800b1d4:	40007800 	.word	0x40007800
 800b1d8:	40007c00 	.word	0x40007c00
 800b1dc:	40011800 	.word	0x40011800
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4aad      	ldr	r2, [pc, #692]	; (800b49c <UART_SetConfig+0x900>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d176      	bne.n	800b2d8 <UART_SetConfig+0x73c>
 800b1ea:	4bad      	ldr	r3, [pc, #692]	; (800b4a0 <UART_SetConfig+0x904>)
 800b1ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b1f2:	2b28      	cmp	r3, #40	; 0x28
 800b1f4:	d86c      	bhi.n	800b2d0 <UART_SetConfig+0x734>
 800b1f6:	a201      	add	r2, pc, #4	; (adr r2, 800b1fc <UART_SetConfig+0x660>)
 800b1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fc:	0800b2a1 	.word	0x0800b2a1
 800b200:	0800b2d1 	.word	0x0800b2d1
 800b204:	0800b2d1 	.word	0x0800b2d1
 800b208:	0800b2d1 	.word	0x0800b2d1
 800b20c:	0800b2d1 	.word	0x0800b2d1
 800b210:	0800b2d1 	.word	0x0800b2d1
 800b214:	0800b2d1 	.word	0x0800b2d1
 800b218:	0800b2d1 	.word	0x0800b2d1
 800b21c:	0800b2a9 	.word	0x0800b2a9
 800b220:	0800b2d1 	.word	0x0800b2d1
 800b224:	0800b2d1 	.word	0x0800b2d1
 800b228:	0800b2d1 	.word	0x0800b2d1
 800b22c:	0800b2d1 	.word	0x0800b2d1
 800b230:	0800b2d1 	.word	0x0800b2d1
 800b234:	0800b2d1 	.word	0x0800b2d1
 800b238:	0800b2d1 	.word	0x0800b2d1
 800b23c:	0800b2b1 	.word	0x0800b2b1
 800b240:	0800b2d1 	.word	0x0800b2d1
 800b244:	0800b2d1 	.word	0x0800b2d1
 800b248:	0800b2d1 	.word	0x0800b2d1
 800b24c:	0800b2d1 	.word	0x0800b2d1
 800b250:	0800b2d1 	.word	0x0800b2d1
 800b254:	0800b2d1 	.word	0x0800b2d1
 800b258:	0800b2d1 	.word	0x0800b2d1
 800b25c:	0800b2b9 	.word	0x0800b2b9
 800b260:	0800b2d1 	.word	0x0800b2d1
 800b264:	0800b2d1 	.word	0x0800b2d1
 800b268:	0800b2d1 	.word	0x0800b2d1
 800b26c:	0800b2d1 	.word	0x0800b2d1
 800b270:	0800b2d1 	.word	0x0800b2d1
 800b274:	0800b2d1 	.word	0x0800b2d1
 800b278:	0800b2d1 	.word	0x0800b2d1
 800b27c:	0800b2c1 	.word	0x0800b2c1
 800b280:	0800b2d1 	.word	0x0800b2d1
 800b284:	0800b2d1 	.word	0x0800b2d1
 800b288:	0800b2d1 	.word	0x0800b2d1
 800b28c:	0800b2d1 	.word	0x0800b2d1
 800b290:	0800b2d1 	.word	0x0800b2d1
 800b294:	0800b2d1 	.word	0x0800b2d1
 800b298:	0800b2d1 	.word	0x0800b2d1
 800b29c:	0800b2c9 	.word	0x0800b2c9
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2a6:	e050      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b2a8:	2304      	movs	r3, #4
 800b2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ae:	e04c      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b2b0:	2308      	movs	r3, #8
 800b2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2b6:	e048      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b2b8:	2310      	movs	r3, #16
 800b2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2be:	e044      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b2c0:	2320      	movs	r3, #32
 800b2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2c6:	e040      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b2c8:	2340      	movs	r3, #64	; 0x40
 800b2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ce:	e03c      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b2d0:	2380      	movs	r3, #128	; 0x80
 800b2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2d6:	e038      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a71      	ldr	r2, [pc, #452]	; (800b4a4 <UART_SetConfig+0x908>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d130      	bne.n	800b344 <UART_SetConfig+0x7a8>
 800b2e2:	4b6f      	ldr	r3, [pc, #444]	; (800b4a0 <UART_SetConfig+0x904>)
 800b2e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2e6:	f003 0307 	and.w	r3, r3, #7
 800b2ea:	2b05      	cmp	r3, #5
 800b2ec:	d826      	bhi.n	800b33c <UART_SetConfig+0x7a0>
 800b2ee:	a201      	add	r2, pc, #4	; (adr r2, 800b2f4 <UART_SetConfig+0x758>)
 800b2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f4:	0800b30d 	.word	0x0800b30d
 800b2f8:	0800b315 	.word	0x0800b315
 800b2fc:	0800b31d 	.word	0x0800b31d
 800b300:	0800b325 	.word	0x0800b325
 800b304:	0800b32d 	.word	0x0800b32d
 800b308:	0800b335 	.word	0x0800b335
 800b30c:	2302      	movs	r3, #2
 800b30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b312:	e01a      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b314:	2304      	movs	r3, #4
 800b316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b31a:	e016      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b31c:	2308      	movs	r3, #8
 800b31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b322:	e012      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b324:	2310      	movs	r3, #16
 800b326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b32a:	e00e      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b32c:	2320      	movs	r3, #32
 800b32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b332:	e00a      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b334:	2340      	movs	r3, #64	; 0x40
 800b336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b33a:	e006      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b33c:	2380      	movs	r3, #128	; 0x80
 800b33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b342:	e002      	b.n	800b34a <UART_SetConfig+0x7ae>
 800b344:	2380      	movs	r3, #128	; 0x80
 800b346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a55      	ldr	r2, [pc, #340]	; (800b4a4 <UART_SetConfig+0x908>)
 800b350:	4293      	cmp	r3, r2
 800b352:	f040 80f8 	bne.w	800b546 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b356:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b35a:	2b20      	cmp	r3, #32
 800b35c:	dc46      	bgt.n	800b3ec <UART_SetConfig+0x850>
 800b35e:	2b02      	cmp	r3, #2
 800b360:	db75      	blt.n	800b44e <UART_SetConfig+0x8b2>
 800b362:	3b02      	subs	r3, #2
 800b364:	2b1e      	cmp	r3, #30
 800b366:	d872      	bhi.n	800b44e <UART_SetConfig+0x8b2>
 800b368:	a201      	add	r2, pc, #4	; (adr r2, 800b370 <UART_SetConfig+0x7d4>)
 800b36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b36e:	bf00      	nop
 800b370:	0800b3f3 	.word	0x0800b3f3
 800b374:	0800b44f 	.word	0x0800b44f
 800b378:	0800b3fb 	.word	0x0800b3fb
 800b37c:	0800b44f 	.word	0x0800b44f
 800b380:	0800b44f 	.word	0x0800b44f
 800b384:	0800b44f 	.word	0x0800b44f
 800b388:	0800b40b 	.word	0x0800b40b
 800b38c:	0800b44f 	.word	0x0800b44f
 800b390:	0800b44f 	.word	0x0800b44f
 800b394:	0800b44f 	.word	0x0800b44f
 800b398:	0800b44f 	.word	0x0800b44f
 800b39c:	0800b44f 	.word	0x0800b44f
 800b3a0:	0800b44f 	.word	0x0800b44f
 800b3a4:	0800b44f 	.word	0x0800b44f
 800b3a8:	0800b41b 	.word	0x0800b41b
 800b3ac:	0800b44f 	.word	0x0800b44f
 800b3b0:	0800b44f 	.word	0x0800b44f
 800b3b4:	0800b44f 	.word	0x0800b44f
 800b3b8:	0800b44f 	.word	0x0800b44f
 800b3bc:	0800b44f 	.word	0x0800b44f
 800b3c0:	0800b44f 	.word	0x0800b44f
 800b3c4:	0800b44f 	.word	0x0800b44f
 800b3c8:	0800b44f 	.word	0x0800b44f
 800b3cc:	0800b44f 	.word	0x0800b44f
 800b3d0:	0800b44f 	.word	0x0800b44f
 800b3d4:	0800b44f 	.word	0x0800b44f
 800b3d8:	0800b44f 	.word	0x0800b44f
 800b3dc:	0800b44f 	.word	0x0800b44f
 800b3e0:	0800b44f 	.word	0x0800b44f
 800b3e4:	0800b44f 	.word	0x0800b44f
 800b3e8:	0800b441 	.word	0x0800b441
 800b3ec:	2b40      	cmp	r3, #64	; 0x40
 800b3ee:	d02a      	beq.n	800b446 <UART_SetConfig+0x8aa>
 800b3f0:	e02d      	b.n	800b44e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b3f2:	f7fd fb25 	bl	8008a40 <HAL_RCCEx_GetD3PCLK1Freq>
 800b3f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b3f8:	e02f      	b.n	800b45a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7fd fb34 	bl	8008a6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b408:	e027      	b.n	800b45a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b40a:	f107 0318 	add.w	r3, r7, #24
 800b40e:	4618      	mov	r0, r3
 800b410:	f7fd fc80 	bl	8008d14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b418:	e01f      	b.n	800b45a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b41a:	4b21      	ldr	r3, [pc, #132]	; (800b4a0 <UART_SetConfig+0x904>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f003 0320 	and.w	r3, r3, #32
 800b422:	2b00      	cmp	r3, #0
 800b424:	d009      	beq.n	800b43a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b426:	4b1e      	ldr	r3, [pc, #120]	; (800b4a0 <UART_SetConfig+0x904>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	08db      	lsrs	r3, r3, #3
 800b42c:	f003 0303 	and.w	r3, r3, #3
 800b430:	4a1d      	ldr	r2, [pc, #116]	; (800b4a8 <UART_SetConfig+0x90c>)
 800b432:	fa22 f303 	lsr.w	r3, r2, r3
 800b436:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b438:	e00f      	b.n	800b45a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b43a:	4b1b      	ldr	r3, [pc, #108]	; (800b4a8 <UART_SetConfig+0x90c>)
 800b43c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b43e:	e00c      	b.n	800b45a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b440:	4b1a      	ldr	r3, [pc, #104]	; (800b4ac <UART_SetConfig+0x910>)
 800b442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b444:	e009      	b.n	800b45a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b44a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b44c:	e005      	b.n	800b45a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b44e:	2300      	movs	r3, #0
 800b450:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b452:	2301      	movs	r3, #1
 800b454:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b458:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	f000 81ee 	beq.w	800b83e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b466:	4a12      	ldr	r2, [pc, #72]	; (800b4b0 <UART_SetConfig+0x914>)
 800b468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b46c:	461a      	mov	r2, r3
 800b46e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b470:	fbb3 f3f2 	udiv	r3, r3, r2
 800b474:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	685a      	ldr	r2, [r3, #4]
 800b47a:	4613      	mov	r3, r2
 800b47c:	005b      	lsls	r3, r3, #1
 800b47e:	4413      	add	r3, r2
 800b480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b482:	429a      	cmp	r2, r3
 800b484:	d305      	bcc.n	800b492 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b48c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b48e:	429a      	cmp	r2, r3
 800b490:	d910      	bls.n	800b4b4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b492:	2301      	movs	r3, #1
 800b494:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b498:	e1d1      	b.n	800b83e <UART_SetConfig+0xca2>
 800b49a:	bf00      	nop
 800b49c:	40011c00 	.word	0x40011c00
 800b4a0:	58024400 	.word	0x58024400
 800b4a4:	58000c00 	.word	0x58000c00
 800b4a8:	03d09000 	.word	0x03d09000
 800b4ac:	003d0900 	.word	0x003d0900
 800b4b0:	080108dc 	.word	0x080108dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	60bb      	str	r3, [r7, #8]
 800b4ba:	60fa      	str	r2, [r7, #12]
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c0:	4ac0      	ldr	r2, [pc, #768]	; (800b7c4 <UART_SetConfig+0xc28>)
 800b4c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	603b      	str	r3, [r7, #0]
 800b4cc:	607a      	str	r2, [r7, #4]
 800b4ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b4d6:	f7f4 ff0b 	bl	80002f0 <__aeabi_uldivmod>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	460b      	mov	r3, r1
 800b4de:	4610      	mov	r0, r2
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	f04f 0200 	mov.w	r2, #0
 800b4e6:	f04f 0300 	mov.w	r3, #0
 800b4ea:	020b      	lsls	r3, r1, #8
 800b4ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b4f0:	0202      	lsls	r2, r0, #8
 800b4f2:	6979      	ldr	r1, [r7, #20]
 800b4f4:	6849      	ldr	r1, [r1, #4]
 800b4f6:	0849      	lsrs	r1, r1, #1
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	460c      	mov	r4, r1
 800b4fc:	4605      	mov	r5, r0
 800b4fe:	eb12 0804 	adds.w	r8, r2, r4
 800b502:	eb43 0905 	adc.w	r9, r3, r5
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	469a      	mov	sl, r3
 800b50e:	4693      	mov	fp, r2
 800b510:	4652      	mov	r2, sl
 800b512:	465b      	mov	r3, fp
 800b514:	4640      	mov	r0, r8
 800b516:	4649      	mov	r1, r9
 800b518:	f7f4 feea 	bl	80002f0 <__aeabi_uldivmod>
 800b51c:	4602      	mov	r2, r0
 800b51e:	460b      	mov	r3, r1
 800b520:	4613      	mov	r3, r2
 800b522:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b526:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b52a:	d308      	bcc.n	800b53e <UART_SetConfig+0x9a2>
 800b52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b52e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b532:	d204      	bcs.n	800b53e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b53a:	60da      	str	r2, [r3, #12]
 800b53c:	e17f      	b.n	800b83e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b544:	e17b      	b.n	800b83e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	69db      	ldr	r3, [r3, #28]
 800b54a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b54e:	f040 80bd 	bne.w	800b6cc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b552:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b556:	2b20      	cmp	r3, #32
 800b558:	dc48      	bgt.n	800b5ec <UART_SetConfig+0xa50>
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	db7b      	blt.n	800b656 <UART_SetConfig+0xaba>
 800b55e:	2b20      	cmp	r3, #32
 800b560:	d879      	bhi.n	800b656 <UART_SetConfig+0xaba>
 800b562:	a201      	add	r2, pc, #4	; (adr r2, 800b568 <UART_SetConfig+0x9cc>)
 800b564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b568:	0800b5f3 	.word	0x0800b5f3
 800b56c:	0800b5fb 	.word	0x0800b5fb
 800b570:	0800b657 	.word	0x0800b657
 800b574:	0800b657 	.word	0x0800b657
 800b578:	0800b603 	.word	0x0800b603
 800b57c:	0800b657 	.word	0x0800b657
 800b580:	0800b657 	.word	0x0800b657
 800b584:	0800b657 	.word	0x0800b657
 800b588:	0800b613 	.word	0x0800b613
 800b58c:	0800b657 	.word	0x0800b657
 800b590:	0800b657 	.word	0x0800b657
 800b594:	0800b657 	.word	0x0800b657
 800b598:	0800b657 	.word	0x0800b657
 800b59c:	0800b657 	.word	0x0800b657
 800b5a0:	0800b657 	.word	0x0800b657
 800b5a4:	0800b657 	.word	0x0800b657
 800b5a8:	0800b623 	.word	0x0800b623
 800b5ac:	0800b657 	.word	0x0800b657
 800b5b0:	0800b657 	.word	0x0800b657
 800b5b4:	0800b657 	.word	0x0800b657
 800b5b8:	0800b657 	.word	0x0800b657
 800b5bc:	0800b657 	.word	0x0800b657
 800b5c0:	0800b657 	.word	0x0800b657
 800b5c4:	0800b657 	.word	0x0800b657
 800b5c8:	0800b657 	.word	0x0800b657
 800b5cc:	0800b657 	.word	0x0800b657
 800b5d0:	0800b657 	.word	0x0800b657
 800b5d4:	0800b657 	.word	0x0800b657
 800b5d8:	0800b657 	.word	0x0800b657
 800b5dc:	0800b657 	.word	0x0800b657
 800b5e0:	0800b657 	.word	0x0800b657
 800b5e4:	0800b657 	.word	0x0800b657
 800b5e8:	0800b649 	.word	0x0800b649
 800b5ec:	2b40      	cmp	r3, #64	; 0x40
 800b5ee:	d02e      	beq.n	800b64e <UART_SetConfig+0xab2>
 800b5f0:	e031      	b.n	800b656 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5f2:	f7fb fb21 	bl	8006c38 <HAL_RCC_GetPCLK1Freq>
 800b5f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b5f8:	e033      	b.n	800b662 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5fa:	f7fb fb33 	bl	8006c64 <HAL_RCC_GetPCLK2Freq>
 800b5fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b600:	e02f      	b.n	800b662 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b606:	4618      	mov	r0, r3
 800b608:	f7fd fa30 	bl	8008a6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b60e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b610:	e027      	b.n	800b662 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b612:	f107 0318 	add.w	r3, r7, #24
 800b616:	4618      	mov	r0, r3
 800b618:	f7fd fb7c 	bl	8008d14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b61c:	69fb      	ldr	r3, [r7, #28]
 800b61e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b620:	e01f      	b.n	800b662 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b622:	4b69      	ldr	r3, [pc, #420]	; (800b7c8 <UART_SetConfig+0xc2c>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f003 0320 	and.w	r3, r3, #32
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d009      	beq.n	800b642 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b62e:	4b66      	ldr	r3, [pc, #408]	; (800b7c8 <UART_SetConfig+0xc2c>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	08db      	lsrs	r3, r3, #3
 800b634:	f003 0303 	and.w	r3, r3, #3
 800b638:	4a64      	ldr	r2, [pc, #400]	; (800b7cc <UART_SetConfig+0xc30>)
 800b63a:	fa22 f303 	lsr.w	r3, r2, r3
 800b63e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b640:	e00f      	b.n	800b662 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b642:	4b62      	ldr	r3, [pc, #392]	; (800b7cc <UART_SetConfig+0xc30>)
 800b644:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b646:	e00c      	b.n	800b662 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b648:	4b61      	ldr	r3, [pc, #388]	; (800b7d0 <UART_SetConfig+0xc34>)
 800b64a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b64c:	e009      	b.n	800b662 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b64e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b652:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b654:	e005      	b.n	800b662 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b656:	2300      	movs	r3, #0
 800b658:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b65a:	2301      	movs	r3, #1
 800b65c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b660:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b664:	2b00      	cmp	r3, #0
 800b666:	f000 80ea 	beq.w	800b83e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66e:	4a55      	ldr	r2, [pc, #340]	; (800b7c4 <UART_SetConfig+0xc28>)
 800b670:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b674:	461a      	mov	r2, r3
 800b676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b678:	fbb3 f3f2 	udiv	r3, r3, r2
 800b67c:	005a      	lsls	r2, r3, #1
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	085b      	lsrs	r3, r3, #1
 800b684:	441a      	add	r2, r3
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b68e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b692:	2b0f      	cmp	r3, #15
 800b694:	d916      	bls.n	800b6c4 <UART_SetConfig+0xb28>
 800b696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b69c:	d212      	bcs.n	800b6c4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	f023 030f 	bic.w	r3, r3, #15
 800b6a6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6aa:	085b      	lsrs	r3, r3, #1
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	f003 0307 	and.w	r3, r3, #7
 800b6b2:	b29a      	uxth	r2, r3
 800b6b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b6c0:	60da      	str	r2, [r3, #12]
 800b6c2:	e0bc      	b.n	800b83e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b6ca:	e0b8      	b.n	800b83e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b6cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b6d0:	2b20      	cmp	r3, #32
 800b6d2:	dc4b      	bgt.n	800b76c <UART_SetConfig+0xbd0>
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f2c0 8087 	blt.w	800b7e8 <UART_SetConfig+0xc4c>
 800b6da:	2b20      	cmp	r3, #32
 800b6dc:	f200 8084 	bhi.w	800b7e8 <UART_SetConfig+0xc4c>
 800b6e0:	a201      	add	r2, pc, #4	; (adr r2, 800b6e8 <UART_SetConfig+0xb4c>)
 800b6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e6:	bf00      	nop
 800b6e8:	0800b773 	.word	0x0800b773
 800b6ec:	0800b77b 	.word	0x0800b77b
 800b6f0:	0800b7e9 	.word	0x0800b7e9
 800b6f4:	0800b7e9 	.word	0x0800b7e9
 800b6f8:	0800b783 	.word	0x0800b783
 800b6fc:	0800b7e9 	.word	0x0800b7e9
 800b700:	0800b7e9 	.word	0x0800b7e9
 800b704:	0800b7e9 	.word	0x0800b7e9
 800b708:	0800b793 	.word	0x0800b793
 800b70c:	0800b7e9 	.word	0x0800b7e9
 800b710:	0800b7e9 	.word	0x0800b7e9
 800b714:	0800b7e9 	.word	0x0800b7e9
 800b718:	0800b7e9 	.word	0x0800b7e9
 800b71c:	0800b7e9 	.word	0x0800b7e9
 800b720:	0800b7e9 	.word	0x0800b7e9
 800b724:	0800b7e9 	.word	0x0800b7e9
 800b728:	0800b7a3 	.word	0x0800b7a3
 800b72c:	0800b7e9 	.word	0x0800b7e9
 800b730:	0800b7e9 	.word	0x0800b7e9
 800b734:	0800b7e9 	.word	0x0800b7e9
 800b738:	0800b7e9 	.word	0x0800b7e9
 800b73c:	0800b7e9 	.word	0x0800b7e9
 800b740:	0800b7e9 	.word	0x0800b7e9
 800b744:	0800b7e9 	.word	0x0800b7e9
 800b748:	0800b7e9 	.word	0x0800b7e9
 800b74c:	0800b7e9 	.word	0x0800b7e9
 800b750:	0800b7e9 	.word	0x0800b7e9
 800b754:	0800b7e9 	.word	0x0800b7e9
 800b758:	0800b7e9 	.word	0x0800b7e9
 800b75c:	0800b7e9 	.word	0x0800b7e9
 800b760:	0800b7e9 	.word	0x0800b7e9
 800b764:	0800b7e9 	.word	0x0800b7e9
 800b768:	0800b7db 	.word	0x0800b7db
 800b76c:	2b40      	cmp	r3, #64	; 0x40
 800b76e:	d037      	beq.n	800b7e0 <UART_SetConfig+0xc44>
 800b770:	e03a      	b.n	800b7e8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b772:	f7fb fa61 	bl	8006c38 <HAL_RCC_GetPCLK1Freq>
 800b776:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b778:	e03c      	b.n	800b7f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b77a:	f7fb fa73 	bl	8006c64 <HAL_RCC_GetPCLK2Freq>
 800b77e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b780:	e038      	b.n	800b7f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b786:	4618      	mov	r0, r3
 800b788:	f7fd f970 	bl	8008a6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b790:	e030      	b.n	800b7f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b792:	f107 0318 	add.w	r3, r7, #24
 800b796:	4618      	mov	r0, r3
 800b798:	f7fd fabc 	bl	8008d14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7a0:	e028      	b.n	800b7f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7a2:	4b09      	ldr	r3, [pc, #36]	; (800b7c8 <UART_SetConfig+0xc2c>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f003 0320 	and.w	r3, r3, #32
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d012      	beq.n	800b7d4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b7ae:	4b06      	ldr	r3, [pc, #24]	; (800b7c8 <UART_SetConfig+0xc2c>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	08db      	lsrs	r3, r3, #3
 800b7b4:	f003 0303 	and.w	r3, r3, #3
 800b7b8:	4a04      	ldr	r2, [pc, #16]	; (800b7cc <UART_SetConfig+0xc30>)
 800b7ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b7be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b7c0:	e018      	b.n	800b7f4 <UART_SetConfig+0xc58>
 800b7c2:	bf00      	nop
 800b7c4:	080108dc 	.word	0x080108dc
 800b7c8:	58024400 	.word	0x58024400
 800b7cc:	03d09000 	.word	0x03d09000
 800b7d0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b7d4:	4b24      	ldr	r3, [pc, #144]	; (800b868 <UART_SetConfig+0xccc>)
 800b7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7d8:	e00c      	b.n	800b7f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b7da:	4b24      	ldr	r3, [pc, #144]	; (800b86c <UART_SetConfig+0xcd0>)
 800b7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7de:	e009      	b.n	800b7f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7e6:	e005      	b.n	800b7f4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b7f2:	bf00      	nop
    }

    if (pclk != 0U)
 800b7f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d021      	beq.n	800b83e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fe:	4a1c      	ldr	r2, [pc, #112]	; (800b870 <UART_SetConfig+0xcd4>)
 800b800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b804:	461a      	mov	r2, r3
 800b806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b808:	fbb3 f2f2 	udiv	r2, r3, r2
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	085b      	lsrs	r3, r3, #1
 800b812:	441a      	add	r2, r3
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	fbb2 f3f3 	udiv	r3, r2, r3
 800b81c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b820:	2b0f      	cmp	r3, #15
 800b822:	d909      	bls.n	800b838 <UART_SetConfig+0xc9c>
 800b824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b82a:	d205      	bcs.n	800b838 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82e:	b29a      	uxth	r2, r3
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	60da      	str	r2, [r3, #12]
 800b836:	e002      	b.n	800b83e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b838:	2301      	movs	r3, #1
 800b83a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	2201      	movs	r2, #1
 800b842:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	2201      	movs	r2, #1
 800b84a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	2200      	movs	r2, #0
 800b852:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	2200      	movs	r2, #0
 800b858:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b85a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3748      	adds	r7, #72	; 0x48
 800b862:	46bd      	mov	sp, r7
 800b864:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b868:	03d09000 	.word	0x03d09000
 800b86c:	003d0900 	.word	0x003d0900
 800b870:	080108dc 	.word	0x080108dc

0800b874 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b880:	f003 0301 	and.w	r3, r3, #1
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00a      	beq.n	800b89e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	430a      	orrs	r2, r1
 800b89c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8a2:	f003 0302 	and.w	r3, r3, #2
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00a      	beq.n	800b8c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	430a      	orrs	r2, r1
 800b8be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8c4:	f003 0304 	and.w	r3, r3, #4
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d00a      	beq.n	800b8e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	430a      	orrs	r2, r1
 800b8e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8e6:	f003 0308 	and.w	r3, r3, #8
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00a      	beq.n	800b904 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	430a      	orrs	r2, r1
 800b902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b908:	f003 0310 	and.w	r3, r3, #16
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d00a      	beq.n	800b926 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	689b      	ldr	r3, [r3, #8]
 800b916:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	430a      	orrs	r2, r1
 800b924:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b92a:	f003 0320 	and.w	r3, r3, #32
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d00a      	beq.n	800b948 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	430a      	orrs	r2, r1
 800b946:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b94c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b950:	2b00      	cmp	r3, #0
 800b952:	d01a      	beq.n	800b98a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	430a      	orrs	r2, r1
 800b968:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b96e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b972:	d10a      	bne.n	800b98a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	430a      	orrs	r2, r1
 800b988:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b98e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b992:	2b00      	cmp	r3, #0
 800b994:	d00a      	beq.n	800b9ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	430a      	orrs	r2, r1
 800b9aa:	605a      	str	r2, [r3, #4]
  }
}
 800b9ac:	bf00      	nop
 800b9ae:	370c      	adds	r7, #12
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b098      	sub	sp, #96	; 0x60
 800b9bc:	af02      	add	r7, sp, #8
 800b9be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b9c8:	f7f5 fe82 	bl	80016d0 <HAL_GetTick>
 800b9cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f003 0308 	and.w	r3, r3, #8
 800b9d8:	2b08      	cmp	r3, #8
 800b9da:	d12f      	bne.n	800ba3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9e0:	9300      	str	r3, [sp, #0]
 800b9e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 f88e 	bl	800bb0c <UART_WaitOnFlagUntilTimeout>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d022      	beq.n	800ba3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fe:	e853 3f00 	ldrex	r3, [r3]
 800ba02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ba04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba0a:	653b      	str	r3, [r7, #80]	; 0x50
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	461a      	mov	r2, r3
 800ba12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba14:	647b      	str	r3, [r7, #68]	; 0x44
 800ba16:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba1c:	e841 2300 	strex	r3, r2, [r1]
 800ba20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1e6      	bne.n	800b9f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2220      	movs	r2, #32
 800ba2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba38:	2303      	movs	r3, #3
 800ba3a:	e063      	b.n	800bb04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f003 0304 	and.w	r3, r3, #4
 800ba46:	2b04      	cmp	r3, #4
 800ba48:	d149      	bne.n	800bade <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba4e:	9300      	str	r3, [sp, #0]
 800ba50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba52:	2200      	movs	r2, #0
 800ba54:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f000 f857 	bl	800bb0c <UART_WaitOnFlagUntilTimeout>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d03c      	beq.n	800bade <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6c:	e853 3f00 	ldrex	r3, [r3]
 800ba70:	623b      	str	r3, [r7, #32]
   return(result);
 800ba72:	6a3b      	ldr	r3, [r7, #32]
 800ba74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba78:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	461a      	mov	r2, r3
 800ba80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba82:	633b      	str	r3, [r7, #48]	; 0x30
 800ba84:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba8a:	e841 2300 	strex	r3, r2, [r1]
 800ba8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1e6      	bne.n	800ba64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	3308      	adds	r3, #8
 800ba9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	e853 3f00 	ldrex	r3, [r3]
 800baa4:	60fb      	str	r3, [r7, #12]
   return(result);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	f023 0301 	bic.w	r3, r3, #1
 800baac:	64bb      	str	r3, [r7, #72]	; 0x48
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	3308      	adds	r3, #8
 800bab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bab6:	61fa      	str	r2, [r7, #28]
 800bab8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baba:	69b9      	ldr	r1, [r7, #24]
 800babc:	69fa      	ldr	r2, [r7, #28]
 800babe:	e841 2300 	strex	r3, r2, [r1]
 800bac2:	617b      	str	r3, [r7, #20]
   return(result);
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d1e5      	bne.n	800ba96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2220      	movs	r2, #32
 800bace:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bada:	2303      	movs	r3, #3
 800badc:	e012      	b.n	800bb04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2220      	movs	r2, #32
 800bae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2220      	movs	r2, #32
 800baea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2200      	movs	r2, #0
 800baf2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2200      	movs	r2, #0
 800bafe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3758      	adds	r7, #88	; 0x58
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	603b      	str	r3, [r7, #0]
 800bb18:	4613      	mov	r3, r2
 800bb1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb1c:	e049      	b.n	800bbb2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb24:	d045      	beq.n	800bbb2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb26:	f7f5 fdd3 	bl	80016d0 <HAL_GetTick>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	1ad3      	subs	r3, r2, r3
 800bb30:	69ba      	ldr	r2, [r7, #24]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d302      	bcc.n	800bb3c <UART_WaitOnFlagUntilTimeout+0x30>
 800bb36:	69bb      	ldr	r3, [r7, #24]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d101      	bne.n	800bb40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bb3c:	2303      	movs	r3, #3
 800bb3e:	e048      	b.n	800bbd2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f003 0304 	and.w	r3, r3, #4
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d031      	beq.n	800bbb2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	69db      	ldr	r3, [r3, #28]
 800bb54:	f003 0308 	and.w	r3, r3, #8
 800bb58:	2b08      	cmp	r3, #8
 800bb5a:	d110      	bne.n	800bb7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	2208      	movs	r2, #8
 800bb62:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f000 f839 	bl	800bbdc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2208      	movs	r2, #8
 800bb6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2200      	movs	r2, #0
 800bb76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	e029      	b.n	800bbd2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	69db      	ldr	r3, [r3, #28]
 800bb84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb8c:	d111      	bne.n	800bbb2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f000 f81f 	bl	800bbdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2220      	movs	r2, #32
 800bba2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bbae:	2303      	movs	r3, #3
 800bbb0:	e00f      	b.n	800bbd2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	69da      	ldr	r2, [r3, #28]
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	4013      	ands	r3, r2
 800bbbc:	68ba      	ldr	r2, [r7, #8]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	bf0c      	ite	eq
 800bbc2:	2301      	moveq	r3, #1
 800bbc4:	2300      	movne	r3, #0
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	461a      	mov	r2, r3
 800bbca:	79fb      	ldrb	r3, [r7, #7]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d0a6      	beq.n	800bb1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bbd0:	2300      	movs	r3, #0
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3710      	adds	r7, #16
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
	...

0800bbdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b095      	sub	sp, #84	; 0x54
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbec:	e853 3f00 	ldrex	r3, [r3]
 800bbf0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bbf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc02:	643b      	str	r3, [r7, #64]	; 0x40
 800bc04:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bc08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc0a:	e841 2300 	strex	r3, r2, [r1]
 800bc0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d1e6      	bne.n	800bbe4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	3308      	adds	r3, #8
 800bc1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc1e:	6a3b      	ldr	r3, [r7, #32]
 800bc20:	e853 3f00 	ldrex	r3, [r3]
 800bc24:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc26:	69fa      	ldr	r2, [r7, #28]
 800bc28:	4b1e      	ldr	r3, [pc, #120]	; (800bca4 <UART_EndRxTransfer+0xc8>)
 800bc2a:	4013      	ands	r3, r2
 800bc2c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	3308      	adds	r3, #8
 800bc34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc36:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bc38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc3e:	e841 2300 	strex	r3, r2, [r1]
 800bc42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d1e5      	bne.n	800bc16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d118      	bne.n	800bc84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	e853 3f00 	ldrex	r3, [r3]
 800bc5e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	f023 0310 	bic.w	r3, r3, #16
 800bc66:	647b      	str	r3, [r7, #68]	; 0x44
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc70:	61bb      	str	r3, [r7, #24]
 800bc72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc74:	6979      	ldr	r1, [r7, #20]
 800bc76:	69ba      	ldr	r2, [r7, #24]
 800bc78:	e841 2300 	strex	r3, r2, [r1]
 800bc7c:	613b      	str	r3, [r7, #16]
   return(result);
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d1e6      	bne.n	800bc52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2220      	movs	r2, #32
 800bc88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bc98:	bf00      	nop
 800bc9a:	3754      	adds	r7, #84	; 0x54
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr
 800bca4:	effffffe 	.word	0xeffffffe

0800bca8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b085      	sub	sp, #20
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d101      	bne.n	800bcbe <HAL_UARTEx_DisableFifoMode+0x16>
 800bcba:	2302      	movs	r3, #2
 800bcbc:	e027      	b.n	800bd0e <HAL_UARTEx_DisableFifoMode+0x66>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2224      	movs	r2, #36	; 0x24
 800bcca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f022 0201 	bic.w	r2, r2, #1
 800bce4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bcec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	68fa      	ldr	r2, [r7, #12]
 800bcfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2220      	movs	r2, #32
 800bd00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bd0c:	2300      	movs	r3, #0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3714      	adds	r7, #20
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr

0800bd1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b084      	sub	sp, #16
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
 800bd22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d101      	bne.n	800bd32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bd2e:	2302      	movs	r3, #2
 800bd30:	e02d      	b.n	800bd8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2201      	movs	r2, #1
 800bd36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2224      	movs	r2, #36	; 0x24
 800bd3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f022 0201 	bic.w	r2, r2, #1
 800bd58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	683a      	ldr	r2, [r7, #0]
 800bd6a:	430a      	orrs	r2, r1
 800bd6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 f850 	bl	800be14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	68fa      	ldr	r2, [r7, #12]
 800bd7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2220      	movs	r2, #32
 800bd80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2200      	movs	r2, #0
 800bd88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bd8c:	2300      	movs	r3, #0
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3710      	adds	r7, #16
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}

0800bd96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b084      	sub	sp, #16
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
 800bd9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d101      	bne.n	800bdae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bdaa:	2302      	movs	r3, #2
 800bdac:	e02d      	b.n	800be0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2224      	movs	r2, #36	; 0x24
 800bdba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f022 0201 	bic.w	r2, r2, #1
 800bdd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	689b      	ldr	r3, [r3, #8]
 800bddc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	683a      	ldr	r2, [r7, #0]
 800bde6:	430a      	orrs	r2, r1
 800bde8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 f812 	bl	800be14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2220      	movs	r2, #32
 800bdfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
	...

0800be14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be20:	2b00      	cmp	r3, #0
 800be22:	d108      	bne.n	800be36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2201      	movs	r2, #1
 800be28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2201      	movs	r2, #1
 800be30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800be34:	e031      	b.n	800be9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800be36:	2310      	movs	r3, #16
 800be38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800be3a:	2310      	movs	r3, #16
 800be3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	689b      	ldr	r3, [r3, #8]
 800be44:	0e5b      	lsrs	r3, r3, #25
 800be46:	b2db      	uxtb	r3, r3
 800be48:	f003 0307 	and.w	r3, r3, #7
 800be4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	0f5b      	lsrs	r3, r3, #29
 800be56:	b2db      	uxtb	r3, r3
 800be58:	f003 0307 	and.w	r3, r3, #7
 800be5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be5e:	7bbb      	ldrb	r3, [r7, #14]
 800be60:	7b3a      	ldrb	r2, [r7, #12]
 800be62:	4911      	ldr	r1, [pc, #68]	; (800bea8 <UARTEx_SetNbDataToProcess+0x94>)
 800be64:	5c8a      	ldrb	r2, [r1, r2]
 800be66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800be6a:	7b3a      	ldrb	r2, [r7, #12]
 800be6c:	490f      	ldr	r1, [pc, #60]	; (800beac <UARTEx_SetNbDataToProcess+0x98>)
 800be6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be70:	fb93 f3f2 	sdiv	r3, r3, r2
 800be74:	b29a      	uxth	r2, r3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be7c:	7bfb      	ldrb	r3, [r7, #15]
 800be7e:	7b7a      	ldrb	r2, [r7, #13]
 800be80:	4909      	ldr	r1, [pc, #36]	; (800bea8 <UARTEx_SetNbDataToProcess+0x94>)
 800be82:	5c8a      	ldrb	r2, [r1, r2]
 800be84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800be88:	7b7a      	ldrb	r2, [r7, #13]
 800be8a:	4908      	ldr	r1, [pc, #32]	; (800beac <UARTEx_SetNbDataToProcess+0x98>)
 800be8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be8e:	fb93 f3f2 	sdiv	r3, r3, r2
 800be92:	b29a      	uxth	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800be9a:	bf00      	nop
 800be9c:	3714      	adds	r7, #20
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr
 800bea6:	bf00      	nop
 800bea8:	080108f4 	.word	0x080108f4
 800beac:	080108fc 	.word	0x080108fc

0800beb0 <__NVIC_SetPriority>:
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	4603      	mov	r3, r0
 800beb8:	6039      	str	r1, [r7, #0]
 800beba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bebc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	db0a      	blt.n	800beda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	b2da      	uxtb	r2, r3
 800bec8:	490c      	ldr	r1, [pc, #48]	; (800befc <__NVIC_SetPriority+0x4c>)
 800beca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bece:	0112      	lsls	r2, r2, #4
 800bed0:	b2d2      	uxtb	r2, r2
 800bed2:	440b      	add	r3, r1
 800bed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bed8:	e00a      	b.n	800bef0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	b2da      	uxtb	r2, r3
 800bede:	4908      	ldr	r1, [pc, #32]	; (800bf00 <__NVIC_SetPriority+0x50>)
 800bee0:	88fb      	ldrh	r3, [r7, #6]
 800bee2:	f003 030f 	and.w	r3, r3, #15
 800bee6:	3b04      	subs	r3, #4
 800bee8:	0112      	lsls	r2, r2, #4
 800beea:	b2d2      	uxtb	r2, r2
 800beec:	440b      	add	r3, r1
 800beee:	761a      	strb	r2, [r3, #24]
}
 800bef0:	bf00      	nop
 800bef2:	370c      	adds	r7, #12
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr
 800befc:	e000e100 	.word	0xe000e100
 800bf00:	e000ed00 	.word	0xe000ed00

0800bf04 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bf04:	b580      	push	{r7, lr}
 800bf06:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bf08:	4b05      	ldr	r3, [pc, #20]	; (800bf20 <SysTick_Handler+0x1c>)
 800bf0a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bf0c:	f002 f93e 	bl	800e18c <xTaskGetSchedulerState>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d001      	beq.n	800bf1a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bf16:	f003 f827 	bl	800ef68 <xPortSysTickHandler>
  }
}
 800bf1a:	bf00      	nop
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	e000e010 	.word	0xe000e010

0800bf24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bf24:	b580      	push	{r7, lr}
 800bf26:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bf28:	2100      	movs	r1, #0
 800bf2a:	f06f 0004 	mvn.w	r0, #4
 800bf2e:	f7ff ffbf 	bl	800beb0 <__NVIC_SetPriority>
#endif
}
 800bf32:	bf00      	nop
 800bf34:	bd80      	pop	{r7, pc}
	...

0800bf38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bf38:	b480      	push	{r7}
 800bf3a:	b083      	sub	sp, #12
 800bf3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf3e:	f3ef 8305 	mrs	r3, IPSR
 800bf42:	603b      	str	r3, [r7, #0]
  return(result);
 800bf44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d003      	beq.n	800bf52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bf4a:	f06f 0305 	mvn.w	r3, #5
 800bf4e:	607b      	str	r3, [r7, #4]
 800bf50:	e00c      	b.n	800bf6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bf52:	4b0a      	ldr	r3, [pc, #40]	; (800bf7c <osKernelInitialize+0x44>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d105      	bne.n	800bf66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bf5a:	4b08      	ldr	r3, [pc, #32]	; (800bf7c <osKernelInitialize+0x44>)
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bf60:	2300      	movs	r3, #0
 800bf62:	607b      	str	r3, [r7, #4]
 800bf64:	e002      	b.n	800bf6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bf66:	f04f 33ff 	mov.w	r3, #4294967295
 800bf6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bf6c:	687b      	ldr	r3, [r7, #4]
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	370c      	adds	r7, #12
 800bf72:	46bd      	mov	sp, r7
 800bf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf78:	4770      	bx	lr
 800bf7a:	bf00      	nop
 800bf7c:	2400e2e8 	.word	0x2400e2e8

0800bf80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf86:	f3ef 8305 	mrs	r3, IPSR
 800bf8a:	603b      	str	r3, [r7, #0]
  return(result);
 800bf8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d003      	beq.n	800bf9a <osKernelStart+0x1a>
    stat = osErrorISR;
 800bf92:	f06f 0305 	mvn.w	r3, #5
 800bf96:	607b      	str	r3, [r7, #4]
 800bf98:	e010      	b.n	800bfbc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bf9a:	4b0b      	ldr	r3, [pc, #44]	; (800bfc8 <osKernelStart+0x48>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d109      	bne.n	800bfb6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bfa2:	f7ff ffbf 	bl	800bf24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bfa6:	4b08      	ldr	r3, [pc, #32]	; (800bfc8 <osKernelStart+0x48>)
 800bfa8:	2202      	movs	r2, #2
 800bfaa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bfac:	f001 fca6 	bl	800d8fc <vTaskStartScheduler>
      stat = osOK;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	607b      	str	r3, [r7, #4]
 800bfb4:	e002      	b.n	800bfbc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bfb6:	f04f 33ff 	mov.w	r3, #4294967295
 800bfba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bfbc:	687b      	ldr	r3, [r7, #4]
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3708      	adds	r7, #8
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	2400e2e8 	.word	0x2400e2e8

0800bfcc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b08e      	sub	sp, #56	; 0x38
 800bfd0:	af04      	add	r7, sp, #16
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfdc:	f3ef 8305 	mrs	r3, IPSR
 800bfe0:	617b      	str	r3, [r7, #20]
  return(result);
 800bfe2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d17e      	bne.n	800c0e6 <osThreadNew+0x11a>
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d07b      	beq.n	800c0e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bfee:	2380      	movs	r3, #128	; 0x80
 800bff0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bff2:	2318      	movs	r3, #24
 800bff4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bff6:	2300      	movs	r3, #0
 800bff8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bffa:	f04f 33ff 	mov.w	r3, #4294967295
 800bffe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d045      	beq.n	800c092 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d002      	beq.n	800c014 <osThreadNew+0x48>
        name = attr->name;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	699b      	ldr	r3, [r3, #24]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d002      	beq.n	800c022 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	699b      	ldr	r3, [r3, #24]
 800c020:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d008      	beq.n	800c03a <osThreadNew+0x6e>
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	2b38      	cmp	r3, #56	; 0x38
 800c02c:	d805      	bhi.n	800c03a <osThreadNew+0x6e>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	f003 0301 	and.w	r3, r3, #1
 800c036:	2b00      	cmp	r3, #0
 800c038:	d001      	beq.n	800c03e <osThreadNew+0x72>
        return (NULL);
 800c03a:	2300      	movs	r3, #0
 800c03c:	e054      	b.n	800c0e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	695b      	ldr	r3, [r3, #20]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d003      	beq.n	800c04e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	695b      	ldr	r3, [r3, #20]
 800c04a:	089b      	lsrs	r3, r3, #2
 800c04c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00e      	beq.n	800c074 <osThreadNew+0xa8>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	68db      	ldr	r3, [r3, #12]
 800c05a:	2b5b      	cmp	r3, #91	; 0x5b
 800c05c:	d90a      	bls.n	800c074 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c062:	2b00      	cmp	r3, #0
 800c064:	d006      	beq.n	800c074 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	695b      	ldr	r3, [r3, #20]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d002      	beq.n	800c074 <osThreadNew+0xa8>
        mem = 1;
 800c06e:	2301      	movs	r3, #1
 800c070:	61bb      	str	r3, [r7, #24]
 800c072:	e010      	b.n	800c096 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d10c      	bne.n	800c096 <osThreadNew+0xca>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d108      	bne.n	800c096 <osThreadNew+0xca>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	691b      	ldr	r3, [r3, #16]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d104      	bne.n	800c096 <osThreadNew+0xca>
          mem = 0;
 800c08c:	2300      	movs	r3, #0
 800c08e:	61bb      	str	r3, [r7, #24]
 800c090:	e001      	b.n	800c096 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c092:	2300      	movs	r3, #0
 800c094:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c096:	69bb      	ldr	r3, [r7, #24]
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d110      	bne.n	800c0be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c0a4:	9202      	str	r2, [sp, #8]
 800c0a6:	9301      	str	r3, [sp, #4]
 800c0a8:	69fb      	ldr	r3, [r7, #28]
 800c0aa:	9300      	str	r3, [sp, #0]
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	6a3a      	ldr	r2, [r7, #32]
 800c0b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	f001 fa4c 	bl	800d550 <xTaskCreateStatic>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	613b      	str	r3, [r7, #16]
 800c0bc:	e013      	b.n	800c0e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c0be:	69bb      	ldr	r3, [r7, #24]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d110      	bne.n	800c0e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c0c4:	6a3b      	ldr	r3, [r7, #32]
 800c0c6:	b29a      	uxth	r2, r3
 800c0c8:	f107 0310 	add.w	r3, r7, #16
 800c0cc:	9301      	str	r3, [sp, #4]
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	9300      	str	r3, [sp, #0]
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0d6:	68f8      	ldr	r0, [r7, #12]
 800c0d8:	f001 fa97 	bl	800d60a <xTaskCreate>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d001      	beq.n	800c0e6 <osThreadNew+0x11a>
            hTask = NULL;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c0e6:	693b      	ldr	r3, [r7, #16]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3728      	adds	r7, #40	; 0x28
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0f8:	f3ef 8305 	mrs	r3, IPSR
 800c0fc:	60bb      	str	r3, [r7, #8]
  return(result);
 800c0fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c100:	2b00      	cmp	r3, #0
 800c102:	d003      	beq.n	800c10c <osDelay+0x1c>
    stat = osErrorISR;
 800c104:	f06f 0305 	mvn.w	r3, #5
 800c108:	60fb      	str	r3, [r7, #12]
 800c10a:	e007      	b.n	800c11c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c10c:	2300      	movs	r3, #0
 800c10e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d002      	beq.n	800c11c <osDelay+0x2c>
      vTaskDelay(ticks);
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f001 fbbc 	bl	800d894 <vTaskDelay>
    }
  }

  return (stat);
 800c11c:	68fb      	ldr	r3, [r7, #12]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3710      	adds	r7, #16
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}

0800c126 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c126:	b580      	push	{r7, lr}
 800c128:	b08a      	sub	sp, #40	; 0x28
 800c12a:	af02      	add	r7, sp, #8
 800c12c:	60f8      	str	r0, [r7, #12]
 800c12e:	60b9      	str	r1, [r7, #8]
 800c130:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c132:	2300      	movs	r3, #0
 800c134:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c136:	f3ef 8305 	mrs	r3, IPSR
 800c13a:	613b      	str	r3, [r7, #16]
  return(result);
 800c13c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d175      	bne.n	800c22e <osSemaphoreNew+0x108>
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d072      	beq.n	800c22e <osSemaphoreNew+0x108>
 800c148:	68ba      	ldr	r2, [r7, #8]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d86e      	bhi.n	800c22e <osSemaphoreNew+0x108>
    mem = -1;
 800c150:	f04f 33ff 	mov.w	r3, #4294967295
 800c154:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d015      	beq.n	800c188 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d006      	beq.n	800c172 <osSemaphoreNew+0x4c>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	2b4f      	cmp	r3, #79	; 0x4f
 800c16a:	d902      	bls.n	800c172 <osSemaphoreNew+0x4c>
        mem = 1;
 800c16c:	2301      	movs	r3, #1
 800c16e:	61bb      	str	r3, [r7, #24]
 800c170:	e00c      	b.n	800c18c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d108      	bne.n	800c18c <osSemaphoreNew+0x66>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d104      	bne.n	800c18c <osSemaphoreNew+0x66>
          mem = 0;
 800c182:	2300      	movs	r3, #0
 800c184:	61bb      	str	r3, [r7, #24]
 800c186:	e001      	b.n	800c18c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c188:	2300      	movs	r3, #0
 800c18a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c18c:	69bb      	ldr	r3, [r7, #24]
 800c18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c192:	d04c      	beq.n	800c22e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2b01      	cmp	r3, #1
 800c198:	d128      	bne.n	800c1ec <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d10a      	bne.n	800c1b6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	2203      	movs	r2, #3
 800c1a6:	9200      	str	r2, [sp, #0]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	2100      	movs	r1, #0
 800c1ac:	2001      	movs	r0, #1
 800c1ae:	f000 fa29 	bl	800c604 <xQueueGenericCreateStatic>
 800c1b2:	61f8      	str	r0, [r7, #28]
 800c1b4:	e005      	b.n	800c1c2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c1b6:	2203      	movs	r2, #3
 800c1b8:	2100      	movs	r1, #0
 800c1ba:	2001      	movs	r0, #1
 800c1bc:	f000 fa9a 	bl	800c6f4 <xQueueGenericCreate>
 800c1c0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d022      	beq.n	800c20e <osSemaphoreNew+0xe8>
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d01f      	beq.n	800c20e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	2100      	movs	r1, #0
 800c1d4:	69f8      	ldr	r0, [r7, #28]
 800c1d6:	f000 fb55 	bl	800c884 <xQueueGenericSend>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d016      	beq.n	800c20e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c1e0:	69f8      	ldr	r0, [r7, #28]
 800c1e2:	f000 ffe1 	bl	800d1a8 <vQueueDelete>
            hSemaphore = NULL;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	61fb      	str	r3, [r7, #28]
 800c1ea:	e010      	b.n	800c20e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d108      	bne.n	800c204 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	689b      	ldr	r3, [r3, #8]
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	68b9      	ldr	r1, [r7, #8]
 800c1fa:	68f8      	ldr	r0, [r7, #12]
 800c1fc:	f000 fad7 	bl	800c7ae <xQueueCreateCountingSemaphoreStatic>
 800c200:	61f8      	str	r0, [r7, #28]
 800c202:	e004      	b.n	800c20e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c204:	68b9      	ldr	r1, [r7, #8]
 800c206:	68f8      	ldr	r0, [r7, #12]
 800c208:	f000 fb08 	bl	800c81c <xQueueCreateCountingSemaphore>
 800c20c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c20e:	69fb      	ldr	r3, [r7, #28]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d00c      	beq.n	800c22e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d003      	beq.n	800c222 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	617b      	str	r3, [r7, #20]
 800c220:	e001      	b.n	800c226 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c222:	2300      	movs	r3, #0
 800c224:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c226:	6979      	ldr	r1, [r7, #20]
 800c228:	69f8      	ldr	r0, [r7, #28]
 800c22a:	f001 f909 	bl	800d440 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c22e:	69fb      	ldr	r3, [r7, #28]
}
 800c230:	4618      	mov	r0, r3
 800c232:	3720      	adds	r7, #32
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c238:	b580      	push	{r7, lr}
 800c23a:	b086      	sub	sp, #24
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c246:	2300      	movs	r3, #0
 800c248:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d103      	bne.n	800c258 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c250:	f06f 0303 	mvn.w	r3, #3
 800c254:	617b      	str	r3, [r7, #20]
 800c256:	e039      	b.n	800c2cc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c258:	f3ef 8305 	mrs	r3, IPSR
 800c25c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c25e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c260:	2b00      	cmp	r3, #0
 800c262:	d022      	beq.n	800c2aa <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d003      	beq.n	800c272 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c26a:	f06f 0303 	mvn.w	r3, #3
 800c26e:	617b      	str	r3, [r7, #20]
 800c270:	e02c      	b.n	800c2cc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c272:	2300      	movs	r3, #0
 800c274:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c276:	f107 0308 	add.w	r3, r7, #8
 800c27a:	461a      	mov	r2, r3
 800c27c:	2100      	movs	r1, #0
 800c27e:	6938      	ldr	r0, [r7, #16]
 800c280:	f000 ff12 	bl	800d0a8 <xQueueReceiveFromISR>
 800c284:	4603      	mov	r3, r0
 800c286:	2b01      	cmp	r3, #1
 800c288:	d003      	beq.n	800c292 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c28a:	f06f 0302 	mvn.w	r3, #2
 800c28e:	617b      	str	r3, [r7, #20]
 800c290:	e01c      	b.n	800c2cc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d019      	beq.n	800c2cc <osSemaphoreAcquire+0x94>
 800c298:	4b0f      	ldr	r3, [pc, #60]	; (800c2d8 <osSemaphoreAcquire+0xa0>)
 800c29a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c29e:	601a      	str	r2, [r3, #0]
 800c2a0:	f3bf 8f4f 	dsb	sy
 800c2a4:	f3bf 8f6f 	isb	sy
 800c2a8:	e010      	b.n	800c2cc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c2aa:	6839      	ldr	r1, [r7, #0]
 800c2ac:	6938      	ldr	r0, [r7, #16]
 800c2ae:	f000 fdef 	bl	800ce90 <xQueueSemaphoreTake>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d009      	beq.n	800c2cc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d003      	beq.n	800c2c6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c2be:	f06f 0301 	mvn.w	r3, #1
 800c2c2:	617b      	str	r3, [r7, #20]
 800c2c4:	e002      	b.n	800c2cc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c2c6:	f06f 0302 	mvn.w	r3, #2
 800c2ca:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c2cc:	697b      	ldr	r3, [r7, #20]
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3718      	adds	r7, #24
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
 800c2d6:	bf00      	nop
 800c2d8:	e000ed04 	.word	0xe000ed04

0800c2dc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b086      	sub	sp, #24
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d103      	bne.n	800c2fa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c2f2:	f06f 0303 	mvn.w	r3, #3
 800c2f6:	617b      	str	r3, [r7, #20]
 800c2f8:	e02c      	b.n	800c354 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2fa:	f3ef 8305 	mrs	r3, IPSR
 800c2fe:	60fb      	str	r3, [r7, #12]
  return(result);
 800c300:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c302:	2b00      	cmp	r3, #0
 800c304:	d01a      	beq.n	800c33c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c306:	2300      	movs	r3, #0
 800c308:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c30a:	f107 0308 	add.w	r3, r7, #8
 800c30e:	4619      	mov	r1, r3
 800c310:	6938      	ldr	r0, [r7, #16]
 800c312:	f000 fc50 	bl	800cbb6 <xQueueGiveFromISR>
 800c316:	4603      	mov	r3, r0
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d003      	beq.n	800c324 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c31c:	f06f 0302 	mvn.w	r3, #2
 800c320:	617b      	str	r3, [r7, #20]
 800c322:	e017      	b.n	800c354 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d014      	beq.n	800c354 <osSemaphoreRelease+0x78>
 800c32a:	4b0d      	ldr	r3, [pc, #52]	; (800c360 <osSemaphoreRelease+0x84>)
 800c32c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c330:	601a      	str	r2, [r3, #0]
 800c332:	f3bf 8f4f 	dsb	sy
 800c336:	f3bf 8f6f 	isb	sy
 800c33a:	e00b      	b.n	800c354 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c33c:	2300      	movs	r3, #0
 800c33e:	2200      	movs	r2, #0
 800c340:	2100      	movs	r1, #0
 800c342:	6938      	ldr	r0, [r7, #16]
 800c344:	f000 fa9e 	bl	800c884 <xQueueGenericSend>
 800c348:	4603      	mov	r3, r0
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	d002      	beq.n	800c354 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c34e:	f06f 0302 	mvn.w	r3, #2
 800c352:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c354:	697b      	ldr	r3, [r7, #20]
}
 800c356:	4618      	mov	r0, r3
 800c358:	3718      	adds	r7, #24
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	e000ed04 	.word	0xe000ed04

0800c364 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	4a07      	ldr	r2, [pc, #28]	; (800c390 <vApplicationGetIdleTaskMemory+0x2c>)
 800c374:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	4a06      	ldr	r2, [pc, #24]	; (800c394 <vApplicationGetIdleTaskMemory+0x30>)
 800c37a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2280      	movs	r2, #128	; 0x80
 800c380:	601a      	str	r2, [r3, #0]
}
 800c382:	bf00      	nop
 800c384:	3714      	adds	r7, #20
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr
 800c38e:	bf00      	nop
 800c390:	2400e2ec 	.word	0x2400e2ec
 800c394:	2400e348 	.word	0x2400e348

0800c398 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c398:	b480      	push	{r7}
 800c39a:	b085      	sub	sp, #20
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	4a07      	ldr	r2, [pc, #28]	; (800c3c4 <vApplicationGetTimerTaskMemory+0x2c>)
 800c3a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	4a06      	ldr	r2, [pc, #24]	; (800c3c8 <vApplicationGetTimerTaskMemory+0x30>)
 800c3ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c3b6:	601a      	str	r2, [r3, #0]
}
 800c3b8:	bf00      	nop
 800c3ba:	3714      	adds	r7, #20
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr
 800c3c4:	2400e548 	.word	0x2400e548
 800c3c8:	2400e5a4 	.word	0x2400e5a4

0800c3cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f103 0208 	add.w	r2, r3, #8
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c3e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f103 0208 	add.w	r2, r3, #8
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f103 0208 	add.w	r2, r3, #8
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c400:	bf00      	nop
 800c402:	370c      	adds	r7, #12
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr

0800c40c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2200      	movs	r2, #0
 800c418:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c41a:	bf00      	nop
 800c41c:	370c      	adds	r7, #12
 800c41e:	46bd      	mov	sp, r7
 800c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c424:	4770      	bx	lr

0800c426 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c426:	b480      	push	{r7}
 800c428:	b085      	sub	sp, #20
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
 800c42e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	689a      	ldr	r2, [r3, #8]
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	683a      	ldr	r2, [r7, #0]
 800c44a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	683a      	ldr	r2, [r7, #0]
 800c450:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	1c5a      	adds	r2, r3, #1
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	601a      	str	r2, [r3, #0]
}
 800c462:	bf00      	nop
 800c464:	3714      	adds	r7, #20
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr

0800c46e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c46e:	b480      	push	{r7}
 800c470:	b085      	sub	sp, #20
 800c472:	af00      	add	r7, sp, #0
 800c474:	6078      	str	r0, [r7, #4]
 800c476:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c484:	d103      	bne.n	800c48e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	691b      	ldr	r3, [r3, #16]
 800c48a:	60fb      	str	r3, [r7, #12]
 800c48c:	e00c      	b.n	800c4a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	3308      	adds	r3, #8
 800c492:	60fb      	str	r3, [r7, #12]
 800c494:	e002      	b.n	800c49c <vListInsert+0x2e>
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	60fb      	str	r3, [r7, #12]
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	68ba      	ldr	r2, [r7, #8]
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d2f6      	bcs.n	800c496 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	685a      	ldr	r2, [r3, #4]
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	683a      	ldr	r2, [r7, #0]
 800c4b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	68fa      	ldr	r2, [r7, #12]
 800c4bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	683a      	ldr	r2, [r7, #0]
 800c4c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	687a      	ldr	r2, [r7, #4]
 800c4c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	1c5a      	adds	r2, r3, #1
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	601a      	str	r2, [r3, #0]
}
 800c4d4:	bf00      	nop
 800c4d6:	3714      	adds	r7, #20
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b085      	sub	sp, #20
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	691b      	ldr	r3, [r3, #16]
 800c4ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	6892      	ldr	r2, [r2, #8]
 800c4f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	689b      	ldr	r3, [r3, #8]
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	6852      	ldr	r2, [r2, #4]
 800c500:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d103      	bne.n	800c514 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	689a      	ldr	r2, [r3, #8]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2200      	movs	r2, #0
 800c518:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	1e5a      	subs	r2, r3, #1
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3714      	adds	r7, #20
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr

0800c534 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d10a      	bne.n	800c55e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54c:	f383 8811 	msr	BASEPRI, r3
 800c550:	f3bf 8f6f 	isb	sy
 800c554:	f3bf 8f4f 	dsb	sy
 800c558:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c55a:	bf00      	nop
 800c55c:	e7fe      	b.n	800c55c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c55e:	f002 fc71 	bl	800ee44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681a      	ldr	r2, [r3, #0]
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c56a:	68f9      	ldr	r1, [r7, #12]
 800c56c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c56e:	fb01 f303 	mul.w	r3, r1, r3
 800c572:	441a      	add	r2, r3
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2200      	movs	r2, #0
 800c57c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681a      	ldr	r2, [r3, #0]
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681a      	ldr	r2, [r3, #0]
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c58e:	3b01      	subs	r3, #1
 800c590:	68f9      	ldr	r1, [r7, #12]
 800c592:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c594:	fb01 f303 	mul.w	r3, r1, r3
 800c598:	441a      	add	r2, r3
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	22ff      	movs	r2, #255	; 0xff
 800c5a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	22ff      	movs	r2, #255	; 0xff
 800c5aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d114      	bne.n	800c5de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	691b      	ldr	r3, [r3, #16]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d01a      	beq.n	800c5f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	3310      	adds	r3, #16
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f001 fc25 	bl	800de10 <xTaskRemoveFromEventList>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d012      	beq.n	800c5f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c5cc:	4b0c      	ldr	r3, [pc, #48]	; (800c600 <xQueueGenericReset+0xcc>)
 800c5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5d2:	601a      	str	r2, [r3, #0]
 800c5d4:	f3bf 8f4f 	dsb	sy
 800c5d8:	f3bf 8f6f 	isb	sy
 800c5dc:	e009      	b.n	800c5f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	3310      	adds	r3, #16
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7ff fef2 	bl	800c3cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	3324      	adds	r3, #36	; 0x24
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7ff feed 	bl	800c3cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c5f2:	f002 fc57 	bl	800eea4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c5f6:	2301      	movs	r3, #1
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3710      	adds	r7, #16
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	e000ed04 	.word	0xe000ed04

0800c604 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c604:	b580      	push	{r7, lr}
 800c606:	b08e      	sub	sp, #56	; 0x38
 800c608:	af02      	add	r7, sp, #8
 800c60a:	60f8      	str	r0, [r7, #12]
 800c60c:	60b9      	str	r1, [r7, #8]
 800c60e:	607a      	str	r2, [r7, #4]
 800c610:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d10a      	bne.n	800c62e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61c:	f383 8811 	msr	BASEPRI, r3
 800c620:	f3bf 8f6f 	isb	sy
 800c624:	f3bf 8f4f 	dsb	sy
 800c628:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c62a:	bf00      	nop
 800c62c:	e7fe      	b.n	800c62c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d10a      	bne.n	800c64a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c638:	f383 8811 	msr	BASEPRI, r3
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f3bf 8f4f 	dsb	sy
 800c644:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c646:	bf00      	nop
 800c648:	e7fe      	b.n	800c648 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d002      	beq.n	800c656 <xQueueGenericCreateStatic+0x52>
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d001      	beq.n	800c65a <xQueueGenericCreateStatic+0x56>
 800c656:	2301      	movs	r3, #1
 800c658:	e000      	b.n	800c65c <xQueueGenericCreateStatic+0x58>
 800c65a:	2300      	movs	r3, #0
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d10a      	bne.n	800c676 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c664:	f383 8811 	msr	BASEPRI, r3
 800c668:	f3bf 8f6f 	isb	sy
 800c66c:	f3bf 8f4f 	dsb	sy
 800c670:	623b      	str	r3, [r7, #32]
}
 800c672:	bf00      	nop
 800c674:	e7fe      	b.n	800c674 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d102      	bne.n	800c682 <xQueueGenericCreateStatic+0x7e>
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d101      	bne.n	800c686 <xQueueGenericCreateStatic+0x82>
 800c682:	2301      	movs	r3, #1
 800c684:	e000      	b.n	800c688 <xQueueGenericCreateStatic+0x84>
 800c686:	2300      	movs	r3, #0
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d10a      	bne.n	800c6a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c690:	f383 8811 	msr	BASEPRI, r3
 800c694:	f3bf 8f6f 	isb	sy
 800c698:	f3bf 8f4f 	dsb	sy
 800c69c:	61fb      	str	r3, [r7, #28]
}
 800c69e:	bf00      	nop
 800c6a0:	e7fe      	b.n	800c6a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c6a2:	2350      	movs	r3, #80	; 0x50
 800c6a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	2b50      	cmp	r3, #80	; 0x50
 800c6aa:	d00a      	beq.n	800c6c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b0:	f383 8811 	msr	BASEPRI, r3
 800c6b4:	f3bf 8f6f 	isb	sy
 800c6b8:	f3bf 8f4f 	dsb	sy
 800c6bc:	61bb      	str	r3, [r7, #24]
}
 800c6be:	bf00      	nop
 800c6c0:	e7fe      	b.n	800c6c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c6c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d00d      	beq.n	800c6ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c6d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6dc:	9300      	str	r3, [sp, #0]
 800c6de:	4613      	mov	r3, r2
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	68b9      	ldr	r1, [r7, #8]
 800c6e4:	68f8      	ldr	r0, [r7, #12]
 800c6e6:	f000 f83f 	bl	800c768 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3730      	adds	r7, #48	; 0x30
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b08a      	sub	sp, #40	; 0x28
 800c6f8:	af02      	add	r7, sp, #8
 800c6fa:	60f8      	str	r0, [r7, #12]
 800c6fc:	60b9      	str	r1, [r7, #8]
 800c6fe:	4613      	mov	r3, r2
 800c700:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d10a      	bne.n	800c71e <xQueueGenericCreate+0x2a>
	__asm volatile
 800c708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70c:	f383 8811 	msr	BASEPRI, r3
 800c710:	f3bf 8f6f 	isb	sy
 800c714:	f3bf 8f4f 	dsb	sy
 800c718:	613b      	str	r3, [r7, #16]
}
 800c71a:	bf00      	nop
 800c71c:	e7fe      	b.n	800c71c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	fb02 f303 	mul.w	r3, r2, r3
 800c726:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	3350      	adds	r3, #80	; 0x50
 800c72c:	4618      	mov	r0, r3
 800c72e:	f002 fcab 	bl	800f088 <pvPortMalloc>
 800c732:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c734:	69bb      	ldr	r3, [r7, #24]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d011      	beq.n	800c75e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c73a:	69bb      	ldr	r3, [r7, #24]
 800c73c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	3350      	adds	r3, #80	; 0x50
 800c742:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c744:	69bb      	ldr	r3, [r7, #24]
 800c746:	2200      	movs	r2, #0
 800c748:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c74c:	79fa      	ldrb	r2, [r7, #7]
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	9300      	str	r3, [sp, #0]
 800c752:	4613      	mov	r3, r2
 800c754:	697a      	ldr	r2, [r7, #20]
 800c756:	68b9      	ldr	r1, [r7, #8]
 800c758:	68f8      	ldr	r0, [r7, #12]
 800c75a:	f000 f805 	bl	800c768 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c75e:	69bb      	ldr	r3, [r7, #24]
	}
 800c760:	4618      	mov	r0, r3
 800c762:	3720      	adds	r7, #32
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	60f8      	str	r0, [r7, #12]
 800c770:	60b9      	str	r1, [r7, #8]
 800c772:	607a      	str	r2, [r7, #4]
 800c774:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d103      	bne.n	800c784 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c77c:	69bb      	ldr	r3, [r7, #24]
 800c77e:	69ba      	ldr	r2, [r7, #24]
 800c780:	601a      	str	r2, [r3, #0]
 800c782:	e002      	b.n	800c78a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c784:	69bb      	ldr	r3, [r7, #24]
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c78a:	69bb      	ldr	r3, [r7, #24]
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	68ba      	ldr	r2, [r7, #8]
 800c794:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c796:	2101      	movs	r1, #1
 800c798:	69b8      	ldr	r0, [r7, #24]
 800c79a:	f7ff fecb 	bl	800c534 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c79e:	69bb      	ldr	r3, [r7, #24]
 800c7a0:	78fa      	ldrb	r2, [r7, #3]
 800c7a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c7a6:	bf00      	nop
 800c7a8:	3710      	adds	r7, #16
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}

0800c7ae <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c7ae:	b580      	push	{r7, lr}
 800c7b0:	b08a      	sub	sp, #40	; 0x28
 800c7b2:	af02      	add	r7, sp, #8
 800c7b4:	60f8      	str	r0, [r7, #12]
 800c7b6:	60b9      	str	r1, [r7, #8]
 800c7b8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d10a      	bne.n	800c7d6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800c7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c4:	f383 8811 	msr	BASEPRI, r3
 800c7c8:	f3bf 8f6f 	isb	sy
 800c7cc:	f3bf 8f4f 	dsb	sy
 800c7d0:	61bb      	str	r3, [r7, #24]
}
 800c7d2:	bf00      	nop
 800c7d4:	e7fe      	b.n	800c7d4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c7d6:	68ba      	ldr	r2, [r7, #8]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d90a      	bls.n	800c7f4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800c7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	617b      	str	r3, [r7, #20]
}
 800c7f0:	bf00      	nop
 800c7f2:	e7fe      	b.n	800c7f2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c7f4:	2302      	movs	r3, #2
 800c7f6:	9300      	str	r3, [sp, #0]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	2100      	movs	r1, #0
 800c7fe:	68f8      	ldr	r0, [r7, #12]
 800c800:	f7ff ff00 	bl	800c604 <xQueueGenericCreateStatic>
 800c804:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d002      	beq.n	800c812 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	68ba      	ldr	r2, [r7, #8]
 800c810:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c812:	69fb      	ldr	r3, [r7, #28]
	}
 800c814:	4618      	mov	r0, r3
 800c816:	3720      	adds	r7, #32
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b086      	sub	sp, #24
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d10a      	bne.n	800c842 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c830:	f383 8811 	msr	BASEPRI, r3
 800c834:	f3bf 8f6f 	isb	sy
 800c838:	f3bf 8f4f 	dsb	sy
 800c83c:	613b      	str	r3, [r7, #16]
}
 800c83e:	bf00      	nop
 800c840:	e7fe      	b.n	800c840 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c842:	683a      	ldr	r2, [r7, #0]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	429a      	cmp	r2, r3
 800c848:	d90a      	bls.n	800c860 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800c84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c84e:	f383 8811 	msr	BASEPRI, r3
 800c852:	f3bf 8f6f 	isb	sy
 800c856:	f3bf 8f4f 	dsb	sy
 800c85a:	60fb      	str	r3, [r7, #12]
}
 800c85c:	bf00      	nop
 800c85e:	e7fe      	b.n	800c85e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c860:	2202      	movs	r2, #2
 800c862:	2100      	movs	r1, #0
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f7ff ff45 	bl	800c6f4 <xQueueGenericCreate>
 800c86a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d002      	beq.n	800c878 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	683a      	ldr	r2, [r7, #0]
 800c876:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c878:	697b      	ldr	r3, [r7, #20]
	}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3718      	adds	r7, #24
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
	...

0800c884 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b08e      	sub	sp, #56	; 0x38
 800c888:	af00      	add	r7, sp, #0
 800c88a:	60f8      	str	r0, [r7, #12]
 800c88c:	60b9      	str	r1, [r7, #8]
 800c88e:	607a      	str	r2, [r7, #4]
 800c890:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c892:	2300      	movs	r3, #0
 800c894:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d10a      	bne.n	800c8b6 <xQueueGenericSend+0x32>
	__asm volatile
 800c8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a4:	f383 8811 	msr	BASEPRI, r3
 800c8a8:	f3bf 8f6f 	isb	sy
 800c8ac:	f3bf 8f4f 	dsb	sy
 800c8b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c8b2:	bf00      	nop
 800c8b4:	e7fe      	b.n	800c8b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d103      	bne.n	800c8c4 <xQueueGenericSend+0x40>
 800c8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d101      	bne.n	800c8c8 <xQueueGenericSend+0x44>
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	e000      	b.n	800c8ca <xQueueGenericSend+0x46>
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d10a      	bne.n	800c8e4 <xQueueGenericSend+0x60>
	__asm volatile
 800c8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d2:	f383 8811 	msr	BASEPRI, r3
 800c8d6:	f3bf 8f6f 	isb	sy
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c8e0:	bf00      	nop
 800c8e2:	e7fe      	b.n	800c8e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	2b02      	cmp	r3, #2
 800c8e8:	d103      	bne.n	800c8f2 <xQueueGenericSend+0x6e>
 800c8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d101      	bne.n	800c8f6 <xQueueGenericSend+0x72>
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	e000      	b.n	800c8f8 <xQueueGenericSend+0x74>
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d10a      	bne.n	800c912 <xQueueGenericSend+0x8e>
	__asm volatile
 800c8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c900:	f383 8811 	msr	BASEPRI, r3
 800c904:	f3bf 8f6f 	isb	sy
 800c908:	f3bf 8f4f 	dsb	sy
 800c90c:	623b      	str	r3, [r7, #32]
}
 800c90e:	bf00      	nop
 800c910:	e7fe      	b.n	800c910 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c912:	f001 fc3b 	bl	800e18c <xTaskGetSchedulerState>
 800c916:	4603      	mov	r3, r0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d102      	bne.n	800c922 <xQueueGenericSend+0x9e>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d101      	bne.n	800c926 <xQueueGenericSend+0xa2>
 800c922:	2301      	movs	r3, #1
 800c924:	e000      	b.n	800c928 <xQueueGenericSend+0xa4>
 800c926:	2300      	movs	r3, #0
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d10a      	bne.n	800c942 <xQueueGenericSend+0xbe>
	__asm volatile
 800c92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c930:	f383 8811 	msr	BASEPRI, r3
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	61fb      	str	r3, [r7, #28]
}
 800c93e:	bf00      	nop
 800c940:	e7fe      	b.n	800c940 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c942:	f002 fa7f 	bl	800ee44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c94e:	429a      	cmp	r2, r3
 800c950:	d302      	bcc.n	800c958 <xQueueGenericSend+0xd4>
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	2b02      	cmp	r3, #2
 800c956:	d129      	bne.n	800c9ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c958:	683a      	ldr	r2, [r7, #0]
 800c95a:	68b9      	ldr	r1, [r7, #8]
 800c95c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c95e:	f000 fc5e 	bl	800d21e <prvCopyDataToQueue>
 800c962:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d010      	beq.n	800c98e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96e:	3324      	adds	r3, #36	; 0x24
 800c970:	4618      	mov	r0, r3
 800c972:	f001 fa4d 	bl	800de10 <xTaskRemoveFromEventList>
 800c976:	4603      	mov	r3, r0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d013      	beq.n	800c9a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c97c:	4b3f      	ldr	r3, [pc, #252]	; (800ca7c <xQueueGenericSend+0x1f8>)
 800c97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c982:	601a      	str	r2, [r3, #0]
 800c984:	f3bf 8f4f 	dsb	sy
 800c988:	f3bf 8f6f 	isb	sy
 800c98c:	e00a      	b.n	800c9a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c990:	2b00      	cmp	r3, #0
 800c992:	d007      	beq.n	800c9a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c994:	4b39      	ldr	r3, [pc, #228]	; (800ca7c <xQueueGenericSend+0x1f8>)
 800c996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c99a:	601a      	str	r2, [r3, #0]
 800c99c:	f3bf 8f4f 	dsb	sy
 800c9a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c9a4:	f002 fa7e 	bl	800eea4 <vPortExitCritical>
				return pdPASS;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e063      	b.n	800ca74 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d103      	bne.n	800c9ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c9b2:	f002 fa77 	bl	800eea4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	e05c      	b.n	800ca74 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d106      	bne.n	800c9ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c9c0:	f107 0314 	add.w	r3, r7, #20
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f001 fa87 	bl	800ded8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c9ce:	f002 fa69 	bl	800eea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c9d2:	f000 fff9 	bl	800d9c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c9d6:	f002 fa35 	bl	800ee44 <vPortEnterCritical>
 800c9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9e0:	b25b      	sxtb	r3, r3
 800c9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9e6:	d103      	bne.n	800c9f0 <xQueueGenericSend+0x16c>
 800c9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9f6:	b25b      	sxtb	r3, r3
 800c9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9fc:	d103      	bne.n	800ca06 <xQueueGenericSend+0x182>
 800c9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca00:	2200      	movs	r2, #0
 800ca02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca06:	f002 fa4d 	bl	800eea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca0a:	1d3a      	adds	r2, r7, #4
 800ca0c:	f107 0314 	add.w	r3, r7, #20
 800ca10:	4611      	mov	r1, r2
 800ca12:	4618      	mov	r0, r3
 800ca14:	f001 fa76 	bl	800df04 <xTaskCheckForTimeOut>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d124      	bne.n	800ca68 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ca1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca20:	f000 fcf5 	bl	800d40e <prvIsQueueFull>
 800ca24:	4603      	mov	r3, r0
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d018      	beq.n	800ca5c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ca2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca2c:	3310      	adds	r3, #16
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	4611      	mov	r1, r2
 800ca32:	4618      	mov	r0, r3
 800ca34:	f001 f99c 	bl	800dd70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ca38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca3a:	f000 fc80 	bl	800d33e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ca3e:	f000 ffd1 	bl	800d9e4 <xTaskResumeAll>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	f47f af7c 	bne.w	800c942 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ca4a:	4b0c      	ldr	r3, [pc, #48]	; (800ca7c <xQueueGenericSend+0x1f8>)
 800ca4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca50:	601a      	str	r2, [r3, #0]
 800ca52:	f3bf 8f4f 	dsb	sy
 800ca56:	f3bf 8f6f 	isb	sy
 800ca5a:	e772      	b.n	800c942 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ca5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca5e:	f000 fc6e 	bl	800d33e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca62:	f000 ffbf 	bl	800d9e4 <xTaskResumeAll>
 800ca66:	e76c      	b.n	800c942 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ca68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca6a:	f000 fc68 	bl	800d33e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca6e:	f000 ffb9 	bl	800d9e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ca72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3738      	adds	r7, #56	; 0x38
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	e000ed04 	.word	0xe000ed04

0800ca80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b090      	sub	sp, #64	; 0x40
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	607a      	str	r2, [r7, #4]
 800ca8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ca92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d10a      	bne.n	800caae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ca98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9c:	f383 8811 	msr	BASEPRI, r3
 800caa0:	f3bf 8f6f 	isb	sy
 800caa4:	f3bf 8f4f 	dsb	sy
 800caa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800caaa:	bf00      	nop
 800caac:	e7fe      	b.n	800caac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d103      	bne.n	800cabc <xQueueGenericSendFromISR+0x3c>
 800cab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d101      	bne.n	800cac0 <xQueueGenericSendFromISR+0x40>
 800cabc:	2301      	movs	r3, #1
 800cabe:	e000      	b.n	800cac2 <xQueueGenericSendFromISR+0x42>
 800cac0:	2300      	movs	r3, #0
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d10a      	bne.n	800cadc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caca:	f383 8811 	msr	BASEPRI, r3
 800cace:	f3bf 8f6f 	isb	sy
 800cad2:	f3bf 8f4f 	dsb	sy
 800cad6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cad8:	bf00      	nop
 800cada:	e7fe      	b.n	800cada <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	2b02      	cmp	r3, #2
 800cae0:	d103      	bne.n	800caea <xQueueGenericSendFromISR+0x6a>
 800cae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cae6:	2b01      	cmp	r3, #1
 800cae8:	d101      	bne.n	800caee <xQueueGenericSendFromISR+0x6e>
 800caea:	2301      	movs	r3, #1
 800caec:	e000      	b.n	800caf0 <xQueueGenericSendFromISR+0x70>
 800caee:	2300      	movs	r3, #0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d10a      	bne.n	800cb0a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800caf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf8:	f383 8811 	msr	BASEPRI, r3
 800cafc:	f3bf 8f6f 	isb	sy
 800cb00:	f3bf 8f4f 	dsb	sy
 800cb04:	623b      	str	r3, [r7, #32]
}
 800cb06:	bf00      	nop
 800cb08:	e7fe      	b.n	800cb08 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb0a:	f002 fa7d 	bl	800f008 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cb0e:	f3ef 8211 	mrs	r2, BASEPRI
 800cb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb16:	f383 8811 	msr	BASEPRI, r3
 800cb1a:	f3bf 8f6f 	isb	sy
 800cb1e:	f3bf 8f4f 	dsb	sy
 800cb22:	61fa      	str	r2, [r7, #28]
 800cb24:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cb26:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cb28:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d302      	bcc.n	800cb3c <xQueueGenericSendFromISR+0xbc>
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	2b02      	cmp	r3, #2
 800cb3a:	d12f      	bne.n	800cb9c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb4a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb4c:	683a      	ldr	r2, [r7, #0]
 800cb4e:	68b9      	ldr	r1, [r7, #8]
 800cb50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb52:	f000 fb64 	bl	800d21e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cb56:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cb5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb5e:	d112      	bne.n	800cb86 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d016      	beq.n	800cb96 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6a:	3324      	adds	r3, #36	; 0x24
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f001 f94f 	bl	800de10 <xTaskRemoveFromEventList>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d00e      	beq.n	800cb96 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d00b      	beq.n	800cb96 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2201      	movs	r2, #1
 800cb82:	601a      	str	r2, [r3, #0]
 800cb84:	e007      	b.n	800cb96 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cb86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	b25a      	sxtb	r2, r3
 800cb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cb96:	2301      	movs	r3, #1
 800cb98:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cb9a:	e001      	b.n	800cba0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cba2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cbaa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cbac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3740      	adds	r7, #64	; 0x40
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}

0800cbb6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b08e      	sub	sp, #56	; 0x38
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
 800cbbe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10a      	bne.n	800cbe0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800cbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbce:	f383 8811 	msr	BASEPRI, r3
 800cbd2:	f3bf 8f6f 	isb	sy
 800cbd6:	f3bf 8f4f 	dsb	sy
 800cbda:	623b      	str	r3, [r7, #32]
}
 800cbdc:	bf00      	nop
 800cbde:	e7fe      	b.n	800cbde <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d00a      	beq.n	800cbfe <xQueueGiveFromISR+0x48>
	__asm volatile
 800cbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbec:	f383 8811 	msr	BASEPRI, r3
 800cbf0:	f3bf 8f6f 	isb	sy
 800cbf4:	f3bf 8f4f 	dsb	sy
 800cbf8:	61fb      	str	r3, [r7, #28]
}
 800cbfa:	bf00      	nop
 800cbfc:	e7fe      	b.n	800cbfc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d103      	bne.n	800cc0e <xQueueGiveFromISR+0x58>
 800cc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc08:	689b      	ldr	r3, [r3, #8]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d101      	bne.n	800cc12 <xQueueGiveFromISR+0x5c>
 800cc0e:	2301      	movs	r3, #1
 800cc10:	e000      	b.n	800cc14 <xQueueGiveFromISR+0x5e>
 800cc12:	2300      	movs	r3, #0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d10a      	bne.n	800cc2e <xQueueGiveFromISR+0x78>
	__asm volatile
 800cc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1c:	f383 8811 	msr	BASEPRI, r3
 800cc20:	f3bf 8f6f 	isb	sy
 800cc24:	f3bf 8f4f 	dsb	sy
 800cc28:	61bb      	str	r3, [r7, #24]
}
 800cc2a:	bf00      	nop
 800cc2c:	e7fe      	b.n	800cc2c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc2e:	f002 f9eb 	bl	800f008 <vPortValidateInterruptPriority>
	__asm volatile
 800cc32:	f3ef 8211 	mrs	r2, BASEPRI
 800cc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3a:	f383 8811 	msr	BASEPRI, r3
 800cc3e:	f3bf 8f6f 	isb	sy
 800cc42:	f3bf 8f4f 	dsb	sy
 800cc46:	617a      	str	r2, [r7, #20]
 800cc48:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cc4a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d22b      	bcs.n	800ccb6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6a:	1c5a      	adds	r2, r3, #1
 800cc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cc70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cc74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc78:	d112      	bne.n	800cca0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d016      	beq.n	800ccb0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc84:	3324      	adds	r3, #36	; 0x24
 800cc86:	4618      	mov	r0, r3
 800cc88:	f001 f8c2 	bl	800de10 <xTaskRemoveFromEventList>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d00e      	beq.n	800ccb0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d00b      	beq.n	800ccb0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	601a      	str	r2, [r3, #0]
 800cc9e:	e007      	b.n	800ccb0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cca4:	3301      	adds	r3, #1
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	b25a      	sxtb	r2, r3
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	637b      	str	r3, [r7, #52]	; 0x34
 800ccb4:	e001      	b.n	800ccba <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	637b      	str	r3, [r7, #52]	; 0x34
 800ccba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccbc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	f383 8811 	msr	BASEPRI, r3
}
 800ccc4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ccc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3738      	adds	r7, #56	; 0x38
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b08c      	sub	sp, #48	; 0x30
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d10a      	bne.n	800cd00 <xQueueReceive+0x30>
	__asm volatile
 800ccea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccee:	f383 8811 	msr	BASEPRI, r3
 800ccf2:	f3bf 8f6f 	isb	sy
 800ccf6:	f3bf 8f4f 	dsb	sy
 800ccfa:	623b      	str	r3, [r7, #32]
}
 800ccfc:	bf00      	nop
 800ccfe:	e7fe      	b.n	800ccfe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d103      	bne.n	800cd0e <xQueueReceive+0x3e>
 800cd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d101      	bne.n	800cd12 <xQueueReceive+0x42>
 800cd0e:	2301      	movs	r3, #1
 800cd10:	e000      	b.n	800cd14 <xQueueReceive+0x44>
 800cd12:	2300      	movs	r3, #0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d10a      	bne.n	800cd2e <xQueueReceive+0x5e>
	__asm volatile
 800cd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd1c:	f383 8811 	msr	BASEPRI, r3
 800cd20:	f3bf 8f6f 	isb	sy
 800cd24:	f3bf 8f4f 	dsb	sy
 800cd28:	61fb      	str	r3, [r7, #28]
}
 800cd2a:	bf00      	nop
 800cd2c:	e7fe      	b.n	800cd2c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd2e:	f001 fa2d 	bl	800e18c <xTaskGetSchedulerState>
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d102      	bne.n	800cd3e <xQueueReceive+0x6e>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d101      	bne.n	800cd42 <xQueueReceive+0x72>
 800cd3e:	2301      	movs	r3, #1
 800cd40:	e000      	b.n	800cd44 <xQueueReceive+0x74>
 800cd42:	2300      	movs	r3, #0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d10a      	bne.n	800cd5e <xQueueReceive+0x8e>
	__asm volatile
 800cd48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4c:	f383 8811 	msr	BASEPRI, r3
 800cd50:	f3bf 8f6f 	isb	sy
 800cd54:	f3bf 8f4f 	dsb	sy
 800cd58:	61bb      	str	r3, [r7, #24]
}
 800cd5a:	bf00      	nop
 800cd5c:	e7fe      	b.n	800cd5c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd5e:	f002 f871 	bl	800ee44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd66:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d01f      	beq.n	800cdae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd6e:	68b9      	ldr	r1, [r7, #8]
 800cd70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd72:	f000 fabe 	bl	800d2f2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd78:	1e5a      	subs	r2, r3, #1
 800cd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd7c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd80:	691b      	ldr	r3, [r3, #16]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d00f      	beq.n	800cda6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd88:	3310      	adds	r3, #16
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f001 f840 	bl	800de10 <xTaskRemoveFromEventList>
 800cd90:	4603      	mov	r3, r0
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d007      	beq.n	800cda6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cd96:	4b3d      	ldr	r3, [pc, #244]	; (800ce8c <xQueueReceive+0x1bc>)
 800cd98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd9c:	601a      	str	r2, [r3, #0]
 800cd9e:	f3bf 8f4f 	dsb	sy
 800cda2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cda6:	f002 f87d 	bl	800eea4 <vPortExitCritical>
				return pdPASS;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	e069      	b.n	800ce82 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d103      	bne.n	800cdbc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cdb4:	f002 f876 	bl	800eea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	e062      	b.n	800ce82 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d106      	bne.n	800cdd0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cdc2:	f107 0310 	add.w	r3, r7, #16
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f001 f886 	bl	800ded8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cdd0:	f002 f868 	bl	800eea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cdd4:	f000 fdf8 	bl	800d9c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cdd8:	f002 f834 	bl	800ee44 <vPortEnterCritical>
 800cddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cde2:	b25b      	sxtb	r3, r3
 800cde4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde8:	d103      	bne.n	800cdf2 <xQueueReceive+0x122>
 800cdea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdec:	2200      	movs	r2, #0
 800cdee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdf8:	b25b      	sxtb	r3, r3
 800cdfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdfe:	d103      	bne.n	800ce08 <xQueueReceive+0x138>
 800ce00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce02:	2200      	movs	r2, #0
 800ce04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce08:	f002 f84c 	bl	800eea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce0c:	1d3a      	adds	r2, r7, #4
 800ce0e:	f107 0310 	add.w	r3, r7, #16
 800ce12:	4611      	mov	r1, r2
 800ce14:	4618      	mov	r0, r3
 800ce16:	f001 f875 	bl	800df04 <xTaskCheckForTimeOut>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d123      	bne.n	800ce68 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce22:	f000 fade 	bl	800d3e2 <prvIsQueueEmpty>
 800ce26:	4603      	mov	r3, r0
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d017      	beq.n	800ce5c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce2e:	3324      	adds	r3, #36	; 0x24
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	4611      	mov	r1, r2
 800ce34:	4618      	mov	r0, r3
 800ce36:	f000 ff9b 	bl	800dd70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ce3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce3c:	f000 fa7f 	bl	800d33e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ce40:	f000 fdd0 	bl	800d9e4 <xTaskResumeAll>
 800ce44:	4603      	mov	r3, r0
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d189      	bne.n	800cd5e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ce4a:	4b10      	ldr	r3, [pc, #64]	; (800ce8c <xQueueReceive+0x1bc>)
 800ce4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce50:	601a      	str	r2, [r3, #0]
 800ce52:	f3bf 8f4f 	dsb	sy
 800ce56:	f3bf 8f6f 	isb	sy
 800ce5a:	e780      	b.n	800cd5e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ce5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce5e:	f000 fa6e 	bl	800d33e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce62:	f000 fdbf 	bl	800d9e4 <xTaskResumeAll>
 800ce66:	e77a      	b.n	800cd5e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ce68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce6a:	f000 fa68 	bl	800d33e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce6e:	f000 fdb9 	bl	800d9e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce74:	f000 fab5 	bl	800d3e2 <prvIsQueueEmpty>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	f43f af6f 	beq.w	800cd5e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ce80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3730      	adds	r7, #48	; 0x30
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	e000ed04 	.word	0xe000ed04

0800ce90 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b08e      	sub	sp, #56	; 0x38
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cea2:	2300      	movs	r3, #0
 800cea4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d10a      	bne.n	800cec2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ceac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb0:	f383 8811 	msr	BASEPRI, r3
 800ceb4:	f3bf 8f6f 	isb	sy
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	623b      	str	r3, [r7, #32]
}
 800cebe:	bf00      	nop
 800cec0:	e7fe      	b.n	800cec0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d00a      	beq.n	800cee0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ceca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cece:	f383 8811 	msr	BASEPRI, r3
 800ced2:	f3bf 8f6f 	isb	sy
 800ced6:	f3bf 8f4f 	dsb	sy
 800ceda:	61fb      	str	r3, [r7, #28]
}
 800cedc:	bf00      	nop
 800cede:	e7fe      	b.n	800cede <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cee0:	f001 f954 	bl	800e18c <xTaskGetSchedulerState>
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d102      	bne.n	800cef0 <xQueueSemaphoreTake+0x60>
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d101      	bne.n	800cef4 <xQueueSemaphoreTake+0x64>
 800cef0:	2301      	movs	r3, #1
 800cef2:	e000      	b.n	800cef6 <xQueueSemaphoreTake+0x66>
 800cef4:	2300      	movs	r3, #0
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d10a      	bne.n	800cf10 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800cefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefe:	f383 8811 	msr	BASEPRI, r3
 800cf02:	f3bf 8f6f 	isb	sy
 800cf06:	f3bf 8f4f 	dsb	sy
 800cf0a:	61bb      	str	r3, [r7, #24]
}
 800cf0c:	bf00      	nop
 800cf0e:	e7fe      	b.n	800cf0e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf10:	f001 ff98 	bl	800ee44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf18:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cf1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d024      	beq.n	800cf6a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cf20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf22:	1e5a      	subs	r2, r3, #1
 800cf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf26:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d104      	bne.n	800cf3a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cf30:	f001 faa2 	bl	800e478 <pvTaskIncrementMutexHeldCount>
 800cf34:	4602      	mov	r2, r0
 800cf36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf38:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3c:	691b      	ldr	r3, [r3, #16]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d00f      	beq.n	800cf62 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf44:	3310      	adds	r3, #16
 800cf46:	4618      	mov	r0, r3
 800cf48:	f000 ff62 	bl	800de10 <xTaskRemoveFromEventList>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d007      	beq.n	800cf62 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf52:	4b54      	ldr	r3, [pc, #336]	; (800d0a4 <xQueueSemaphoreTake+0x214>)
 800cf54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf58:	601a      	str	r2, [r3, #0]
 800cf5a:	f3bf 8f4f 	dsb	sy
 800cf5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf62:	f001 ff9f 	bl	800eea4 <vPortExitCritical>
				return pdPASS;
 800cf66:	2301      	movs	r3, #1
 800cf68:	e097      	b.n	800d09a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d111      	bne.n	800cf94 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cf70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00a      	beq.n	800cf8c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800cf76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7a:	f383 8811 	msr	BASEPRI, r3
 800cf7e:	f3bf 8f6f 	isb	sy
 800cf82:	f3bf 8f4f 	dsb	sy
 800cf86:	617b      	str	r3, [r7, #20]
}
 800cf88:	bf00      	nop
 800cf8a:	e7fe      	b.n	800cf8a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cf8c:	f001 ff8a 	bl	800eea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf90:	2300      	movs	r3, #0
 800cf92:	e082      	b.n	800d09a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d106      	bne.n	800cfa8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf9a:	f107 030c 	add.w	r3, r7, #12
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f000 ff9a 	bl	800ded8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cfa8:	f001 ff7c 	bl	800eea4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cfac:	f000 fd0c 	bl	800d9c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cfb0:	f001 ff48 	bl	800ee44 <vPortEnterCritical>
 800cfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cfba:	b25b      	sxtb	r3, r3
 800cfbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfc0:	d103      	bne.n	800cfca <xQueueSemaphoreTake+0x13a>
 800cfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfd0:	b25b      	sxtb	r3, r3
 800cfd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfd6:	d103      	bne.n	800cfe0 <xQueueSemaphoreTake+0x150>
 800cfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfe0:	f001 ff60 	bl	800eea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cfe4:	463a      	mov	r2, r7
 800cfe6:	f107 030c 	add.w	r3, r7, #12
 800cfea:	4611      	mov	r1, r2
 800cfec:	4618      	mov	r0, r3
 800cfee:	f000 ff89 	bl	800df04 <xTaskCheckForTimeOut>
 800cff2:	4603      	mov	r3, r0
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d132      	bne.n	800d05e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cff8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cffa:	f000 f9f2 	bl	800d3e2 <prvIsQueueEmpty>
 800cffe:	4603      	mov	r3, r0
 800d000:	2b00      	cmp	r3, #0
 800d002:	d026      	beq.n	800d052 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d109      	bne.n	800d020 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d00c:	f001 ff1a 	bl	800ee44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d012:	689b      	ldr	r3, [r3, #8]
 800d014:	4618      	mov	r0, r3
 800d016:	f001 f8d7 	bl	800e1c8 <xTaskPriorityInherit>
 800d01a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d01c:	f001 ff42 	bl	800eea4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d022:	3324      	adds	r3, #36	; 0x24
 800d024:	683a      	ldr	r2, [r7, #0]
 800d026:	4611      	mov	r1, r2
 800d028:	4618      	mov	r0, r3
 800d02a:	f000 fea1 	bl	800dd70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d02e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d030:	f000 f985 	bl	800d33e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d034:	f000 fcd6 	bl	800d9e4 <xTaskResumeAll>
 800d038:	4603      	mov	r3, r0
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	f47f af68 	bne.w	800cf10 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d040:	4b18      	ldr	r3, [pc, #96]	; (800d0a4 <xQueueSemaphoreTake+0x214>)
 800d042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d046:	601a      	str	r2, [r3, #0]
 800d048:	f3bf 8f4f 	dsb	sy
 800d04c:	f3bf 8f6f 	isb	sy
 800d050:	e75e      	b.n	800cf10 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d052:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d054:	f000 f973 	bl	800d33e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d058:	f000 fcc4 	bl	800d9e4 <xTaskResumeAll>
 800d05c:	e758      	b.n	800cf10 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d05e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d060:	f000 f96d 	bl	800d33e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d064:	f000 fcbe 	bl	800d9e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d068:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d06a:	f000 f9ba 	bl	800d3e2 <prvIsQueueEmpty>
 800d06e:	4603      	mov	r3, r0
 800d070:	2b00      	cmp	r3, #0
 800d072:	f43f af4d 	beq.w	800cf10 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d00d      	beq.n	800d098 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d07c:	f001 fee2 	bl	800ee44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d080:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d082:	f000 f8b4 	bl	800d1ee <prvGetDisinheritPriorityAfterTimeout>
 800d086:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08a:	689b      	ldr	r3, [r3, #8]
 800d08c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d08e:	4618      	mov	r0, r3
 800d090:	f001 f970 	bl	800e374 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d094:	f001 ff06 	bl	800eea4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d098:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3738      	adds	r7, #56	; 0x38
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	e000ed04 	.word	0xe000ed04

0800d0a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b08e      	sub	sp, #56	; 0x38
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	60f8      	str	r0, [r7, #12]
 800d0b0:	60b9      	str	r1, [r7, #8]
 800d0b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d10a      	bne.n	800d0d4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c2:	f383 8811 	msr	BASEPRI, r3
 800d0c6:	f3bf 8f6f 	isb	sy
 800d0ca:	f3bf 8f4f 	dsb	sy
 800d0ce:	623b      	str	r3, [r7, #32]
}
 800d0d0:	bf00      	nop
 800d0d2:	e7fe      	b.n	800d0d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d103      	bne.n	800d0e2 <xQueueReceiveFromISR+0x3a>
 800d0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d101      	bne.n	800d0e6 <xQueueReceiveFromISR+0x3e>
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e000      	b.n	800d0e8 <xQueueReceiveFromISR+0x40>
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d10a      	bne.n	800d102 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f0:	f383 8811 	msr	BASEPRI, r3
 800d0f4:	f3bf 8f6f 	isb	sy
 800d0f8:	f3bf 8f4f 	dsb	sy
 800d0fc:	61fb      	str	r3, [r7, #28]
}
 800d0fe:	bf00      	nop
 800d100:	e7fe      	b.n	800d100 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d102:	f001 ff81 	bl	800f008 <vPortValidateInterruptPriority>
	__asm volatile
 800d106:	f3ef 8211 	mrs	r2, BASEPRI
 800d10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10e:	f383 8811 	msr	BASEPRI, r3
 800d112:	f3bf 8f6f 	isb	sy
 800d116:	f3bf 8f4f 	dsb	sy
 800d11a:	61ba      	str	r2, [r7, #24]
 800d11c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d11e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d120:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d126:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d02f      	beq.n	800d18e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d130:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d138:	68b9      	ldr	r1, [r7, #8]
 800d13a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d13c:	f000 f8d9 	bl	800d2f2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d142:	1e5a      	subs	r2, r3, #1
 800d144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d146:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d148:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d150:	d112      	bne.n	800d178 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d154:	691b      	ldr	r3, [r3, #16]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d016      	beq.n	800d188 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d15c:	3310      	adds	r3, #16
 800d15e:	4618      	mov	r0, r3
 800d160:	f000 fe56 	bl	800de10 <xTaskRemoveFromEventList>
 800d164:	4603      	mov	r3, r0
 800d166:	2b00      	cmp	r3, #0
 800d168:	d00e      	beq.n	800d188 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d00b      	beq.n	800d188 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2201      	movs	r2, #1
 800d174:	601a      	str	r2, [r3, #0]
 800d176:	e007      	b.n	800d188 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d17c:	3301      	adds	r3, #1
 800d17e:	b2db      	uxtb	r3, r3
 800d180:	b25a      	sxtb	r2, r3
 800d182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d188:	2301      	movs	r3, #1
 800d18a:	637b      	str	r3, [r7, #52]	; 0x34
 800d18c:	e001      	b.n	800d192 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d18e:	2300      	movs	r3, #0
 800d190:	637b      	str	r3, [r7, #52]	; 0x34
 800d192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d194:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	f383 8811 	msr	BASEPRI, r3
}
 800d19c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3738      	adds	r7, #56	; 0x38
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b084      	sub	sp, #16
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d10a      	bne.n	800d1d0 <vQueueDelete+0x28>
	__asm volatile
 800d1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1be:	f383 8811 	msr	BASEPRI, r3
 800d1c2:	f3bf 8f6f 	isb	sy
 800d1c6:	f3bf 8f4f 	dsb	sy
 800d1ca:	60bb      	str	r3, [r7, #8]
}
 800d1cc:	bf00      	nop
 800d1ce:	e7fe      	b.n	800d1ce <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d1d0:	68f8      	ldr	r0, [r7, #12]
 800d1d2:	f000 f95f 	bl	800d494 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d102      	bne.n	800d1e6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f002 f81d 	bl	800f220 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d1e6:	bf00      	nop
 800d1e8:	3710      	adds	r7, #16
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d1ee:	b480      	push	{r7}
 800d1f0:	b085      	sub	sp, #20
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d006      	beq.n	800d20c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d208:	60fb      	str	r3, [r7, #12]
 800d20a:	e001      	b.n	800d210 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d20c:	2300      	movs	r3, #0
 800d20e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d210:	68fb      	ldr	r3, [r7, #12]
	}
 800d212:	4618      	mov	r0, r3
 800d214:	3714      	adds	r7, #20
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr

0800d21e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d21e:	b580      	push	{r7, lr}
 800d220:	b086      	sub	sp, #24
 800d222:	af00      	add	r7, sp, #0
 800d224:	60f8      	str	r0, [r7, #12]
 800d226:	60b9      	str	r1, [r7, #8]
 800d228:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d22a:	2300      	movs	r3, #0
 800d22c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d232:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d10d      	bne.n	800d258 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d14d      	bne.n	800d2e0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	689b      	ldr	r3, [r3, #8]
 800d248:	4618      	mov	r0, r3
 800d24a:	f001 f825 	bl	800e298 <xTaskPriorityDisinherit>
 800d24e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2200      	movs	r2, #0
 800d254:	609a      	str	r2, [r3, #8]
 800d256:	e043      	b.n	800d2e0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d119      	bne.n	800d292 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	6858      	ldr	r0, [r3, #4]
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d266:	461a      	mov	r2, r3
 800d268:	68b9      	ldr	r1, [r7, #8]
 800d26a:	f003 f9e3 	bl	8010634 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	685a      	ldr	r2, [r3, #4]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d276:	441a      	add	r2, r3
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	685a      	ldr	r2, [r3, #4]
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	689b      	ldr	r3, [r3, #8]
 800d284:	429a      	cmp	r2, r3
 800d286:	d32b      	bcc.n	800d2e0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681a      	ldr	r2, [r3, #0]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	605a      	str	r2, [r3, #4]
 800d290:	e026      	b.n	800d2e0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	68d8      	ldr	r0, [r3, #12]
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d29a:	461a      	mov	r2, r3
 800d29c:	68b9      	ldr	r1, [r7, #8]
 800d29e:	f003 f9c9 	bl	8010634 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	68da      	ldr	r2, [r3, #12]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2aa:	425b      	negs	r3, r3
 800d2ac:	441a      	add	r2, r3
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	68da      	ldr	r2, [r3, #12]
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d207      	bcs.n	800d2ce <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	689a      	ldr	r2, [r3, #8]
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2c6:	425b      	negs	r3, r3
 800d2c8:	441a      	add	r2, r3
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2b02      	cmp	r3, #2
 800d2d2:	d105      	bne.n	800d2e0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d002      	beq.n	800d2e0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	3b01      	subs	r3, #1
 800d2de:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	1c5a      	adds	r2, r3, #1
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d2e8:	697b      	ldr	r3, [r7, #20]
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3718      	adds	r7, #24
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b082      	sub	sp, #8
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
 800d2fa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d300:	2b00      	cmp	r3, #0
 800d302:	d018      	beq.n	800d336 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	68da      	ldr	r2, [r3, #12]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d30c:	441a      	add	r2, r3
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	68da      	ldr	r2, [r3, #12]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	689b      	ldr	r3, [r3, #8]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d303      	bcc.n	800d326 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	68d9      	ldr	r1, [r3, #12]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d32e:	461a      	mov	r2, r3
 800d330:	6838      	ldr	r0, [r7, #0]
 800d332:	f003 f97f 	bl	8010634 <memcpy>
	}
}
 800d336:	bf00      	nop
 800d338:	3708      	adds	r7, #8
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}

0800d33e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d33e:	b580      	push	{r7, lr}
 800d340:	b084      	sub	sp, #16
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d346:	f001 fd7d 	bl	800ee44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d350:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d352:	e011      	b.n	800d378 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d012      	beq.n	800d382 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	3324      	adds	r3, #36	; 0x24
 800d360:	4618      	mov	r0, r3
 800d362:	f000 fd55 	bl	800de10 <xTaskRemoveFromEventList>
 800d366:	4603      	mov	r3, r0
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d001      	beq.n	800d370 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d36c:	f000 fe2c 	bl	800dfc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d370:	7bfb      	ldrb	r3, [r7, #15]
 800d372:	3b01      	subs	r3, #1
 800d374:	b2db      	uxtb	r3, r3
 800d376:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	dce9      	bgt.n	800d354 <prvUnlockQueue+0x16>
 800d380:	e000      	b.n	800d384 <prvUnlockQueue+0x46>
					break;
 800d382:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	22ff      	movs	r2, #255	; 0xff
 800d388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d38c:	f001 fd8a 	bl	800eea4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d390:	f001 fd58 	bl	800ee44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d39a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d39c:	e011      	b.n	800d3c2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	691b      	ldr	r3, [r3, #16]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d012      	beq.n	800d3cc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	3310      	adds	r3, #16
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f000 fd30 	bl	800de10 <xTaskRemoveFromEventList>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d001      	beq.n	800d3ba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d3b6:	f000 fe07 	bl	800dfc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d3ba:	7bbb      	ldrb	r3, [r7, #14]
 800d3bc:	3b01      	subs	r3, #1
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	dce9      	bgt.n	800d39e <prvUnlockQueue+0x60>
 800d3ca:	e000      	b.n	800d3ce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d3cc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	22ff      	movs	r2, #255	; 0xff
 800d3d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d3d6:	f001 fd65 	bl	800eea4 <vPortExitCritical>
}
 800d3da:	bf00      	nop
 800d3dc:	3710      	adds	r7, #16
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b084      	sub	sp, #16
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d3ea:	f001 fd2b 	bl	800ee44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d102      	bne.n	800d3fc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	60fb      	str	r3, [r7, #12]
 800d3fa:	e001      	b.n	800d400 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d400:	f001 fd50 	bl	800eea4 <vPortExitCritical>

	return xReturn;
 800d404:	68fb      	ldr	r3, [r7, #12]
}
 800d406:	4618      	mov	r0, r3
 800d408:	3710      	adds	r7, #16
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}

0800d40e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d40e:	b580      	push	{r7, lr}
 800d410:	b084      	sub	sp, #16
 800d412:	af00      	add	r7, sp, #0
 800d414:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d416:	f001 fd15 	bl	800ee44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d422:	429a      	cmp	r2, r3
 800d424:	d102      	bne.n	800d42c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d426:	2301      	movs	r3, #1
 800d428:	60fb      	str	r3, [r7, #12]
 800d42a:	e001      	b.n	800d430 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d42c:	2300      	movs	r3, #0
 800d42e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d430:	f001 fd38 	bl	800eea4 <vPortExitCritical>

	return xReturn;
 800d434:	68fb      	ldr	r3, [r7, #12]
}
 800d436:	4618      	mov	r0, r3
 800d438:	3710      	adds	r7, #16
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
	...

0800d440 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d440:	b480      	push	{r7}
 800d442:	b085      	sub	sp, #20
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d44a:	2300      	movs	r3, #0
 800d44c:	60fb      	str	r3, [r7, #12]
 800d44e:	e014      	b.n	800d47a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d450:	4a0f      	ldr	r2, [pc, #60]	; (800d490 <vQueueAddToRegistry+0x50>)
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d10b      	bne.n	800d474 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d45c:	490c      	ldr	r1, [pc, #48]	; (800d490 <vQueueAddToRegistry+0x50>)
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	683a      	ldr	r2, [r7, #0]
 800d462:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d466:	4a0a      	ldr	r2, [pc, #40]	; (800d490 <vQueueAddToRegistry+0x50>)
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	00db      	lsls	r3, r3, #3
 800d46c:	4413      	add	r3, r2
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d472:	e006      	b.n	800d482 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	3301      	adds	r3, #1
 800d478:	60fb      	str	r3, [r7, #12]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2b07      	cmp	r3, #7
 800d47e:	d9e7      	bls.n	800d450 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d480:	bf00      	nop
 800d482:	bf00      	nop
 800d484:	3714      	adds	r7, #20
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr
 800d48e:	bf00      	nop
 800d490:	2400e9a4 	.word	0x2400e9a4

0800d494 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d494:	b480      	push	{r7}
 800d496:	b085      	sub	sp, #20
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d49c:	2300      	movs	r3, #0
 800d49e:	60fb      	str	r3, [r7, #12]
 800d4a0:	e016      	b.n	800d4d0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d4a2:	4a10      	ldr	r2, [pc, #64]	; (800d4e4 <vQueueUnregisterQueue+0x50>)
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	00db      	lsls	r3, r3, #3
 800d4a8:	4413      	add	r3, r2
 800d4aa:	685b      	ldr	r3, [r3, #4]
 800d4ac:	687a      	ldr	r2, [r7, #4]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d10b      	bne.n	800d4ca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d4b2:	4a0c      	ldr	r2, [pc, #48]	; (800d4e4 <vQueueUnregisterQueue+0x50>)
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	2100      	movs	r1, #0
 800d4b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d4bc:	4a09      	ldr	r2, [pc, #36]	; (800d4e4 <vQueueUnregisterQueue+0x50>)
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	00db      	lsls	r3, r3, #3
 800d4c2:	4413      	add	r3, r2
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	605a      	str	r2, [r3, #4]
				break;
 800d4c8:	e006      	b.n	800d4d8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	60fb      	str	r3, [r7, #12]
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2b07      	cmp	r3, #7
 800d4d4:	d9e5      	bls.n	800d4a2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d4d6:	bf00      	nop
 800d4d8:	bf00      	nop
 800d4da:	3714      	adds	r7, #20
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr
 800d4e4:	2400e9a4 	.word	0x2400e9a4

0800d4e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b086      	sub	sp, #24
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	60f8      	str	r0, [r7, #12]
 800d4f0:	60b9      	str	r1, [r7, #8]
 800d4f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d4f8:	f001 fca4 	bl	800ee44 <vPortEnterCritical>
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d502:	b25b      	sxtb	r3, r3
 800d504:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d508:	d103      	bne.n	800d512 <vQueueWaitForMessageRestricted+0x2a>
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	2200      	movs	r2, #0
 800d50e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d518:	b25b      	sxtb	r3, r3
 800d51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d51e:	d103      	bne.n	800d528 <vQueueWaitForMessageRestricted+0x40>
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	2200      	movs	r2, #0
 800d524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d528:	f001 fcbc 	bl	800eea4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d530:	2b00      	cmp	r3, #0
 800d532:	d106      	bne.n	800d542 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	3324      	adds	r3, #36	; 0x24
 800d538:	687a      	ldr	r2, [r7, #4]
 800d53a:	68b9      	ldr	r1, [r7, #8]
 800d53c:	4618      	mov	r0, r3
 800d53e:	f000 fc3b 	bl	800ddb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d542:	6978      	ldr	r0, [r7, #20]
 800d544:	f7ff fefb 	bl	800d33e <prvUnlockQueue>
	}
 800d548:	bf00      	nop
 800d54a:	3718      	adds	r7, #24
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d550:	b580      	push	{r7, lr}
 800d552:	b08e      	sub	sp, #56	; 0x38
 800d554:	af04      	add	r7, sp, #16
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	607a      	str	r2, [r7, #4]
 800d55c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d560:	2b00      	cmp	r3, #0
 800d562:	d10a      	bne.n	800d57a <xTaskCreateStatic+0x2a>
	__asm volatile
 800d564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d568:	f383 8811 	msr	BASEPRI, r3
 800d56c:	f3bf 8f6f 	isb	sy
 800d570:	f3bf 8f4f 	dsb	sy
 800d574:	623b      	str	r3, [r7, #32]
}
 800d576:	bf00      	nop
 800d578:	e7fe      	b.n	800d578 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d10a      	bne.n	800d596 <xTaskCreateStatic+0x46>
	__asm volatile
 800d580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d584:	f383 8811 	msr	BASEPRI, r3
 800d588:	f3bf 8f6f 	isb	sy
 800d58c:	f3bf 8f4f 	dsb	sy
 800d590:	61fb      	str	r3, [r7, #28]
}
 800d592:	bf00      	nop
 800d594:	e7fe      	b.n	800d594 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d596:	235c      	movs	r3, #92	; 0x5c
 800d598:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	2b5c      	cmp	r3, #92	; 0x5c
 800d59e:	d00a      	beq.n	800d5b6 <xTaskCreateStatic+0x66>
	__asm volatile
 800d5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a4:	f383 8811 	msr	BASEPRI, r3
 800d5a8:	f3bf 8f6f 	isb	sy
 800d5ac:	f3bf 8f4f 	dsb	sy
 800d5b0:	61bb      	str	r3, [r7, #24]
}
 800d5b2:	bf00      	nop
 800d5b4:	e7fe      	b.n	800d5b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d5b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d01e      	beq.n	800d5fc <xTaskCreateStatic+0xac>
 800d5be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d01b      	beq.n	800d5fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d0:	2202      	movs	r2, #2
 800d5d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	9303      	str	r3, [sp, #12]
 800d5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5dc:	9302      	str	r3, [sp, #8]
 800d5de:	f107 0314 	add.w	r3, r7, #20
 800d5e2:	9301      	str	r3, [sp, #4]
 800d5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e6:	9300      	str	r3, [sp, #0]
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	687a      	ldr	r2, [r7, #4]
 800d5ec:	68b9      	ldr	r1, [r7, #8]
 800d5ee:	68f8      	ldr	r0, [r7, #12]
 800d5f0:	f000 f850 	bl	800d694 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d5f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5f6:	f000 f8dd 	bl	800d7b4 <prvAddNewTaskToReadyList>
 800d5fa:	e001      	b.n	800d600 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d600:	697b      	ldr	r3, [r7, #20]
	}
 800d602:	4618      	mov	r0, r3
 800d604:	3728      	adds	r7, #40	; 0x28
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}

0800d60a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d60a:	b580      	push	{r7, lr}
 800d60c:	b08c      	sub	sp, #48	; 0x30
 800d60e:	af04      	add	r7, sp, #16
 800d610:	60f8      	str	r0, [r7, #12]
 800d612:	60b9      	str	r1, [r7, #8]
 800d614:	603b      	str	r3, [r7, #0]
 800d616:	4613      	mov	r3, r2
 800d618:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d61a:	88fb      	ldrh	r3, [r7, #6]
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	4618      	mov	r0, r3
 800d620:	f001 fd32 	bl	800f088 <pvPortMalloc>
 800d624:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d00e      	beq.n	800d64a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d62c:	205c      	movs	r0, #92	; 0x5c
 800d62e:	f001 fd2b 	bl	800f088 <pvPortMalloc>
 800d632:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d634:	69fb      	ldr	r3, [r7, #28]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d003      	beq.n	800d642 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d63a:	69fb      	ldr	r3, [r7, #28]
 800d63c:	697a      	ldr	r2, [r7, #20]
 800d63e:	631a      	str	r2, [r3, #48]	; 0x30
 800d640:	e005      	b.n	800d64e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d642:	6978      	ldr	r0, [r7, #20]
 800d644:	f001 fdec 	bl	800f220 <vPortFree>
 800d648:	e001      	b.n	800d64e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d64a:	2300      	movs	r3, #0
 800d64c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d64e:	69fb      	ldr	r3, [r7, #28]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d017      	beq.n	800d684 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	2200      	movs	r2, #0
 800d658:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d65c:	88fa      	ldrh	r2, [r7, #6]
 800d65e:	2300      	movs	r3, #0
 800d660:	9303      	str	r3, [sp, #12]
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	9302      	str	r3, [sp, #8]
 800d666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d668:	9301      	str	r3, [sp, #4]
 800d66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d66c:	9300      	str	r3, [sp, #0]
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	68b9      	ldr	r1, [r7, #8]
 800d672:	68f8      	ldr	r0, [r7, #12]
 800d674:	f000 f80e 	bl	800d694 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d678:	69f8      	ldr	r0, [r7, #28]
 800d67a:	f000 f89b 	bl	800d7b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d67e:	2301      	movs	r3, #1
 800d680:	61bb      	str	r3, [r7, #24]
 800d682:	e002      	b.n	800d68a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d684:	f04f 33ff 	mov.w	r3, #4294967295
 800d688:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d68a:	69bb      	ldr	r3, [r7, #24]
	}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3720      	adds	r7, #32
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}

0800d694 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b088      	sub	sp, #32
 800d698:	af00      	add	r7, sp, #0
 800d69a:	60f8      	str	r0, [r7, #12]
 800d69c:	60b9      	str	r1, [r7, #8]
 800d69e:	607a      	str	r2, [r7, #4]
 800d6a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	009b      	lsls	r3, r3, #2
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	21a5      	movs	r1, #165	; 0xa5
 800d6ae:	f002 ffcf 	bl	8010650 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6b6:	6879      	ldr	r1, [r7, #4]
 800d6b8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d6bc:	440b      	add	r3, r1
 800d6be:	009b      	lsls	r3, r3, #2
 800d6c0:	4413      	add	r3, r2
 800d6c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d6c4:	69bb      	ldr	r3, [r7, #24]
 800d6c6:	f023 0307 	bic.w	r3, r3, #7
 800d6ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d6cc:	69bb      	ldr	r3, [r7, #24]
 800d6ce:	f003 0307 	and.w	r3, r3, #7
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d00a      	beq.n	800d6ec <prvInitialiseNewTask+0x58>
	__asm volatile
 800d6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6da:	f383 8811 	msr	BASEPRI, r3
 800d6de:	f3bf 8f6f 	isb	sy
 800d6e2:	f3bf 8f4f 	dsb	sy
 800d6e6:	617b      	str	r3, [r7, #20]
}
 800d6e8:	bf00      	nop
 800d6ea:	e7fe      	b.n	800d6ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d01f      	beq.n	800d732 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	61fb      	str	r3, [r7, #28]
 800d6f6:	e012      	b.n	800d71e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d6f8:	68ba      	ldr	r2, [r7, #8]
 800d6fa:	69fb      	ldr	r3, [r7, #28]
 800d6fc:	4413      	add	r3, r2
 800d6fe:	7819      	ldrb	r1, [r3, #0]
 800d700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d702:	69fb      	ldr	r3, [r7, #28]
 800d704:	4413      	add	r3, r2
 800d706:	3334      	adds	r3, #52	; 0x34
 800d708:	460a      	mov	r2, r1
 800d70a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d70c:	68ba      	ldr	r2, [r7, #8]
 800d70e:	69fb      	ldr	r3, [r7, #28]
 800d710:	4413      	add	r3, r2
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d006      	beq.n	800d726 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d718:	69fb      	ldr	r3, [r7, #28]
 800d71a:	3301      	adds	r3, #1
 800d71c:	61fb      	str	r3, [r7, #28]
 800d71e:	69fb      	ldr	r3, [r7, #28]
 800d720:	2b0f      	cmp	r3, #15
 800d722:	d9e9      	bls.n	800d6f8 <prvInitialiseNewTask+0x64>
 800d724:	e000      	b.n	800d728 <prvInitialiseNewTask+0x94>
			{
				break;
 800d726:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72a:	2200      	movs	r2, #0
 800d72c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d730:	e003      	b.n	800d73a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d734:	2200      	movs	r2, #0
 800d736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d73c:	2b37      	cmp	r3, #55	; 0x37
 800d73e:	d901      	bls.n	800d744 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d740:	2337      	movs	r3, #55	; 0x37
 800d742:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d748:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d74e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d752:	2200      	movs	r2, #0
 800d754:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d758:	3304      	adds	r3, #4
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7fe fe56 	bl	800c40c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d762:	3318      	adds	r3, #24
 800d764:	4618      	mov	r0, r3
 800d766:	f7fe fe51 	bl	800c40c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d76e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d772:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d778:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d77e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d782:	2200      	movs	r2, #0
 800d784:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d788:	2200      	movs	r2, #0
 800d78a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d78e:	683a      	ldr	r2, [r7, #0]
 800d790:	68f9      	ldr	r1, [r7, #12]
 800d792:	69b8      	ldr	r0, [r7, #24]
 800d794:	f001 fa26 	bl	800ebe4 <pxPortInitialiseStack>
 800d798:	4602      	mov	r2, r0
 800d79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d002      	beq.n	800d7aa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d7aa:	bf00      	nop
 800d7ac:	3720      	adds	r7, #32
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
	...

0800d7b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d7bc:	f001 fb42 	bl	800ee44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d7c0:	4b2d      	ldr	r3, [pc, #180]	; (800d878 <prvAddNewTaskToReadyList+0xc4>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	4a2c      	ldr	r2, [pc, #176]	; (800d878 <prvAddNewTaskToReadyList+0xc4>)
 800d7c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d7ca:	4b2c      	ldr	r3, [pc, #176]	; (800d87c <prvAddNewTaskToReadyList+0xc8>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d109      	bne.n	800d7e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d7d2:	4a2a      	ldr	r2, [pc, #168]	; (800d87c <prvAddNewTaskToReadyList+0xc8>)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d7d8:	4b27      	ldr	r3, [pc, #156]	; (800d878 <prvAddNewTaskToReadyList+0xc4>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d110      	bne.n	800d802 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d7e0:	f000 fc16 	bl	800e010 <prvInitialiseTaskLists>
 800d7e4:	e00d      	b.n	800d802 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d7e6:	4b26      	ldr	r3, [pc, #152]	; (800d880 <prvAddNewTaskToReadyList+0xcc>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d109      	bne.n	800d802 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d7ee:	4b23      	ldr	r3, [pc, #140]	; (800d87c <prvAddNewTaskToReadyList+0xc8>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d802      	bhi.n	800d802 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d7fc:	4a1f      	ldr	r2, [pc, #124]	; (800d87c <prvAddNewTaskToReadyList+0xc8>)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d802:	4b20      	ldr	r3, [pc, #128]	; (800d884 <prvAddNewTaskToReadyList+0xd0>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	3301      	adds	r3, #1
 800d808:	4a1e      	ldr	r2, [pc, #120]	; (800d884 <prvAddNewTaskToReadyList+0xd0>)
 800d80a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d80c:	4b1d      	ldr	r3, [pc, #116]	; (800d884 <prvAddNewTaskToReadyList+0xd0>)
 800d80e:	681a      	ldr	r2, [r3, #0]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d818:	4b1b      	ldr	r3, [pc, #108]	; (800d888 <prvAddNewTaskToReadyList+0xd4>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d903      	bls.n	800d828 <prvAddNewTaskToReadyList+0x74>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d824:	4a18      	ldr	r2, [pc, #96]	; (800d888 <prvAddNewTaskToReadyList+0xd4>)
 800d826:	6013      	str	r3, [r2, #0]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d82c:	4613      	mov	r3, r2
 800d82e:	009b      	lsls	r3, r3, #2
 800d830:	4413      	add	r3, r2
 800d832:	009b      	lsls	r3, r3, #2
 800d834:	4a15      	ldr	r2, [pc, #84]	; (800d88c <prvAddNewTaskToReadyList+0xd8>)
 800d836:	441a      	add	r2, r3
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	3304      	adds	r3, #4
 800d83c:	4619      	mov	r1, r3
 800d83e:	4610      	mov	r0, r2
 800d840:	f7fe fdf1 	bl	800c426 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d844:	f001 fb2e 	bl	800eea4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d848:	4b0d      	ldr	r3, [pc, #52]	; (800d880 <prvAddNewTaskToReadyList+0xcc>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d00e      	beq.n	800d86e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d850:	4b0a      	ldr	r3, [pc, #40]	; (800d87c <prvAddNewTaskToReadyList+0xc8>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d207      	bcs.n	800d86e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d85e:	4b0c      	ldr	r3, [pc, #48]	; (800d890 <prvAddNewTaskToReadyList+0xdc>)
 800d860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d864:	601a      	str	r2, [r3, #0]
 800d866:	f3bf 8f4f 	dsb	sy
 800d86a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d86e:	bf00      	nop
 800d870:	3708      	adds	r7, #8
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
 800d876:	bf00      	nop
 800d878:	2400eeb8 	.word	0x2400eeb8
 800d87c:	2400e9e4 	.word	0x2400e9e4
 800d880:	2400eec4 	.word	0x2400eec4
 800d884:	2400eed4 	.word	0x2400eed4
 800d888:	2400eec0 	.word	0x2400eec0
 800d88c:	2400e9e8 	.word	0x2400e9e8
 800d890:	e000ed04 	.word	0xe000ed04

0800d894 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d894:	b580      	push	{r7, lr}
 800d896:	b084      	sub	sp, #16
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d89c:	2300      	movs	r3, #0
 800d89e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d017      	beq.n	800d8d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d8a6:	4b13      	ldr	r3, [pc, #76]	; (800d8f4 <vTaskDelay+0x60>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d00a      	beq.n	800d8c4 <vTaskDelay+0x30>
	__asm volatile
 800d8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b2:	f383 8811 	msr	BASEPRI, r3
 800d8b6:	f3bf 8f6f 	isb	sy
 800d8ba:	f3bf 8f4f 	dsb	sy
 800d8be:	60bb      	str	r3, [r7, #8]
}
 800d8c0:	bf00      	nop
 800d8c2:	e7fe      	b.n	800d8c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d8c4:	f000 f880 	bl	800d9c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d8c8:	2100      	movs	r1, #0
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f000 fde8 	bl	800e4a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d8d0:	f000 f888 	bl	800d9e4 <xTaskResumeAll>
 800d8d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d107      	bne.n	800d8ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d8dc:	4b06      	ldr	r3, [pc, #24]	; (800d8f8 <vTaskDelay+0x64>)
 800d8de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8e2:	601a      	str	r2, [r3, #0]
 800d8e4:	f3bf 8f4f 	dsb	sy
 800d8e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d8ec:	bf00      	nop
 800d8ee:	3710      	adds	r7, #16
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}
 800d8f4:	2400eee0 	.word	0x2400eee0
 800d8f8:	e000ed04 	.word	0xe000ed04

0800d8fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b08a      	sub	sp, #40	; 0x28
 800d900:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d902:	2300      	movs	r3, #0
 800d904:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d906:	2300      	movs	r3, #0
 800d908:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d90a:	463a      	mov	r2, r7
 800d90c:	1d39      	adds	r1, r7, #4
 800d90e:	f107 0308 	add.w	r3, r7, #8
 800d912:	4618      	mov	r0, r3
 800d914:	f7fe fd26 	bl	800c364 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d918:	6839      	ldr	r1, [r7, #0]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	68ba      	ldr	r2, [r7, #8]
 800d91e:	9202      	str	r2, [sp, #8]
 800d920:	9301      	str	r3, [sp, #4]
 800d922:	2300      	movs	r3, #0
 800d924:	9300      	str	r3, [sp, #0]
 800d926:	2300      	movs	r3, #0
 800d928:	460a      	mov	r2, r1
 800d92a:	4921      	ldr	r1, [pc, #132]	; (800d9b0 <vTaskStartScheduler+0xb4>)
 800d92c:	4821      	ldr	r0, [pc, #132]	; (800d9b4 <vTaskStartScheduler+0xb8>)
 800d92e:	f7ff fe0f 	bl	800d550 <xTaskCreateStatic>
 800d932:	4603      	mov	r3, r0
 800d934:	4a20      	ldr	r2, [pc, #128]	; (800d9b8 <vTaskStartScheduler+0xbc>)
 800d936:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d938:	4b1f      	ldr	r3, [pc, #124]	; (800d9b8 <vTaskStartScheduler+0xbc>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d002      	beq.n	800d946 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d940:	2301      	movs	r3, #1
 800d942:	617b      	str	r3, [r7, #20]
 800d944:	e001      	b.n	800d94a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d946:	2300      	movs	r3, #0
 800d948:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d102      	bne.n	800d956 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d950:	f000 fdfa 	bl	800e548 <xTimerCreateTimerTask>
 800d954:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	2b01      	cmp	r3, #1
 800d95a:	d116      	bne.n	800d98a <vTaskStartScheduler+0x8e>
	__asm volatile
 800d95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d960:	f383 8811 	msr	BASEPRI, r3
 800d964:	f3bf 8f6f 	isb	sy
 800d968:	f3bf 8f4f 	dsb	sy
 800d96c:	613b      	str	r3, [r7, #16]
}
 800d96e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d970:	4b12      	ldr	r3, [pc, #72]	; (800d9bc <vTaskStartScheduler+0xc0>)
 800d972:	f04f 32ff 	mov.w	r2, #4294967295
 800d976:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d978:	4b11      	ldr	r3, [pc, #68]	; (800d9c0 <vTaskStartScheduler+0xc4>)
 800d97a:	2201      	movs	r2, #1
 800d97c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d97e:	4b11      	ldr	r3, [pc, #68]	; (800d9c4 <vTaskStartScheduler+0xc8>)
 800d980:	2200      	movs	r2, #0
 800d982:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d984:	f001 f9bc 	bl	800ed00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d988:	e00e      	b.n	800d9a8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d990:	d10a      	bne.n	800d9a8 <vTaskStartScheduler+0xac>
	__asm volatile
 800d992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d996:	f383 8811 	msr	BASEPRI, r3
 800d99a:	f3bf 8f6f 	isb	sy
 800d99e:	f3bf 8f4f 	dsb	sy
 800d9a2:	60fb      	str	r3, [r7, #12]
}
 800d9a4:	bf00      	nop
 800d9a6:	e7fe      	b.n	800d9a6 <vTaskStartScheduler+0xaa>
}
 800d9a8:	bf00      	nop
 800d9aa:	3718      	adds	r7, #24
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}
 800d9b0:	08010820 	.word	0x08010820
 800d9b4:	0800dfe1 	.word	0x0800dfe1
 800d9b8:	2400eedc 	.word	0x2400eedc
 800d9bc:	2400eed8 	.word	0x2400eed8
 800d9c0:	2400eec4 	.word	0x2400eec4
 800d9c4:	2400eebc 	.word	0x2400eebc

0800d9c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d9cc:	4b04      	ldr	r3, [pc, #16]	; (800d9e0 <vTaskSuspendAll+0x18>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	4a03      	ldr	r2, [pc, #12]	; (800d9e0 <vTaskSuspendAll+0x18>)
 800d9d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d9d6:	bf00      	nop
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr
 800d9e0:	2400eee0 	.word	0x2400eee0

0800d9e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b084      	sub	sp, #16
 800d9e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d9f2:	4b42      	ldr	r3, [pc, #264]	; (800dafc <xTaskResumeAll+0x118>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d10a      	bne.n	800da10 <xTaskResumeAll+0x2c>
	__asm volatile
 800d9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9fe:	f383 8811 	msr	BASEPRI, r3
 800da02:	f3bf 8f6f 	isb	sy
 800da06:	f3bf 8f4f 	dsb	sy
 800da0a:	603b      	str	r3, [r7, #0]
}
 800da0c:	bf00      	nop
 800da0e:	e7fe      	b.n	800da0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800da10:	f001 fa18 	bl	800ee44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800da14:	4b39      	ldr	r3, [pc, #228]	; (800dafc <xTaskResumeAll+0x118>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	3b01      	subs	r3, #1
 800da1a:	4a38      	ldr	r2, [pc, #224]	; (800dafc <xTaskResumeAll+0x118>)
 800da1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da1e:	4b37      	ldr	r3, [pc, #220]	; (800dafc <xTaskResumeAll+0x118>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d162      	bne.n	800daec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800da26:	4b36      	ldr	r3, [pc, #216]	; (800db00 <xTaskResumeAll+0x11c>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d05e      	beq.n	800daec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da2e:	e02f      	b.n	800da90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da30:	4b34      	ldr	r3, [pc, #208]	; (800db04 <xTaskResumeAll+0x120>)
 800da32:	68db      	ldr	r3, [r3, #12]
 800da34:	68db      	ldr	r3, [r3, #12]
 800da36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	3318      	adds	r3, #24
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7fe fd4f 	bl	800c4e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	3304      	adds	r3, #4
 800da46:	4618      	mov	r0, r3
 800da48:	f7fe fd4a 	bl	800c4e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da50:	4b2d      	ldr	r3, [pc, #180]	; (800db08 <xTaskResumeAll+0x124>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	429a      	cmp	r2, r3
 800da56:	d903      	bls.n	800da60 <xTaskResumeAll+0x7c>
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da5c:	4a2a      	ldr	r2, [pc, #168]	; (800db08 <xTaskResumeAll+0x124>)
 800da5e:	6013      	str	r3, [r2, #0]
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da64:	4613      	mov	r3, r2
 800da66:	009b      	lsls	r3, r3, #2
 800da68:	4413      	add	r3, r2
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	4a27      	ldr	r2, [pc, #156]	; (800db0c <xTaskResumeAll+0x128>)
 800da6e:	441a      	add	r2, r3
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	3304      	adds	r3, #4
 800da74:	4619      	mov	r1, r3
 800da76:	4610      	mov	r0, r2
 800da78:	f7fe fcd5 	bl	800c426 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da80:	4b23      	ldr	r3, [pc, #140]	; (800db10 <xTaskResumeAll+0x12c>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da86:	429a      	cmp	r2, r3
 800da88:	d302      	bcc.n	800da90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800da8a:	4b22      	ldr	r3, [pc, #136]	; (800db14 <xTaskResumeAll+0x130>)
 800da8c:	2201      	movs	r2, #1
 800da8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da90:	4b1c      	ldr	r3, [pc, #112]	; (800db04 <xTaskResumeAll+0x120>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d1cb      	bne.n	800da30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d001      	beq.n	800daa2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800da9e:	f000 fb55 	bl	800e14c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800daa2:	4b1d      	ldr	r3, [pc, #116]	; (800db18 <xTaskResumeAll+0x134>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d010      	beq.n	800dad0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800daae:	f000 f847 	bl	800db40 <xTaskIncrementTick>
 800dab2:	4603      	mov	r3, r0
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d002      	beq.n	800dabe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dab8:	4b16      	ldr	r3, [pc, #88]	; (800db14 <xTaskResumeAll+0x130>)
 800daba:	2201      	movs	r2, #1
 800dabc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	3b01      	subs	r3, #1
 800dac2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d1f1      	bne.n	800daae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800daca:	4b13      	ldr	r3, [pc, #76]	; (800db18 <xTaskResumeAll+0x134>)
 800dacc:	2200      	movs	r2, #0
 800dace:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dad0:	4b10      	ldr	r3, [pc, #64]	; (800db14 <xTaskResumeAll+0x130>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d009      	beq.n	800daec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dad8:	2301      	movs	r3, #1
 800dada:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dadc:	4b0f      	ldr	r3, [pc, #60]	; (800db1c <xTaskResumeAll+0x138>)
 800dade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dae2:	601a      	str	r2, [r3, #0]
 800dae4:	f3bf 8f4f 	dsb	sy
 800dae8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800daec:	f001 f9da 	bl	800eea4 <vPortExitCritical>

	return xAlreadyYielded;
 800daf0:	68bb      	ldr	r3, [r7, #8]
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3710      	adds	r7, #16
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	2400eee0 	.word	0x2400eee0
 800db00:	2400eeb8 	.word	0x2400eeb8
 800db04:	2400ee78 	.word	0x2400ee78
 800db08:	2400eec0 	.word	0x2400eec0
 800db0c:	2400e9e8 	.word	0x2400e9e8
 800db10:	2400e9e4 	.word	0x2400e9e4
 800db14:	2400eecc 	.word	0x2400eecc
 800db18:	2400eec8 	.word	0x2400eec8
 800db1c:	e000ed04 	.word	0xe000ed04

0800db20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800db26:	4b05      	ldr	r3, [pc, #20]	; (800db3c <xTaskGetTickCount+0x1c>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800db2c:	687b      	ldr	r3, [r7, #4]
}
 800db2e:	4618      	mov	r0, r3
 800db30:	370c      	adds	r7, #12
 800db32:	46bd      	mov	sp, r7
 800db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db38:	4770      	bx	lr
 800db3a:	bf00      	nop
 800db3c:	2400eebc 	.word	0x2400eebc

0800db40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b086      	sub	sp, #24
 800db44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800db46:	2300      	movs	r3, #0
 800db48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db4a:	4b4f      	ldr	r3, [pc, #316]	; (800dc88 <xTaskIncrementTick+0x148>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	f040 808f 	bne.w	800dc72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800db54:	4b4d      	ldr	r3, [pc, #308]	; (800dc8c <xTaskIncrementTick+0x14c>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	3301      	adds	r3, #1
 800db5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800db5c:	4a4b      	ldr	r2, [pc, #300]	; (800dc8c <xTaskIncrementTick+0x14c>)
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800db62:	693b      	ldr	r3, [r7, #16]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d120      	bne.n	800dbaa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800db68:	4b49      	ldr	r3, [pc, #292]	; (800dc90 <xTaskIncrementTick+0x150>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d00a      	beq.n	800db88 <xTaskIncrementTick+0x48>
	__asm volatile
 800db72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db76:	f383 8811 	msr	BASEPRI, r3
 800db7a:	f3bf 8f6f 	isb	sy
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	603b      	str	r3, [r7, #0]
}
 800db84:	bf00      	nop
 800db86:	e7fe      	b.n	800db86 <xTaskIncrementTick+0x46>
 800db88:	4b41      	ldr	r3, [pc, #260]	; (800dc90 <xTaskIncrementTick+0x150>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	60fb      	str	r3, [r7, #12]
 800db8e:	4b41      	ldr	r3, [pc, #260]	; (800dc94 <xTaskIncrementTick+0x154>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	4a3f      	ldr	r2, [pc, #252]	; (800dc90 <xTaskIncrementTick+0x150>)
 800db94:	6013      	str	r3, [r2, #0]
 800db96:	4a3f      	ldr	r2, [pc, #252]	; (800dc94 <xTaskIncrementTick+0x154>)
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	6013      	str	r3, [r2, #0]
 800db9c:	4b3e      	ldr	r3, [pc, #248]	; (800dc98 <xTaskIncrementTick+0x158>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	3301      	adds	r3, #1
 800dba2:	4a3d      	ldr	r2, [pc, #244]	; (800dc98 <xTaskIncrementTick+0x158>)
 800dba4:	6013      	str	r3, [r2, #0]
 800dba6:	f000 fad1 	bl	800e14c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dbaa:	4b3c      	ldr	r3, [pc, #240]	; (800dc9c <xTaskIncrementTick+0x15c>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	693a      	ldr	r2, [r7, #16]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d349      	bcc.n	800dc48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dbb4:	4b36      	ldr	r3, [pc, #216]	; (800dc90 <xTaskIncrementTick+0x150>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d104      	bne.n	800dbc8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbbe:	4b37      	ldr	r3, [pc, #220]	; (800dc9c <xTaskIncrementTick+0x15c>)
 800dbc0:	f04f 32ff 	mov.w	r2, #4294967295
 800dbc4:	601a      	str	r2, [r3, #0]
					break;
 800dbc6:	e03f      	b.n	800dc48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbc8:	4b31      	ldr	r3, [pc, #196]	; (800dc90 <xTaskIncrementTick+0x150>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	68db      	ldr	r3, [r3, #12]
 800dbce:	68db      	ldr	r3, [r3, #12]
 800dbd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	685b      	ldr	r3, [r3, #4]
 800dbd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dbd8:	693a      	ldr	r2, [r7, #16]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d203      	bcs.n	800dbe8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dbe0:	4a2e      	ldr	r2, [pc, #184]	; (800dc9c <xTaskIncrementTick+0x15c>)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dbe6:	e02f      	b.n	800dc48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	3304      	adds	r3, #4
 800dbec:	4618      	mov	r0, r3
 800dbee:	f7fe fc77 	bl	800c4e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d004      	beq.n	800dc04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	3318      	adds	r3, #24
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fe fc6e 	bl	800c4e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc08:	4b25      	ldr	r3, [pc, #148]	; (800dca0 <xTaskIncrementTick+0x160>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d903      	bls.n	800dc18 <xTaskIncrementTick+0xd8>
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc14:	4a22      	ldr	r2, [pc, #136]	; (800dca0 <xTaskIncrementTick+0x160>)
 800dc16:	6013      	str	r3, [r2, #0]
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc1c:	4613      	mov	r3, r2
 800dc1e:	009b      	lsls	r3, r3, #2
 800dc20:	4413      	add	r3, r2
 800dc22:	009b      	lsls	r3, r3, #2
 800dc24:	4a1f      	ldr	r2, [pc, #124]	; (800dca4 <xTaskIncrementTick+0x164>)
 800dc26:	441a      	add	r2, r3
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	3304      	adds	r3, #4
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	4610      	mov	r0, r2
 800dc30:	f7fe fbf9 	bl	800c426 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc38:	4b1b      	ldr	r3, [pc, #108]	; (800dca8 <xTaskIncrementTick+0x168>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d3b8      	bcc.n	800dbb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dc42:	2301      	movs	r3, #1
 800dc44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc46:	e7b5      	b.n	800dbb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dc48:	4b17      	ldr	r3, [pc, #92]	; (800dca8 <xTaskIncrementTick+0x168>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc4e:	4915      	ldr	r1, [pc, #84]	; (800dca4 <xTaskIncrementTick+0x164>)
 800dc50:	4613      	mov	r3, r2
 800dc52:	009b      	lsls	r3, r3, #2
 800dc54:	4413      	add	r3, r2
 800dc56:	009b      	lsls	r3, r3, #2
 800dc58:	440b      	add	r3, r1
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d901      	bls.n	800dc64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dc60:	2301      	movs	r3, #1
 800dc62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dc64:	4b11      	ldr	r3, [pc, #68]	; (800dcac <xTaskIncrementTick+0x16c>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d007      	beq.n	800dc7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	617b      	str	r3, [r7, #20]
 800dc70:	e004      	b.n	800dc7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dc72:	4b0f      	ldr	r3, [pc, #60]	; (800dcb0 <xTaskIncrementTick+0x170>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	3301      	adds	r3, #1
 800dc78:	4a0d      	ldr	r2, [pc, #52]	; (800dcb0 <xTaskIncrementTick+0x170>)
 800dc7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dc7c:	697b      	ldr	r3, [r7, #20]
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3718      	adds	r7, #24
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	2400eee0 	.word	0x2400eee0
 800dc8c:	2400eebc 	.word	0x2400eebc
 800dc90:	2400ee70 	.word	0x2400ee70
 800dc94:	2400ee74 	.word	0x2400ee74
 800dc98:	2400eed0 	.word	0x2400eed0
 800dc9c:	2400eed8 	.word	0x2400eed8
 800dca0:	2400eec0 	.word	0x2400eec0
 800dca4:	2400e9e8 	.word	0x2400e9e8
 800dca8:	2400e9e4 	.word	0x2400e9e4
 800dcac:	2400eecc 	.word	0x2400eecc
 800dcb0:	2400eec8 	.word	0x2400eec8

0800dcb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b085      	sub	sp, #20
 800dcb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dcba:	4b28      	ldr	r3, [pc, #160]	; (800dd5c <vTaskSwitchContext+0xa8>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d003      	beq.n	800dcca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dcc2:	4b27      	ldr	r3, [pc, #156]	; (800dd60 <vTaskSwitchContext+0xac>)
 800dcc4:	2201      	movs	r2, #1
 800dcc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dcc8:	e041      	b.n	800dd4e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800dcca:	4b25      	ldr	r3, [pc, #148]	; (800dd60 <vTaskSwitchContext+0xac>)
 800dccc:	2200      	movs	r2, #0
 800dcce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcd0:	4b24      	ldr	r3, [pc, #144]	; (800dd64 <vTaskSwitchContext+0xb0>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	60fb      	str	r3, [r7, #12]
 800dcd6:	e010      	b.n	800dcfa <vTaskSwitchContext+0x46>
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d10a      	bne.n	800dcf4 <vTaskSwitchContext+0x40>
	__asm volatile
 800dcde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce2:	f383 8811 	msr	BASEPRI, r3
 800dce6:	f3bf 8f6f 	isb	sy
 800dcea:	f3bf 8f4f 	dsb	sy
 800dcee:	607b      	str	r3, [r7, #4]
}
 800dcf0:	bf00      	nop
 800dcf2:	e7fe      	b.n	800dcf2 <vTaskSwitchContext+0x3e>
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	3b01      	subs	r3, #1
 800dcf8:	60fb      	str	r3, [r7, #12]
 800dcfa:	491b      	ldr	r1, [pc, #108]	; (800dd68 <vTaskSwitchContext+0xb4>)
 800dcfc:	68fa      	ldr	r2, [r7, #12]
 800dcfe:	4613      	mov	r3, r2
 800dd00:	009b      	lsls	r3, r3, #2
 800dd02:	4413      	add	r3, r2
 800dd04:	009b      	lsls	r3, r3, #2
 800dd06:	440b      	add	r3, r1
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d0e4      	beq.n	800dcd8 <vTaskSwitchContext+0x24>
 800dd0e:	68fa      	ldr	r2, [r7, #12]
 800dd10:	4613      	mov	r3, r2
 800dd12:	009b      	lsls	r3, r3, #2
 800dd14:	4413      	add	r3, r2
 800dd16:	009b      	lsls	r3, r3, #2
 800dd18:	4a13      	ldr	r2, [pc, #76]	; (800dd68 <vTaskSwitchContext+0xb4>)
 800dd1a:	4413      	add	r3, r2
 800dd1c:	60bb      	str	r3, [r7, #8]
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	685a      	ldr	r2, [r3, #4]
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	605a      	str	r2, [r3, #4]
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	685a      	ldr	r2, [r3, #4]
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	3308      	adds	r3, #8
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d104      	bne.n	800dd3e <vTaskSwitchContext+0x8a>
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	685a      	ldr	r2, [r3, #4]
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	605a      	str	r2, [r3, #4]
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	68db      	ldr	r3, [r3, #12]
 800dd44:	4a09      	ldr	r2, [pc, #36]	; (800dd6c <vTaskSwitchContext+0xb8>)
 800dd46:	6013      	str	r3, [r2, #0]
 800dd48:	4a06      	ldr	r2, [pc, #24]	; (800dd64 <vTaskSwitchContext+0xb0>)
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	6013      	str	r3, [r2, #0]
}
 800dd4e:	bf00      	nop
 800dd50:	3714      	adds	r7, #20
 800dd52:	46bd      	mov	sp, r7
 800dd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd58:	4770      	bx	lr
 800dd5a:	bf00      	nop
 800dd5c:	2400eee0 	.word	0x2400eee0
 800dd60:	2400eecc 	.word	0x2400eecc
 800dd64:	2400eec0 	.word	0x2400eec0
 800dd68:	2400e9e8 	.word	0x2400e9e8
 800dd6c:	2400e9e4 	.word	0x2400e9e4

0800dd70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b084      	sub	sp, #16
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d10a      	bne.n	800dd96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd84:	f383 8811 	msr	BASEPRI, r3
 800dd88:	f3bf 8f6f 	isb	sy
 800dd8c:	f3bf 8f4f 	dsb	sy
 800dd90:	60fb      	str	r3, [r7, #12]
}
 800dd92:	bf00      	nop
 800dd94:	e7fe      	b.n	800dd94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dd96:	4b07      	ldr	r3, [pc, #28]	; (800ddb4 <vTaskPlaceOnEventList+0x44>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	3318      	adds	r3, #24
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f7fe fb65 	bl	800c46e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dda4:	2101      	movs	r1, #1
 800dda6:	6838      	ldr	r0, [r7, #0]
 800dda8:	f000 fb7a 	bl	800e4a0 <prvAddCurrentTaskToDelayedList>
}
 800ddac:	bf00      	nop
 800ddae:	3710      	adds	r7, #16
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}
 800ddb4:	2400e9e4 	.word	0x2400e9e4

0800ddb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b086      	sub	sp, #24
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	60b9      	str	r1, [r7, #8]
 800ddc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d10a      	bne.n	800dde0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ddca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddce:	f383 8811 	msr	BASEPRI, r3
 800ddd2:	f3bf 8f6f 	isb	sy
 800ddd6:	f3bf 8f4f 	dsb	sy
 800ddda:	617b      	str	r3, [r7, #20]
}
 800dddc:	bf00      	nop
 800ddde:	e7fe      	b.n	800ddde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dde0:	4b0a      	ldr	r3, [pc, #40]	; (800de0c <vTaskPlaceOnEventListRestricted+0x54>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	3318      	adds	r3, #24
 800dde6:	4619      	mov	r1, r3
 800dde8:	68f8      	ldr	r0, [r7, #12]
 800ddea:	f7fe fb1c 	bl	800c426 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d002      	beq.n	800ddfa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ddf4:	f04f 33ff 	mov.w	r3, #4294967295
 800ddf8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ddfa:	6879      	ldr	r1, [r7, #4]
 800ddfc:	68b8      	ldr	r0, [r7, #8]
 800ddfe:	f000 fb4f 	bl	800e4a0 <prvAddCurrentTaskToDelayedList>
	}
 800de02:	bf00      	nop
 800de04:	3718      	adds	r7, #24
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	2400e9e4 	.word	0x2400e9e4

0800de10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b086      	sub	sp, #24
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	68db      	ldr	r3, [r3, #12]
 800de1c:	68db      	ldr	r3, [r3, #12]
 800de1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d10a      	bne.n	800de3c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800de26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de2a:	f383 8811 	msr	BASEPRI, r3
 800de2e:	f3bf 8f6f 	isb	sy
 800de32:	f3bf 8f4f 	dsb	sy
 800de36:	60fb      	str	r3, [r7, #12]
}
 800de38:	bf00      	nop
 800de3a:	e7fe      	b.n	800de3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	3318      	adds	r3, #24
 800de40:	4618      	mov	r0, r3
 800de42:	f7fe fb4d 	bl	800c4e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de46:	4b1e      	ldr	r3, [pc, #120]	; (800dec0 <xTaskRemoveFromEventList+0xb0>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d11d      	bne.n	800de8a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	3304      	adds	r3, #4
 800de52:	4618      	mov	r0, r3
 800de54:	f7fe fb44 	bl	800c4e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de5c:	4b19      	ldr	r3, [pc, #100]	; (800dec4 <xTaskRemoveFromEventList+0xb4>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	429a      	cmp	r2, r3
 800de62:	d903      	bls.n	800de6c <xTaskRemoveFromEventList+0x5c>
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de68:	4a16      	ldr	r2, [pc, #88]	; (800dec4 <xTaskRemoveFromEventList+0xb4>)
 800de6a:	6013      	str	r3, [r2, #0]
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de70:	4613      	mov	r3, r2
 800de72:	009b      	lsls	r3, r3, #2
 800de74:	4413      	add	r3, r2
 800de76:	009b      	lsls	r3, r3, #2
 800de78:	4a13      	ldr	r2, [pc, #76]	; (800dec8 <xTaskRemoveFromEventList+0xb8>)
 800de7a:	441a      	add	r2, r3
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	3304      	adds	r3, #4
 800de80:	4619      	mov	r1, r3
 800de82:	4610      	mov	r0, r2
 800de84:	f7fe facf 	bl	800c426 <vListInsertEnd>
 800de88:	e005      	b.n	800de96 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	3318      	adds	r3, #24
 800de8e:	4619      	mov	r1, r3
 800de90:	480e      	ldr	r0, [pc, #56]	; (800decc <xTaskRemoveFromEventList+0xbc>)
 800de92:	f7fe fac8 	bl	800c426 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de9a:	4b0d      	ldr	r3, [pc, #52]	; (800ded0 <xTaskRemoveFromEventList+0xc0>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d905      	bls.n	800deb0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dea4:	2301      	movs	r3, #1
 800dea6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dea8:	4b0a      	ldr	r3, [pc, #40]	; (800ded4 <xTaskRemoveFromEventList+0xc4>)
 800deaa:	2201      	movs	r2, #1
 800deac:	601a      	str	r2, [r3, #0]
 800deae:	e001      	b.n	800deb4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800deb0:	2300      	movs	r3, #0
 800deb2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800deb4:	697b      	ldr	r3, [r7, #20]
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3718      	adds	r7, #24
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	2400eee0 	.word	0x2400eee0
 800dec4:	2400eec0 	.word	0x2400eec0
 800dec8:	2400e9e8 	.word	0x2400e9e8
 800decc:	2400ee78 	.word	0x2400ee78
 800ded0:	2400e9e4 	.word	0x2400e9e4
 800ded4:	2400eecc 	.word	0x2400eecc

0800ded8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ded8:	b480      	push	{r7}
 800deda:	b083      	sub	sp, #12
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dee0:	4b06      	ldr	r3, [pc, #24]	; (800defc <vTaskInternalSetTimeOutState+0x24>)
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dee8:	4b05      	ldr	r3, [pc, #20]	; (800df00 <vTaskInternalSetTimeOutState+0x28>)
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	605a      	str	r2, [r3, #4]
}
 800def0:	bf00      	nop
 800def2:	370c      	adds	r7, #12
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr
 800defc:	2400eed0 	.word	0x2400eed0
 800df00:	2400eebc 	.word	0x2400eebc

0800df04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b088      	sub	sp, #32
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d10a      	bne.n	800df2a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800df14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df18:	f383 8811 	msr	BASEPRI, r3
 800df1c:	f3bf 8f6f 	isb	sy
 800df20:	f3bf 8f4f 	dsb	sy
 800df24:	613b      	str	r3, [r7, #16]
}
 800df26:	bf00      	nop
 800df28:	e7fe      	b.n	800df28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d10a      	bne.n	800df46 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800df30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df34:	f383 8811 	msr	BASEPRI, r3
 800df38:	f3bf 8f6f 	isb	sy
 800df3c:	f3bf 8f4f 	dsb	sy
 800df40:	60fb      	str	r3, [r7, #12]
}
 800df42:	bf00      	nop
 800df44:	e7fe      	b.n	800df44 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800df46:	f000 ff7d 	bl	800ee44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800df4a:	4b1d      	ldr	r3, [pc, #116]	; (800dfc0 <xTaskCheckForTimeOut+0xbc>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	69ba      	ldr	r2, [r7, #24]
 800df56:	1ad3      	subs	r3, r2, r3
 800df58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df62:	d102      	bne.n	800df6a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800df64:	2300      	movs	r3, #0
 800df66:	61fb      	str	r3, [r7, #28]
 800df68:	e023      	b.n	800dfb2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681a      	ldr	r2, [r3, #0]
 800df6e:	4b15      	ldr	r3, [pc, #84]	; (800dfc4 <xTaskCheckForTimeOut+0xc0>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	429a      	cmp	r2, r3
 800df74:	d007      	beq.n	800df86 <xTaskCheckForTimeOut+0x82>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	69ba      	ldr	r2, [r7, #24]
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d302      	bcc.n	800df86 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800df80:	2301      	movs	r3, #1
 800df82:	61fb      	str	r3, [r7, #28]
 800df84:	e015      	b.n	800dfb2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	697a      	ldr	r2, [r7, #20]
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d20b      	bcs.n	800dfa8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	681a      	ldr	r2, [r3, #0]
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	1ad2      	subs	r2, r2, r3
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f7ff ff9b 	bl	800ded8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	61fb      	str	r3, [r7, #28]
 800dfa6:	e004      	b.n	800dfb2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dfae:	2301      	movs	r3, #1
 800dfb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dfb2:	f000 ff77 	bl	800eea4 <vPortExitCritical>

	return xReturn;
 800dfb6:	69fb      	ldr	r3, [r7, #28]
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3720      	adds	r7, #32
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}
 800dfc0:	2400eebc 	.word	0x2400eebc
 800dfc4:	2400eed0 	.word	0x2400eed0

0800dfc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dfc8:	b480      	push	{r7}
 800dfca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dfcc:	4b03      	ldr	r3, [pc, #12]	; (800dfdc <vTaskMissedYield+0x14>)
 800dfce:	2201      	movs	r2, #1
 800dfd0:	601a      	str	r2, [r3, #0]
}
 800dfd2:	bf00      	nop
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr
 800dfdc:	2400eecc 	.word	0x2400eecc

0800dfe0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dfe8:	f000 f852 	bl	800e090 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dfec:	4b06      	ldr	r3, [pc, #24]	; (800e008 <prvIdleTask+0x28>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	d9f9      	bls.n	800dfe8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dff4:	4b05      	ldr	r3, [pc, #20]	; (800e00c <prvIdleTask+0x2c>)
 800dff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dffa:	601a      	str	r2, [r3, #0]
 800dffc:	f3bf 8f4f 	dsb	sy
 800e000:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e004:	e7f0      	b.n	800dfe8 <prvIdleTask+0x8>
 800e006:	bf00      	nop
 800e008:	2400e9e8 	.word	0x2400e9e8
 800e00c:	e000ed04 	.word	0xe000ed04

0800e010 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e016:	2300      	movs	r3, #0
 800e018:	607b      	str	r3, [r7, #4]
 800e01a:	e00c      	b.n	800e036 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e01c:	687a      	ldr	r2, [r7, #4]
 800e01e:	4613      	mov	r3, r2
 800e020:	009b      	lsls	r3, r3, #2
 800e022:	4413      	add	r3, r2
 800e024:	009b      	lsls	r3, r3, #2
 800e026:	4a12      	ldr	r2, [pc, #72]	; (800e070 <prvInitialiseTaskLists+0x60>)
 800e028:	4413      	add	r3, r2
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7fe f9ce 	bl	800c3cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	3301      	adds	r3, #1
 800e034:	607b      	str	r3, [r7, #4]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2b37      	cmp	r3, #55	; 0x37
 800e03a:	d9ef      	bls.n	800e01c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e03c:	480d      	ldr	r0, [pc, #52]	; (800e074 <prvInitialiseTaskLists+0x64>)
 800e03e:	f7fe f9c5 	bl	800c3cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e042:	480d      	ldr	r0, [pc, #52]	; (800e078 <prvInitialiseTaskLists+0x68>)
 800e044:	f7fe f9c2 	bl	800c3cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e048:	480c      	ldr	r0, [pc, #48]	; (800e07c <prvInitialiseTaskLists+0x6c>)
 800e04a:	f7fe f9bf 	bl	800c3cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e04e:	480c      	ldr	r0, [pc, #48]	; (800e080 <prvInitialiseTaskLists+0x70>)
 800e050:	f7fe f9bc 	bl	800c3cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e054:	480b      	ldr	r0, [pc, #44]	; (800e084 <prvInitialiseTaskLists+0x74>)
 800e056:	f7fe f9b9 	bl	800c3cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e05a:	4b0b      	ldr	r3, [pc, #44]	; (800e088 <prvInitialiseTaskLists+0x78>)
 800e05c:	4a05      	ldr	r2, [pc, #20]	; (800e074 <prvInitialiseTaskLists+0x64>)
 800e05e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e060:	4b0a      	ldr	r3, [pc, #40]	; (800e08c <prvInitialiseTaskLists+0x7c>)
 800e062:	4a05      	ldr	r2, [pc, #20]	; (800e078 <prvInitialiseTaskLists+0x68>)
 800e064:	601a      	str	r2, [r3, #0]
}
 800e066:	bf00      	nop
 800e068:	3708      	adds	r7, #8
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	2400e9e8 	.word	0x2400e9e8
 800e074:	2400ee48 	.word	0x2400ee48
 800e078:	2400ee5c 	.word	0x2400ee5c
 800e07c:	2400ee78 	.word	0x2400ee78
 800e080:	2400ee8c 	.word	0x2400ee8c
 800e084:	2400eea4 	.word	0x2400eea4
 800e088:	2400ee70 	.word	0x2400ee70
 800e08c:	2400ee74 	.word	0x2400ee74

0800e090 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e096:	e019      	b.n	800e0cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e098:	f000 fed4 	bl	800ee44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e09c:	4b10      	ldr	r3, [pc, #64]	; (800e0e0 <prvCheckTasksWaitingTermination+0x50>)
 800e09e:	68db      	ldr	r3, [r3, #12]
 800e0a0:	68db      	ldr	r3, [r3, #12]
 800e0a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	3304      	adds	r3, #4
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7fe fa19 	bl	800c4e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e0ae:	4b0d      	ldr	r3, [pc, #52]	; (800e0e4 <prvCheckTasksWaitingTermination+0x54>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	3b01      	subs	r3, #1
 800e0b4:	4a0b      	ldr	r2, [pc, #44]	; (800e0e4 <prvCheckTasksWaitingTermination+0x54>)
 800e0b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e0b8:	4b0b      	ldr	r3, [pc, #44]	; (800e0e8 <prvCheckTasksWaitingTermination+0x58>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	3b01      	subs	r3, #1
 800e0be:	4a0a      	ldr	r2, [pc, #40]	; (800e0e8 <prvCheckTasksWaitingTermination+0x58>)
 800e0c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e0c2:	f000 feef 	bl	800eea4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 f810 	bl	800e0ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e0cc:	4b06      	ldr	r3, [pc, #24]	; (800e0e8 <prvCheckTasksWaitingTermination+0x58>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d1e1      	bne.n	800e098 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e0d4:	bf00      	nop
 800e0d6:	bf00      	nop
 800e0d8:	3708      	adds	r7, #8
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}
 800e0de:	bf00      	nop
 800e0e0:	2400ee8c 	.word	0x2400ee8c
 800e0e4:	2400eeb8 	.word	0x2400eeb8
 800e0e8:	2400eea0 	.word	0x2400eea0

0800e0ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d108      	bne.n	800e110 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e102:	4618      	mov	r0, r3
 800e104:	f001 f88c 	bl	800f220 <vPortFree>
				vPortFree( pxTCB );
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f001 f889 	bl	800f220 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e10e:	e018      	b.n	800e142 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e116:	2b01      	cmp	r3, #1
 800e118:	d103      	bne.n	800e122 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f001 f880 	bl	800f220 <vPortFree>
	}
 800e120:	e00f      	b.n	800e142 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e128:	2b02      	cmp	r3, #2
 800e12a:	d00a      	beq.n	800e142 <prvDeleteTCB+0x56>
	__asm volatile
 800e12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e130:	f383 8811 	msr	BASEPRI, r3
 800e134:	f3bf 8f6f 	isb	sy
 800e138:	f3bf 8f4f 	dsb	sy
 800e13c:	60fb      	str	r3, [r7, #12]
}
 800e13e:	bf00      	nop
 800e140:	e7fe      	b.n	800e140 <prvDeleteTCB+0x54>
	}
 800e142:	bf00      	nop
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
	...

0800e14c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e14c:	b480      	push	{r7}
 800e14e:	b083      	sub	sp, #12
 800e150:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e152:	4b0c      	ldr	r3, [pc, #48]	; (800e184 <prvResetNextTaskUnblockTime+0x38>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d104      	bne.n	800e166 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e15c:	4b0a      	ldr	r3, [pc, #40]	; (800e188 <prvResetNextTaskUnblockTime+0x3c>)
 800e15e:	f04f 32ff 	mov.w	r2, #4294967295
 800e162:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e164:	e008      	b.n	800e178 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e166:	4b07      	ldr	r3, [pc, #28]	; (800e184 <prvResetNextTaskUnblockTime+0x38>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	68db      	ldr	r3, [r3, #12]
 800e16c:	68db      	ldr	r3, [r3, #12]
 800e16e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	685b      	ldr	r3, [r3, #4]
 800e174:	4a04      	ldr	r2, [pc, #16]	; (800e188 <prvResetNextTaskUnblockTime+0x3c>)
 800e176:	6013      	str	r3, [r2, #0]
}
 800e178:	bf00      	nop
 800e17a:	370c      	adds	r7, #12
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr
 800e184:	2400ee70 	.word	0x2400ee70
 800e188:	2400eed8 	.word	0x2400eed8

0800e18c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e18c:	b480      	push	{r7}
 800e18e:	b083      	sub	sp, #12
 800e190:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e192:	4b0b      	ldr	r3, [pc, #44]	; (800e1c0 <xTaskGetSchedulerState+0x34>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d102      	bne.n	800e1a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e19a:	2301      	movs	r3, #1
 800e19c:	607b      	str	r3, [r7, #4]
 800e19e:	e008      	b.n	800e1b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1a0:	4b08      	ldr	r3, [pc, #32]	; (800e1c4 <xTaskGetSchedulerState+0x38>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d102      	bne.n	800e1ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e1a8:	2302      	movs	r3, #2
 800e1aa:	607b      	str	r3, [r7, #4]
 800e1ac:	e001      	b.n	800e1b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e1b2:	687b      	ldr	r3, [r7, #4]
	}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	370c      	adds	r7, #12
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr
 800e1c0:	2400eec4 	.word	0x2400eec4
 800e1c4:	2400eee0 	.word	0x2400eee0

0800e1c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b084      	sub	sp, #16
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d051      	beq.n	800e282 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1e2:	4b2a      	ldr	r3, [pc, #168]	; (800e28c <xTaskPriorityInherit+0xc4>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d241      	bcs.n	800e270 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	699b      	ldr	r3, [r3, #24]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	db06      	blt.n	800e202 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1f4:	4b25      	ldr	r3, [pc, #148]	; (800e28c <xTaskPriorityInherit+0xc4>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	6959      	ldr	r1, [r3, #20]
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e20a:	4613      	mov	r3, r2
 800e20c:	009b      	lsls	r3, r3, #2
 800e20e:	4413      	add	r3, r2
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	4a1f      	ldr	r2, [pc, #124]	; (800e290 <xTaskPriorityInherit+0xc8>)
 800e214:	4413      	add	r3, r2
 800e216:	4299      	cmp	r1, r3
 800e218:	d122      	bne.n	800e260 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	3304      	adds	r3, #4
 800e21e:	4618      	mov	r0, r3
 800e220:	f7fe f95e 	bl	800c4e0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e224:	4b19      	ldr	r3, [pc, #100]	; (800e28c <xTaskPriorityInherit+0xc4>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e232:	4b18      	ldr	r3, [pc, #96]	; (800e294 <xTaskPriorityInherit+0xcc>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	429a      	cmp	r2, r3
 800e238:	d903      	bls.n	800e242 <xTaskPriorityInherit+0x7a>
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e23e:	4a15      	ldr	r2, [pc, #84]	; (800e294 <xTaskPriorityInherit+0xcc>)
 800e240:	6013      	str	r3, [r2, #0]
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e246:	4613      	mov	r3, r2
 800e248:	009b      	lsls	r3, r3, #2
 800e24a:	4413      	add	r3, r2
 800e24c:	009b      	lsls	r3, r3, #2
 800e24e:	4a10      	ldr	r2, [pc, #64]	; (800e290 <xTaskPriorityInherit+0xc8>)
 800e250:	441a      	add	r2, r3
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	3304      	adds	r3, #4
 800e256:	4619      	mov	r1, r3
 800e258:	4610      	mov	r0, r2
 800e25a:	f7fe f8e4 	bl	800c426 <vListInsertEnd>
 800e25e:	e004      	b.n	800e26a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e260:	4b0a      	ldr	r3, [pc, #40]	; (800e28c <xTaskPriorityInherit+0xc4>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e26a:	2301      	movs	r3, #1
 800e26c:	60fb      	str	r3, [r7, #12]
 800e26e:	e008      	b.n	800e282 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e274:	4b05      	ldr	r3, [pc, #20]	; (800e28c <xTaskPriorityInherit+0xc4>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d201      	bcs.n	800e282 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e27e:	2301      	movs	r3, #1
 800e280:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e282:	68fb      	ldr	r3, [r7, #12]
	}
 800e284:	4618      	mov	r0, r3
 800e286:	3710      	adds	r7, #16
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}
 800e28c:	2400e9e4 	.word	0x2400e9e4
 800e290:	2400e9e8 	.word	0x2400e9e8
 800e294:	2400eec0 	.word	0x2400eec0

0800e298 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b086      	sub	sp, #24
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d056      	beq.n	800e35c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e2ae:	4b2e      	ldr	r3, [pc, #184]	; (800e368 <xTaskPriorityDisinherit+0xd0>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	693a      	ldr	r2, [r7, #16]
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d00a      	beq.n	800e2ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2bc:	f383 8811 	msr	BASEPRI, r3
 800e2c0:	f3bf 8f6f 	isb	sy
 800e2c4:	f3bf 8f4f 	dsb	sy
 800e2c8:	60fb      	str	r3, [r7, #12]
}
 800e2ca:	bf00      	nop
 800e2cc:	e7fe      	b.n	800e2cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d10a      	bne.n	800e2ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2da:	f383 8811 	msr	BASEPRI, r3
 800e2de:	f3bf 8f6f 	isb	sy
 800e2e2:	f3bf 8f4f 	dsb	sy
 800e2e6:	60bb      	str	r3, [r7, #8]
}
 800e2e8:	bf00      	nop
 800e2ea:	e7fe      	b.n	800e2ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2f0:	1e5a      	subs	r2, r3, #1
 800e2f2:	693b      	ldr	r3, [r7, #16]
 800e2f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d02c      	beq.n	800e35c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e306:	2b00      	cmp	r3, #0
 800e308:	d128      	bne.n	800e35c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	3304      	adds	r3, #4
 800e30e:	4618      	mov	r0, r3
 800e310:	f7fe f8e6 	bl	800c4e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e320:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e324:	693b      	ldr	r3, [r7, #16]
 800e326:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e32c:	4b0f      	ldr	r3, [pc, #60]	; (800e36c <xTaskPriorityDisinherit+0xd4>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	429a      	cmp	r2, r3
 800e332:	d903      	bls.n	800e33c <xTaskPriorityDisinherit+0xa4>
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e338:	4a0c      	ldr	r2, [pc, #48]	; (800e36c <xTaskPriorityDisinherit+0xd4>)
 800e33a:	6013      	str	r3, [r2, #0]
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e340:	4613      	mov	r3, r2
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	4413      	add	r3, r2
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	4a09      	ldr	r2, [pc, #36]	; (800e370 <xTaskPriorityDisinherit+0xd8>)
 800e34a:	441a      	add	r2, r3
 800e34c:	693b      	ldr	r3, [r7, #16]
 800e34e:	3304      	adds	r3, #4
 800e350:	4619      	mov	r1, r3
 800e352:	4610      	mov	r0, r2
 800e354:	f7fe f867 	bl	800c426 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e358:	2301      	movs	r3, #1
 800e35a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e35c:	697b      	ldr	r3, [r7, #20]
	}
 800e35e:	4618      	mov	r0, r3
 800e360:	3718      	adds	r7, #24
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
 800e366:	bf00      	nop
 800e368:	2400e9e4 	.word	0x2400e9e4
 800e36c:	2400eec0 	.word	0x2400eec0
 800e370:	2400e9e8 	.word	0x2400e9e8

0800e374 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e374:	b580      	push	{r7, lr}
 800e376:	b088      	sub	sp, #32
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e382:	2301      	movs	r3, #1
 800e384:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d06a      	beq.n	800e462 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e38c:	69bb      	ldr	r3, [r7, #24]
 800e38e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e390:	2b00      	cmp	r3, #0
 800e392:	d10a      	bne.n	800e3aa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e398:	f383 8811 	msr	BASEPRI, r3
 800e39c:	f3bf 8f6f 	isb	sy
 800e3a0:	f3bf 8f4f 	dsb	sy
 800e3a4:	60fb      	str	r3, [r7, #12]
}
 800e3a6:	bf00      	nop
 800e3a8:	e7fe      	b.n	800e3a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e3aa:	69bb      	ldr	r3, [r7, #24]
 800e3ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3ae:	683a      	ldr	r2, [r7, #0]
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	d902      	bls.n	800e3ba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	61fb      	str	r3, [r7, #28]
 800e3b8:	e002      	b.n	800e3c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e3ba:	69bb      	ldr	r3, [r7, #24]
 800e3bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3be:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e3c0:	69bb      	ldr	r3, [r7, #24]
 800e3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c4:	69fa      	ldr	r2, [r7, #28]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d04b      	beq.n	800e462 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e3ca:	69bb      	ldr	r3, [r7, #24]
 800e3cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3ce:	697a      	ldr	r2, [r7, #20]
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d146      	bne.n	800e462 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e3d4:	4b25      	ldr	r3, [pc, #148]	; (800e46c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	69ba      	ldr	r2, [r7, #24]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d10a      	bne.n	800e3f4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e2:	f383 8811 	msr	BASEPRI, r3
 800e3e6:	f3bf 8f6f 	isb	sy
 800e3ea:	f3bf 8f4f 	dsb	sy
 800e3ee:	60bb      	str	r3, [r7, #8]
}
 800e3f0:	bf00      	nop
 800e3f2:	e7fe      	b.n	800e3f2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e3f4:	69bb      	ldr	r3, [r7, #24]
 800e3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3f8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e3fa:	69bb      	ldr	r3, [r7, #24]
 800e3fc:	69fa      	ldr	r2, [r7, #28]
 800e3fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e400:	69bb      	ldr	r3, [r7, #24]
 800e402:	699b      	ldr	r3, [r3, #24]
 800e404:	2b00      	cmp	r3, #0
 800e406:	db04      	blt.n	800e412 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e408:	69fb      	ldr	r3, [r7, #28]
 800e40a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e40e:	69bb      	ldr	r3, [r7, #24]
 800e410:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e412:	69bb      	ldr	r3, [r7, #24]
 800e414:	6959      	ldr	r1, [r3, #20]
 800e416:	693a      	ldr	r2, [r7, #16]
 800e418:	4613      	mov	r3, r2
 800e41a:	009b      	lsls	r3, r3, #2
 800e41c:	4413      	add	r3, r2
 800e41e:	009b      	lsls	r3, r3, #2
 800e420:	4a13      	ldr	r2, [pc, #76]	; (800e470 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e422:	4413      	add	r3, r2
 800e424:	4299      	cmp	r1, r3
 800e426:	d11c      	bne.n	800e462 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e428:	69bb      	ldr	r3, [r7, #24]
 800e42a:	3304      	adds	r3, #4
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7fe f857 	bl	800c4e0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e432:	69bb      	ldr	r3, [r7, #24]
 800e434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e436:	4b0f      	ldr	r3, [pc, #60]	; (800e474 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	429a      	cmp	r2, r3
 800e43c:	d903      	bls.n	800e446 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e43e:	69bb      	ldr	r3, [r7, #24]
 800e440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e442:	4a0c      	ldr	r2, [pc, #48]	; (800e474 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e444:	6013      	str	r3, [r2, #0]
 800e446:	69bb      	ldr	r3, [r7, #24]
 800e448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e44a:	4613      	mov	r3, r2
 800e44c:	009b      	lsls	r3, r3, #2
 800e44e:	4413      	add	r3, r2
 800e450:	009b      	lsls	r3, r3, #2
 800e452:	4a07      	ldr	r2, [pc, #28]	; (800e470 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e454:	441a      	add	r2, r3
 800e456:	69bb      	ldr	r3, [r7, #24]
 800e458:	3304      	adds	r3, #4
 800e45a:	4619      	mov	r1, r3
 800e45c:	4610      	mov	r0, r2
 800e45e:	f7fd ffe2 	bl	800c426 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e462:	bf00      	nop
 800e464:	3720      	adds	r7, #32
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	2400e9e4 	.word	0x2400e9e4
 800e470:	2400e9e8 	.word	0x2400e9e8
 800e474:	2400eec0 	.word	0x2400eec0

0800e478 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e478:	b480      	push	{r7}
 800e47a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e47c:	4b07      	ldr	r3, [pc, #28]	; (800e49c <pvTaskIncrementMutexHeldCount+0x24>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d004      	beq.n	800e48e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e484:	4b05      	ldr	r3, [pc, #20]	; (800e49c <pvTaskIncrementMutexHeldCount+0x24>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e48a:	3201      	adds	r2, #1
 800e48c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e48e:	4b03      	ldr	r3, [pc, #12]	; (800e49c <pvTaskIncrementMutexHeldCount+0x24>)
 800e490:	681b      	ldr	r3, [r3, #0]
	}
 800e492:	4618      	mov	r0, r3
 800e494:	46bd      	mov	sp, r7
 800e496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49a:	4770      	bx	lr
 800e49c:	2400e9e4 	.word	0x2400e9e4

0800e4a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e4aa:	4b21      	ldr	r3, [pc, #132]	; (800e530 <prvAddCurrentTaskToDelayedList+0x90>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4b0:	4b20      	ldr	r3, [pc, #128]	; (800e534 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	3304      	adds	r3, #4
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f7fe f812 	bl	800c4e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4c2:	d10a      	bne.n	800e4da <prvAddCurrentTaskToDelayedList+0x3a>
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d007      	beq.n	800e4da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4ca:	4b1a      	ldr	r3, [pc, #104]	; (800e534 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	3304      	adds	r3, #4
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	4819      	ldr	r0, [pc, #100]	; (800e538 <prvAddCurrentTaskToDelayedList+0x98>)
 800e4d4:	f7fd ffa7 	bl	800c426 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e4d8:	e026      	b.n	800e528 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e4da:	68fa      	ldr	r2, [r7, #12]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	4413      	add	r3, r2
 800e4e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e4e2:	4b14      	ldr	r3, [pc, #80]	; (800e534 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	68ba      	ldr	r2, [r7, #8]
 800e4e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e4ea:	68ba      	ldr	r2, [r7, #8]
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d209      	bcs.n	800e506 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4f2:	4b12      	ldr	r3, [pc, #72]	; (800e53c <prvAddCurrentTaskToDelayedList+0x9c>)
 800e4f4:	681a      	ldr	r2, [r3, #0]
 800e4f6:	4b0f      	ldr	r3, [pc, #60]	; (800e534 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	3304      	adds	r3, #4
 800e4fc:	4619      	mov	r1, r3
 800e4fe:	4610      	mov	r0, r2
 800e500:	f7fd ffb5 	bl	800c46e <vListInsert>
}
 800e504:	e010      	b.n	800e528 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e506:	4b0e      	ldr	r3, [pc, #56]	; (800e540 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	4b0a      	ldr	r3, [pc, #40]	; (800e534 <prvAddCurrentTaskToDelayedList+0x94>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	3304      	adds	r3, #4
 800e510:	4619      	mov	r1, r3
 800e512:	4610      	mov	r0, r2
 800e514:	f7fd ffab 	bl	800c46e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e518:	4b0a      	ldr	r3, [pc, #40]	; (800e544 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	68ba      	ldr	r2, [r7, #8]
 800e51e:	429a      	cmp	r2, r3
 800e520:	d202      	bcs.n	800e528 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e522:	4a08      	ldr	r2, [pc, #32]	; (800e544 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	6013      	str	r3, [r2, #0]
}
 800e528:	bf00      	nop
 800e52a:	3710      	adds	r7, #16
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	2400eebc 	.word	0x2400eebc
 800e534:	2400e9e4 	.word	0x2400e9e4
 800e538:	2400eea4 	.word	0x2400eea4
 800e53c:	2400ee74 	.word	0x2400ee74
 800e540:	2400ee70 	.word	0x2400ee70
 800e544:	2400eed8 	.word	0x2400eed8

0800e548 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b08a      	sub	sp, #40	; 0x28
 800e54c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e54e:	2300      	movs	r3, #0
 800e550:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e552:	f000 fb07 	bl	800eb64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e556:	4b1c      	ldr	r3, [pc, #112]	; (800e5c8 <xTimerCreateTimerTask+0x80>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d021      	beq.n	800e5a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e55e:	2300      	movs	r3, #0
 800e560:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e562:	2300      	movs	r3, #0
 800e564:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e566:	1d3a      	adds	r2, r7, #4
 800e568:	f107 0108 	add.w	r1, r7, #8
 800e56c:	f107 030c 	add.w	r3, r7, #12
 800e570:	4618      	mov	r0, r3
 800e572:	f7fd ff11 	bl	800c398 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e576:	6879      	ldr	r1, [r7, #4]
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	68fa      	ldr	r2, [r7, #12]
 800e57c:	9202      	str	r2, [sp, #8]
 800e57e:	9301      	str	r3, [sp, #4]
 800e580:	2302      	movs	r3, #2
 800e582:	9300      	str	r3, [sp, #0]
 800e584:	2300      	movs	r3, #0
 800e586:	460a      	mov	r2, r1
 800e588:	4910      	ldr	r1, [pc, #64]	; (800e5cc <xTimerCreateTimerTask+0x84>)
 800e58a:	4811      	ldr	r0, [pc, #68]	; (800e5d0 <xTimerCreateTimerTask+0x88>)
 800e58c:	f7fe ffe0 	bl	800d550 <xTaskCreateStatic>
 800e590:	4603      	mov	r3, r0
 800e592:	4a10      	ldr	r2, [pc, #64]	; (800e5d4 <xTimerCreateTimerTask+0x8c>)
 800e594:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e596:	4b0f      	ldr	r3, [pc, #60]	; (800e5d4 <xTimerCreateTimerTask+0x8c>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d001      	beq.n	800e5a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d10a      	bne.n	800e5be <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ac:	f383 8811 	msr	BASEPRI, r3
 800e5b0:	f3bf 8f6f 	isb	sy
 800e5b4:	f3bf 8f4f 	dsb	sy
 800e5b8:	613b      	str	r3, [r7, #16]
}
 800e5ba:	bf00      	nop
 800e5bc:	e7fe      	b.n	800e5bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e5be:	697b      	ldr	r3, [r7, #20]
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3718      	adds	r7, #24
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	2400ef14 	.word	0x2400ef14
 800e5cc:	08010828 	.word	0x08010828
 800e5d0:	0800e70d 	.word	0x0800e70d
 800e5d4:	2400ef18 	.word	0x2400ef18

0800e5d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b08a      	sub	sp, #40	; 0x28
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	60f8      	str	r0, [r7, #12]
 800e5e0:	60b9      	str	r1, [r7, #8]
 800e5e2:	607a      	str	r2, [r7, #4]
 800e5e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d10a      	bne.n	800e606 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f4:	f383 8811 	msr	BASEPRI, r3
 800e5f8:	f3bf 8f6f 	isb	sy
 800e5fc:	f3bf 8f4f 	dsb	sy
 800e600:	623b      	str	r3, [r7, #32]
}
 800e602:	bf00      	nop
 800e604:	e7fe      	b.n	800e604 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e606:	4b1a      	ldr	r3, [pc, #104]	; (800e670 <xTimerGenericCommand+0x98>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d02a      	beq.n	800e664 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e61a:	68bb      	ldr	r3, [r7, #8]
 800e61c:	2b05      	cmp	r3, #5
 800e61e:	dc18      	bgt.n	800e652 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e620:	f7ff fdb4 	bl	800e18c <xTaskGetSchedulerState>
 800e624:	4603      	mov	r3, r0
 800e626:	2b02      	cmp	r3, #2
 800e628:	d109      	bne.n	800e63e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e62a:	4b11      	ldr	r3, [pc, #68]	; (800e670 <xTimerGenericCommand+0x98>)
 800e62c:	6818      	ldr	r0, [r3, #0]
 800e62e:	f107 0110 	add.w	r1, r7, #16
 800e632:	2300      	movs	r3, #0
 800e634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e636:	f7fe f925 	bl	800c884 <xQueueGenericSend>
 800e63a:	6278      	str	r0, [r7, #36]	; 0x24
 800e63c:	e012      	b.n	800e664 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e63e:	4b0c      	ldr	r3, [pc, #48]	; (800e670 <xTimerGenericCommand+0x98>)
 800e640:	6818      	ldr	r0, [r3, #0]
 800e642:	f107 0110 	add.w	r1, r7, #16
 800e646:	2300      	movs	r3, #0
 800e648:	2200      	movs	r2, #0
 800e64a:	f7fe f91b 	bl	800c884 <xQueueGenericSend>
 800e64e:	6278      	str	r0, [r7, #36]	; 0x24
 800e650:	e008      	b.n	800e664 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e652:	4b07      	ldr	r3, [pc, #28]	; (800e670 <xTimerGenericCommand+0x98>)
 800e654:	6818      	ldr	r0, [r3, #0]
 800e656:	f107 0110 	add.w	r1, r7, #16
 800e65a:	2300      	movs	r3, #0
 800e65c:	683a      	ldr	r2, [r7, #0]
 800e65e:	f7fe fa0f 	bl	800ca80 <xQueueGenericSendFromISR>
 800e662:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e666:	4618      	mov	r0, r3
 800e668:	3728      	adds	r7, #40	; 0x28
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	bf00      	nop
 800e670:	2400ef14 	.word	0x2400ef14

0800e674 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b088      	sub	sp, #32
 800e678:	af02      	add	r7, sp, #8
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e67e:	4b22      	ldr	r3, [pc, #136]	; (800e708 <prvProcessExpiredTimer+0x94>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	68db      	ldr	r3, [r3, #12]
 800e684:	68db      	ldr	r3, [r3, #12]
 800e686:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	3304      	adds	r3, #4
 800e68c:	4618      	mov	r0, r3
 800e68e:	f7fd ff27 	bl	800c4e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e698:	f003 0304 	and.w	r3, r3, #4
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d022      	beq.n	800e6e6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	699a      	ldr	r2, [r3, #24]
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	18d1      	adds	r1, r2, r3
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	683a      	ldr	r2, [r7, #0]
 800e6ac:	6978      	ldr	r0, [r7, #20]
 800e6ae:	f000 f8d1 	bl	800e854 <prvInsertTimerInActiveList>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d01f      	beq.n	800e6f8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	9300      	str	r3, [sp, #0]
 800e6bc:	2300      	movs	r3, #0
 800e6be:	687a      	ldr	r2, [r7, #4]
 800e6c0:	2100      	movs	r1, #0
 800e6c2:	6978      	ldr	r0, [r7, #20]
 800e6c4:	f7ff ff88 	bl	800e5d8 <xTimerGenericCommand>
 800e6c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d113      	bne.n	800e6f8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d4:	f383 8811 	msr	BASEPRI, r3
 800e6d8:	f3bf 8f6f 	isb	sy
 800e6dc:	f3bf 8f4f 	dsb	sy
 800e6e0:	60fb      	str	r3, [r7, #12]
}
 800e6e2:	bf00      	nop
 800e6e4:	e7fe      	b.n	800e6e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6ec:	f023 0301 	bic.w	r3, r3, #1
 800e6f0:	b2da      	uxtb	r2, r3
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	6a1b      	ldr	r3, [r3, #32]
 800e6fc:	6978      	ldr	r0, [r7, #20]
 800e6fe:	4798      	blx	r3
}
 800e700:	bf00      	nop
 800e702:	3718      	adds	r7, #24
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}
 800e708:	2400ef0c 	.word	0x2400ef0c

0800e70c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b084      	sub	sp, #16
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e714:	f107 0308 	add.w	r3, r7, #8
 800e718:	4618      	mov	r0, r3
 800e71a:	f000 f857 	bl	800e7cc <prvGetNextExpireTime>
 800e71e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	4619      	mov	r1, r3
 800e724:	68f8      	ldr	r0, [r7, #12]
 800e726:	f000 f803 	bl	800e730 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e72a:	f000 f8d5 	bl	800e8d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e72e:	e7f1      	b.n	800e714 <prvTimerTask+0x8>

0800e730 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e73a:	f7ff f945 	bl	800d9c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e73e:	f107 0308 	add.w	r3, r7, #8
 800e742:	4618      	mov	r0, r3
 800e744:	f000 f866 	bl	800e814 <prvSampleTimeNow>
 800e748:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d130      	bne.n	800e7b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d10a      	bne.n	800e76c <prvProcessTimerOrBlockTask+0x3c>
 800e756:	687a      	ldr	r2, [r7, #4]
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d806      	bhi.n	800e76c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e75e:	f7ff f941 	bl	800d9e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e762:	68f9      	ldr	r1, [r7, #12]
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f7ff ff85 	bl	800e674 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e76a:	e024      	b.n	800e7b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d008      	beq.n	800e784 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e772:	4b13      	ldr	r3, [pc, #76]	; (800e7c0 <prvProcessTimerOrBlockTask+0x90>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d101      	bne.n	800e780 <prvProcessTimerOrBlockTask+0x50>
 800e77c:	2301      	movs	r3, #1
 800e77e:	e000      	b.n	800e782 <prvProcessTimerOrBlockTask+0x52>
 800e780:	2300      	movs	r3, #0
 800e782:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e784:	4b0f      	ldr	r3, [pc, #60]	; (800e7c4 <prvProcessTimerOrBlockTask+0x94>)
 800e786:	6818      	ldr	r0, [r3, #0]
 800e788:	687a      	ldr	r2, [r7, #4]
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	1ad3      	subs	r3, r2, r3
 800e78e:	683a      	ldr	r2, [r7, #0]
 800e790:	4619      	mov	r1, r3
 800e792:	f7fe fea9 	bl	800d4e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e796:	f7ff f925 	bl	800d9e4 <xTaskResumeAll>
 800e79a:	4603      	mov	r3, r0
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d10a      	bne.n	800e7b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e7a0:	4b09      	ldr	r3, [pc, #36]	; (800e7c8 <prvProcessTimerOrBlockTask+0x98>)
 800e7a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7a6:	601a      	str	r2, [r3, #0]
 800e7a8:	f3bf 8f4f 	dsb	sy
 800e7ac:	f3bf 8f6f 	isb	sy
}
 800e7b0:	e001      	b.n	800e7b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e7b2:	f7ff f917 	bl	800d9e4 <xTaskResumeAll>
}
 800e7b6:	bf00      	nop
 800e7b8:	3710      	adds	r7, #16
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop
 800e7c0:	2400ef10 	.word	0x2400ef10
 800e7c4:	2400ef14 	.word	0x2400ef14
 800e7c8:	e000ed04 	.word	0xe000ed04

0800e7cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b085      	sub	sp, #20
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e7d4:	4b0e      	ldr	r3, [pc, #56]	; (800e810 <prvGetNextExpireTime+0x44>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d101      	bne.n	800e7e2 <prvGetNextExpireTime+0x16>
 800e7de:	2201      	movs	r2, #1
 800e7e0:	e000      	b.n	800e7e4 <prvGetNextExpireTime+0x18>
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d105      	bne.n	800e7fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e7f0:	4b07      	ldr	r3, [pc, #28]	; (800e810 <prvGetNextExpireTime+0x44>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	68db      	ldr	r3, [r3, #12]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	60fb      	str	r3, [r7, #12]
 800e7fa:	e001      	b.n	800e800 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e800:	68fb      	ldr	r3, [r7, #12]
}
 800e802:	4618      	mov	r0, r3
 800e804:	3714      	adds	r7, #20
 800e806:	46bd      	mov	sp, r7
 800e808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80c:	4770      	bx	lr
 800e80e:	bf00      	nop
 800e810:	2400ef0c 	.word	0x2400ef0c

0800e814 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e81c:	f7ff f980 	bl	800db20 <xTaskGetTickCount>
 800e820:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e822:	4b0b      	ldr	r3, [pc, #44]	; (800e850 <prvSampleTimeNow+0x3c>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	68fa      	ldr	r2, [r7, #12]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d205      	bcs.n	800e838 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e82c:	f000 f936 	bl	800ea9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2201      	movs	r2, #1
 800e834:	601a      	str	r2, [r3, #0]
 800e836:	e002      	b.n	800e83e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2200      	movs	r2, #0
 800e83c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e83e:	4a04      	ldr	r2, [pc, #16]	; (800e850 <prvSampleTimeNow+0x3c>)
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e844:	68fb      	ldr	r3, [r7, #12]
}
 800e846:	4618      	mov	r0, r3
 800e848:	3710      	adds	r7, #16
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
 800e84e:	bf00      	nop
 800e850:	2400ef1c 	.word	0x2400ef1c

0800e854 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b086      	sub	sp, #24
 800e858:	af00      	add	r7, sp, #0
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	607a      	str	r2, [r7, #4]
 800e860:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e862:	2300      	movs	r3, #0
 800e864:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	68ba      	ldr	r2, [r7, #8]
 800e86a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	68fa      	ldr	r2, [r7, #12]
 800e870:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e872:	68ba      	ldr	r2, [r7, #8]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	429a      	cmp	r2, r3
 800e878:	d812      	bhi.n	800e8a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e87a:	687a      	ldr	r2, [r7, #4]
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	1ad2      	subs	r2, r2, r3
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	699b      	ldr	r3, [r3, #24]
 800e884:	429a      	cmp	r2, r3
 800e886:	d302      	bcc.n	800e88e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e888:	2301      	movs	r3, #1
 800e88a:	617b      	str	r3, [r7, #20]
 800e88c:	e01b      	b.n	800e8c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e88e:	4b10      	ldr	r3, [pc, #64]	; (800e8d0 <prvInsertTimerInActiveList+0x7c>)
 800e890:	681a      	ldr	r2, [r3, #0]
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	3304      	adds	r3, #4
 800e896:	4619      	mov	r1, r3
 800e898:	4610      	mov	r0, r2
 800e89a:	f7fd fde8 	bl	800c46e <vListInsert>
 800e89e:	e012      	b.n	800e8c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e8a0:	687a      	ldr	r2, [r7, #4]
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d206      	bcs.n	800e8b6 <prvInsertTimerInActiveList+0x62>
 800e8a8:	68ba      	ldr	r2, [r7, #8]
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d302      	bcc.n	800e8b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	617b      	str	r3, [r7, #20]
 800e8b4:	e007      	b.n	800e8c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e8b6:	4b07      	ldr	r3, [pc, #28]	; (800e8d4 <prvInsertTimerInActiveList+0x80>)
 800e8b8:	681a      	ldr	r2, [r3, #0]
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	3304      	adds	r3, #4
 800e8be:	4619      	mov	r1, r3
 800e8c0:	4610      	mov	r0, r2
 800e8c2:	f7fd fdd4 	bl	800c46e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e8c6:	697b      	ldr	r3, [r7, #20]
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3718      	adds	r7, #24
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}
 800e8d0:	2400ef10 	.word	0x2400ef10
 800e8d4:	2400ef0c 	.word	0x2400ef0c

0800e8d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b08e      	sub	sp, #56	; 0x38
 800e8dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e8de:	e0ca      	b.n	800ea76 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	da18      	bge.n	800e918 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e8e6:	1d3b      	adds	r3, r7, #4
 800e8e8:	3304      	adds	r3, #4
 800e8ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d10a      	bne.n	800e908 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f6:	f383 8811 	msr	BASEPRI, r3
 800e8fa:	f3bf 8f6f 	isb	sy
 800e8fe:	f3bf 8f4f 	dsb	sy
 800e902:	61fb      	str	r3, [r7, #28]
}
 800e904:	bf00      	nop
 800e906:	e7fe      	b.n	800e906 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e90e:	6850      	ldr	r0, [r2, #4]
 800e910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e912:	6892      	ldr	r2, [r2, #8]
 800e914:	4611      	mov	r1, r2
 800e916:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	f2c0 80aa 	blt.w	800ea74 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e926:	695b      	ldr	r3, [r3, #20]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d004      	beq.n	800e936 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92e:	3304      	adds	r3, #4
 800e930:	4618      	mov	r0, r3
 800e932:	f7fd fdd5 	bl	800c4e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e936:	463b      	mov	r3, r7
 800e938:	4618      	mov	r0, r3
 800e93a:	f7ff ff6b 	bl	800e814 <prvSampleTimeNow>
 800e93e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2b09      	cmp	r3, #9
 800e944:	f200 8097 	bhi.w	800ea76 <prvProcessReceivedCommands+0x19e>
 800e948:	a201      	add	r2, pc, #4	; (adr r2, 800e950 <prvProcessReceivedCommands+0x78>)
 800e94a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e94e:	bf00      	nop
 800e950:	0800e979 	.word	0x0800e979
 800e954:	0800e979 	.word	0x0800e979
 800e958:	0800e979 	.word	0x0800e979
 800e95c:	0800e9ed 	.word	0x0800e9ed
 800e960:	0800ea01 	.word	0x0800ea01
 800e964:	0800ea4b 	.word	0x0800ea4b
 800e968:	0800e979 	.word	0x0800e979
 800e96c:	0800e979 	.word	0x0800e979
 800e970:	0800e9ed 	.word	0x0800e9ed
 800e974:	0800ea01 	.word	0x0800ea01
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e97e:	f043 0301 	orr.w	r3, r3, #1
 800e982:	b2da      	uxtb	r2, r3
 800e984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e986:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e98a:	68ba      	ldr	r2, [r7, #8]
 800e98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98e:	699b      	ldr	r3, [r3, #24]
 800e990:	18d1      	adds	r1, r2, r3
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e998:	f7ff ff5c 	bl	800e854 <prvInsertTimerInActiveList>
 800e99c:	4603      	mov	r3, r0
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d069      	beq.n	800ea76 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a4:	6a1b      	ldr	r3, [r3, #32]
 800e9a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9b0:	f003 0304 	and.w	r3, r3, #4
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d05e      	beq.n	800ea76 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e9b8:	68ba      	ldr	r2, [r7, #8]
 800e9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9bc:	699b      	ldr	r3, [r3, #24]
 800e9be:	441a      	add	r2, r3
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	9300      	str	r3, [sp, #0]
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	2100      	movs	r1, #0
 800e9c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9ca:	f7ff fe05 	bl	800e5d8 <xTimerGenericCommand>
 800e9ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e9d0:	6a3b      	ldr	r3, [r7, #32]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d14f      	bne.n	800ea76 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9da:	f383 8811 	msr	BASEPRI, r3
 800e9de:	f3bf 8f6f 	isb	sy
 800e9e2:	f3bf 8f4f 	dsb	sy
 800e9e6:	61bb      	str	r3, [r7, #24]
}
 800e9e8:	bf00      	nop
 800e9ea:	e7fe      	b.n	800e9ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9f2:	f023 0301 	bic.w	r3, r3, #1
 800e9f6:	b2da      	uxtb	r2, r3
 800e9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e9fe:	e03a      	b.n	800ea76 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ea00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea06:	f043 0301 	orr.w	r3, r3, #1
 800ea0a:	b2da      	uxtb	r2, r3
 800ea0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ea12:	68ba      	ldr	r2, [r7, #8]
 800ea14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea16:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ea18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1a:	699b      	ldr	r3, [r3, #24]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d10a      	bne.n	800ea36 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ea20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea24:	f383 8811 	msr	BASEPRI, r3
 800ea28:	f3bf 8f6f 	isb	sy
 800ea2c:	f3bf 8f4f 	dsb	sy
 800ea30:	617b      	str	r3, [r7, #20]
}
 800ea32:	bf00      	nop
 800ea34:	e7fe      	b.n	800ea34 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ea36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea38:	699a      	ldr	r2, [r3, #24]
 800ea3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3c:	18d1      	adds	r1, r2, r3
 800ea3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea44:	f7ff ff06 	bl	800e854 <prvInsertTimerInActiveList>
					break;
 800ea48:	e015      	b.n	800ea76 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ea4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea50:	f003 0302 	and.w	r3, r3, #2
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d103      	bne.n	800ea60 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ea58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea5a:	f000 fbe1 	bl	800f220 <vPortFree>
 800ea5e:	e00a      	b.n	800ea76 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea66:	f023 0301 	bic.w	r3, r3, #1
 800ea6a:	b2da      	uxtb	r2, r3
 800ea6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ea72:	e000      	b.n	800ea76 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ea74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ea76:	4b08      	ldr	r3, [pc, #32]	; (800ea98 <prvProcessReceivedCommands+0x1c0>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	1d39      	adds	r1, r7, #4
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7fe f926 	bl	800ccd0 <xQueueReceive>
 800ea84:	4603      	mov	r3, r0
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	f47f af2a 	bne.w	800e8e0 <prvProcessReceivedCommands+0x8>
	}
}
 800ea8c:	bf00      	nop
 800ea8e:	bf00      	nop
 800ea90:	3730      	adds	r7, #48	; 0x30
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
 800ea96:	bf00      	nop
 800ea98:	2400ef14 	.word	0x2400ef14

0800ea9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b088      	sub	sp, #32
 800eaa0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eaa2:	e048      	b.n	800eb36 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eaa4:	4b2d      	ldr	r3, [pc, #180]	; (800eb5c <prvSwitchTimerLists+0xc0>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	68db      	ldr	r3, [r3, #12]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eaae:	4b2b      	ldr	r3, [pc, #172]	; (800eb5c <prvSwitchTimerLists+0xc0>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	68db      	ldr	r3, [r3, #12]
 800eab4:	68db      	ldr	r3, [r3, #12]
 800eab6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	3304      	adds	r3, #4
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7fd fd0f 	bl	800c4e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	6a1b      	ldr	r3, [r3, #32]
 800eac6:	68f8      	ldr	r0, [r7, #12]
 800eac8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ead0:	f003 0304 	and.w	r3, r3, #4
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d02e      	beq.n	800eb36 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	699b      	ldr	r3, [r3, #24]
 800eadc:	693a      	ldr	r2, [r7, #16]
 800eade:	4413      	add	r3, r2
 800eae0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eae2:	68ba      	ldr	r2, [r7, #8]
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d90e      	bls.n	800eb08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	68ba      	ldr	r2, [r7, #8]
 800eaee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	68fa      	ldr	r2, [r7, #12]
 800eaf4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eaf6:	4b19      	ldr	r3, [pc, #100]	; (800eb5c <prvSwitchTimerLists+0xc0>)
 800eaf8:	681a      	ldr	r2, [r3, #0]
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	3304      	adds	r3, #4
 800eafe:	4619      	mov	r1, r3
 800eb00:	4610      	mov	r0, r2
 800eb02:	f7fd fcb4 	bl	800c46e <vListInsert>
 800eb06:	e016      	b.n	800eb36 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eb08:	2300      	movs	r3, #0
 800eb0a:	9300      	str	r3, [sp, #0]
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	693a      	ldr	r2, [r7, #16]
 800eb10:	2100      	movs	r1, #0
 800eb12:	68f8      	ldr	r0, [r7, #12]
 800eb14:	f7ff fd60 	bl	800e5d8 <xTimerGenericCommand>
 800eb18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d10a      	bne.n	800eb36 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800eb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb24:	f383 8811 	msr	BASEPRI, r3
 800eb28:	f3bf 8f6f 	isb	sy
 800eb2c:	f3bf 8f4f 	dsb	sy
 800eb30:	603b      	str	r3, [r7, #0]
}
 800eb32:	bf00      	nop
 800eb34:	e7fe      	b.n	800eb34 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eb36:	4b09      	ldr	r3, [pc, #36]	; (800eb5c <prvSwitchTimerLists+0xc0>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d1b1      	bne.n	800eaa4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800eb40:	4b06      	ldr	r3, [pc, #24]	; (800eb5c <prvSwitchTimerLists+0xc0>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800eb46:	4b06      	ldr	r3, [pc, #24]	; (800eb60 <prvSwitchTimerLists+0xc4>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	4a04      	ldr	r2, [pc, #16]	; (800eb5c <prvSwitchTimerLists+0xc0>)
 800eb4c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eb4e:	4a04      	ldr	r2, [pc, #16]	; (800eb60 <prvSwitchTimerLists+0xc4>)
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	6013      	str	r3, [r2, #0]
}
 800eb54:	bf00      	nop
 800eb56:	3718      	adds	r7, #24
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}
 800eb5c:	2400ef0c 	.word	0x2400ef0c
 800eb60:	2400ef10 	.word	0x2400ef10

0800eb64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b082      	sub	sp, #8
 800eb68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800eb6a:	f000 f96b 	bl	800ee44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800eb6e:	4b15      	ldr	r3, [pc, #84]	; (800ebc4 <prvCheckForValidListAndQueue+0x60>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d120      	bne.n	800ebb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800eb76:	4814      	ldr	r0, [pc, #80]	; (800ebc8 <prvCheckForValidListAndQueue+0x64>)
 800eb78:	f7fd fc28 	bl	800c3cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800eb7c:	4813      	ldr	r0, [pc, #76]	; (800ebcc <prvCheckForValidListAndQueue+0x68>)
 800eb7e:	f7fd fc25 	bl	800c3cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800eb82:	4b13      	ldr	r3, [pc, #76]	; (800ebd0 <prvCheckForValidListAndQueue+0x6c>)
 800eb84:	4a10      	ldr	r2, [pc, #64]	; (800ebc8 <prvCheckForValidListAndQueue+0x64>)
 800eb86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800eb88:	4b12      	ldr	r3, [pc, #72]	; (800ebd4 <prvCheckForValidListAndQueue+0x70>)
 800eb8a:	4a10      	ldr	r2, [pc, #64]	; (800ebcc <prvCheckForValidListAndQueue+0x68>)
 800eb8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800eb8e:	2300      	movs	r3, #0
 800eb90:	9300      	str	r3, [sp, #0]
 800eb92:	4b11      	ldr	r3, [pc, #68]	; (800ebd8 <prvCheckForValidListAndQueue+0x74>)
 800eb94:	4a11      	ldr	r2, [pc, #68]	; (800ebdc <prvCheckForValidListAndQueue+0x78>)
 800eb96:	2110      	movs	r1, #16
 800eb98:	200a      	movs	r0, #10
 800eb9a:	f7fd fd33 	bl	800c604 <xQueueGenericCreateStatic>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	4a08      	ldr	r2, [pc, #32]	; (800ebc4 <prvCheckForValidListAndQueue+0x60>)
 800eba2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800eba4:	4b07      	ldr	r3, [pc, #28]	; (800ebc4 <prvCheckForValidListAndQueue+0x60>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d005      	beq.n	800ebb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ebac:	4b05      	ldr	r3, [pc, #20]	; (800ebc4 <prvCheckForValidListAndQueue+0x60>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	490b      	ldr	r1, [pc, #44]	; (800ebe0 <prvCheckForValidListAndQueue+0x7c>)
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f7fe fc44 	bl	800d440 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ebb8:	f000 f974 	bl	800eea4 <vPortExitCritical>
}
 800ebbc:	bf00      	nop
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	2400ef14 	.word	0x2400ef14
 800ebc8:	2400eee4 	.word	0x2400eee4
 800ebcc:	2400eef8 	.word	0x2400eef8
 800ebd0:	2400ef0c 	.word	0x2400ef0c
 800ebd4:	2400ef10 	.word	0x2400ef10
 800ebd8:	2400efc0 	.word	0x2400efc0
 800ebdc:	2400ef20 	.word	0x2400ef20
 800ebe0:	08010830 	.word	0x08010830

0800ebe4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b085      	sub	sp, #20
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	60f8      	str	r0, [r7, #12]
 800ebec:	60b9      	str	r1, [r7, #8]
 800ebee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	3b04      	subs	r3, #4
 800ebf4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ebfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	3b04      	subs	r3, #4
 800ec02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	f023 0201 	bic.w	r2, r3, #1
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	3b04      	subs	r3, #4
 800ec12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ec14:	4a0c      	ldr	r2, [pc, #48]	; (800ec48 <pxPortInitialiseStack+0x64>)
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	3b14      	subs	r3, #20
 800ec1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ec20:	687a      	ldr	r2, [r7, #4]
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	3b04      	subs	r3, #4
 800ec2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f06f 0202 	mvn.w	r2, #2
 800ec32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	3b20      	subs	r3, #32
 800ec38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	3714      	adds	r7, #20
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr
 800ec48:	0800ec4d 	.word	0x0800ec4d

0800ec4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b085      	sub	sp, #20
 800ec50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ec52:	2300      	movs	r3, #0
 800ec54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ec56:	4b12      	ldr	r3, [pc, #72]	; (800eca0 <prvTaskExitError+0x54>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec5e:	d00a      	beq.n	800ec76 <prvTaskExitError+0x2a>
	__asm volatile
 800ec60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec64:	f383 8811 	msr	BASEPRI, r3
 800ec68:	f3bf 8f6f 	isb	sy
 800ec6c:	f3bf 8f4f 	dsb	sy
 800ec70:	60fb      	str	r3, [r7, #12]
}
 800ec72:	bf00      	nop
 800ec74:	e7fe      	b.n	800ec74 <prvTaskExitError+0x28>
	__asm volatile
 800ec76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec7a:	f383 8811 	msr	BASEPRI, r3
 800ec7e:	f3bf 8f6f 	isb	sy
 800ec82:	f3bf 8f4f 	dsb	sy
 800ec86:	60bb      	str	r3, [r7, #8]
}
 800ec88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ec8a:	bf00      	nop
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d0fc      	beq.n	800ec8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ec92:	bf00      	nop
 800ec94:	bf00      	nop
 800ec96:	3714      	adds	r7, #20
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr
 800eca0:	24000014 	.word	0x24000014
	...

0800ecb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ecb0:	4b07      	ldr	r3, [pc, #28]	; (800ecd0 <pxCurrentTCBConst2>)
 800ecb2:	6819      	ldr	r1, [r3, #0]
 800ecb4:	6808      	ldr	r0, [r1, #0]
 800ecb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecba:	f380 8809 	msr	PSP, r0
 800ecbe:	f3bf 8f6f 	isb	sy
 800ecc2:	f04f 0000 	mov.w	r0, #0
 800ecc6:	f380 8811 	msr	BASEPRI, r0
 800ecca:	4770      	bx	lr
 800eccc:	f3af 8000 	nop.w

0800ecd0 <pxCurrentTCBConst2>:
 800ecd0:	2400e9e4 	.word	0x2400e9e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ecd4:	bf00      	nop
 800ecd6:	bf00      	nop

0800ecd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ecd8:	4808      	ldr	r0, [pc, #32]	; (800ecfc <prvPortStartFirstTask+0x24>)
 800ecda:	6800      	ldr	r0, [r0, #0]
 800ecdc:	6800      	ldr	r0, [r0, #0]
 800ecde:	f380 8808 	msr	MSP, r0
 800ece2:	f04f 0000 	mov.w	r0, #0
 800ece6:	f380 8814 	msr	CONTROL, r0
 800ecea:	b662      	cpsie	i
 800ecec:	b661      	cpsie	f
 800ecee:	f3bf 8f4f 	dsb	sy
 800ecf2:	f3bf 8f6f 	isb	sy
 800ecf6:	df00      	svc	0
 800ecf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ecfa:	bf00      	nop
 800ecfc:	e000ed08 	.word	0xe000ed08

0800ed00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b086      	sub	sp, #24
 800ed04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ed06:	4b46      	ldr	r3, [pc, #280]	; (800ee20 <xPortStartScheduler+0x120>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	4a46      	ldr	r2, [pc, #280]	; (800ee24 <xPortStartScheduler+0x124>)
 800ed0c:	4293      	cmp	r3, r2
 800ed0e:	d10a      	bne.n	800ed26 <xPortStartScheduler+0x26>
	__asm volatile
 800ed10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed14:	f383 8811 	msr	BASEPRI, r3
 800ed18:	f3bf 8f6f 	isb	sy
 800ed1c:	f3bf 8f4f 	dsb	sy
 800ed20:	613b      	str	r3, [r7, #16]
}
 800ed22:	bf00      	nop
 800ed24:	e7fe      	b.n	800ed24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ed26:	4b3e      	ldr	r3, [pc, #248]	; (800ee20 <xPortStartScheduler+0x120>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	4a3f      	ldr	r2, [pc, #252]	; (800ee28 <xPortStartScheduler+0x128>)
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	d10a      	bne.n	800ed46 <xPortStartScheduler+0x46>
	__asm volatile
 800ed30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed34:	f383 8811 	msr	BASEPRI, r3
 800ed38:	f3bf 8f6f 	isb	sy
 800ed3c:	f3bf 8f4f 	dsb	sy
 800ed40:	60fb      	str	r3, [r7, #12]
}
 800ed42:	bf00      	nop
 800ed44:	e7fe      	b.n	800ed44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ed46:	4b39      	ldr	r3, [pc, #228]	; (800ee2c <xPortStartScheduler+0x12c>)
 800ed48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	781b      	ldrb	r3, [r3, #0]
 800ed4e:	b2db      	uxtb	r3, r3
 800ed50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	22ff      	movs	r2, #255	; 0xff
 800ed56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	b2db      	uxtb	r3, r3
 800ed5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ed60:	78fb      	ldrb	r3, [r7, #3]
 800ed62:	b2db      	uxtb	r3, r3
 800ed64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ed68:	b2da      	uxtb	r2, r3
 800ed6a:	4b31      	ldr	r3, [pc, #196]	; (800ee30 <xPortStartScheduler+0x130>)
 800ed6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ed6e:	4b31      	ldr	r3, [pc, #196]	; (800ee34 <xPortStartScheduler+0x134>)
 800ed70:	2207      	movs	r2, #7
 800ed72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed74:	e009      	b.n	800ed8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ed76:	4b2f      	ldr	r3, [pc, #188]	; (800ee34 <xPortStartScheduler+0x134>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	3b01      	subs	r3, #1
 800ed7c:	4a2d      	ldr	r2, [pc, #180]	; (800ee34 <xPortStartScheduler+0x134>)
 800ed7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ed80:	78fb      	ldrb	r3, [r7, #3]
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	005b      	lsls	r3, r3, #1
 800ed86:	b2db      	uxtb	r3, r3
 800ed88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed8a:	78fb      	ldrb	r3, [r7, #3]
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed92:	2b80      	cmp	r3, #128	; 0x80
 800ed94:	d0ef      	beq.n	800ed76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ed96:	4b27      	ldr	r3, [pc, #156]	; (800ee34 <xPortStartScheduler+0x134>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	f1c3 0307 	rsb	r3, r3, #7
 800ed9e:	2b04      	cmp	r3, #4
 800eda0:	d00a      	beq.n	800edb8 <xPortStartScheduler+0xb8>
	__asm volatile
 800eda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda6:	f383 8811 	msr	BASEPRI, r3
 800edaa:	f3bf 8f6f 	isb	sy
 800edae:	f3bf 8f4f 	dsb	sy
 800edb2:	60bb      	str	r3, [r7, #8]
}
 800edb4:	bf00      	nop
 800edb6:	e7fe      	b.n	800edb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800edb8:	4b1e      	ldr	r3, [pc, #120]	; (800ee34 <xPortStartScheduler+0x134>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	021b      	lsls	r3, r3, #8
 800edbe:	4a1d      	ldr	r2, [pc, #116]	; (800ee34 <xPortStartScheduler+0x134>)
 800edc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800edc2:	4b1c      	ldr	r3, [pc, #112]	; (800ee34 <xPortStartScheduler+0x134>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800edca:	4a1a      	ldr	r2, [pc, #104]	; (800ee34 <xPortStartScheduler+0x134>)
 800edcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	b2da      	uxtb	r2, r3
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800edd6:	4b18      	ldr	r3, [pc, #96]	; (800ee38 <xPortStartScheduler+0x138>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	4a17      	ldr	r2, [pc, #92]	; (800ee38 <xPortStartScheduler+0x138>)
 800eddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ede0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ede2:	4b15      	ldr	r3, [pc, #84]	; (800ee38 <xPortStartScheduler+0x138>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	4a14      	ldr	r2, [pc, #80]	; (800ee38 <xPortStartScheduler+0x138>)
 800ede8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800edec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800edee:	f000 f8dd 	bl	800efac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800edf2:	4b12      	ldr	r3, [pc, #72]	; (800ee3c <xPortStartScheduler+0x13c>)
 800edf4:	2200      	movs	r2, #0
 800edf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800edf8:	f000 f8fc 	bl	800eff4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800edfc:	4b10      	ldr	r3, [pc, #64]	; (800ee40 <xPortStartScheduler+0x140>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4a0f      	ldr	r2, [pc, #60]	; (800ee40 <xPortStartScheduler+0x140>)
 800ee02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ee06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ee08:	f7ff ff66 	bl	800ecd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ee0c:	f7fe ff52 	bl	800dcb4 <vTaskSwitchContext>
	prvTaskExitError();
 800ee10:	f7ff ff1c 	bl	800ec4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ee14:	2300      	movs	r3, #0
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3718      	adds	r7, #24
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
 800ee1e:	bf00      	nop
 800ee20:	e000ed00 	.word	0xe000ed00
 800ee24:	410fc271 	.word	0x410fc271
 800ee28:	410fc270 	.word	0x410fc270
 800ee2c:	e000e400 	.word	0xe000e400
 800ee30:	2400f010 	.word	0x2400f010
 800ee34:	2400f014 	.word	0x2400f014
 800ee38:	e000ed20 	.word	0xe000ed20
 800ee3c:	24000014 	.word	0x24000014
 800ee40:	e000ef34 	.word	0xe000ef34

0800ee44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ee44:	b480      	push	{r7}
 800ee46:	b083      	sub	sp, #12
 800ee48:	af00      	add	r7, sp, #0
	__asm volatile
 800ee4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee4e:	f383 8811 	msr	BASEPRI, r3
 800ee52:	f3bf 8f6f 	isb	sy
 800ee56:	f3bf 8f4f 	dsb	sy
 800ee5a:	607b      	str	r3, [r7, #4]
}
 800ee5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ee5e:	4b0f      	ldr	r3, [pc, #60]	; (800ee9c <vPortEnterCritical+0x58>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	3301      	adds	r3, #1
 800ee64:	4a0d      	ldr	r2, [pc, #52]	; (800ee9c <vPortEnterCritical+0x58>)
 800ee66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ee68:	4b0c      	ldr	r3, [pc, #48]	; (800ee9c <vPortEnterCritical+0x58>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d10f      	bne.n	800ee90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ee70:	4b0b      	ldr	r3, [pc, #44]	; (800eea0 <vPortEnterCritical+0x5c>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d00a      	beq.n	800ee90 <vPortEnterCritical+0x4c>
	__asm volatile
 800ee7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee7e:	f383 8811 	msr	BASEPRI, r3
 800ee82:	f3bf 8f6f 	isb	sy
 800ee86:	f3bf 8f4f 	dsb	sy
 800ee8a:	603b      	str	r3, [r7, #0]
}
 800ee8c:	bf00      	nop
 800ee8e:	e7fe      	b.n	800ee8e <vPortEnterCritical+0x4a>
	}
}
 800ee90:	bf00      	nop
 800ee92:	370c      	adds	r7, #12
 800ee94:	46bd      	mov	sp, r7
 800ee96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9a:	4770      	bx	lr
 800ee9c:	24000014 	.word	0x24000014
 800eea0:	e000ed04 	.word	0xe000ed04

0800eea4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eea4:	b480      	push	{r7}
 800eea6:	b083      	sub	sp, #12
 800eea8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800eeaa:	4b12      	ldr	r3, [pc, #72]	; (800eef4 <vPortExitCritical+0x50>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d10a      	bne.n	800eec8 <vPortExitCritical+0x24>
	__asm volatile
 800eeb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb6:	f383 8811 	msr	BASEPRI, r3
 800eeba:	f3bf 8f6f 	isb	sy
 800eebe:	f3bf 8f4f 	dsb	sy
 800eec2:	607b      	str	r3, [r7, #4]
}
 800eec4:	bf00      	nop
 800eec6:	e7fe      	b.n	800eec6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800eec8:	4b0a      	ldr	r3, [pc, #40]	; (800eef4 <vPortExitCritical+0x50>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	3b01      	subs	r3, #1
 800eece:	4a09      	ldr	r2, [pc, #36]	; (800eef4 <vPortExitCritical+0x50>)
 800eed0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eed2:	4b08      	ldr	r3, [pc, #32]	; (800eef4 <vPortExitCritical+0x50>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d105      	bne.n	800eee6 <vPortExitCritical+0x42>
 800eeda:	2300      	movs	r3, #0
 800eedc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	f383 8811 	msr	BASEPRI, r3
}
 800eee4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eee6:	bf00      	nop
 800eee8:	370c      	adds	r7, #12
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr
 800eef2:	bf00      	nop
 800eef4:	24000014 	.word	0x24000014
	...

0800ef00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ef00:	f3ef 8009 	mrs	r0, PSP
 800ef04:	f3bf 8f6f 	isb	sy
 800ef08:	4b15      	ldr	r3, [pc, #84]	; (800ef60 <pxCurrentTCBConst>)
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	f01e 0f10 	tst.w	lr, #16
 800ef10:	bf08      	it	eq
 800ef12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ef16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef1a:	6010      	str	r0, [r2, #0]
 800ef1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ef20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ef24:	f380 8811 	msr	BASEPRI, r0
 800ef28:	f3bf 8f4f 	dsb	sy
 800ef2c:	f3bf 8f6f 	isb	sy
 800ef30:	f7fe fec0 	bl	800dcb4 <vTaskSwitchContext>
 800ef34:	f04f 0000 	mov.w	r0, #0
 800ef38:	f380 8811 	msr	BASEPRI, r0
 800ef3c:	bc09      	pop	{r0, r3}
 800ef3e:	6819      	ldr	r1, [r3, #0]
 800ef40:	6808      	ldr	r0, [r1, #0]
 800ef42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef46:	f01e 0f10 	tst.w	lr, #16
 800ef4a:	bf08      	it	eq
 800ef4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ef50:	f380 8809 	msr	PSP, r0
 800ef54:	f3bf 8f6f 	isb	sy
 800ef58:	4770      	bx	lr
 800ef5a:	bf00      	nop
 800ef5c:	f3af 8000 	nop.w

0800ef60 <pxCurrentTCBConst>:
 800ef60:	2400e9e4 	.word	0x2400e9e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ef64:	bf00      	nop
 800ef66:	bf00      	nop

0800ef68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b082      	sub	sp, #8
 800ef6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ef6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef72:	f383 8811 	msr	BASEPRI, r3
 800ef76:	f3bf 8f6f 	isb	sy
 800ef7a:	f3bf 8f4f 	dsb	sy
 800ef7e:	607b      	str	r3, [r7, #4]
}
 800ef80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ef82:	f7fe fddd 	bl	800db40 <xTaskIncrementTick>
 800ef86:	4603      	mov	r3, r0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d003      	beq.n	800ef94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ef8c:	4b06      	ldr	r3, [pc, #24]	; (800efa8 <xPortSysTickHandler+0x40>)
 800ef8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef92:	601a      	str	r2, [r3, #0]
 800ef94:	2300      	movs	r3, #0
 800ef96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	f383 8811 	msr	BASEPRI, r3
}
 800ef9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800efa0:	bf00      	nop
 800efa2:	3708      	adds	r7, #8
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}
 800efa8:	e000ed04 	.word	0xe000ed04

0800efac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800efac:	b480      	push	{r7}
 800efae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800efb0:	4b0b      	ldr	r3, [pc, #44]	; (800efe0 <vPortSetupTimerInterrupt+0x34>)
 800efb2:	2200      	movs	r2, #0
 800efb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800efb6:	4b0b      	ldr	r3, [pc, #44]	; (800efe4 <vPortSetupTimerInterrupt+0x38>)
 800efb8:	2200      	movs	r2, #0
 800efba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800efbc:	4b0a      	ldr	r3, [pc, #40]	; (800efe8 <vPortSetupTimerInterrupt+0x3c>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	4a0a      	ldr	r2, [pc, #40]	; (800efec <vPortSetupTimerInterrupt+0x40>)
 800efc2:	fba2 2303 	umull	r2, r3, r2, r3
 800efc6:	099b      	lsrs	r3, r3, #6
 800efc8:	4a09      	ldr	r2, [pc, #36]	; (800eff0 <vPortSetupTimerInterrupt+0x44>)
 800efca:	3b01      	subs	r3, #1
 800efcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800efce:	4b04      	ldr	r3, [pc, #16]	; (800efe0 <vPortSetupTimerInterrupt+0x34>)
 800efd0:	2207      	movs	r2, #7
 800efd2:	601a      	str	r2, [r3, #0]
}
 800efd4:	bf00      	nop
 800efd6:	46bd      	mov	sp, r7
 800efd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efdc:	4770      	bx	lr
 800efde:	bf00      	nop
 800efe0:	e000e010 	.word	0xe000e010
 800efe4:	e000e018 	.word	0xe000e018
 800efe8:	24000004 	.word	0x24000004
 800efec:	10624dd3 	.word	0x10624dd3
 800eff0:	e000e014 	.word	0xe000e014

0800eff4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eff4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f004 <vPortEnableVFP+0x10>
 800eff8:	6801      	ldr	r1, [r0, #0]
 800effa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800effe:	6001      	str	r1, [r0, #0]
 800f000:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f002:	bf00      	nop
 800f004:	e000ed88 	.word	0xe000ed88

0800f008 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f008:	b480      	push	{r7}
 800f00a:	b085      	sub	sp, #20
 800f00c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f00e:	f3ef 8305 	mrs	r3, IPSR
 800f012:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2b0f      	cmp	r3, #15
 800f018:	d914      	bls.n	800f044 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f01a:	4a17      	ldr	r2, [pc, #92]	; (800f078 <vPortValidateInterruptPriority+0x70>)
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	4413      	add	r3, r2
 800f020:	781b      	ldrb	r3, [r3, #0]
 800f022:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f024:	4b15      	ldr	r3, [pc, #84]	; (800f07c <vPortValidateInterruptPriority+0x74>)
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	7afa      	ldrb	r2, [r7, #11]
 800f02a:	429a      	cmp	r2, r3
 800f02c:	d20a      	bcs.n	800f044 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f032:	f383 8811 	msr	BASEPRI, r3
 800f036:	f3bf 8f6f 	isb	sy
 800f03a:	f3bf 8f4f 	dsb	sy
 800f03e:	607b      	str	r3, [r7, #4]
}
 800f040:	bf00      	nop
 800f042:	e7fe      	b.n	800f042 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f044:	4b0e      	ldr	r3, [pc, #56]	; (800f080 <vPortValidateInterruptPriority+0x78>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f04c:	4b0d      	ldr	r3, [pc, #52]	; (800f084 <vPortValidateInterruptPriority+0x7c>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	429a      	cmp	r2, r3
 800f052:	d90a      	bls.n	800f06a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f058:	f383 8811 	msr	BASEPRI, r3
 800f05c:	f3bf 8f6f 	isb	sy
 800f060:	f3bf 8f4f 	dsb	sy
 800f064:	603b      	str	r3, [r7, #0]
}
 800f066:	bf00      	nop
 800f068:	e7fe      	b.n	800f068 <vPortValidateInterruptPriority+0x60>
	}
 800f06a:	bf00      	nop
 800f06c:	3714      	adds	r7, #20
 800f06e:	46bd      	mov	sp, r7
 800f070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f074:	4770      	bx	lr
 800f076:	bf00      	nop
 800f078:	e000e3f0 	.word	0xe000e3f0
 800f07c:	2400f010 	.word	0x2400f010
 800f080:	e000ed0c 	.word	0xe000ed0c
 800f084:	2400f014 	.word	0x2400f014

0800f088 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b08a      	sub	sp, #40	; 0x28
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f090:	2300      	movs	r3, #0
 800f092:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f094:	f7fe fc98 	bl	800d9c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f098:	4b5b      	ldr	r3, [pc, #364]	; (800f208 <pvPortMalloc+0x180>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d101      	bne.n	800f0a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f0a0:	f000 f920 	bl	800f2e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f0a4:	4b59      	ldr	r3, [pc, #356]	; (800f20c <pvPortMalloc+0x184>)
 800f0a6:	681a      	ldr	r2, [r3, #0]
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	4013      	ands	r3, r2
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	f040 8093 	bne.w	800f1d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d01d      	beq.n	800f0f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f0b8:	2208      	movs	r2, #8
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	4413      	add	r3, r2
 800f0be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f003 0307 	and.w	r3, r3, #7
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d014      	beq.n	800f0f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	f023 0307 	bic.w	r3, r3, #7
 800f0d0:	3308      	adds	r3, #8
 800f0d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	f003 0307 	and.w	r3, r3, #7
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d00a      	beq.n	800f0f4 <pvPortMalloc+0x6c>
	__asm volatile
 800f0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e2:	f383 8811 	msr	BASEPRI, r3
 800f0e6:	f3bf 8f6f 	isb	sy
 800f0ea:	f3bf 8f4f 	dsb	sy
 800f0ee:	617b      	str	r3, [r7, #20]
}
 800f0f0:	bf00      	nop
 800f0f2:	e7fe      	b.n	800f0f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d06e      	beq.n	800f1d8 <pvPortMalloc+0x150>
 800f0fa:	4b45      	ldr	r3, [pc, #276]	; (800f210 <pvPortMalloc+0x188>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	687a      	ldr	r2, [r7, #4]
 800f100:	429a      	cmp	r2, r3
 800f102:	d869      	bhi.n	800f1d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f104:	4b43      	ldr	r3, [pc, #268]	; (800f214 <pvPortMalloc+0x18c>)
 800f106:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f108:	4b42      	ldr	r3, [pc, #264]	; (800f214 <pvPortMalloc+0x18c>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f10e:	e004      	b.n	800f11a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f112:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f11c:	685b      	ldr	r3, [r3, #4]
 800f11e:	687a      	ldr	r2, [r7, #4]
 800f120:	429a      	cmp	r2, r3
 800f122:	d903      	bls.n	800f12c <pvPortMalloc+0xa4>
 800f124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d1f1      	bne.n	800f110 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f12c:	4b36      	ldr	r3, [pc, #216]	; (800f208 <pvPortMalloc+0x180>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f132:	429a      	cmp	r2, r3
 800f134:	d050      	beq.n	800f1d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f136:	6a3b      	ldr	r3, [r7, #32]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	2208      	movs	r2, #8
 800f13c:	4413      	add	r3, r2
 800f13e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f142:	681a      	ldr	r2, [r3, #0]
 800f144:	6a3b      	ldr	r3, [r7, #32]
 800f146:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14a:	685a      	ldr	r2, [r3, #4]
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	1ad2      	subs	r2, r2, r3
 800f150:	2308      	movs	r3, #8
 800f152:	005b      	lsls	r3, r3, #1
 800f154:	429a      	cmp	r2, r3
 800f156:	d91f      	bls.n	800f198 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	4413      	add	r3, r2
 800f15e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f160:	69bb      	ldr	r3, [r7, #24]
 800f162:	f003 0307 	and.w	r3, r3, #7
 800f166:	2b00      	cmp	r3, #0
 800f168:	d00a      	beq.n	800f180 <pvPortMalloc+0xf8>
	__asm volatile
 800f16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f16e:	f383 8811 	msr	BASEPRI, r3
 800f172:	f3bf 8f6f 	isb	sy
 800f176:	f3bf 8f4f 	dsb	sy
 800f17a:	613b      	str	r3, [r7, #16]
}
 800f17c:	bf00      	nop
 800f17e:	e7fe      	b.n	800f17e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f182:	685a      	ldr	r2, [r3, #4]
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	1ad2      	subs	r2, r2, r3
 800f188:	69bb      	ldr	r3, [r7, #24]
 800f18a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f18e:	687a      	ldr	r2, [r7, #4]
 800f190:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f192:	69b8      	ldr	r0, [r7, #24]
 800f194:	f000 f908 	bl	800f3a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f198:	4b1d      	ldr	r3, [pc, #116]	; (800f210 <pvPortMalloc+0x188>)
 800f19a:	681a      	ldr	r2, [r3, #0]
 800f19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f19e:	685b      	ldr	r3, [r3, #4]
 800f1a0:	1ad3      	subs	r3, r2, r3
 800f1a2:	4a1b      	ldr	r2, [pc, #108]	; (800f210 <pvPortMalloc+0x188>)
 800f1a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f1a6:	4b1a      	ldr	r3, [pc, #104]	; (800f210 <pvPortMalloc+0x188>)
 800f1a8:	681a      	ldr	r2, [r3, #0]
 800f1aa:	4b1b      	ldr	r3, [pc, #108]	; (800f218 <pvPortMalloc+0x190>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d203      	bcs.n	800f1ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f1b2:	4b17      	ldr	r3, [pc, #92]	; (800f210 <pvPortMalloc+0x188>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	4a18      	ldr	r2, [pc, #96]	; (800f218 <pvPortMalloc+0x190>)
 800f1b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1bc:	685a      	ldr	r2, [r3, #4]
 800f1be:	4b13      	ldr	r3, [pc, #76]	; (800f20c <pvPortMalloc+0x184>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	431a      	orrs	r2, r3
 800f1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f1ce:	4b13      	ldr	r3, [pc, #76]	; (800f21c <pvPortMalloc+0x194>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	3301      	adds	r3, #1
 800f1d4:	4a11      	ldr	r2, [pc, #68]	; (800f21c <pvPortMalloc+0x194>)
 800f1d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f1d8:	f7fe fc04 	bl	800d9e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f1dc:	69fb      	ldr	r3, [r7, #28]
 800f1de:	f003 0307 	and.w	r3, r3, #7
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d00a      	beq.n	800f1fc <pvPortMalloc+0x174>
	__asm volatile
 800f1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ea:	f383 8811 	msr	BASEPRI, r3
 800f1ee:	f3bf 8f6f 	isb	sy
 800f1f2:	f3bf 8f4f 	dsb	sy
 800f1f6:	60fb      	str	r3, [r7, #12]
}
 800f1f8:	bf00      	nop
 800f1fa:	e7fe      	b.n	800f1fa <pvPortMalloc+0x172>
	return pvReturn;
 800f1fc:	69fb      	ldr	r3, [r7, #28]
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3728      	adds	r7, #40	; 0x28
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
 800f206:	bf00      	nop
 800f208:	24012c20 	.word	0x24012c20
 800f20c:	24012c34 	.word	0x24012c34
 800f210:	24012c24 	.word	0x24012c24
 800f214:	24012c18 	.word	0x24012c18
 800f218:	24012c28 	.word	0x24012c28
 800f21c:	24012c2c 	.word	0x24012c2c

0800f220 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b086      	sub	sp, #24
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d04d      	beq.n	800f2ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f232:	2308      	movs	r3, #8
 800f234:	425b      	negs	r3, r3
 800f236:	697a      	ldr	r2, [r7, #20]
 800f238:	4413      	add	r3, r2
 800f23a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	685a      	ldr	r2, [r3, #4]
 800f244:	4b24      	ldr	r3, [pc, #144]	; (800f2d8 <vPortFree+0xb8>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	4013      	ands	r3, r2
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d10a      	bne.n	800f264 <vPortFree+0x44>
	__asm volatile
 800f24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f252:	f383 8811 	msr	BASEPRI, r3
 800f256:	f3bf 8f6f 	isb	sy
 800f25a:	f3bf 8f4f 	dsb	sy
 800f25e:	60fb      	str	r3, [r7, #12]
}
 800f260:	bf00      	nop
 800f262:	e7fe      	b.n	800f262 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d00a      	beq.n	800f282 <vPortFree+0x62>
	__asm volatile
 800f26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f270:	f383 8811 	msr	BASEPRI, r3
 800f274:	f3bf 8f6f 	isb	sy
 800f278:	f3bf 8f4f 	dsb	sy
 800f27c:	60bb      	str	r3, [r7, #8]
}
 800f27e:	bf00      	nop
 800f280:	e7fe      	b.n	800f280 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	685a      	ldr	r2, [r3, #4]
 800f286:	4b14      	ldr	r3, [pc, #80]	; (800f2d8 <vPortFree+0xb8>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	4013      	ands	r3, r2
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d01e      	beq.n	800f2ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f290:	693b      	ldr	r3, [r7, #16]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d11a      	bne.n	800f2ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	685a      	ldr	r2, [r3, #4]
 800f29c:	4b0e      	ldr	r3, [pc, #56]	; (800f2d8 <vPortFree+0xb8>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	43db      	mvns	r3, r3
 800f2a2:	401a      	ands	r2, r3
 800f2a4:	693b      	ldr	r3, [r7, #16]
 800f2a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f2a8:	f7fe fb8e 	bl	800d9c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	685a      	ldr	r2, [r3, #4]
 800f2b0:	4b0a      	ldr	r3, [pc, #40]	; (800f2dc <vPortFree+0xbc>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	4413      	add	r3, r2
 800f2b6:	4a09      	ldr	r2, [pc, #36]	; (800f2dc <vPortFree+0xbc>)
 800f2b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f2ba:	6938      	ldr	r0, [r7, #16]
 800f2bc:	f000 f874 	bl	800f3a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f2c0:	4b07      	ldr	r3, [pc, #28]	; (800f2e0 <vPortFree+0xc0>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	4a06      	ldr	r2, [pc, #24]	; (800f2e0 <vPortFree+0xc0>)
 800f2c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f2ca:	f7fe fb8b 	bl	800d9e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f2ce:	bf00      	nop
 800f2d0:	3718      	adds	r7, #24
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	24012c34 	.word	0x24012c34
 800f2dc:	24012c24 	.word	0x24012c24
 800f2e0:	24012c30 	.word	0x24012c30

0800f2e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b085      	sub	sp, #20
 800f2e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f2ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f2ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f2f0:	4b27      	ldr	r3, [pc, #156]	; (800f390 <prvHeapInit+0xac>)
 800f2f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	f003 0307 	and.w	r3, r3, #7
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d00c      	beq.n	800f318 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	3307      	adds	r3, #7
 800f302:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	f023 0307 	bic.w	r3, r3, #7
 800f30a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f30c:	68ba      	ldr	r2, [r7, #8]
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	1ad3      	subs	r3, r2, r3
 800f312:	4a1f      	ldr	r2, [pc, #124]	; (800f390 <prvHeapInit+0xac>)
 800f314:	4413      	add	r3, r2
 800f316:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f31c:	4a1d      	ldr	r2, [pc, #116]	; (800f394 <prvHeapInit+0xb0>)
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f322:	4b1c      	ldr	r3, [pc, #112]	; (800f394 <prvHeapInit+0xb0>)
 800f324:	2200      	movs	r2, #0
 800f326:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	68ba      	ldr	r2, [r7, #8]
 800f32c:	4413      	add	r3, r2
 800f32e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f330:	2208      	movs	r2, #8
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	1a9b      	subs	r3, r3, r2
 800f336:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	f023 0307 	bic.w	r3, r3, #7
 800f33e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	4a15      	ldr	r2, [pc, #84]	; (800f398 <prvHeapInit+0xb4>)
 800f344:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f346:	4b14      	ldr	r3, [pc, #80]	; (800f398 <prvHeapInit+0xb4>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	2200      	movs	r2, #0
 800f34c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f34e:	4b12      	ldr	r3, [pc, #72]	; (800f398 <prvHeapInit+0xb4>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	2200      	movs	r2, #0
 800f354:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	68fa      	ldr	r2, [r7, #12]
 800f35e:	1ad2      	subs	r2, r2, r3
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f364:	4b0c      	ldr	r3, [pc, #48]	; (800f398 <prvHeapInit+0xb4>)
 800f366:	681a      	ldr	r2, [r3, #0]
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	685b      	ldr	r3, [r3, #4]
 800f370:	4a0a      	ldr	r2, [pc, #40]	; (800f39c <prvHeapInit+0xb8>)
 800f372:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	685b      	ldr	r3, [r3, #4]
 800f378:	4a09      	ldr	r2, [pc, #36]	; (800f3a0 <prvHeapInit+0xbc>)
 800f37a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f37c:	4b09      	ldr	r3, [pc, #36]	; (800f3a4 <prvHeapInit+0xc0>)
 800f37e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f382:	601a      	str	r2, [r3, #0]
}
 800f384:	bf00      	nop
 800f386:	3714      	adds	r7, #20
 800f388:	46bd      	mov	sp, r7
 800f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38e:	4770      	bx	lr
 800f390:	2400f018 	.word	0x2400f018
 800f394:	24012c18 	.word	0x24012c18
 800f398:	24012c20 	.word	0x24012c20
 800f39c:	24012c28 	.word	0x24012c28
 800f3a0:	24012c24 	.word	0x24012c24
 800f3a4:	24012c34 	.word	0x24012c34

0800f3a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b085      	sub	sp, #20
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f3b0:	4b28      	ldr	r3, [pc, #160]	; (800f454 <prvInsertBlockIntoFreeList+0xac>)
 800f3b2:	60fb      	str	r3, [r7, #12]
 800f3b4:	e002      	b.n	800f3bc <prvInsertBlockIntoFreeList+0x14>
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	60fb      	str	r3, [r7, #12]
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	687a      	ldr	r2, [r7, #4]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d8f7      	bhi.n	800f3b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	685b      	ldr	r3, [r3, #4]
 800f3ce:	68ba      	ldr	r2, [r7, #8]
 800f3d0:	4413      	add	r3, r2
 800f3d2:	687a      	ldr	r2, [r7, #4]
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d108      	bne.n	800f3ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	685a      	ldr	r2, [r3, #4]
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	685b      	ldr	r3, [r3, #4]
 800f3e0:	441a      	add	r2, r3
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	685b      	ldr	r3, [r3, #4]
 800f3f2:	68ba      	ldr	r2, [r7, #8]
 800f3f4:	441a      	add	r2, r3
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d118      	bne.n	800f430 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681a      	ldr	r2, [r3, #0]
 800f402:	4b15      	ldr	r3, [pc, #84]	; (800f458 <prvInsertBlockIntoFreeList+0xb0>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	429a      	cmp	r2, r3
 800f408:	d00d      	beq.n	800f426 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	685a      	ldr	r2, [r3, #4]
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	685b      	ldr	r3, [r3, #4]
 800f414:	441a      	add	r2, r3
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	681a      	ldr	r2, [r3, #0]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	601a      	str	r2, [r3, #0]
 800f424:	e008      	b.n	800f438 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f426:	4b0c      	ldr	r3, [pc, #48]	; (800f458 <prvInsertBlockIntoFreeList+0xb0>)
 800f428:	681a      	ldr	r2, [r3, #0]
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	601a      	str	r2, [r3, #0]
 800f42e:	e003      	b.n	800f438 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f438:	68fa      	ldr	r2, [r7, #12]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d002      	beq.n	800f446 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	687a      	ldr	r2, [r7, #4]
 800f444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f446:	bf00      	nop
 800f448:	3714      	adds	r7, #20
 800f44a:	46bd      	mov	sp, r7
 800f44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f450:	4770      	bx	lr
 800f452:	bf00      	nop
 800f454:	24012c18 	.word	0x24012c18
 800f458:	24012c20 	.word	0x24012c20

0800f45c <arm_max_f32>:
 800f45c:	f101 3cff 	add.w	ip, r1, #4294967295
 800f460:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f462:	4607      	mov	r7, r0
 800f464:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800f468:	ecf7 7a01 	vldmia	r7!, {s15}
 800f46c:	d05c      	beq.n	800f528 <arm_max_f32+0xcc>
 800f46e:	2400      	movs	r4, #0
 800f470:	3014      	adds	r0, #20
 800f472:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800f476:	4625      	mov	r5, r4
 800f478:	ed10 7a04 	vldr	s14, [r0, #-16]
 800f47c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f484:	d502      	bpl.n	800f48c <arm_max_f32+0x30>
 800f486:	eef0 7a47 	vmov.f32	s15, s14
 800f48a:	1c65      	adds	r5, r4, #1
 800f48c:	ed10 7a03 	vldr	s14, [r0, #-12]
 800f490:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f498:	d502      	bpl.n	800f4a0 <arm_max_f32+0x44>
 800f49a:	eef0 7a47 	vmov.f32	s15, s14
 800f49e:	1ca5      	adds	r5, r4, #2
 800f4a0:	ed10 7a02 	vldr	s14, [r0, #-8]
 800f4a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ac:	d502      	bpl.n	800f4b4 <arm_max_f32+0x58>
 800f4ae:	eef0 7a47 	vmov.f32	s15, s14
 800f4b2:	1ce5      	adds	r5, r4, #3
 800f4b4:	ed10 7a01 	vldr	s14, [r0, #-4]
 800f4b8:	3404      	adds	r4, #4
 800f4ba:	3010      	adds	r0, #16
 800f4bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f4c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4c4:	d502      	bpl.n	800f4cc <arm_max_f32+0x70>
 800f4c6:	eef0 7a47 	vmov.f32	s15, s14
 800f4ca:	4625      	mov	r5, r4
 800f4cc:	42a6      	cmp	r6, r4
 800f4ce:	d1d3      	bne.n	800f478 <arm_max_f32+0x1c>
 800f4d0:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800f4d4:	f01c 0003 	ands.w	r0, ip, #3
 800f4d8:	d01e      	beq.n	800f518 <arm_max_f32+0xbc>
 800f4da:	ed97 7a00 	vldr	s14, [r7]
 800f4de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4e6:	dc1b      	bgt.n	800f520 <arm_max_f32+0xc4>
 800f4e8:	3801      	subs	r0, #1
 800f4ea:	d015      	beq.n	800f518 <arm_max_f32+0xbc>
 800f4ec:	ed97 7a01 	vldr	s14, [r7, #4]
 800f4f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f4f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4f8:	d502      	bpl.n	800f500 <arm_max_f32+0xa4>
 800f4fa:	eef0 7a47 	vmov.f32	s15, s14
 800f4fe:	1a0d      	subs	r5, r1, r0
 800f500:	2801      	cmp	r0, #1
 800f502:	d009      	beq.n	800f518 <arm_max_f32+0xbc>
 800f504:	ed97 7a02 	vldr	s14, [r7, #8]
 800f508:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f50c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f510:	dd02      	ble.n	800f518 <arm_max_f32+0xbc>
 800f512:	eef0 7a47 	vmov.f32	s15, s14
 800f516:	4665      	mov	r5, ip
 800f518:	edc2 7a00 	vstr	s15, [r2]
 800f51c:	601d      	str	r5, [r3, #0]
 800f51e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f520:	eef0 7a47 	vmov.f32	s15, s14
 800f524:	1a0d      	subs	r5, r1, r0
 800f526:	e7df      	b.n	800f4e8 <arm_max_f32+0x8c>
 800f528:	4675      	mov	r5, lr
 800f52a:	e7d3      	b.n	800f4d4 <arm_max_f32+0x78>

0800f52c <arm_rfft_32_fast_init_f32>:
 800f52c:	b180      	cbz	r0, 800f550 <arm_rfft_32_fast_init_f32+0x24>
 800f52e:	4603      	mov	r3, r0
 800f530:	2220      	movs	r2, #32
 800f532:	2010      	movs	r0, #16
 800f534:	4908      	ldr	r1, [pc, #32]	; (800f558 <arm_rfft_32_fast_init_f32+0x2c>)
 800f536:	b430      	push	{r4, r5}
 800f538:	2514      	movs	r5, #20
 800f53a:	4c08      	ldr	r4, [pc, #32]	; (800f55c <arm_rfft_32_fast_init_f32+0x30>)
 800f53c:	821a      	strh	r2, [r3, #16]
 800f53e:	4a08      	ldr	r2, [pc, #32]	; (800f560 <arm_rfft_32_fast_init_f32+0x34>)
 800f540:	8018      	strh	r0, [r3, #0]
 800f542:	2000      	movs	r0, #0
 800f544:	819d      	strh	r5, [r3, #12]
 800f546:	615a      	str	r2, [r3, #20]
 800f548:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800f54c:	bc30      	pop	{r4, r5}
 800f54e:	4770      	bx	lr
 800f550:	f04f 30ff 	mov.w	r0, #4294967295
 800f554:	4770      	bx	lr
 800f556:	bf00      	nop
 800f558:	080161ec 	.word	0x080161ec
 800f55c:	080118b4 	.word	0x080118b4
 800f560:	0801ef6c 	.word	0x0801ef6c

0800f564 <arm_rfft_64_fast_init_f32>:
 800f564:	b180      	cbz	r0, 800f588 <arm_rfft_64_fast_init_f32+0x24>
 800f566:	4603      	mov	r3, r0
 800f568:	2240      	movs	r2, #64	; 0x40
 800f56a:	2020      	movs	r0, #32
 800f56c:	4908      	ldr	r1, [pc, #32]	; (800f590 <arm_rfft_64_fast_init_f32+0x2c>)
 800f56e:	b430      	push	{r4, r5}
 800f570:	2530      	movs	r5, #48	; 0x30
 800f572:	4c08      	ldr	r4, [pc, #32]	; (800f594 <arm_rfft_64_fast_init_f32+0x30>)
 800f574:	821a      	strh	r2, [r3, #16]
 800f576:	4a08      	ldr	r2, [pc, #32]	; (800f598 <arm_rfft_64_fast_init_f32+0x34>)
 800f578:	8018      	strh	r0, [r3, #0]
 800f57a:	2000      	movs	r0, #0
 800f57c:	819d      	strh	r5, [r3, #12]
 800f57e:	615a      	str	r2, [r3, #20]
 800f580:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800f584:	bc30      	pop	{r4, r5}
 800f586:	4770      	bx	lr
 800f588:	f04f 30ff 	mov.w	r0, #4294967295
 800f58c:	4770      	bx	lr
 800f58e:	bf00      	nop
 800f590:	0801aa6c 	.word	0x0801aa6c
 800f594:	08013a0c 	.word	0x08013a0c
 800f598:	080237ec 	.word	0x080237ec

0800f59c <arm_rfft_256_fast_init_f32>:
 800f59c:	b188      	cbz	r0, 800f5c2 <arm_rfft_256_fast_init_f32+0x26>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f5a4:	2080      	movs	r0, #128	; 0x80
 800f5a6:	4908      	ldr	r1, [pc, #32]	; (800f5c8 <arm_rfft_256_fast_init_f32+0x2c>)
 800f5a8:	b430      	push	{r4, r5}
 800f5aa:	25d0      	movs	r5, #208	; 0xd0
 800f5ac:	4c07      	ldr	r4, [pc, #28]	; (800f5cc <arm_rfft_256_fast_init_f32+0x30>)
 800f5ae:	821a      	strh	r2, [r3, #16]
 800f5b0:	4a07      	ldr	r2, [pc, #28]	; (800f5d0 <arm_rfft_256_fast_init_f32+0x34>)
 800f5b2:	8018      	strh	r0, [r3, #0]
 800f5b4:	2000      	movs	r0, #0
 800f5b6:	819d      	strh	r5, [r3, #12]
 800f5b8:	615a      	str	r2, [r3, #20]
 800f5ba:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800f5be:	bc30      	pop	{r4, r5}
 800f5c0:	4770      	bx	lr
 800f5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f5c6:	4770      	bx	lr
 800f5c8:	08015dec 	.word	0x08015dec
 800f5cc:	08011714 	.word	0x08011714
 800f5d0:	0801eb6c 	.word	0x0801eb6c

0800f5d4 <arm_rfft_512_fast_init_f32>:
 800f5d4:	b198      	cbz	r0, 800f5fe <arm_rfft_512_fast_init_f32+0x2a>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f5dc:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f5e0:	4908      	ldr	r1, [pc, #32]	; (800f604 <arm_rfft_512_fast_init_f32+0x30>)
 800f5e2:	b430      	push	{r4, r5}
 800f5e4:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 800f5e8:	4c07      	ldr	r4, [pc, #28]	; (800f608 <arm_rfft_512_fast_init_f32+0x34>)
 800f5ea:	821a      	strh	r2, [r3, #16]
 800f5ec:	4a07      	ldr	r2, [pc, #28]	; (800f60c <arm_rfft_512_fast_init_f32+0x38>)
 800f5ee:	8018      	strh	r0, [r3, #0]
 800f5f0:	2000      	movs	r0, #0
 800f5f2:	819d      	strh	r5, [r3, #12]
 800f5f4:	615a      	str	r2, [r3, #20]
 800f5f6:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800f5fa:	bc30      	pop	{r4, r5}
 800f5fc:	4770      	bx	lr
 800f5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f602:	4770      	bx	lr
 800f604:	0801a26c 	.word	0x0801a26c
 800f608:	0801369c 	.word	0x0801369c
 800f60c:	08022fec 	.word	0x08022fec

0800f610 <arm_rfft_1024_fast_init_f32>:
 800f610:	b198      	cbz	r0, 800f63a <arm_rfft_1024_fast_init_f32+0x2a>
 800f612:	4603      	mov	r3, r0
 800f614:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f618:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f61c:	4908      	ldr	r1, [pc, #32]	; (800f640 <arm_rfft_1024_fast_init_f32+0x30>)
 800f61e:	b430      	push	{r4, r5}
 800f620:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 800f624:	4c07      	ldr	r4, [pc, #28]	; (800f644 <arm_rfft_1024_fast_init_f32+0x34>)
 800f626:	821a      	strh	r2, [r3, #16]
 800f628:	4a07      	ldr	r2, [pc, #28]	; (800f648 <arm_rfft_1024_fast_init_f32+0x38>)
 800f62a:	8018      	strh	r0, [r3, #0]
 800f62c:	2000      	movs	r0, #0
 800f62e:	819d      	strh	r5, [r3, #12]
 800f630:	615a      	str	r2, [r3, #20]
 800f632:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800f636:	bc30      	pop	{r4, r5}
 800f638:	4770      	bx	lr
 800f63a:	f04f 30ff 	mov.w	r0, #4294967295
 800f63e:	4770      	bx	lr
 800f640:	0801ab6c 	.word	0x0801ab6c
 800f644:	08013a6c 	.word	0x08013a6c
 800f648:	0801bb6c 	.word	0x0801bb6c

0800f64c <arm_rfft_2048_fast_init_f32>:
 800f64c:	b198      	cbz	r0, 800f676 <arm_rfft_2048_fast_init_f32+0x2a>
 800f64e:	4603      	mov	r3, r0
 800f650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f654:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f658:	4908      	ldr	r1, [pc, #32]	; (800f67c <arm_rfft_2048_fast_init_f32+0x30>)
 800f65a:	b430      	push	{r4, r5}
 800f65c:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 800f660:	4c07      	ldr	r4, [pc, #28]	; (800f680 <arm_rfft_2048_fast_init_f32+0x34>)
 800f662:	821a      	strh	r2, [r3, #16]
 800f664:	4a07      	ldr	r2, [pc, #28]	; (800f684 <arm_rfft_2048_fast_init_f32+0x38>)
 800f666:	8018      	strh	r0, [r3, #0]
 800f668:	2000      	movs	r0, #0
 800f66a:	819d      	strh	r5, [r3, #12]
 800f66c:	615a      	str	r2, [r3, #20]
 800f66e:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800f672:	bc30      	pop	{r4, r5}
 800f674:	4770      	bx	lr
 800f676:	f04f 30ff 	mov.w	r0, #4294967295
 800f67a:	4770      	bx	lr
 800f67c:	08013dec 	.word	0x08013dec
 800f680:	08010904 	.word	0x08010904
 800f684:	0801cb6c 	.word	0x0801cb6c

0800f688 <arm_rfft_4096_fast_init_f32>:
 800f688:	b198      	cbz	r0, 800f6b2 <arm_rfft_4096_fast_init_f32+0x2a>
 800f68a:	4603      	mov	r3, r0
 800f68c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f690:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f694:	4908      	ldr	r1, [pc, #32]	; (800f6b8 <arm_rfft_4096_fast_init_f32+0x30>)
 800f696:	b430      	push	{r4, r5}
 800f698:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 800f69c:	4c07      	ldr	r4, [pc, #28]	; (800f6bc <arm_rfft_4096_fast_init_f32+0x34>)
 800f69e:	821a      	strh	r2, [r3, #16]
 800f6a0:	4a07      	ldr	r2, [pc, #28]	; (800f6c0 <arm_rfft_4096_fast_init_f32+0x38>)
 800f6a2:	8018      	strh	r0, [r3, #0]
 800f6a4:	2000      	movs	r0, #0
 800f6a6:	819d      	strh	r5, [r3, #12]
 800f6a8:	615a      	str	r2, [r3, #20]
 800f6aa:	e9c3 1401 	strd	r1, r4, [r3, #4]
 800f6ae:	bc30      	pop	{r4, r5}
 800f6b0:	4770      	bx	lr
 800f6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800f6b6:	4770      	bx	lr
 800f6b8:	0801626c 	.word	0x0801626c
 800f6bc:	080118dc 	.word	0x080118dc
 800f6c0:	0801efec 	.word	0x0801efec

0800f6c4 <arm_rfft_fast_init_f32>:
 800f6c4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f6c8:	d01f      	beq.n	800f70a <arm_rfft_fast_init_f32+0x46>
 800f6ca:	d90b      	bls.n	800f6e4 <arm_rfft_fast_init_f32+0x20>
 800f6cc:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800f6d0:	d019      	beq.n	800f706 <arm_rfft_fast_init_f32+0x42>
 800f6d2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800f6d6:	d012      	beq.n	800f6fe <arm_rfft_fast_init_f32+0x3a>
 800f6d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f6dc:	d00d      	beq.n	800f6fa <arm_rfft_fast_init_f32+0x36>
 800f6de:	f04f 30ff 	mov.w	r0, #4294967295
 800f6e2:	4770      	bx	lr
 800f6e4:	2940      	cmp	r1, #64	; 0x40
 800f6e6:	d00c      	beq.n	800f702 <arm_rfft_fast_init_f32+0x3e>
 800f6e8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800f6ec:	d003      	beq.n	800f6f6 <arm_rfft_fast_init_f32+0x32>
 800f6ee:	2920      	cmp	r1, #32
 800f6f0:	d1f5      	bne.n	800f6de <arm_rfft_fast_init_f32+0x1a>
 800f6f2:	4b07      	ldr	r3, [pc, #28]	; (800f710 <arm_rfft_fast_init_f32+0x4c>)
 800f6f4:	4718      	bx	r3
 800f6f6:	4b07      	ldr	r3, [pc, #28]	; (800f714 <arm_rfft_fast_init_f32+0x50>)
 800f6f8:	4718      	bx	r3
 800f6fa:	4b07      	ldr	r3, [pc, #28]	; (800f718 <arm_rfft_fast_init_f32+0x54>)
 800f6fc:	4718      	bx	r3
 800f6fe:	4b07      	ldr	r3, [pc, #28]	; (800f71c <arm_rfft_fast_init_f32+0x58>)
 800f700:	4718      	bx	r3
 800f702:	4b07      	ldr	r3, [pc, #28]	; (800f720 <arm_rfft_fast_init_f32+0x5c>)
 800f704:	e7f6      	b.n	800f6f4 <arm_rfft_fast_init_f32+0x30>
 800f706:	4b07      	ldr	r3, [pc, #28]	; (800f724 <arm_rfft_fast_init_f32+0x60>)
 800f708:	e7f4      	b.n	800f6f4 <arm_rfft_fast_init_f32+0x30>
 800f70a:	4b07      	ldr	r3, [pc, #28]	; (800f728 <arm_rfft_fast_init_f32+0x64>)
 800f70c:	e7f2      	b.n	800f6f4 <arm_rfft_fast_init_f32+0x30>
 800f70e:	bf00      	nop
 800f710:	0800f52d 	.word	0x0800f52d
 800f714:	0800f59d 	.word	0x0800f59d
 800f718:	0800f611 	.word	0x0800f611
 800f71c:	0800f689 	.word	0x0800f689
 800f720:	0800f565 	.word	0x0800f565
 800f724:	0800f64d 	.word	0x0800f64d
 800f728:	0800f5d5 	.word	0x0800f5d5

0800f72c <stage_rfft_f32>:
 800f72c:	b470      	push	{r4, r5, r6}
 800f72e:	edd1 7a00 	vldr	s15, [r1]
 800f732:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800f736:	ed91 7a01 	vldr	s14, [r1, #4]
 800f73a:	f101 0510 	add.w	r5, r1, #16
 800f73e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f742:	8806      	ldrh	r6, [r0, #0]
 800f744:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f748:	6943      	ldr	r3, [r0, #20]
 800f74a:	1e70      	subs	r0, r6, #1
 800f74c:	eeb0 4a46 	vmov.f32	s8, s12
 800f750:	f102 0410 	add.w	r4, r2, #16
 800f754:	3310      	adds	r3, #16
 800f756:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f75a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f75e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f762:	3908      	subs	r1, #8
 800f764:	ee26 7a86 	vmul.f32	s14, s13, s12
 800f768:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f76c:	ed82 7a00 	vstr	s14, [r2]
 800f770:	edc2 7a01 	vstr	s15, [r2, #4]
 800f774:	ed15 6a02 	vldr	s12, [r5, #-8]
 800f778:	3801      	subs	r0, #1
 800f77a:	ed91 7a02 	vldr	s14, [r1, #8]
 800f77e:	f105 0508 	add.w	r5, r5, #8
 800f782:	ed53 6a02 	vldr	s13, [r3, #-8]
 800f786:	f1a1 0108 	sub.w	r1, r1, #8
 800f78a:	ee77 5a46 	vsub.f32	s11, s14, s12
 800f78e:	edd1 4a05 	vldr	s9, [r1, #20]
 800f792:	ed55 7a03 	vldr	s15, [r5, #-12]
 800f796:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f79a:	ed13 6a01 	vldr	s12, [r3, #-4]
 800f79e:	f104 0408 	add.w	r4, r4, #8
 800f7a2:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800f7a6:	f103 0308 	add.w	r3, r3, #8
 800f7aa:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800f7ae:	ee66 5a25 	vmul.f32	s11, s12, s11
 800f7b2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800f7b6:	ee37 7a23 	vadd.f32	s14, s14, s7
 800f7ba:	ee66 6a85 	vmul.f32	s13, s13, s10
 800f7be:	ee26 6a05 	vmul.f32	s12, s12, s10
 800f7c2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800f7c6:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f7ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f7ce:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f7d2:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f7d6:	ed04 7a04 	vstr	s14, [r4, #-16]
 800f7da:	ed44 7a03 	vstr	s15, [r4, #-12]
 800f7de:	d1c9      	bne.n	800f774 <stage_rfft_f32+0x48>
 800f7e0:	bc70      	pop	{r4, r5, r6}
 800f7e2:	4770      	bx	lr

0800f7e4 <merge_rfft_f32>:
 800f7e4:	b410      	push	{r4}
 800f7e6:	edd1 7a00 	vldr	s15, [r1]
 800f7ea:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800f7ee:	edd1 6a01 	vldr	s13, [r1, #4]
 800f7f2:	8804      	ldrh	r4, [r0, #0]
 800f7f4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f7f8:	6940      	ldr	r0, [r0, #20]
 800f7fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f7fe:	3c01      	subs	r4, #1
 800f800:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f804:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f808:	ed82 7a00 	vstr	s14, [r2]
 800f80c:	edc2 7a01 	vstr	s15, [r2, #4]
 800f810:	b3dc      	cbz	r4, 800f88a <merge_rfft_f32+0xa6>
 800f812:	00e3      	lsls	r3, r4, #3
 800f814:	3010      	adds	r0, #16
 800f816:	3210      	adds	r2, #16
 800f818:	3b08      	subs	r3, #8
 800f81a:	440b      	add	r3, r1
 800f81c:	3110      	adds	r1, #16
 800f81e:	ed11 6a02 	vldr	s12, [r1, #-8]
 800f822:	3c01      	subs	r4, #1
 800f824:	ed93 7a02 	vldr	s14, [r3, #8]
 800f828:	f101 0108 	add.w	r1, r1, #8
 800f82c:	ed50 6a02 	vldr	s13, [r0, #-8]
 800f830:	f1a3 0308 	sub.w	r3, r3, #8
 800f834:	ee76 5a47 	vsub.f32	s11, s12, s14
 800f838:	edd3 4a05 	vldr	s9, [r3, #20]
 800f83c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800f840:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f844:	ed10 6a01 	vldr	s12, [r0, #-4]
 800f848:	f102 0208 	add.w	r2, r2, #8
 800f84c:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800f850:	f100 0008 	add.w	r0, r0, #8
 800f854:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800f858:	ee66 5a25 	vmul.f32	s11, s12, s11
 800f85c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800f860:	ee37 7a63 	vsub.f32	s14, s14, s7
 800f864:	ee66 6a85 	vmul.f32	s13, s13, s10
 800f868:	ee26 6a05 	vmul.f32	s12, s12, s10
 800f86c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800f870:	ee37 7a46 	vsub.f32	s14, s14, s12
 800f874:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f878:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f87c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f880:	ed02 7a04 	vstr	s14, [r2, #-16]
 800f884:	ed42 7a03 	vstr	s15, [r2, #-12]
 800f888:	d1c9      	bne.n	800f81e <merge_rfft_f32+0x3a>
 800f88a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f88e:	4770      	bx	lr

0800f890 <arm_rfft_fast_f32>:
 800f890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f894:	8a05      	ldrh	r5, [r0, #16]
 800f896:	4604      	mov	r4, r0
 800f898:	4617      	mov	r7, r2
 800f89a:	461e      	mov	r6, r3
 800f89c:	086d      	lsrs	r5, r5, #1
 800f89e:	8005      	strh	r5, [r0, #0]
 800f8a0:	b14b      	cbz	r3, 800f8b6 <arm_rfft_fast_f32+0x26>
 800f8a2:	f7ff ff9f 	bl	800f7e4 <merge_rfft_f32>
 800f8a6:	4632      	mov	r2, r6
 800f8a8:	4639      	mov	r1, r7
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8b2:	f000 bb35 	b.w	800ff20 <arm_cfft_f32>
 800f8b6:	4688      	mov	r8, r1
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	f000 fb30 	bl	800ff20 <arm_cfft_f32>
 800f8c0:	463a      	mov	r2, r7
 800f8c2:	4641      	mov	r1, r8
 800f8c4:	4620      	mov	r0, r4
 800f8c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ca:	f7ff bf2f 	b.w	800f72c <stage_rfft_f32>
 800f8ce:	bf00      	nop

0800f8d0 <arm_cfft_radix8by2_f32>:
 800f8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8d4:	4607      	mov	r7, r0
 800f8d6:	4608      	mov	r0, r1
 800f8d8:	ed2d 8b06 	vpush	{d8-d10}
 800f8dc:	f8b7 c000 	ldrh.w	ip, [r7]
 800f8e0:	687a      	ldr	r2, [r7, #4]
 800f8e2:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800f8e6:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800f8ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800f8ee:	f000 80ac 	beq.w	800fa4a <arm_cfft_radix8by2_f32+0x17a>
 800f8f2:	008c      	lsls	r4, r1, #2
 800f8f4:	f100 0310 	add.w	r3, r0, #16
 800f8f8:	3210      	adds	r2, #16
 800f8fa:	f108 0610 	add.w	r6, r8, #16
 800f8fe:	3410      	adds	r4, #16
 800f900:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800f904:	1905      	adds	r5, r0, r4
 800f906:	4444      	add	r4, r8
 800f908:	ed16 7a04 	vldr	s14, [r6, #-16]
 800f90c:	3310      	adds	r3, #16
 800f90e:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 800f912:	3510      	adds	r5, #16
 800f914:	ed56 0a03 	vldr	s1, [r6, #-12]
 800f918:	3210      	adds	r2, #16
 800f91a:	ee74 9a87 	vadd.f32	s19, s9, s14
 800f91e:	ed56 7a02 	vldr	s15, [r6, #-8]
 800f922:	ed56 2a01 	vldr	s5, [r6, #-4]
 800f926:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800f92a:	ed54 5a04 	vldr	s11, [r4, #-16]
 800f92e:	3610      	adds	r6, #16
 800f930:	ed14 5a03 	vldr	s10, [r4, #-12]
 800f934:	3410      	adds	r4, #16
 800f936:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 800f93a:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 800f93e:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800f942:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800f946:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 800f94a:	ee36 9aa5 	vadd.f32	s18, s13, s11
 800f94e:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 800f952:	ee33 8a83 	vadd.f32	s16, s7, s6
 800f956:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800f95a:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800f95e:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800f962:	ee34 0a06 	vadd.f32	s0, s8, s12
 800f966:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 800f96a:	ee77 aa20 	vadd.f32	s21, s14, s1
 800f96e:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 800f972:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800f976:	ee72 9a22 	vadd.f32	s19, s4, s5
 800f97a:	ee71 8a05 	vadd.f32	s17, s2, s10
 800f97e:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 800f982:	ee37 7a60 	vsub.f32	s14, s14, s1
 800f986:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 800f98a:	ee35 5a41 	vsub.f32	s10, s10, s2
 800f98e:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 800f992:	ee36 6a44 	vsub.f32	s12, s12, s8
 800f996:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 800f99a:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 800f99e:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800f9a2:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 800f9a6:	ee72 7a62 	vsub.f32	s15, s4, s5
 800f9aa:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 800f9ae:	ee73 2a63 	vsub.f32	s5, s6, s7
 800f9b2:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800f9b6:	4563      	cmp	r3, ip
 800f9b8:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800f9bc:	ee24 3a84 	vmul.f32	s6, s9, s8
 800f9c0:	ee27 2a26 	vmul.f32	s4, s14, s13
 800f9c4:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800f9c8:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800f9cc:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f9d0:	ee65 5a84 	vmul.f32	s11, s11, s8
 800f9d4:	ee65 6a26 	vmul.f32	s13, s10, s13
 800f9d8:	ee25 5a04 	vmul.f32	s10, s10, s8
 800f9dc:	ee37 7a64 	vsub.f32	s14, s14, s9
 800f9e0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800f9e4:	ee33 4a02 	vadd.f32	s8, s6, s4
 800f9e8:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800f9ec:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 800f9f0:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 800f9f4:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 800f9f8:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 800f9fc:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800fa00:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800fa04:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800fa08:	ee27 4a87 	vmul.f32	s8, s15, s14
 800fa0c:	ee61 5a87 	vmul.f32	s11, s3, s14
 800fa10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fa14:	ee22 5a87 	vmul.f32	s10, s5, s14
 800fa18:	ee26 7a07 	vmul.f32	s14, s12, s14
 800fa1c:	ee26 6a26 	vmul.f32	s12, s12, s13
 800fa20:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800fa24:	ee74 4a84 	vadd.f32	s9, s9, s8
 800fa28:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800fa2c:	ee35 6a46 	vsub.f32	s12, s10, s12
 800fa30:	ee37 7a26 	vadd.f32	s14, s14, s13
 800fa34:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 800fa38:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 800fa3c:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 800fa40:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 800fa44:	f47f af60 	bne.w	800f908 <arm_cfft_radix8by2_f32+0x38>
 800fa48:	687a      	ldr	r2, [r7, #4]
 800fa4a:	b28c      	uxth	r4, r1
 800fa4c:	2302      	movs	r3, #2
 800fa4e:	4621      	mov	r1, r4
 800fa50:	f000 fb04 	bl	801005c <arm_radix8_butterfly_f32>
 800fa54:	4621      	mov	r1, r4
 800fa56:	687a      	ldr	r2, [r7, #4]
 800fa58:	4640      	mov	r0, r8
 800fa5a:	2302      	movs	r3, #2
 800fa5c:	ecbd 8b06 	vpop	{d8-d10}
 800fa60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa64:	f000 bafa 	b.w	801005c <arm_radix8_butterfly_f32>

0800fa68 <arm_cfft_radix8by4_f32>:
 800fa68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa6c:	ed2d 8b04 	vpush	{d8-d9}
 800fa70:	8804      	ldrh	r4, [r0, #0]
 800fa72:	b08d      	sub	sp, #52	; 0x34
 800fa74:	6842      	ldr	r2, [r0, #4]
 800fa76:	460d      	mov	r5, r1
 800fa78:	0864      	lsrs	r4, r4, #1
 800fa7a:	edd1 7a00 	vldr	s15, [r1]
 800fa7e:	edd1 5a01 	vldr	s11, [r1, #4]
 800fa82:	00a3      	lsls	r3, r4, #2
 800fa84:	18ce      	adds	r6, r1, r3
 800fa86:	18f7      	adds	r7, r6, r3
 800fa88:	ed96 7a00 	vldr	s14, [r6]
 800fa8c:	ed96 4a01 	vldr	s8, [r6, #4]
 800fa90:	ed97 6a00 	vldr	s12, [r7]
 800fa94:	edd7 4a01 	vldr	s9, [r7, #4]
 800fa98:	ee77 6a86 	vadd.f32	s13, s15, s12
 800fa9c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800faa0:	ee35 6aa4 	vadd.f32	s12, s11, s9
 800faa4:	ee77 2a26 	vadd.f32	s5, s14, s13
 800faa8:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800faac:	ee74 3a27 	vadd.f32	s7, s8, s15
 800fab0:	ee76 4a44 	vsub.f32	s9, s12, s8
 800fab4:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800fab8:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800fabc:	ee35 4ac7 	vsub.f32	s8, s11, s14
 800fac0:	ee37 7a25 	vadd.f32	s14, s14, s11
 800fac4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800fac8:	0860      	lsrs	r0, r4, #1
 800faca:	f102 0408 	add.w	r4, r2, #8
 800face:	9405      	str	r4, [sp, #20]
 800fad0:	f102 0410 	add.w	r4, r2, #16
 800fad4:	9009      	str	r0, [sp, #36]	; 0x24
 800fad6:	f1a0 0902 	sub.w	r9, r0, #2
 800fada:	9403      	str	r4, [sp, #12]
 800fadc:	18fc      	adds	r4, r7, r3
 800fade:	f102 0018 	add.w	r0, r2, #24
 800fae2:	ed94 5a00 	vldr	s10, [r4]
 800fae6:	ed94 3a01 	vldr	s6, [r4, #4]
 800faea:	ee72 2a85 	vadd.f32	s5, s5, s10
 800faee:	9004      	str	r0, [sp, #16]
 800faf0:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800faf4:	4620      	mov	r0, r4
 800faf6:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800fafa:	9408      	str	r4, [sp, #32]
 800fafc:	ee12 ca90 	vmov	ip, s5
 800fb00:	ee74 5ac3 	vsub.f32	s11, s9, s6
 800fb04:	ee77 7a83 	vadd.f32	s15, s15, s6
 800fb08:	f845 cb08 	str.w	ip, [r5], #8
 800fb0c:	ee13 ca90 	vmov	ip, s7
 800fb10:	ed96 2a01 	vldr	s4, [r6, #4]
 800fb14:	ee74 4a05 	vadd.f32	s9, s8, s10
 800fb18:	edd4 2a01 	vldr	s5, [r4, #4]
 800fb1c:	ee37 7a45 	vsub.f32	s14, s14, s10
 800fb20:	ee36 6a02 	vadd.f32	s12, s12, s4
 800fb24:	9500      	str	r5, [sp, #0]
 800fb26:	460d      	mov	r5, r1
 800fb28:	ee36 6a22 	vadd.f32	s12, s12, s5
 800fb2c:	ed81 6a01 	vstr	s12, [r1, #4]
 800fb30:	4631      	mov	r1, r6
 800fb32:	f841 cb08 	str.w	ip, [r1], #8
 800fb36:	ee16 ca90 	vmov	ip, s13
 800fb3a:	9106      	str	r1, [sp, #24]
 800fb3c:	4639      	mov	r1, r7
 800fb3e:	edc6 4a01 	vstr	s9, [r6, #4]
 800fb42:	f841 cb08 	str.w	ip, [r1], #8
 800fb46:	9102      	str	r1, [sp, #8]
 800fb48:	ee17 1a90 	vmov	r1, s15
 800fb4c:	edc7 5a01 	vstr	s11, [r7, #4]
 800fb50:	f840 1b08 	str.w	r1, [r0], #8
 800fb54:	ea5f 0159 	movs.w	r1, r9, lsr #1
 800fb58:	9001      	str	r0, [sp, #4]
 800fb5a:	ed84 7a01 	vstr	s14, [r4, #4]
 800fb5e:	9107      	str	r1, [sp, #28]
 800fb60:	f000 8135 	beq.w	800fdce <arm_cfft_radix8by4_f32+0x366>
 800fb64:	3b0c      	subs	r3, #12
 800fb66:	f102 0920 	add.w	r9, r2, #32
 800fb6a:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800fb6e:	4622      	mov	r2, r4
 800fb70:	468b      	mov	fp, r1
 800fb72:	f105 0e10 	add.w	lr, r5, #16
 800fb76:	4423      	add	r3, r4
 800fb78:	f1a6 0c0c 	sub.w	ip, r6, #12
 800fb7c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800fb80:	f106 0010 	add.w	r0, r6, #16
 800fb84:	f1a7 010c 	sub.w	r1, r7, #12
 800fb88:	f107 0510 	add.w	r5, r7, #16
 800fb8c:	3c0c      	subs	r4, #12
 800fb8e:	3210      	adds	r2, #16
 800fb90:	ed15 7a02 	vldr	s14, [r5, #-8]
 800fb94:	f1bb 0b01 	subs.w	fp, fp, #1
 800fb98:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800fb9c:	f1ac 0c08 	sub.w	ip, ip, #8
 800fba0:	ed50 6a02 	vldr	s13, [r0, #-8]
 800fba4:	f10e 0e08 	add.w	lr, lr, #8
 800fba8:	ee77 1a87 	vadd.f32	s3, s15, s14
 800fbac:	ed52 4a02 	vldr	s9, [r2, #-8]
 800fbb0:	ed55 5a01 	vldr	s11, [r5, #-4]
 800fbb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fbb8:	ed1e 7a03 	vldr	s14, [lr, #-12]
 800fbbc:	f10a 0a08 	add.w	sl, sl, #8
 800fbc0:	ee36 6aa1 	vadd.f32	s12, s13, s3
 800fbc4:	ed10 3a01 	vldr	s6, [r0, #-4]
 800fbc8:	ee37 4a25 	vadd.f32	s8, s14, s11
 800fbcc:	ed52 3a01 	vldr	s7, [r2, #-4]
 800fbd0:	ee37 7a65 	vsub.f32	s14, s14, s11
 800fbd4:	f100 0008 	add.w	r0, r0, #8
 800fbd8:	ee36 6a24 	vadd.f32	s12, s12, s9
 800fbdc:	f1a1 0108 	sub.w	r1, r1, #8
 800fbe0:	ee73 2a27 	vadd.f32	s5, s6, s15
 800fbe4:	f109 0910 	add.w	r9, r9, #16
 800fbe8:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800fbec:	f105 0508 	add.w	r5, r5, #8
 800fbf0:	ed0e 6a04 	vstr	s12, [lr, #-16]
 800fbf4:	ee37 5a66 	vsub.f32	s10, s14, s13
 800fbf8:	ed50 5a03 	vldr	s11, [r0, #-12]
 800fbfc:	ee71 1ae6 	vsub.f32	s3, s3, s13
 800fc00:	ed12 6a01 	vldr	s12, [r2, #-4]
 800fc04:	ee36 7a87 	vadd.f32	s14, s13, s14
 800fc08:	ee74 5a25 	vadd.f32	s11, s8, s11
 800fc0c:	f1a4 0408 	sub.w	r4, r4, #8
 800fc10:	ee34 4a43 	vsub.f32	s8, s8, s6
 800fc14:	f108 0818 	add.w	r8, r8, #24
 800fc18:	ee32 0ae3 	vsub.f32	s0, s5, s7
 800fc1c:	f102 0208 	add.w	r2, r2, #8
 800fc20:	ee75 5a86 	vadd.f32	s11, s11, s12
 800fc24:	f1a3 0308 	sub.w	r3, r3, #8
 800fc28:	ee34 6a63 	vsub.f32	s12, s8, s7
 800fc2c:	ee77 3aa3 	vadd.f32	s7, s15, s7
 800fc30:	ed4e 5a03 	vstr	s11, [lr, #-12]
 800fc34:	ee35 5a24 	vadd.f32	s10, s10, s9
 800fc38:	ed94 4a04 	vldr	s8, [r4, #16]
 800fc3c:	ee71 1ae4 	vsub.f32	s3, s3, s9
 800fc40:	ed9c 3a04 	vldr	s6, [ip, #16]
 800fc44:	ee37 7a64 	vsub.f32	s14, s14, s9
 800fc48:	edd1 7a04 	vldr	s15, [r1, #16]
 800fc4c:	ee73 6a04 	vadd.f32	s13, s6, s8
 800fc50:	ed93 8a04 	vldr	s16, [r3, #16]
 800fc54:	edd4 5a03 	vldr	s11, [r4, #12]
 800fc58:	ee33 3a44 	vsub.f32	s6, s6, s8
 800fc5c:	ed9c 2a03 	vldr	s4, [ip, #12]
 800fc60:	ee77 8ac8 	vsub.f32	s17, s15, s16
 800fc64:	ee77 0aa6 	vadd.f32	s1, s15, s13
 800fc68:	ed91 1a03 	vldr	s2, [r1, #12]
 800fc6c:	ee32 4a25 	vadd.f32	s8, s4, s11
 800fc70:	edd3 2a03 	vldr	s5, [r3, #12]
 800fc74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800fc78:	ee70 0a88 	vadd.f32	s1, s1, s16
 800fc7c:	ee73 4a41 	vsub.f32	s9, s6, s2
 800fc80:	ee32 2a65 	vsub.f32	s4, s4, s11
 800fc84:	edcc 0a04 	vstr	s1, [ip, #16]
 800fc88:	ee74 0a41 	vsub.f32	s1, s8, s2
 800fc8c:	edd1 6a03 	vldr	s13, [r1, #12]
 800fc90:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800fc94:	ed93 9a03 	vldr	s18, [r3, #12]
 800fc98:	ee78 5a82 	vadd.f32	s11, s17, s4
 800fc9c:	ee34 4a26 	vadd.f32	s8, s8, s13
 800fca0:	ee70 0ae2 	vsub.f32	s1, s1, s5
 800fca4:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800fca8:	ee34 4a09 	vadd.f32	s8, s8, s18
 800fcac:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800fcb0:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800fcb4:	ed8c 4a03 	vstr	s8, [ip, #12]
 800fcb8:	ee38 2ac2 	vsub.f32	s4, s17, s4
 800fcbc:	ed1a 1a03 	vldr	s2, [sl, #-12]
 800fcc0:	ed1a 4a04 	vldr	s8, [sl, #-16]
 800fcc4:	ee60 2a01 	vmul.f32	s5, s0, s2
 800fcc8:	ee64 6a81 	vmul.f32	s13, s9, s2
 800fccc:	ee20 8a04 	vmul.f32	s16, s0, s8
 800fcd0:	ee64 4a84 	vmul.f32	s9, s9, s8
 800fcd4:	ee25 0a01 	vmul.f32	s0, s10, s2
 800fcd8:	ee25 5a04 	vmul.f32	s10, s10, s8
 800fcdc:	ee25 4a84 	vmul.f32	s8, s11, s8
 800fce0:	ee65 5a81 	vmul.f32	s11, s11, s2
 800fce4:	ee35 5a62 	vsub.f32	s10, s10, s5
 800fce8:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800fcec:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800fcf0:	ee38 1a00 	vadd.f32	s2, s16, s0
 800fcf4:	ed00 5a03 	vstr	s10, [r0, #-12]
 800fcf8:	ed00 1a04 	vstr	s2, [r0, #-16]
 800fcfc:	ed81 4a04 	vstr	s8, [r1, #16]
 800fd00:	edc1 5a03 	vstr	s11, [r1, #12]
 800fd04:	ed19 5a08 	vldr	s10, [r9, #-32]	; 0xffffffe0
 800fd08:	ed59 5a07 	vldr	s11, [r9, #-28]	; 0xffffffe4
 800fd0c:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 800fd10:	ee66 2a25 	vmul.f32	s5, s12, s11
 800fd14:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800fd18:	ee21 4a85 	vmul.f32	s8, s3, s10
 800fd1c:	ee60 7a85 	vmul.f32	s15, s1, s10
 800fd20:	ee61 1aa5 	vmul.f32	s3, s3, s11
 800fd24:	ee26 6a05 	vmul.f32	s12, s12, s10
 800fd28:	ee60 5aa5 	vmul.f32	s11, s1, s11
 800fd2c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800fd30:	ee34 5a22 	vadd.f32	s10, s8, s5
 800fd34:	ee36 6a61 	vsub.f32	s12, s12, s3
 800fd38:	ee74 5ae5 	vsub.f32	s11, s9, s11
 800fd3c:	ed05 5a04 	vstr	s10, [r5, #-16]
 800fd40:	ed05 6a03 	vstr	s12, [r5, #-12]
 800fd44:	edc4 5a04 	vstr	s11, [r4, #16]
 800fd48:	edc4 6a03 	vstr	s13, [r4, #12]
 800fd4c:	ed58 2a0c 	vldr	s5, [r8, #-48]	; 0xffffffd0
 800fd50:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
 800fd54:	ee23 6aa2 	vmul.f32	s12, s7, s5
 800fd58:	ee67 5a27 	vmul.f32	s11, s14, s15
 800fd5c:	ee63 6a27 	vmul.f32	s13, s6, s15
 800fd60:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800fd64:	ee27 7a22 	vmul.f32	s14, s14, s5
 800fd68:	ee62 7a27 	vmul.f32	s15, s4, s15
 800fd6c:	ee23 3a22 	vmul.f32	s6, s6, s5
 800fd70:	ee22 2a22 	vmul.f32	s4, s4, s5
 800fd74:	ee36 6a25 	vadd.f32	s12, s12, s11
 800fd78:	ee37 7a63 	vsub.f32	s14, s14, s7
 800fd7c:	ee36 2ac2 	vsub.f32	s4, s13, s4
 800fd80:	ee77 7a83 	vadd.f32	s15, s15, s6
 800fd84:	ed02 6a04 	vstr	s12, [r2, #-16]
 800fd88:	ed02 7a03 	vstr	s14, [r2, #-12]
 800fd8c:	ed83 2a04 	vstr	s4, [r3, #16]
 800fd90:	edc3 7a03 	vstr	s15, [r3, #12]
 800fd94:	f47f aefc 	bne.w	800fb90 <arm_cfft_radix8by4_f32+0x128>
 800fd98:	9907      	ldr	r1, [sp, #28]
 800fd9a:	9803      	ldr	r0, [sp, #12]
 800fd9c:	00cb      	lsls	r3, r1, #3
 800fd9e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800fda2:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800fda6:	9103      	str	r1, [sp, #12]
 800fda8:	9900      	ldr	r1, [sp, #0]
 800fdaa:	4419      	add	r1, r3
 800fdac:	9100      	str	r1, [sp, #0]
 800fdae:	9905      	ldr	r1, [sp, #20]
 800fdb0:	4419      	add	r1, r3
 800fdb2:	9105      	str	r1, [sp, #20]
 800fdb4:	9906      	ldr	r1, [sp, #24]
 800fdb6:	4419      	add	r1, r3
 800fdb8:	9106      	str	r1, [sp, #24]
 800fdba:	9902      	ldr	r1, [sp, #8]
 800fdbc:	4419      	add	r1, r3
 800fdbe:	9102      	str	r1, [sp, #8]
 800fdc0:	9901      	ldr	r1, [sp, #4]
 800fdc2:	4419      	add	r1, r3
 800fdc4:	9b04      	ldr	r3, [sp, #16]
 800fdc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fdca:	9101      	str	r1, [sp, #4]
 800fdcc:	9304      	str	r3, [sp, #16]
 800fdce:	9b00      	ldr	r3, [sp, #0]
 800fdd0:	9902      	ldr	r1, [sp, #8]
 800fdd2:	ed93 7a00 	vldr	s14, [r3]
 800fdd6:	edd1 7a00 	vldr	s15, [r1]
 800fdda:	9a06      	ldr	r2, [sp, #24]
 800fddc:	ee37 6a27 	vadd.f32	s12, s14, s15
 800fde0:	9d01      	ldr	r5, [sp, #4]
 800fde2:	edd2 6a00 	vldr	s13, [r2]
 800fde6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fdea:	9b02      	ldr	r3, [sp, #8]
 800fdec:	ee76 3a86 	vadd.f32	s7, s13, s12
 800fdf0:	ed95 3a00 	vldr	s6, [r5]
 800fdf4:	ed93 5a01 	vldr	s10, [r3, #4]
 800fdf8:	ee36 6a66 	vsub.f32	s12, s12, s13
 800fdfc:	9b00      	ldr	r3, [sp, #0]
 800fdfe:	ee73 3a83 	vadd.f32	s7, s7, s6
 800fe02:	edd5 2a01 	vldr	s5, [r5, #4]
 800fe06:	ed93 4a01 	vldr	s8, [r3, #4]
 800fe0a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800fe0e:	9b00      	ldr	r3, [sp, #0]
 800fe10:	ee74 5a05 	vadd.f32	s11, s8, s10
 800fe14:	edd2 7a01 	vldr	s15, [r2, #4]
 800fe18:	edc3 3a00 	vstr	s7, [r3]
 800fe1c:	ee34 4a45 	vsub.f32	s8, s8, s10
 800fe20:	edd2 3a01 	vldr	s7, [r2, #4]
 800fe24:	ee77 4a87 	vadd.f32	s9, s15, s14
 800fe28:	ed95 2a01 	vldr	s4, [r5, #4]
 800fe2c:	ee75 3aa3 	vadd.f32	s7, s11, s7
 800fe30:	9d05      	ldr	r5, [sp, #20]
 800fe32:	ee34 5a66 	vsub.f32	s10, s8, s13
 800fe36:	9b00      	ldr	r3, [sp, #0]
 800fe38:	ee74 4ae2 	vsub.f32	s9, s9, s5
 800fe3c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800fe40:	ee73 3a82 	vadd.f32	s7, s7, s4
 800fe44:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800fe46:	ee35 5a03 	vadd.f32	s10, s10, s6
 800fe4a:	4621      	mov	r1, r4
 800fe4c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800fe50:	edc3 3a01 	vstr	s7, [r3, #4]
 800fe54:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe58:	edd5 3a00 	vldr	s7, [r5]
 800fe5c:	ee76 6a84 	vadd.f32	s13, s13, s8
 800fe60:	ed95 7a01 	vldr	s14, [r5, #4]
 800fe64:	ee75 5ae2 	vsub.f32	s11, s11, s5
 800fe68:	ee24 4aa3 	vmul.f32	s8, s9, s7
 800fe6c:	2304      	movs	r3, #4
 800fe6e:	ee64 4a87 	vmul.f32	s9, s9, s14
 800fe72:	ee25 7a07 	vmul.f32	s14, s10, s14
 800fe76:	ee25 5a23 	vmul.f32	s10, s10, s7
 800fe7a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800fe7e:	ee34 7a07 	vadd.f32	s14, s8, s14
 800fe82:	ee35 5a64 	vsub.f32	s10, s10, s9
 800fe86:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800fe8a:	ed82 7a00 	vstr	s14, [r2]
 800fe8e:	ed82 5a01 	vstr	s10, [r2, #4]
 800fe92:	9a03      	ldr	r2, [sp, #12]
 800fe94:	edd2 4a01 	vldr	s9, [r2, #4]
 800fe98:	ed92 7a00 	vldr	s14, [r2]
 800fe9c:	9a02      	ldr	r2, [sp, #8]
 800fe9e:	ee26 5a07 	vmul.f32	s10, s12, s14
 800fea2:	ee26 6a24 	vmul.f32	s12, s12, s9
 800fea6:	ee25 7a87 	vmul.f32	s14, s11, s14
 800feaa:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800feae:	ee37 6a46 	vsub.f32	s12, s14, s12
 800feb2:	ee75 5a25 	vadd.f32	s11, s10, s11
 800feb6:	edc2 5a00 	vstr	s11, [r2]
 800feba:	ed82 6a01 	vstr	s12, [r2, #4]
 800febe:	9a04      	ldr	r2, [sp, #16]
 800fec0:	9d01      	ldr	r5, [sp, #4]
 800fec2:	edd2 5a01 	vldr	s11, [r2, #4]
 800fec6:	ed92 7a00 	vldr	s14, [r2]
 800feca:	ee27 6a87 	vmul.f32	s12, s15, s14
 800fece:	ee26 7a87 	vmul.f32	s14, s13, s14
 800fed2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800fed6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800feda:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fede:	ee76 6a26 	vadd.f32	s13, s12, s13
 800fee2:	edc5 7a01 	vstr	s15, [r5, #4]
 800fee6:	edc5 6a00 	vstr	s13, [r5]
 800feea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800feec:	686a      	ldr	r2, [r5, #4]
 800feee:	f000 f8b5 	bl	801005c <arm_radix8_butterfly_f32>
 800fef2:	4630      	mov	r0, r6
 800fef4:	4621      	mov	r1, r4
 800fef6:	686a      	ldr	r2, [r5, #4]
 800fef8:	2304      	movs	r3, #4
 800fefa:	f000 f8af 	bl	801005c <arm_radix8_butterfly_f32>
 800fefe:	4638      	mov	r0, r7
 800ff00:	4621      	mov	r1, r4
 800ff02:	686a      	ldr	r2, [r5, #4]
 800ff04:	2304      	movs	r3, #4
 800ff06:	f000 f8a9 	bl	801005c <arm_radix8_butterfly_f32>
 800ff0a:	4621      	mov	r1, r4
 800ff0c:	686a      	ldr	r2, [r5, #4]
 800ff0e:	2304      	movs	r3, #4
 800ff10:	9808      	ldr	r0, [sp, #32]
 800ff12:	b00d      	add	sp, #52	; 0x34
 800ff14:	ecbd 8b04 	vpop	{d8-d9}
 800ff18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff1c:	f000 b89e 	b.w	801005c <arm_radix8_butterfly_f32>

0800ff20 <arm_cfft_f32>:
 800ff20:	2a01      	cmp	r2, #1
 800ff22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff26:	4606      	mov	r6, r0
 800ff28:	4617      	mov	r7, r2
 800ff2a:	460c      	mov	r4, r1
 800ff2c:	4698      	mov	r8, r3
 800ff2e:	8805      	ldrh	r5, [r0, #0]
 800ff30:	d055      	beq.n	800ffde <arm_cfft_f32+0xbe>
 800ff32:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800ff36:	d061      	beq.n	800fffc <arm_cfft_f32+0xdc>
 800ff38:	d916      	bls.n	800ff68 <arm_cfft_f32+0x48>
 800ff3a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800ff3e:	d01a      	beq.n	800ff76 <arm_cfft_f32+0x56>
 800ff40:	d946      	bls.n	800ffd0 <arm_cfft_f32+0xb0>
 800ff42:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800ff46:	d059      	beq.n	800fffc <arm_cfft_f32+0xdc>
 800ff48:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800ff4c:	d105      	bne.n	800ff5a <arm_cfft_f32+0x3a>
 800ff4e:	2301      	movs	r3, #1
 800ff50:	6872      	ldr	r2, [r6, #4]
 800ff52:	4629      	mov	r1, r5
 800ff54:	4620      	mov	r0, r4
 800ff56:	f000 f881 	bl	801005c <arm_radix8_butterfly_f32>
 800ff5a:	f1b8 0f00 	cmp.w	r8, #0
 800ff5e:	d111      	bne.n	800ff84 <arm_cfft_f32+0x64>
 800ff60:	2f01      	cmp	r7, #1
 800ff62:	d016      	beq.n	800ff92 <arm_cfft_f32+0x72>
 800ff64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff68:	2d20      	cmp	r5, #32
 800ff6a:	d047      	beq.n	800fffc <arm_cfft_f32+0xdc>
 800ff6c:	d934      	bls.n	800ffd8 <arm_cfft_f32+0xb8>
 800ff6e:	2d40      	cmp	r5, #64	; 0x40
 800ff70:	d0ed      	beq.n	800ff4e <arm_cfft_f32+0x2e>
 800ff72:	2d80      	cmp	r5, #128	; 0x80
 800ff74:	d1f1      	bne.n	800ff5a <arm_cfft_f32+0x3a>
 800ff76:	4621      	mov	r1, r4
 800ff78:	4630      	mov	r0, r6
 800ff7a:	f7ff fca9 	bl	800f8d0 <arm_cfft_radix8by2_f32>
 800ff7e:	f1b8 0f00 	cmp.w	r8, #0
 800ff82:	d0ed      	beq.n	800ff60 <arm_cfft_f32+0x40>
 800ff84:	68b2      	ldr	r2, [r6, #8]
 800ff86:	4620      	mov	r0, r4
 800ff88:	89b1      	ldrh	r1, [r6, #12]
 800ff8a:	f000 f83f 	bl	801000c <arm_bitreversal_32>
 800ff8e:	2f01      	cmp	r7, #1
 800ff90:	d1e8      	bne.n	800ff64 <arm_cfft_f32+0x44>
 800ff92:	ee07 5a90 	vmov	s15, r5
 800ff96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ff9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff9e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ffa2:	2d00      	cmp	r5, #0
 800ffa4:	d0de      	beq.n	800ff64 <arm_cfft_f32+0x44>
 800ffa6:	f104 0108 	add.w	r1, r4, #8
 800ffaa:	2300      	movs	r3, #0
 800ffac:	ed11 7a02 	vldr	s14, [r1, #-8]
 800ffb0:	3301      	adds	r3, #1
 800ffb2:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ffb6:	3108      	adds	r1, #8
 800ffb8:	429d      	cmp	r5, r3
 800ffba:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ffbe:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ffc2:	ed01 7a04 	vstr	s14, [r1, #-16]
 800ffc6:	ed41 7a03 	vstr	s15, [r1, #-12]
 800ffca:	d1ef      	bne.n	800ffac <arm_cfft_f32+0x8c>
 800ffcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffd0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800ffd4:	d0bb      	beq.n	800ff4e <arm_cfft_f32+0x2e>
 800ffd6:	e7c0      	b.n	800ff5a <arm_cfft_f32+0x3a>
 800ffd8:	2d10      	cmp	r5, #16
 800ffda:	d0cc      	beq.n	800ff76 <arm_cfft_f32+0x56>
 800ffdc:	e7bd      	b.n	800ff5a <arm_cfft_f32+0x3a>
 800ffde:	b195      	cbz	r5, 8010006 <arm_cfft_f32+0xe6>
 800ffe0:	f101 030c 	add.w	r3, r1, #12
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	ed53 7a02 	vldr	s15, [r3, #-8]
 800ffea:	3201      	adds	r2, #1
 800ffec:	3308      	adds	r3, #8
 800ffee:	eef1 7a67 	vneg.f32	s15, s15
 800fff2:	4295      	cmp	r5, r2
 800fff4:	ed43 7a04 	vstr	s15, [r3, #-16]
 800fff8:	d1f5      	bne.n	800ffe6 <arm_cfft_f32+0xc6>
 800fffa:	e79a      	b.n	800ff32 <arm_cfft_f32+0x12>
 800fffc:	4621      	mov	r1, r4
 800fffe:	4630      	mov	r0, r6
 8010000:	f7ff fd32 	bl	800fa68 <arm_cfft_radix8by4_f32>
 8010004:	e7a9      	b.n	800ff5a <arm_cfft_f32+0x3a>
 8010006:	2b00      	cmp	r3, #0
 8010008:	d0ac      	beq.n	800ff64 <arm_cfft_f32+0x44>
 801000a:	e7bb      	b.n	800ff84 <arm_cfft_f32+0x64>

0801000c <arm_bitreversal_32>:
 801000c:	b321      	cbz	r1, 8010058 <arm_bitreversal_32+0x4c>
 801000e:	f102 0c02 	add.w	ip, r2, #2
 8010012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010016:	4690      	mov	r8, r2
 8010018:	2500      	movs	r5, #0
 801001a:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 801001e:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 8010022:	3502      	adds	r5, #2
 8010024:	08a4      	lsrs	r4, r4, #2
 8010026:	089b      	lsrs	r3, r3, #2
 8010028:	428d      	cmp	r5, r1
 801002a:	ea4f 0784 	mov.w	r7, r4, lsl #2
 801002e:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 8010032:	ea4f 0683 	mov.w	r6, r3, lsl #2
 8010036:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801003a:	f107 0704 	add.w	r7, r7, #4
 801003e:	f106 0604 	add.w	r6, r6, #4
 8010042:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8010046:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 801004a:	59c4      	ldr	r4, [r0, r7]
 801004c:	5983      	ldr	r3, [r0, r6]
 801004e:	51c3      	str	r3, [r0, r7]
 8010050:	5184      	str	r4, [r0, r6]
 8010052:	d3e2      	bcc.n	801001a <arm_bitreversal_32+0xe>
 8010054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010058:	4770      	bx	lr
 801005a:	bf00      	nop

0801005c <arm_radix8_butterfly_f32>:
 801005c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010060:	ed2d 8b10 	vpush	{d8-d15}
 8010064:	b095      	sub	sp, #84	; 0x54
 8010066:	468a      	mov	sl, r1
 8010068:	468b      	mov	fp, r1
 801006a:	eddf 8abb 	vldr	s17, [pc, #748]	; 8010358 <arm_radix8_butterfly_f32+0x2fc>
 801006e:	9012      	str	r0, [sp, #72]	; 0x48
 8010070:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8010074:	4603      	mov	r3, r0
 8010076:	3304      	adds	r3, #4
 8010078:	9313      	str	r3, [sp, #76]	; 0x4c
 801007a:	ea4f 02db 	mov.w	r2, fp, lsr #3
 801007e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010080:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010084:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8010088:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 801008c:	920f      	str	r2, [sp, #60]	; 0x3c
 801008e:	9303      	str	r3, [sp, #12]
 8010090:	0153      	lsls	r3, r2, #5
 8010092:	0114      	lsls	r4, r2, #4
 8010094:	eba9 0002 	sub.w	r0, r9, r2
 8010098:	18ce      	adds	r6, r1, r3
 801009a:	9302      	str	r3, [sp, #8]
 801009c:	0097      	lsls	r7, r2, #2
 801009e:	4613      	mov	r3, r2
 80100a0:	eb06 0509 	add.w	r5, r6, r9
 80100a4:	9004      	str	r0, [sp, #16]
 80100a6:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 80100aa:	1bd2      	subs	r2, r2, r7
 80100ac:	eb05 0109 	add.w	r1, r5, r9
 80100b0:	441f      	add	r7, r3
 80100b2:	9405      	str	r4, [sp, #20]
 80100b4:	f109 0004 	add.w	r0, r9, #4
 80100b8:	9101      	str	r1, [sp, #4]
 80100ba:	1d21      	adds	r1, r4, #4
 80100bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80100be:	f04f 0e00 	mov.w	lr, #0
 80100c2:	9c01      	ldr	r4, [sp, #4]
 80100c4:	4418      	add	r0, r3
 80100c6:	4419      	add	r1, r3
 80100c8:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80100cc:	9b02      	ldr	r3, [sp, #8]
 80100ce:	00fc      	lsls	r4, r7, #3
 80100d0:	18d7      	adds	r7, r2, r3
 80100d2:	9b04      	ldr	r3, [sp, #16]
 80100d4:	9406      	str	r4, [sp, #24]
 80100d6:	00db      	lsls	r3, r3, #3
 80100d8:	9c01      	ldr	r4, [sp, #4]
 80100da:	9307      	str	r3, [sp, #28]
 80100dc:	ea4f 1308 	mov.w	r3, r8, lsl #4
 80100e0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80100e4:	9304      	str	r3, [sp, #16]
 80100e6:	9b03      	ldr	r3, [sp, #12]
 80100e8:	edd6 6a00 	vldr	s13, [r6]
 80100ec:	44de      	add	lr, fp
 80100ee:	ed5c 7a01 	vldr	s15, [ip, #-4]
 80100f2:	ed94 7a00 	vldr	s14, [r4]
 80100f6:	45f2      	cmp	sl, lr
 80100f8:	ed10 6a01 	vldr	s12, [r0, #-4]
 80100fc:	ee37 2aa6 	vadd.f32	s4, s15, s13
 8010100:	edd5 2a00 	vldr	s5, [r5]
 8010104:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010108:	edd7 3a00 	vldr	s7, [r7]
 801010c:	ed11 5a01 	vldr	s10, [r1, #-4]
 8010110:	ee36 3a22 	vadd.f32	s6, s12, s5
 8010114:	edd2 6a00 	vldr	s13, [r2]
 8010118:	ee75 5a07 	vadd.f32	s11, s10, s14
 801011c:	ee36 4aa3 	vadd.f32	s8, s13, s7
 8010120:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8010124:	ee72 4a25 	vadd.f32	s9, s4, s11
 8010128:	ee73 3a04 	vadd.f32	s7, s6, s8
 801012c:	ee35 5a47 	vsub.f32	s10, s10, s14
 8010130:	ee36 7a62 	vsub.f32	s14, s12, s5
 8010134:	ee32 2a65 	vsub.f32	s4, s4, s11
 8010138:	ee74 5aa3 	vadd.f32	s11, s9, s7
 801013c:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8010140:	ee37 6a66 	vsub.f32	s12, s14, s13
 8010144:	ed4c 5a01 	vstr	s11, [ip, #-4]
 8010148:	ee33 3a44 	vsub.f32	s6, s6, s8
 801014c:	edc6 4a00 	vstr	s9, [r6]
 8010150:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010154:	ed97 4a01 	vldr	s8, [r7, #4]
 8010158:	ee66 6a28 	vmul.f32	s13, s12, s17
 801015c:	edd0 5a00 	vldr	s11, [r0]
 8010160:	ed95 6a01 	vldr	s12, [r5, #4]
 8010164:	ee27 7a28 	vmul.f32	s14, s14, s17
 8010168:	edd2 3a01 	vldr	s7, [r2, #4]
 801016c:	ee77 2aa6 	vadd.f32	s5, s15, s13
 8010170:	ee75 4ac6 	vsub.f32	s9, s11, s12
 8010174:	ed96 1a01 	vldr	s2, [r6, #4]
 8010178:	ee33 0ac4 	vsub.f32	s0, s7, s8
 801017c:	edd4 0a01 	vldr	s1, [r4, #4]
 8010180:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010184:	eddc 6a00 	vldr	s13, [ip]
 8010188:	ee75 5a86 	vadd.f32	s11, s11, s12
 801018c:	ed91 6a00 	vldr	s12, [r1]
 8010190:	ee73 3a84 	vadd.f32	s7, s7, s8
 8010194:	ee74 1a80 	vadd.f32	s3, s9, s0
 8010198:	ee36 4a81 	vadd.f32	s8, s13, s2
 801019c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80101a0:	ee76 6ac1 	vsub.f32	s13, s13, s2
 80101a4:	ee36 1a20 	vadd.f32	s2, s12, s1
 80101a8:	ee61 1aa8 	vmul.f32	s3, s3, s17
 80101ac:	ee36 6a60 	vsub.f32	s12, s12, s1
 80101b0:	ee64 4aa8 	vmul.f32	s9, s9, s17
 80101b4:	ee75 0aa3 	vadd.f32	s1, s11, s7
 80101b8:	ee75 5ae3 	vsub.f32	s11, s11, s7
 80101bc:	ee74 3a01 	vadd.f32	s7, s8, s2
 80101c0:	ee34 4a41 	vsub.f32	s8, s8, s2
 80101c4:	ee36 1a21 	vadd.f32	s2, s12, s3
 80101c8:	ee33 0aa0 	vadd.f32	s0, s7, s1
 80101cc:	ee36 6a61 	vsub.f32	s12, s12, s3
 80101d0:	ee73 3ae0 	vsub.f32	s7, s7, s1
 80101d4:	ee76 1aa4 	vadd.f32	s3, s13, s9
 80101d8:	ed8c 0a00 	vstr	s0, [ip]
 80101dc:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80101e0:	449c      	add	ip, r3
 80101e2:	ee75 4a07 	vadd.f32	s9, s10, s14
 80101e6:	edc6 3a01 	vstr	s7, [r6, #4]
 80101ea:	ee35 7a47 	vsub.f32	s14, s10, s14
 80101ee:	441e      	add	r6, r3
 80101f0:	ee32 5a25 	vadd.f32	s10, s4, s11
 80101f4:	ee72 5a65 	vsub.f32	s11, s4, s11
 80101f8:	ee72 3a81 	vadd.f32	s7, s5, s2
 80101fc:	ed01 5a01 	vstr	s10, [r1, #-4]
 8010200:	ee34 2a43 	vsub.f32	s4, s8, s6
 8010204:	edc4 5a00 	vstr	s11, [r4]
 8010208:	ee37 5a86 	vadd.f32	s10, s15, s12
 801020c:	ee71 5ae4 	vsub.f32	s11, s3, s9
 8010210:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010214:	ed81 2a00 	vstr	s4, [r1]
 8010218:	ee36 6ac7 	vsub.f32	s12, s13, s14
 801021c:	4419      	add	r1, r3
 801021e:	ee33 4a04 	vadd.f32	s8, s6, s8
 8010222:	ee72 2ac1 	vsub.f32	s5, s5, s2
 8010226:	ee74 4aa1 	vadd.f32	s9, s9, s3
 801022a:	ee37 7a26 	vadd.f32	s14, s14, s13
 801022e:	ed84 4a01 	vstr	s8, [r4, #4]
 8010232:	ed40 3a01 	vstr	s7, [r0, #-4]
 8010236:	441c      	add	r4, r3
 8010238:	edc7 2a00 	vstr	s5, [r7]
 801023c:	ed85 5a00 	vstr	s10, [r5]
 8010240:	edc2 7a00 	vstr	s15, [r2]
 8010244:	edc0 5a00 	vstr	s11, [r0]
 8010248:	4418      	add	r0, r3
 801024a:	edc7 4a01 	vstr	s9, [r7, #4]
 801024e:	441f      	add	r7, r3
 8010250:	ed85 6a01 	vstr	s12, [r5, #4]
 8010254:	441d      	add	r5, r3
 8010256:	ed82 7a01 	vstr	s14, [r2, #4]
 801025a:	441a      	add	r2, r3
 801025c:	f63f af44 	bhi.w	80100e8 <arm_radix8_butterfly_f32+0x8c>
 8010260:	469c      	mov	ip, r3
 8010262:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010264:	2b07      	cmp	r3, #7
 8010266:	f240 81b6 	bls.w	80105d6 <arm_radix8_butterfly_f32+0x57a>
 801026a:	9a02      	ldr	r2, [sp, #8]
 801026c:	f109 0608 	add.w	r6, r9, #8
 8010270:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010272:	f108 0408 	add.w	r4, r8, #8
 8010276:	3208      	adds	r2, #8
 8010278:	9f06      	ldr	r7, [sp, #24]
 801027a:	9d04      	ldr	r5, [sp, #16]
 801027c:	189a      	adds	r2, r3, r2
 801027e:	3708      	adds	r7, #8
 8010280:	3508      	adds	r5, #8
 8010282:	9807      	ldr	r0, [sp, #28]
 8010284:	920c      	str	r2, [sp, #48]	; 0x30
 8010286:	199a      	adds	r2, r3, r6
 8010288:	9905      	ldr	r1, [sp, #20]
 801028a:	3008      	adds	r0, #8
 801028c:	920b      	str	r2, [sp, #44]	; 0x2c
 801028e:	19da      	adds	r2, r3, r7
 8010290:	310c      	adds	r1, #12
 8010292:	920a      	str	r2, [sp, #40]	; 0x28
 8010294:	195a      	adds	r2, r3, r5
 8010296:	9209      	str	r2, [sp, #36]	; 0x24
 8010298:	191a      	adds	r2, r3, r4
 801029a:	9208      	str	r2, [sp, #32]
 801029c:	181a      	adds	r2, r3, r0
 801029e:	9207      	str	r2, [sp, #28]
 80102a0:	185a      	adds	r2, r3, r1
 80102a2:	330c      	adds	r3, #12
 80102a4:	9205      	str	r2, [sp, #20]
 80102a6:	9306      	str	r3, [sp, #24]
 80102a8:	2301      	movs	r3, #1
 80102aa:	9304      	str	r3, [sp, #16]
 80102ac:	2300      	movs	r3, #0
 80102ae:	930d      	str	r3, [sp, #52]	; 0x34
 80102b0:	4663      	mov	r3, ip
 80102b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80102b4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80102b6:	f8dd c014 	ldr.w	ip, [sp, #20]
 80102ba:	440a      	add	r2, r1
 80102bc:	9f06      	ldr	r7, [sp, #24]
 80102be:	9e07      	ldr	r6, [sp, #28]
 80102c0:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 80102c4:	920d      	str	r2, [sp, #52]	; 0x34
 80102c6:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 80102ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80102cc:	9d08      	ldr	r5, [sp, #32]
 80102ce:	4442      	add	r2, r8
 80102d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80102d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80102d4:	eb02 0108 	add.w	r1, r2, r8
 80102d8:	ed92 ea00 	vldr	s28, [r2]
 80102dc:	eb01 0208 	add.w	r2, r1, r8
 80102e0:	edd1 da00 	vldr	s27, [r1]
 80102e4:	eb02 0108 	add.w	r1, r2, r8
 80102e8:	ed92 da00 	vldr	s26, [r2]
 80102ec:	eb01 0208 	add.w	r2, r1, r8
 80102f0:	edd1 ca00 	vldr	s25, [r1]
 80102f4:	eb02 0108 	add.w	r1, r2, r8
 80102f8:	ed92 ca00 	vldr	s24, [r2]
 80102fc:	eb01 0208 	add.w	r2, r1, r8
 8010300:	edd1 ba00 	vldr	s23, [r1]
 8010304:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010306:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 801030a:	ed92 ba00 	vldr	s22, [r2]
 801030e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010310:	eb0e 0908 	add.w	r9, lr, r8
 8010314:	910e      	str	r1, [sp, #56]	; 0x38
 8010316:	9201      	str	r2, [sp, #4]
 8010318:	eb09 0208 	add.w	r2, r9, r8
 801031c:	ed99 aa01 	vldr	s20, [r9, #4]
 8010320:	edde aa01 	vldr	s21, [lr, #4]
 8010324:	eb02 0908 	add.w	r9, r2, r8
 8010328:	edd2 9a01 	vldr	s19, [r2, #4]
 801032c:	f8dd e010 	ldr.w	lr, [sp, #16]
 8010330:	eb09 0208 	add.w	r2, r9, r8
 8010334:	ed99 9a01 	vldr	s18, [r9, #4]
 8010338:	eb02 0908 	add.w	r9, r2, r8
 801033c:	ed92 8a01 	vldr	s16, [r2, #4]
 8010340:	9a01      	ldr	r2, [sp, #4]
 8010342:	edd9 7a01 	vldr	s15, [r9, #4]
 8010346:	44c8      	add	r8, r9
 8010348:	edcd 7a02 	vstr	s15, [sp, #8]
 801034c:	edd8 7a01 	vldr	s15, [r8, #4]
 8010350:	edcd 7a03 	vstr	s15, [sp, #12]
 8010354:	990e      	ldr	r1, [sp, #56]	; 0x38
 8010356:	e001      	b.n	801035c <arm_radix8_butterfly_f32+0x300>
 8010358:	3f3504f3 	.word	0x3f3504f3
 801035c:	ed92 7a00 	vldr	s14, [r2]
 8010360:	44de      	add	lr, fp
 8010362:	ed17 1a01 	vldr	s2, [r7, #-4]
 8010366:	ed90 5a00 	vldr	s10, [r0]
 801036a:	45f2      	cmp	sl, lr
 801036c:	ed1c fa01 	vldr	s30, [ip, #-4]
 8010370:	ee31 3a07 	vadd.f32	s6, s2, s14
 8010374:	edd6 5a00 	vldr	s11, [r6]
 8010378:	ee31 1a47 	vsub.f32	s2, s2, s14
 801037c:	edd4 7a00 	vldr	s15, [r4]
 8010380:	ed95 7a00 	vldr	s14, [r5]
 8010384:	ed91 4a00 	vldr	s8, [r1]
 8010388:	ee3f 6a27 	vadd.f32	s12, s30, s15
 801038c:	ee77 6a25 	vadd.f32	s13, s14, s11
 8010390:	edd7 ea00 	vldr	s29, [r7]
 8010394:	ee74 fa05 	vadd.f32	s31, s8, s10
 8010398:	ee73 1a06 	vadd.f32	s3, s6, s12
 801039c:	ee34 4a45 	vsub.f32	s8, s8, s10
 80103a0:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 80103a4:	ee37 7a65 	vsub.f32	s14, s14, s11
 80103a8:	ee33 3a46 	vsub.f32	s6, s6, s12
 80103ac:	ee31 6a85 	vadd.f32	s12, s3, s10
 80103b0:	ee7f 7a67 	vsub.f32	s15, s30, s15
 80103b4:	ee34 fa07 	vadd.f32	s30, s8, s14
 80103b8:	ed07 6a01 	vstr	s12, [r7, #-4]
 80103bc:	ee34 4a47 	vsub.f32	s8, s8, s14
 80103c0:	edd5 3a01 	vldr	s7, [r5, #4]
 80103c4:	ee7f fae6 	vsub.f32	s31, s31, s13
 80103c8:	ed90 7a01 	vldr	s14, [r0, #4]
 80103cc:	ee2f fa28 	vmul.f32	s30, s30, s17
 80103d0:	edd1 5a01 	vldr	s11, [r1, #4]
 80103d4:	ee24 4a28 	vmul.f32	s8, s8, s17
 80103d8:	ed96 6a01 	vldr	s12, [r6, #4]
 80103dc:	ee31 5ac5 	vsub.f32	s10, s3, s10
 80103e0:	ee75 0ac7 	vsub.f32	s1, s11, s14
 80103e4:	edd2 6a01 	vldr	s13, [r2, #4]
 80103e8:	ee73 2ac6 	vsub.f32	s5, s7, s12
 80103ec:	edd4 4a01 	vldr	s9, [r4, #4]
 80103f0:	ee75 5a87 	vadd.f32	s11, s11, s14
 80103f4:	ed9c 7a00 	vldr	s14, [ip]
 80103f8:	ee37 2a8f 	vadd.f32	s4, s15, s30
 80103fc:	ee33 6a86 	vadd.f32	s12, s7, s12
 8010400:	ee37 facf 	vsub.f32	s30, s15, s30
 8010404:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 8010408:	ee70 7ae2 	vsub.f32	s15, s1, s5
 801040c:	ee7e eae6 	vsub.f32	s29, s29, s13
 8010410:	ee70 2aa2 	vadd.f32	s5, s1, s5
 8010414:	ee77 6a24 	vadd.f32	s13, s14, s9
 8010418:	ee75 0a86 	vadd.f32	s1, s11, s12
 801041c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8010420:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8010424:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8010428:	ee62 2aa8 	vmul.f32	s5, s5, s17
 801042c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8010430:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8010434:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 8010438:	ee77 4a22 	vadd.f32	s9, s14, s5
 801043c:	ee7e eae7 	vsub.f32	s29, s29, s15
 8010440:	ee77 7a62 	vsub.f32	s15, s14, s5
 8010444:	ee71 2a04 	vadd.f32	s5, s2, s8
 8010448:	ee31 7a44 	vsub.f32	s14, s2, s8
 801044c:	ee30 1a60 	vsub.f32	s2, s0, s1
 8010450:	ee73 1a06 	vadd.f32	s3, s6, s12
 8010454:	ee33 6a46 	vsub.f32	s12, s6, s12
 8010458:	ee33 3aef 	vsub.f32	s6, s7, s31
 801045c:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 8010460:	ee3e 4acf 	vsub.f32	s8, s29, s30
 8010464:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8010468:	ee72 5a25 	vadd.f32	s11, s4, s11
 801046c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8010470:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8010474:	ee77 2a27 	vadd.f32	s5, s14, s15
 8010478:	ee37 7a67 	vsub.f32	s14, s14, s15
 801047c:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 8010480:	ee2c fa85 	vmul.f32	s30, s25, s10
 8010484:	ee69 ea01 	vmul.f32	s29, s18, s2
 8010488:	ee29 5a05 	vmul.f32	s10, s18, s10
 801048c:	ee2c 1a81 	vmul.f32	s2, s25, s2
 8010490:	ee6d faa1 	vmul.f32	s31, s27, s3
 8010494:	ee70 0a20 	vadd.f32	s1, s0, s1
 8010498:	ee6a 1a21 	vmul.f32	s3, s20, s3
 801049c:	ee2a 0a03 	vmul.f32	s0, s20, s6
 80104a0:	ee2d 3a83 	vmul.f32	s6, s27, s6
 80104a4:	edc7 0a00 	vstr	s1, [r7]
 80104a8:	ee7f ea2e 	vadd.f32	s29, s30, s29
 80104ac:	441f      	add	r7, r3
 80104ae:	ee2a faa3 	vmul.f32	s30, s21, s7
 80104b2:	ee31 5a45 	vsub.f32	s10, s2, s10
 80104b6:	ee6e 3a23 	vmul.f32	s7, s28, s7
 80104ba:	edc2 ea00 	vstr	s29, [r2]
 80104be:	ee3f 0a80 	vadd.f32	s0, s31, s0
 80104c2:	ee33 3a61 	vsub.f32	s6, s6, s3
 80104c6:	ed82 5a01 	vstr	s10, [r2, #4]
 80104ca:	ee6e 0a02 	vmul.f32	s1, s28, s4
 80104ce:	edcd 3a01 	vstr	s7, [sp, #4]
 80104d2:	ed9d 5a03 	vldr	s10, [sp, #12]
 80104d6:	ee6b ea86 	vmul.f32	s29, s23, s12
 80104da:	eddd 3a02 	vldr	s7, [sp, #8]
 80104de:	ee6b fa24 	vmul.f32	s31, s22, s9
 80104e2:	ed0c 0a01 	vstr	s0, [ip, #-4]
 80104e6:	ee65 4a24 	vmul.f32	s9, s10, s9
 80104ea:	ed8c 3a00 	vstr	s6, [ip]
 80104ee:	ee23 1aa6 	vmul.f32	s2, s7, s13
 80104f2:	ee23 6a86 	vmul.f32	s12, s7, s12
 80104f6:	eddd 3a01 	vldr	s7, [sp, #4]
 80104fa:	ee25 5a25 	vmul.f32	s10, s10, s11
 80104fe:	441a      	add	r2, r3
 8010500:	ee2c 0a22 	vmul.f32	s0, s24, s5
 8010504:	449c      	add	ip, r3
 8010506:	ee68 1a04 	vmul.f32	s3, s16, s8
 801050a:	ee70 0a8f 	vadd.f32	s1, s1, s30
 801050e:	ee2d 3a07 	vmul.f32	s6, s26, s14
 8010512:	ee29 faa7 	vmul.f32	s30, s19, s15
 8010516:	ee2a 2a82 	vmul.f32	s4, s21, s4
 801051a:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 801051e:	ee6b 5a25 	vmul.f32	s11, s22, s11
 8010522:	ee68 2a22 	vmul.f32	s5, s16, s5
 8010526:	ee2c 4a04 	vmul.f32	s8, s24, s8
 801052a:	ee29 7a87 	vmul.f32	s14, s19, s14
 801052e:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8010532:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8010536:	ee7e ea81 	vadd.f32	s29, s29, s2
 801053a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801053e:	ee3f 5a85 	vadd.f32	s10, s31, s10
 8010542:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8010546:	edc4 ea00 	vstr	s29, [r4]
 801054a:	ee30 0a21 	vadd.f32	s0, s0, s3
 801054e:	ed84 6a01 	vstr	s12, [r4, #4]
 8010552:	ee74 2a62 	vsub.f32	s5, s8, s5
 8010556:	edc1 0a00 	vstr	s1, [r1]
 801055a:	ee33 3a0f 	vadd.f32	s6, s6, s30
 801055e:	edc1 3a01 	vstr	s7, [r1, #4]
 8010562:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8010566:	ed86 5a00 	vstr	s10, [r6]
 801056a:	edc6 4a01 	vstr	s9, [r6, #4]
 801056e:	4419      	add	r1, r3
 8010570:	ed80 0a00 	vstr	s0, [r0]
 8010574:	441c      	add	r4, r3
 8010576:	edc0 2a01 	vstr	s5, [r0, #4]
 801057a:	441e      	add	r6, r3
 801057c:	ed85 3a00 	vstr	s6, [r5]
 8010580:	4418      	add	r0, r3
 8010582:	ed85 7a01 	vstr	s14, [r5, #4]
 8010586:	441d      	add	r5, r3
 8010588:	f63f aee8 	bhi.w	801035c <arm_radix8_butterfly_f32+0x300>
 801058c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801058e:	9a04      	ldr	r2, [sp, #16]
 8010590:	3108      	adds	r1, #8
 8010592:	3201      	adds	r2, #1
 8010594:	910c      	str	r1, [sp, #48]	; 0x30
 8010596:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010598:	9204      	str	r2, [sp, #16]
 801059a:	3108      	adds	r1, #8
 801059c:	910b      	str	r1, [sp, #44]	; 0x2c
 801059e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80105a0:	3108      	adds	r1, #8
 80105a2:	910a      	str	r1, [sp, #40]	; 0x28
 80105a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80105a6:	3108      	adds	r1, #8
 80105a8:	9109      	str	r1, [sp, #36]	; 0x24
 80105aa:	9908      	ldr	r1, [sp, #32]
 80105ac:	3108      	adds	r1, #8
 80105ae:	9108      	str	r1, [sp, #32]
 80105b0:	9907      	ldr	r1, [sp, #28]
 80105b2:	3108      	adds	r1, #8
 80105b4:	9107      	str	r1, [sp, #28]
 80105b6:	9906      	ldr	r1, [sp, #24]
 80105b8:	3108      	adds	r1, #8
 80105ba:	9106      	str	r1, [sp, #24]
 80105bc:	9905      	ldr	r1, [sp, #20]
 80105be:	3108      	adds	r1, #8
 80105c0:	9105      	str	r1, [sp, #20]
 80105c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80105c4:	4291      	cmp	r1, r2
 80105c6:	f47f ae74 	bne.w	80102b2 <arm_radix8_butterfly_f32+0x256>
 80105ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80105cc:	468b      	mov	fp, r1
 80105ce:	00db      	lsls	r3, r3, #3
 80105d0:	b29b      	uxth	r3, r3
 80105d2:	9310      	str	r3, [sp, #64]	; 0x40
 80105d4:	e551      	b.n	801007a <arm_radix8_butterfly_f32+0x1e>
 80105d6:	b015      	add	sp, #84	; 0x54
 80105d8:	ecbd 8b10 	vpop	{d8-d15}
 80105dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080105e0 <__errno>:
 80105e0:	4b01      	ldr	r3, [pc, #4]	; (80105e8 <__errno+0x8>)
 80105e2:	6818      	ldr	r0, [r3, #0]
 80105e4:	4770      	bx	lr
 80105e6:	bf00      	nop
 80105e8:	24000018 	.word	0x24000018

080105ec <__libc_init_array>:
 80105ec:	b570      	push	{r4, r5, r6, lr}
 80105ee:	4d0d      	ldr	r5, [pc, #52]	; (8010624 <__libc_init_array+0x38>)
 80105f0:	4c0d      	ldr	r4, [pc, #52]	; (8010628 <__libc_init_array+0x3c>)
 80105f2:	1b64      	subs	r4, r4, r5
 80105f4:	10a4      	asrs	r4, r4, #2
 80105f6:	2600      	movs	r6, #0
 80105f8:	42a6      	cmp	r6, r4
 80105fa:	d109      	bne.n	8010610 <__libc_init_array+0x24>
 80105fc:	4d0b      	ldr	r5, [pc, #44]	; (801062c <__libc_init_array+0x40>)
 80105fe:	4c0c      	ldr	r4, [pc, #48]	; (8010630 <__libc_init_array+0x44>)
 8010600:	f000 f8e0 	bl	80107c4 <_init>
 8010604:	1b64      	subs	r4, r4, r5
 8010606:	10a4      	asrs	r4, r4, #2
 8010608:	2600      	movs	r6, #0
 801060a:	42a6      	cmp	r6, r4
 801060c:	d105      	bne.n	801061a <__libc_init_array+0x2e>
 801060e:	bd70      	pop	{r4, r5, r6, pc}
 8010610:	f855 3b04 	ldr.w	r3, [r5], #4
 8010614:	4798      	blx	r3
 8010616:	3601      	adds	r6, #1
 8010618:	e7ee      	b.n	80105f8 <__libc_init_array+0xc>
 801061a:	f855 3b04 	ldr.w	r3, [r5], #4
 801061e:	4798      	blx	r3
 8010620:	3601      	adds	r6, #1
 8010622:	e7f2      	b.n	801060a <__libc_init_array+0x1e>
 8010624:	08023a18 	.word	0x08023a18
 8010628:	08023a18 	.word	0x08023a18
 801062c:	08023a18 	.word	0x08023a18
 8010630:	08023a1c 	.word	0x08023a1c

08010634 <memcpy>:
 8010634:	440a      	add	r2, r1
 8010636:	4291      	cmp	r1, r2
 8010638:	f100 33ff 	add.w	r3, r0, #4294967295
 801063c:	d100      	bne.n	8010640 <memcpy+0xc>
 801063e:	4770      	bx	lr
 8010640:	b510      	push	{r4, lr}
 8010642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010646:	f803 4f01 	strb.w	r4, [r3, #1]!
 801064a:	4291      	cmp	r1, r2
 801064c:	d1f9      	bne.n	8010642 <memcpy+0xe>
 801064e:	bd10      	pop	{r4, pc}

08010650 <memset>:
 8010650:	4402      	add	r2, r0
 8010652:	4603      	mov	r3, r0
 8010654:	4293      	cmp	r3, r2
 8010656:	d100      	bne.n	801065a <memset+0xa>
 8010658:	4770      	bx	lr
 801065a:	f803 1b01 	strb.w	r1, [r3], #1
 801065e:	e7f9      	b.n	8010654 <memset+0x4>

08010660 <logf>:
 8010660:	ee10 3a10 	vmov	r3, s0
 8010664:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8010668:	b410      	push	{r4}
 801066a:	d055      	beq.n	8010718 <logf+0xb8>
 801066c:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8010670:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8010674:	d31a      	bcc.n	80106ac <logf+0x4c>
 8010676:	005a      	lsls	r2, r3, #1
 8010678:	d104      	bne.n	8010684 <logf+0x24>
 801067a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801067e:	2001      	movs	r0, #1
 8010680:	f000 b880 	b.w	8010784 <__math_divzerof>
 8010684:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010688:	d043      	beq.n	8010712 <logf+0xb2>
 801068a:	2b00      	cmp	r3, #0
 801068c:	db02      	blt.n	8010694 <logf+0x34>
 801068e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8010692:	d303      	bcc.n	801069c <logf+0x3c>
 8010694:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010698:	f000 b884 	b.w	80107a4 <__math_invalidf>
 801069c:	eddf 7a20 	vldr	s15, [pc, #128]	; 8010720 <logf+0xc0>
 80106a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80106a4:	ee10 3a10 	vmov	r3, s0
 80106a8:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 80106ac:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 80106b0:	491c      	ldr	r1, [pc, #112]	; (8010724 <logf+0xc4>)
 80106b2:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 80106b6:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 80106ba:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 80106be:	0dd4      	lsrs	r4, r2, #23
 80106c0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80106c4:	05e4      	lsls	r4, r4, #23
 80106c6:	ed90 6b00 	vldr	d6, [r0]
 80106ca:	1b1b      	subs	r3, r3, r4
 80106cc:	ee07 3a90 	vmov	s15, r3
 80106d0:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 80106d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80106d8:	15d2      	asrs	r2, r2, #23
 80106da:	eea6 0b07 	vfma.f64	d0, d6, d7
 80106de:	ed90 6b02 	vldr	d6, [r0, #8]
 80106e2:	ee20 4b00 	vmul.f64	d4, d0, d0
 80106e6:	ee07 2a90 	vmov	s15, r2
 80106ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80106ee:	eea7 6b05 	vfma.f64	d6, d7, d5
 80106f2:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 80106f6:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 80106fa:	eea5 7b00 	vfma.f64	d7, d5, d0
 80106fe:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8010702:	ee30 0b06 	vadd.f64	d0, d0, d6
 8010706:	eea5 7b04 	vfma.f64	d7, d5, d4
 801070a:	eea4 0b07 	vfma.f64	d0, d4, d7
 801070e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010716:	4770      	bx	lr
 8010718:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8010728 <logf+0xc8>
 801071c:	e7f9      	b.n	8010712 <logf+0xb2>
 801071e:	bf00      	nop
 8010720:	4b000000 	.word	0x4b000000
 8010724:	080238f0 	.word	0x080238f0
 8010728:	00000000 	.word	0x00000000

0801072c <sqrtf>:
 801072c:	b508      	push	{r3, lr}
 801072e:	ed2d 8b02 	vpush	{d8}
 8010732:	eeb0 8a40 	vmov.f32	s16, s0
 8010736:	f000 f817 	bl	8010768 <__ieee754_sqrtf>
 801073a:	eeb4 8a48 	vcmp.f32	s16, s16
 801073e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010742:	d60c      	bvs.n	801075e <sqrtf+0x32>
 8010744:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010764 <sqrtf+0x38>
 8010748:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801074c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010750:	d505      	bpl.n	801075e <sqrtf+0x32>
 8010752:	f7ff ff45 	bl	80105e0 <__errno>
 8010756:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801075a:	2321      	movs	r3, #33	; 0x21
 801075c:	6003      	str	r3, [r0, #0]
 801075e:	ecbd 8b02 	vpop	{d8}
 8010762:	bd08      	pop	{r3, pc}
 8010764:	00000000 	.word	0x00000000

08010768 <__ieee754_sqrtf>:
 8010768:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801076c:	4770      	bx	lr

0801076e <with_errnof>:
 801076e:	b513      	push	{r0, r1, r4, lr}
 8010770:	4604      	mov	r4, r0
 8010772:	ed8d 0a01 	vstr	s0, [sp, #4]
 8010776:	f7ff ff33 	bl	80105e0 <__errno>
 801077a:	ed9d 0a01 	vldr	s0, [sp, #4]
 801077e:	6004      	str	r4, [r0, #0]
 8010780:	b002      	add	sp, #8
 8010782:	bd10      	pop	{r4, pc}

08010784 <__math_divzerof>:
 8010784:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010788:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801078c:	2800      	cmp	r0, #0
 801078e:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8010792:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80107a0 <__math_divzerof+0x1c>
 8010796:	2022      	movs	r0, #34	; 0x22
 8010798:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801079c:	f7ff bfe7 	b.w	801076e <with_errnof>
 80107a0:	00000000 	.word	0x00000000

080107a4 <__math_invalidf>:
 80107a4:	eef0 7a40 	vmov.f32	s15, s0
 80107a8:	ee30 7a40 	vsub.f32	s14, s0, s0
 80107ac:	eef4 7a67 	vcmp.f32	s15, s15
 80107b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107b4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80107b8:	d602      	bvs.n	80107c0 <__math_invalidf+0x1c>
 80107ba:	2021      	movs	r0, #33	; 0x21
 80107bc:	f7ff bfd7 	b.w	801076e <with_errnof>
 80107c0:	4770      	bx	lr
	...

080107c4 <_init>:
 80107c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107c6:	bf00      	nop
 80107c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107ca:	bc08      	pop	{r3}
 80107cc:	469e      	mov	lr, r3
 80107ce:	4770      	bx	lr

080107d0 <_fini>:
 80107d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107d2:	bf00      	nop
 80107d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107d6:	bc08      	pop	{r3}
 80107d8:	469e      	mov	lr, r3
 80107da:	4770      	bx	lr
